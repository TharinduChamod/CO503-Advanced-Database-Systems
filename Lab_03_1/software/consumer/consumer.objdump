
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000c70c memsz 0x0000c70c flags r-x
    LOAD off    0x0000e398 vaddr 0x00028398 paddr 0x0001c72c align 2**12
         filesz 0x00001a58 memsz 0x00001d60 flags rw-
    LOAD off    0x00010000 vaddr 0x00028000 paddr 0x00028000 align 2**12
         filesz 0x00000398 memsz 0x00000398 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c574  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000398  00028000  00028000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  00028398  0001c72c  0000e398  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00029df0  0001e184  0000fdf0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000db8  00000000  00000000  000103c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022cc9  00000000  00000000  00011178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000090dd  00000000  00000000  00033e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a2f1  00000000  00000000  0003cf1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000190c  00000000  00000000  00047210  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002e70  00000000  00000000  00048b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010dc6  00000000  00000000  0004b98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0005c754  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005c778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00060379  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  0006037c  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00060381  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00060382  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00060383  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00060387  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006038b  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0006038f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0006039a  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000603a5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  000603b0  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002b  00000000  00000000  000603b3  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00082b39  00000000  00000000  000603de  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00028000 l    d  .rodata	00000000 .rodata
00028398 l    d  .rwdata	00000000 .rwdata
00029df0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../consumer_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010664 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010948 l     F .text	00000034 __sprint_r
000280b6 l     O .rodata	00000010 blanks.3515
000280c6 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012990 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00014400 l     F .text	00000008 __fp_lock
00014408 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00028398 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000280fc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00028244 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000189e4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00019d60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019e7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019ea8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00019fa8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001a09c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a188 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a364 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00029de0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a5d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a718 l     F .text	00000038 alt_dev_reg
00028d54 l     O .rwdata	00001060 jtag_uart_1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001aa30 l     F .text	00000204 altera_avalon_jtag_uart_irq
0001ac34 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b270 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b608 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001baa8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001bc00 l     F .text	00000050 alt_get_errno
0001bc50 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00016ec0 g     F .text	00000074 _mprec_log10
00016fb0 g     F .text	00000084 __any_on
00017c30 g     F .text	00000064 _isatty_r
0002812c g     O .rodata	00000028 __mprec_tinytens
0001a2ac g     F .text	00000078 alt_main
00019d1c g     F .text	00000044 __ashldi3
00010824 g     F .text	00000084 _puts_r
00030000 g       *ABS*	00000000 __alt_mem_shared_memory
00029df0 g     O .bss	00000004 writep
00029e68 g     O .bss	00000100 alt_irq
00017c94 g     F .text	0000006c _lseek_r
0001c72c g       *ABS*	00000000 __flash_rwdata_start
00019284 g     F .text	0000005c __eqdf2
00010490 g     F .text	00000090 FIFO_1_INIT
0002a0f8 g       *ABS*	00000000 __alt_heap_start
000107e8 g     F .text	0000003c printf
000177d4 g     F .text	0000005c __sseek
000144a4 g     F .text	0000010c __sinit
0001513c g     F .text	0000009c _setlocale_r
0001441c g     F .text	00000078 __sfmoreglue
0001a344 g     F .text	00000020 __malloc_unlock
00029df4 g     O .bss	00000004 readp
00029e30 g     O .bss	00000004 altera_avalon_timer_ts_freq
00015d7c g     F .text	0000018c memmove
00014494 g     F .text	00000010 _cleanup
00015fe4 g     F .text	000000a8 _Balloc
0001933c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00017bc8 g     F .text	00000068 _fstat_r
00029e1c g     O .bss	00000004 errno
00029e24 g     O .bss	00000004 alt_argv
00031db4 g       *ABS*	00000000 _gp
00028bd4 g     O .rwdata	00000180 alt_fd_list
0001c054 g     F .text	00000090 alt_find_dev
00015c3c g     F .text	00000140 memcpy
00014410 g     F .text	0000000c _cleanup_r
00019460 g     F .text	000000d4 __floatsidf
0001bb88 g     F .text	00000078 alt_io_redirect
00019404 g     F .text	0000005c __ltdf2
0001c72c g       *ABS*	00000000 __DTOR_END__
000108a8 g     F .text	00000014 puts
00016e1c g     F .text	000000a4 __ratio
0001ae34 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000107bc g     F .text	0000002c _printf_r
00010784 g     F .text	00000008 __udivsi3
00019ff8 g     F .text	000000a4 isatty
0002817c g     O .rodata	000000c8 __mprec_tens
000151d8 g     F .text	0000000c __locale_charset
0001c2cc g     F .text	0000008c alt_icache_flush
00029e18 g     O .bss	00000004 __malloc_top_pad
00029dbc g     O .rwdata	00000004 __mb_cur_max
000151e4 g     F .text	0000000c _localeconv_r
00016414 g     F .text	0000003c __i2b
00014af8 g     F .text	000004e4 __sfvwrite_r
00017694 g     F .text	00000064 _sbrk_r
0001058c g     F .text	00000098 consumer
00029df8 g     O .bss	00000004 fullp
00017d00 g     F .text	0000006c _read_r
00028798 g     O .rwdata	0000000c __lc_ctype
00029dd8 g     O .rwdata	00000004 alt_max_fd
00019b04 g     F .text	00000104 __unpack_d
00017a78 g     F .text	0000013c _fclose_r
000143d0 g     F .text	00000030 fflush
00029e14 g     O .bss	00000004 __malloc_max_sbrked_mem
00018d38 g     F .text	00000054 __adddf3
00016b90 g     F .text	00000148 __b2d
00028000 g       *ABS*	00000000 __alt_mem_data_memory_1
000183bc g     F .text	00000628 __umoddi3
0001a1d8 g     F .text	000000d4 lseek
00029db4 g     O .rwdata	00000004 _global_impure_ptr
00017034 g     F .text	000005fc _realloc_r
0002a0f8 g       *ABS*	00000000 __bss_end
0001b9b8 g     F .text	000000f0 alt_iic_isr_register
0001bf30 g     F .text	00000104 alt_tick
00017d6c g     F .text	00000650 __udivdi3
00028154 g     O .rodata	00000028 __mprec_bigtens
000161f8 g     F .text	00000104 __s2b
00019608 g     F .text	0000011c __floatunsidf
00016930 g     F .text	00000058 __mcmp
000146bc g     F .text	00000018 __fp_lock_all
0001b96c g     F .text	0000004c alt_ic_irq_enabled
0001be98 g     F .text	00000098 alt_alarm_stop
00029e34 g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_instruction_memory_1
000100ec g     F .exceptions	000000cc alt_irq_handler
00028bac g     O .rwdata	00000028 alt_dev_null
0001b5ec g     F .text	0000001c alt_dcache_flush_all
000162fc g     F .text	00000068 __hi0bits
00019534 g     F .text	000000d4 __fixdfsi
00029df0 g       *ABS*	00000000 __ram_rwdata_end
00029dd0 g     O .rwdata	00000008 alt_dev_list
0001a628 g     F .text	000000f0 write
0001b484 g     F .text	00000028 alt_timestamp_freq
00028398 g       *ABS*	00000000 __ram_rodata_end
00019ef8 g     F .text	000000b0 fstat
00019cd8 g     F .text	00000044 __lshrdi3
000166a8 g     F .text	0000012c __pow5mult
00029e0c g     O .bss	00000004 __nlocale_changed
0001078c g     F .text	00000008 __umodsi3
0002a0f8 g       *ABS*	00000000 end
0001a970 g     F .text	000000c0 altera_avalon_jtag_uart_init
0001c72c g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
0001b2e4 g     F .text	00000088 alt_avalon_timer_sc_init
00019834 g     F .text	000000ac __clzsi2
0001b04c g     F .text	00000224 altera_avalon_jtag_uart_write
000146ac g     F .text	00000004 __sfp_lock_acquire
00015b44 g     F .text	000000f8 memchr
0001097c g     F .text	00001e7c ___vfprintf_internal_r
00014828 g     F .text	000002d0 _free_r
0001c550 g     F .text	000001a0 __call_exitprocs
00029e08 g     O .bss	00000004 __mlocale_changed
00029dc0 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00029e38 g     O .bss	00000004 _alt_tick_rate
000167d4 g     F .text	0000015c __lshift
00029e3c g     O .bss	00000004 _alt_nticks
0001a3b4 g     F .text	000000f4 read
0001a784 g     F .text	00000088 alt_sys_init
0001c420 g     F .text	00000130 __register_exitproc
00016450 g     F .text	00000258 __multiply
0001acd8 g     F .text	00000068 altera_avalon_jtag_uart_close
00010794 g     F .text	00000028 __mulsi3
00028398 g       *ABS*	00000000 __ram_rwdata_start
00028000 g       *ABS*	00000000 __ram_rodata_start
00029e40 g     O .bss	00000028 __malloc_current_mallinfo
00016cd8 g     F .text	00000144 __d2b
0001a80c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001c1f8 g     F .text	000000d4 alt_get_fd
00019c08 g     F .text	000000d0 __fpcmp_parts_d
00017a14 g     F .text	00000064 _close_r
0001c3a4 g     F .text	0000007c memcmp
0001a8cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a0f8 g       *ABS*	00000000 __alt_stack_base
0001a91c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001281c g     F .text	00000174 __swsetup_r
000190d0 g     F .text	000001b4 __divdf3
000145b0 g     F .text	000000fc __sfp
00016f34 g     F .text	0000007c __copybits
000287a4 g     O .rwdata	00000408 __malloc_av_
000146b8 g     F .text	00000004 __sinit_lock_release
00018dec g     F .text	000002e4 __muldf3
000176f8 g     F .text	00000054 __sread
0001c0e4 g     F .text	00000114 alt_find_file
0001b658 g     F .text	000000a0 alt_dev_llist_insert
0001a324 g     F .text	00000020 __malloc_lock
0001a528 g     F .text	000000b0 sbrk
000141e8 g     F .text	000001e8 _fflush_r
00017948 g     F .text	000000cc _calloc_r
00029df0 g       *ABS*	00000000 __bss_start
00015f08 g     F .text	000000dc memset
00010520 g     F .text	0000006c main
00029e28 g     O .bss	00000004 alt_envp
00029e10 g     O .bss	00000004 __malloc_max_total_mem
0001a86c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00017830 g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
00017bb4 g     F .text	00000014 fclose
0001b36c g     F .text	00000088 alt_timestamp_start
00029f68 g     O .bss	00000190 _atexit0
00012bcc g     F .text	0000161c _dtoa_r
000153c0 g     F .text	00000784 _malloc_r
00029ddc g     O .rwdata	00000004 alt_errno
00014fdc g     F .text	000000a8 _fwalk
000101f4 g     F .text	00000158 WRITE_FIFO_1
000106d8 g     F .text	00000050 __divsi3
00028250 g     O .rodata	00000014 __thenan_df
000146ec g     F .text	0000013c _malloc_trim_r
0001c72c g       *ABS*	00000000 __CTOR_END__
00017838 g     F .text	000000a4 strcmp
00028000 g       *ABS*	00000000 __flash_rodata_start
0001c72c g       *ABS*	00000000 __DTOR_LIST__
00010624 g     F .text	00000040 delay
000192e0 g     F .text	0000005c __nedf2
0001a750 g     F .text	00000034 alt_irq_init
0001a4a8 g     F .text	00000080 alt_release_fd
00028264 g     O .rodata	00000100 __clz_tab
00029e04 g     O .bss	00000004 _PathLocale
0001c358 g     F .text	00000014 atexit
000178dc g     F .text	0000006c _write_r
000151f0 g     F .text	0000001c setlocale
00029db8 g     O .rwdata	00000004 _impure_ptr
00029e20 g     O .bss	00000004 alt_argc
00029e2c g     O .bss	00000004 altera_avalon_timer_ts_base
0001b754 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00016b30 g     F .text	00000060 __ulp
00017630 g     F .text	00000038 __isinfd
000146d4 g     F .text	00000018 __fp_unlock_all
00029dc8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001520c g     F .text	0000000c localeconv
0001b3f4 g     F .text	00000090 alt_timestamp
0001b7e0 g     F .text	00000050 alt_ic_isr_register
00029df0 g       *ABS*	00000000 _edata
0002a0f8 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
0001ad40 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001b8cc g     F .text	000000a0 alt_ic_irq_disable
0001774c g     F .text	00000088 __swrite
00029dc4 g     O .rwdata	00000004 __malloc_trim_threshold
0001c034 g     F .text	00000020 altera_nios2_qsys_irq_init
0001c36c g     F .text	00000038 exit
00015084 g     F .text	000000b8 _fwalk_reent
00016988 g     F .text	000001a8 __mdiff
00010728 g     F .text	0000005c __modsi3
00030000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000146b0 g     F .text	00000004 __sfp_lock_release
0001c6f0 g     F .text	0000003c _exit
00017668 g     F .text	0000002c __isnand
0001b4ac g     F .text	00000140 alt_alarm_start
00019724 g     F .text	00000110 __muldi3
00015218 g     F .text	000001a8 __smakebuf_r
000108bc g     F .text	0000008c strlen
0001bd40 g     F .text	00000158 open
000193a0 g     F .text	00000064 __gedf2
0001034c g     F .text	00000144 READ_FIFO_1
0001b7b0 g     F .text	00000030 alt_icache_flush_all
00029de4 g     O .rwdata	00000004 alt_priority_mask
00029dfc g     O .bss	00000004 emptyp
0001b830 g     F .text	0000009c alt_ic_irq_enable
000127f8 g     F .text	00000024 __vfprintf_internal
00018d8c g     F .text	00000060 __subdf3
00016364 g     F .text	000000b0 __lo0bits
00029de8 g     O .rwdata	00000008 alt_alarm_list
0001b6f8 g     F .text	0000005c _do_ctors
00029e00 g     O .bss	00000004 countp
00019db0 g     F .text	000000cc close
0001a108 g     F .text	00000080 alt_load
000198e0 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
000146b4 g     F .text	00000004 __sinit_lock_acquire
000160b4 g     F .text	00000144 __multadd
0001608c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406e14 	ori	at,at,440
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_instruction_memory_1-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000f4 	movhi	r3,3
   10130:	18e79a04 	addi	r3,r3,-24984
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000f4 	movhi	r4,3
   10148:	21279a04 	addi	r4,r4,-24984
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   101c4:	d6876d14 	ori	gp,gp,7604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   101cc:	10a77c14 	ori	r2,r2,40432

    movhi r3, %hi(__bss_end)
   101d0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   101d4:	18e83e14 	ori	r3,r3,41208

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	001a1080 	call	1a108 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	001a2ac0 	call	1a2ac <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <WRITE_FIFO_1>:


#include "FIFO_1.h"

void WRITE_FIFO_1(int *buffer)
{
   101f4:	defffe04 	addi	sp,sp,-8
   101f8:	df000115 	stw	fp,4(sp)
   101fc:	df000104 	addi	fp,sp,4
   10200:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(IORD_32DIRECT(MEM_BASE,fullp)==0x1){}
   10204:	0001883a 	nop
   10208:	d0a01117 	ldw	r2,-32700(gp)
   1020c:	1007883a 	mov	r3,r2
   10210:	008000f4 	movhi	r2,3
   10214:	1885883a 	add	r2,r3,r2
   10218:	10800037 	ldwio	r2,0(r2)
   1021c:	10800060 	cmpeqi	r2,r2,1
   10220:	103ff91e 	bne	r2,zero,10208 <WRITE_FIFO_1+0x14>

	// Write the data to FIFO
	IOWR_32DIRECT(MEM_BASE,writep,*buffer);
   10224:	d0a00f17 	ldw	r2,-32708(gp)
   10228:	1007883a 	mov	r3,r2
   1022c:	008000f4 	movhi	r2,3
   10230:	1885883a 	add	r2,r3,r2
   10234:	e0ffff17 	ldw	r3,-4(fp)
   10238:	18c00017 	ldw	r3,0(r3)
   1023c:	10c00035 	stwio	r3,0(r2)
	//printf("Producer sent [%i]\t%x\t%i\n",*buffer,writep,IORD_32DIRECT(MEM_BASE,writep));
	// Update the write pointer
	writep += UNIT_SIZE;
   10240:	d0a00f17 	ldw	r2,-32708(gp)
   10244:	10800104 	addi	r2,r2,4
   10248:	d0a00f15 	stw	r2,-32708(gp)

	writep = writep%(CAPACITY*UNIT_SIZE);
   1024c:	d0e00f17 	ldw	r3,-32708(gp)
   10250:	00a00034 	movhi	r2,32768
   10254:	10800fc4 	addi	r2,r2,63
   10258:	1884703a 	and	r2,r3,r2
   1025c:	1000040e 	bge	r2,zero,10270 <WRITE_FIFO_1+0x7c>
   10260:	10bfffc4 	addi	r2,r2,-1
   10264:	00fff004 	movi	r3,-64
   10268:	10c4b03a 	or	r2,r2,r3
   1026c:	10800044 	addi	r2,r2,1
   10270:	d0a00f15 	stw	r2,-32708(gp)

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) + 0x1);
   10274:	d0a01317 	ldw	r2,-32692(gp)
   10278:	1007883a 	mov	r3,r2
   1027c:	008000f4 	movhi	r2,3
   10280:	1885883a 	add	r2,r3,r2
   10284:	d0e01317 	ldw	r3,-32692(gp)
   10288:	1809883a 	mov	r4,r3
   1028c:	00c000f4 	movhi	r3,3
   10290:	20c7883a 	add	r3,r4,r3
   10294:	18c00037 	ldwio	r3,0(r3)
   10298:	18c00044 	addi	r3,r3,1
   1029c:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 entry
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   102a0:	d0a01317 	ldw	r2,-32692(gp)
   102a4:	1007883a 	mov	r3,r2
   102a8:	008000f4 	movhi	r2,3
   102ac:	1885883a 	add	r2,r3,r2
   102b0:	10800037 	ldwio	r2,0(r2)
   102b4:	10800418 	cmpnei	r2,r2,16
   102b8:	1000071e 	bne	r2,zero,102d8 <WRITE_FIFO_1+0xe4>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   102bc:	d0a01117 	ldw	r2,-32700(gp)
   102c0:	1007883a 	mov	r3,r2
   102c4:	008000f4 	movhi	r2,3
   102c8:	1885883a 	add	r2,r3,r2
   102cc:	00c00044 	movi	r3,1
   102d0:	10c00035 	stwio	r3,0(r2)
   102d4:	00000606 	br	102f0 <WRITE_FIFO_1+0xfc>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   102d8:	d0a01117 	ldw	r2,-32700(gp)
   102dc:	1007883a 	mov	r3,r2
   102e0:	008000f4 	movhi	r2,3
   102e4:	1885883a 	add	r2,r3,r2
   102e8:	0007883a 	mov	r3,zero
   102ec:	10c00035 	stwio	r3,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   102f0:	d0a01317 	ldw	r2,-32692(gp)
   102f4:	1007883a 	mov	r3,r2
   102f8:	008000f4 	movhi	r2,3
   102fc:	1885883a 	add	r2,r3,r2
   10300:	10800037 	ldwio	r2,0(r2)
   10304:	1000071e 	bne	r2,zero,10324 <WRITE_FIFO_1+0x130>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   10308:	d0a01217 	ldw	r2,-32696(gp)
   1030c:	1007883a 	mov	r3,r2
   10310:	008000f4 	movhi	r2,3
   10314:	1885883a 	add	r2,r3,r2
   10318:	00c00044 	movi	r3,1
   1031c:	10c00035 	stwio	r3,0(r2)
   10320:	00000606 	br	1033c <WRITE_FIFO_1+0x148>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   10324:	d0a01217 	ldw	r2,-32696(gp)
   10328:	1007883a 	mov	r3,r2
   1032c:	008000f4 	movhi	r2,3
   10330:	1885883a 	add	r2,r3,r2
   10334:	0007883a 	mov	r3,zero
   10338:	10c00035 	stwio	r3,0(r2)
	}
}
   1033c:	e037883a 	mov	sp,fp
   10340:	df000017 	ldw	fp,0(sp)
   10344:	dec00104 	addi	sp,sp,4
   10348:	f800283a 	ret

0001034c <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   1034c:	defffe04 	addi	sp,sp,-8
   10350:	df000115 	stw	fp,4(sp)
   10354:	df000104 	addi	fp,sp,4
   10358:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(IORD_32DIRECT(MEM_BASE,emptyp)==0x1){}
   1035c:	0001883a 	nop
   10360:	d0a01217 	ldw	r2,-32696(gp)
   10364:	1007883a 	mov	r3,r2
   10368:	008000f4 	movhi	r2,3
   1036c:	1885883a 	add	r2,r3,r2
   10370:	10800037 	ldwio	r2,0(r2)
   10374:	10800060 	cmpeqi	r2,r2,1
   10378:	103ff91e 	bne	r2,zero,10360 <READ_FIFO_1+0x14>

	// Read the data
	*buffer = IORD_32DIRECT(MEM_BASE,readp);
   1037c:	d0a01017 	ldw	r2,-32704(gp)
   10380:	1007883a 	mov	r3,r2
   10384:	008000f4 	movhi	r2,3
   10388:	1885883a 	add	r2,r3,r2
   1038c:	10c00037 	ldwio	r3,0(r2)
   10390:	e0bfff17 	ldw	r2,-4(fp)
   10394:	10c00015 	stw	r3,0(r2)

	// Update the read pointer
	readp += UNIT_SIZE;
   10398:	d0a01017 	ldw	r2,-32704(gp)
   1039c:	10800104 	addi	r2,r2,4
   103a0:	d0a01015 	stw	r2,-32704(gp)
	if(readp==(CAPACITY*UNIT_SIZE)+STARTP){
   103a4:	d0a01017 	ldw	r2,-32704(gp)
   103a8:	10801318 	cmpnei	r2,r2,76
   103ac:	1000021e 	bne	r2,zero,103b8 <READ_FIFO_1+0x6c>
		readp = STARTP;
   103b0:	00800304 	movi	r2,12
   103b4:	d0a01015 	stw	r2,-32704(gp)
	}

	// Update "count" in shared mem
	IOWR_32DIRECT(MEM_BASE, countp, IORD_32DIRECT(MEM_BASE,countp) - 0x1);
   103b8:	d0a01317 	ldw	r2,-32692(gp)
   103bc:	1007883a 	mov	r3,r2
   103c0:	008000f4 	movhi	r2,3
   103c4:	1885883a 	add	r2,r3,r2
   103c8:	d0e01317 	ldw	r3,-32692(gp)
   103cc:	1809883a 	mov	r4,r3
   103d0:	00c000f4 	movhi	r3,3
   103d4:	20c7883a 	add	r3,r4,r3
   103d8:	18c00037 	ldwio	r3,0(r3)
   103dc:	18ffffc4 	addi	r3,r3,-1
   103e0:	10c00035 	stwio	r3,0(r2)

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 entry less than capacity
	if(IORD_32DIRECT(MEM_BASE,countp)==CAPACITY){
   103e4:	d0a01317 	ldw	r2,-32692(gp)
   103e8:	1007883a 	mov	r3,r2
   103ec:	008000f4 	movhi	r2,3
   103f0:	1885883a 	add	r2,r3,r2
   103f4:	10800037 	ldwio	r2,0(r2)
   103f8:	10800418 	cmpnei	r2,r2,16
   103fc:	1000071e 	bne	r2,zero,1041c <READ_FIFO_1+0xd0>
		IOWR_32DIRECT(MEM_BASE,fullp,0x1);
   10400:	d0a01117 	ldw	r2,-32700(gp)
   10404:	1007883a 	mov	r3,r2
   10408:	008000f4 	movhi	r2,3
   1040c:	1885883a 	add	r2,r3,r2
   10410:	00c00044 	movi	r3,1
   10414:	10c00035 	stwio	r3,0(r2)
   10418:	00000606 	br	10434 <READ_FIFO_1+0xe8>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0x0);
   1041c:	d0a01117 	ldw	r2,-32700(gp)
   10420:	1007883a 	mov	r3,r2
   10424:	008000f4 	movhi	r2,3
   10428:	1885883a 	add	r2,r3,r2
   1042c:	0007883a 	mov	r3,zero
   10430:	10c00035 	stwio	r3,0(r2)
	}
	if(IORD_32DIRECT(MEM_BASE,countp)==0x0){
   10434:	d0a01317 	ldw	r2,-32692(gp)
   10438:	1007883a 	mov	r3,r2
   1043c:	008000f4 	movhi	r2,3
   10440:	1885883a 	add	r2,r3,r2
   10444:	10800037 	ldwio	r2,0(r2)
   10448:	1000071e 	bne	r2,zero,10468 <READ_FIFO_1+0x11c>
		IOWR_32DIRECT(MEM_BASE,emptyp,0x1);
   1044c:	d0a01217 	ldw	r2,-32696(gp)
   10450:	1007883a 	mov	r3,r2
   10454:	008000f4 	movhi	r2,3
   10458:	1885883a 	add	r2,r3,r2
   1045c:	00c00044 	movi	r3,1
   10460:	10c00035 	stwio	r3,0(r2)
   10464:	00000606 	br	10480 <READ_FIFO_1+0x134>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0x0);
   10468:	d0a01217 	ldw	r2,-32696(gp)
   1046c:	1007883a 	mov	r3,r2
   10470:	008000f4 	movhi	r2,3
   10474:	1885883a 	add	r2,r3,r2
   10478:	0007883a 	mov	r3,zero
   1047c:	10c00035 	stwio	r3,0(r2)
	}
}
   10480:	e037883a 	mov	sp,fp
   10484:	df000017 	ldw	fp,0(sp)
   10488:	dec00104 	addi	sp,sp,4
   1048c:	f800283a 	ret

00010490 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   10490:	deffff04 	addi	sp,sp,-4
   10494:	df000015 	stw	fp,0(sp)
   10498:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   1049c:	00800304 	movi	r2,12
   104a0:	d0a00f15 	stw	r2,-32708(gp)
	readp  = STARTP;
   104a4:	00800304 	movi	r2,12
   104a8:	d0a01015 	stw	r2,-32704(gp)
	fullp   = 0x0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   104ac:	d0201115 	stw	zero,-32700(gp)
	emptyp   = fullp + UNIT_SIZE;
   104b0:	d0a01117 	ldw	r2,-32700(gp)
   104b4:	10800104 	addi	r2,r2,4
   104b8:	d0a01215 	stw	r2,-32696(gp)
	countp  = emptyp + UNIT_SIZE;
   104bc:	d0a01217 	ldw	r2,-32696(gp)
   104c0:	10800104 	addi	r2,r2,4
   104c4:	d0a01315 	stw	r2,-32692(gp)


	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0x0);
   104c8:	d0a01117 	ldw	r2,-32700(gp)
   104cc:	1007883a 	mov	r3,r2
   104d0:	008000f4 	movhi	r2,3
   104d4:	1885883a 	add	r2,r3,r2
   104d8:	0007883a 	mov	r3,zero
   104dc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(MEM_BASE, emptyp, 0x1); // The fifo is empty at the start
   104e0:	d0a01217 	ldw	r2,-32696(gp)
   104e4:	1007883a 	mov	r3,r2
   104e8:	008000f4 	movhi	r2,3
   104ec:	1885883a 	add	r2,r3,r2
   104f0:	00c00044 	movi	r3,1
   104f4:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(MEM_BASE, countp, 0x0); // The fifo is empty at the start
   104f8:	d0a01317 	ldw	r2,-32692(gp)
   104fc:	1007883a 	mov	r3,r2
   10500:	008000f4 	movhi	r2,3
   10504:	1885883a 	add	r2,r3,r2
   10508:	0007883a 	mov	r3,zero
   1050c:	10c00035 	stwio	r3,0(r2)

}
   10510:	e037883a 	mov	sp,fp
   10514:	df000017 	ldw	fp,0(sp)
   10518:	dec00104 	addi	sp,sp,4
   1051c:	f800283a 	ret

00010520 <main>:
void delay(int n);
int consumer();


int main()
{
   10520:	defffb04 	addi	sp,sp,-20
   10524:	dfc00415 	stw	ra,16(sp)
   10528:	df000315 	stw	fp,12(sp)
   1052c:	dc000215 	stw	r16,8(sp)
   10530:	df000204 	addi	fp,sp,8
	alt_u32 sw_fast_timeA, sw_fast_timeB;
	alt_timestamp_start();
   10534:	001b36c0 	call	1b36c <alt_timestamp_start>
	sw_fast_timeA = alt_timestamp();
   10538:	001b3f40 	call	1b3f4 <alt_timestamp>
   1053c:	e0bffe15 	stw	r2,-8(fp)

	consumer();
   10540:	001058c0 	call	1058c <consumer>

	sw_fast_timeB = alt_timestamp();
   10544:	001b3f40 	call	1b3f4 <alt_timestamp>
   10548:	e0bfff15 	stw	r2,-4(fp)

	printf("Time for Read operation: %.2lu ms\n",1000*((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)alt_timestamp_freq()));
   1054c:	e0ffff17 	ldw	r3,-4(fp)
   10550:	e0bffe17 	ldw	r2,-8(fp)
   10554:	1885c83a 	sub	r2,r3,r2
   10558:	1009883a 	mov	r4,r2
   1055c:	0140fa04 	movi	r5,1000
   10560:	00107940 	call	10794 <__mulsi3>
   10564:	1021883a 	mov	r16,r2
   10568:	001b4840 	call	1b484 <alt_timestamp_freq>
   1056c:	8009883a 	mov	r4,r16
   10570:	100b883a 	mov	r5,r2
   10574:	00107840 	call	10784 <__udivsi3>
   10578:	010000f4 	movhi	r4,3
   1057c:	21200004 	addi	r4,r4,-32768
   10580:	100b883a 	mov	r5,r2
   10584:	00107e80 	call	107e8 <printf>

	while(1) { }
   10588:	003fff06 	br	10588 <main+0x68>

0001058c <consumer>:
	return 0;
}


int consumer()
{
   1058c:	defffc04 	addi	sp,sp,-16
   10590:	dfc00315 	stw	ra,12(sp)
   10594:	df000215 	stw	fp,8(sp)
   10598:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   1059c:	010000f4 	movhi	r4,3
   105a0:	21200904 	addi	r4,r4,-32732
   105a4:	00108a80 	call	108a8 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   105a8:	00104900 	call	10490 <FIFO_1_INIT>

	int j = 0;
   105ac:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   105b0:	00800144 	movi	r2,5
   105b4:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   105b8:	00000e06 	br	105f4 <consumer+0x68>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   105bc:	e0bfff04 	addi	r2,fp,-4
   105c0:	1009883a 	mov	r4,r2
   105c4:	001034c0 	call	1034c <READ_FIFO_1>
		if(j==k)
   105c8:	e0ffff17 	ldw	r3,-4(fp)
   105cc:	e0bffe17 	ldw	r2,-8(fp)
   105d0:	1880051e 	bne	r3,r2,105e8 <consumer+0x5c>
			printf("Consumer succefully received [%i]\n",j);
   105d4:	e0bfff17 	ldw	r2,-4(fp)
   105d8:	010000f4 	movhi	r4,3
   105dc:	21200e04 	addi	r4,r4,-32712
   105e0:	100b883a 	mov	r5,r2
   105e4:	00107e80 	call	107e8 <printf>

		k+=10;
   105e8:	e0bffe17 	ldw	r2,-8(fp)
   105ec:	10800284 	addi	r2,r2,10
   105f0:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   105f4:	e0bffe17 	ldw	r2,-8(fp)
   105f8:	10807d10 	cmplti	r2,r2,500
   105fc:	103fef1e 	bne	r2,zero,105bc <consumer+0x30>
			printf("Consumer succefully received [%i]\n",j);

		k+=10;
	}

	printf("Consumer finished..\n");
   10600:	010000f4 	movhi	r4,3
   10604:	21201704 	addi	r4,r4,-32676
   10608:	00108a80 	call	108a8 <puts>
	return 0;
   1060c:	0005883a 	mov	r2,zero
}
   10610:	e037883a 	mov	sp,fp
   10614:	dfc00117 	ldw	ra,4(sp)
   10618:	df000017 	ldw	fp,0(sp)
   1061c:	dec00204 	addi	sp,sp,8
   10620:	f800283a 	ret

00010624 <delay>:


void delay(int n)
{
   10624:	defffd04 	addi	sp,sp,-12
   10628:	df000215 	stw	fp,8(sp)
   1062c:	df000204 	addi	fp,sp,8
   10630:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   10634:	e0bfff17 	ldw	r2,-4(fp)
   10638:	e0bffe15 	stw	r2,-8(fp)
   1063c:	00000306 	br	1064c <delay+0x28>
   10640:	e0bffe17 	ldw	r2,-8(fp)
   10644:	10bfffc4 	addi	r2,r2,-1
   10648:	e0bffe15 	stw	r2,-8(fp)
   1064c:	e0bffe17 	ldw	r2,-8(fp)
   10650:	00bffb16 	blt	zero,r2,10640 <delay+0x1c>
	{
		continue;
	}
}
   10654:	e037883a 	mov	sp,fp
   10658:	df000017 	ldw	fp,0(sp)
   1065c:	dec00104 	addi	sp,sp,4
   10660:	f800283a 	ret

00010664 <udivmodsi4>:
   10664:	2005883a 	mov	r2,r4
   10668:	2900182e 	bgeu	r5,r4,106cc <udivmodsi4+0x68>
   1066c:	28001716 	blt	r5,zero,106cc <udivmodsi4+0x68>
   10670:	01000804 	movi	r4,32
   10674:	00c00044 	movi	r3,1
   10678:	00000206 	br	10684 <udivmodsi4+0x20>
   1067c:	20001126 	beq	r4,zero,106c4 <udivmodsi4+0x60>
   10680:	28000516 	blt	r5,zero,10698 <udivmodsi4+0x34>
   10684:	294b883a 	add	r5,r5,r5
   10688:	213fffc4 	addi	r4,r4,-1
   1068c:	18c7883a 	add	r3,r3,r3
   10690:	28bffa36 	bltu	r5,r2,1067c <udivmodsi4+0x18>
   10694:	18000b26 	beq	r3,zero,106c4 <udivmodsi4+0x60>
   10698:	0009883a 	mov	r4,zero
   1069c:	11400236 	bltu	r2,r5,106a8 <udivmodsi4+0x44>
   106a0:	1145c83a 	sub	r2,r2,r5
   106a4:	20c8b03a 	or	r4,r4,r3
   106a8:	1806d07a 	srli	r3,r3,1
   106ac:	280ad07a 	srli	r5,r5,1
   106b0:	183ffa1e 	bne	r3,zero,1069c <udivmodsi4+0x38>
   106b4:	3000021e 	bne	r6,zero,106c0 <udivmodsi4+0x5c>
   106b8:	2005883a 	mov	r2,r4
   106bc:	f800283a 	ret
   106c0:	f800283a 	ret
   106c4:	0009883a 	mov	r4,zero
   106c8:	003ffa06 	br	106b4 <udivmodsi4+0x50>
   106cc:	00c00044 	movi	r3,1
   106d0:	0009883a 	mov	r4,zero
   106d4:	003ff106 	br	1069c <udivmodsi4+0x38>

000106d8 <__divsi3>:
   106d8:	defffe04 	addi	sp,sp,-8
   106dc:	dfc00115 	stw	ra,4(sp)
   106e0:	dc000015 	stw	r16,0(sp)
   106e4:	20000a16 	blt	r4,zero,10710 <__divsi3+0x38>
   106e8:	0021883a 	mov	r16,zero
   106ec:	28000b16 	blt	r5,zero,1071c <__divsi3+0x44>
   106f0:	000d883a 	mov	r6,zero
   106f4:	00106640 	call	10664 <udivmodsi4>
   106f8:	80000126 	beq	r16,zero,10700 <__divsi3+0x28>
   106fc:	0085c83a 	sub	r2,zero,r2
   10700:	dfc00117 	ldw	ra,4(sp)
   10704:	dc000017 	ldw	r16,0(sp)
   10708:	dec00204 	addi	sp,sp,8
   1070c:	f800283a 	ret
   10710:	0109c83a 	sub	r4,zero,r4
   10714:	04000044 	movi	r16,1
   10718:	283ff50e 	bge	r5,zero,106f0 <__divsi3+0x18>
   1071c:	014bc83a 	sub	r5,zero,r5
   10720:	8400005c 	xori	r16,r16,1
   10724:	003ff206 	br	106f0 <__divsi3+0x18>

00010728 <__modsi3>:
   10728:	deffff04 	addi	sp,sp,-4
   1072c:	dfc00015 	stw	ra,0(sp)
   10730:	20000516 	blt	r4,zero,10748 <__modsi3+0x20>
   10734:	28000c16 	blt	r5,zero,10768 <__modsi3+0x40>
   10738:	01800044 	movi	r6,1
   1073c:	dfc00017 	ldw	ra,0(sp)
   10740:	dec00104 	addi	sp,sp,4
   10744:	00106641 	jmpi	10664 <udivmodsi4>
   10748:	0109c83a 	sub	r4,zero,r4
   1074c:	28000b16 	blt	r5,zero,1077c <__modsi3+0x54>
   10750:	01800044 	movi	r6,1
   10754:	00106640 	call	10664 <udivmodsi4>
   10758:	0085c83a 	sub	r2,zero,r2
   1075c:	dfc00017 	ldw	ra,0(sp)
   10760:	dec00104 	addi	sp,sp,4
   10764:	f800283a 	ret
   10768:	014bc83a 	sub	r5,zero,r5
   1076c:	01800044 	movi	r6,1
   10770:	dfc00017 	ldw	ra,0(sp)
   10774:	dec00104 	addi	sp,sp,4
   10778:	00106641 	jmpi	10664 <udivmodsi4>
   1077c:	014bc83a 	sub	r5,zero,r5
   10780:	003ff306 	br	10750 <__modsi3+0x28>

00010784 <__udivsi3>:
   10784:	000d883a 	mov	r6,zero
   10788:	00106641 	jmpi	10664 <udivmodsi4>

0001078c <__umodsi3>:
   1078c:	01800044 	movi	r6,1
   10790:	00106641 	jmpi	10664 <udivmodsi4>

00010794 <__mulsi3>:
   10794:	0005883a 	mov	r2,zero
   10798:	20000726 	beq	r4,zero,107b8 <__mulsi3+0x24>
   1079c:	20c0004c 	andi	r3,r4,1
   107a0:	2008d07a 	srli	r4,r4,1
   107a4:	18000126 	beq	r3,zero,107ac <__mulsi3+0x18>
   107a8:	1145883a 	add	r2,r2,r5
   107ac:	294b883a 	add	r5,r5,r5
   107b0:	203ffa1e 	bne	r4,zero,1079c <__mulsi3+0x8>
   107b4:	f800283a 	ret
   107b8:	f800283a 	ret

000107bc <_printf_r>:
   107bc:	defffd04 	addi	sp,sp,-12
   107c0:	dfc00015 	stw	ra,0(sp)
   107c4:	d9800115 	stw	r6,4(sp)
   107c8:	d9c00215 	stw	r7,8(sp)
   107cc:	280d883a 	mov	r6,r5
   107d0:	21400217 	ldw	r5,8(r4)
   107d4:	d9c00104 	addi	r7,sp,4
   107d8:	001097c0 	call	1097c <___vfprintf_internal_r>
   107dc:	dfc00017 	ldw	ra,0(sp)
   107e0:	dec00304 	addi	sp,sp,12
   107e4:	f800283a 	ret

000107e8 <printf>:
   107e8:	defffc04 	addi	sp,sp,-16
   107ec:	dfc00015 	stw	ra,0(sp)
   107f0:	d9400115 	stw	r5,4(sp)
   107f4:	d9800215 	stw	r6,8(sp)
   107f8:	d9c00315 	stw	r7,12(sp)
   107fc:	008000f4 	movhi	r2,3
   10800:	10a76e04 	addi	r2,r2,-25160
   10804:	10800017 	ldw	r2,0(r2)
   10808:	200b883a 	mov	r5,r4
   1080c:	d9800104 	addi	r6,sp,4
   10810:	11000217 	ldw	r4,8(r2)
   10814:	00127f80 	call	127f8 <__vfprintf_internal>
   10818:	dfc00017 	ldw	ra,0(sp)
   1081c:	dec00404 	addi	sp,sp,16
   10820:	f800283a 	ret

00010824 <_puts_r>:
   10824:	defff604 	addi	sp,sp,-40
   10828:	dc400815 	stw	r17,32(sp)
   1082c:	2023883a 	mov	r17,r4
   10830:	2809883a 	mov	r4,r5
   10834:	dc000715 	stw	r16,28(sp)
   10838:	dfc00915 	stw	ra,36(sp)
   1083c:	2821883a 	mov	r16,r5
   10840:	00108bc0 	call	108bc <strlen>
   10844:	10c00044 	addi	r3,r2,1
   10848:	d8800115 	stw	r2,4(sp)
   1084c:	89400217 	ldw	r5,8(r17)
   10850:	008000f4 	movhi	r2,3
   10854:	10a01c04 	addi	r2,r2,-32656
   10858:	d8800215 	stw	r2,8(sp)
   1085c:	00800044 	movi	r2,1
   10860:	d8800315 	stw	r2,12(sp)
   10864:	8809883a 	mov	r4,r17
   10868:	00800084 	movi	r2,2
   1086c:	d9800404 	addi	r6,sp,16
   10870:	dc000015 	stw	r16,0(sp)
   10874:	d8c00615 	stw	r3,24(sp)
   10878:	dec00415 	stw	sp,16(sp)
   1087c:	d8800515 	stw	r2,20(sp)
   10880:	0014af80 	call	14af8 <__sfvwrite_r>
   10884:	1000061e 	bne	r2,zero,108a0 <_puts_r+0x7c>
   10888:	00800284 	movi	r2,10
   1088c:	dfc00917 	ldw	ra,36(sp)
   10890:	dc400817 	ldw	r17,32(sp)
   10894:	dc000717 	ldw	r16,28(sp)
   10898:	dec00a04 	addi	sp,sp,40
   1089c:	f800283a 	ret
   108a0:	00bfffc4 	movi	r2,-1
   108a4:	003ff906 	br	1088c <_puts_r+0x68>

000108a8 <puts>:
   108a8:	008000f4 	movhi	r2,3
   108ac:	10a76e04 	addi	r2,r2,-25160
   108b0:	200b883a 	mov	r5,r4
   108b4:	11000017 	ldw	r4,0(r2)
   108b8:	00108241 	jmpi	10824 <_puts_r>

000108bc <strlen>:
   108bc:	208000cc 	andi	r2,r4,3
   108c0:	10001f1e 	bne	r2,zero,10940 <strlen+0x84>
   108c4:	20800017 	ldw	r2,0(r4)
   108c8:	01ffbff4 	movhi	r7,65279
   108cc:	39ffbfc4 	addi	r7,r7,-257
   108d0:	01a02074 	movhi	r6,32897
   108d4:	31a02004 	addi	r6,r6,-32640
   108d8:	11c7883a 	add	r3,r2,r7
   108dc:	0084303a 	nor	r2,zero,r2
   108e0:	1886703a 	and	r3,r3,r2
   108e4:	1986703a 	and	r3,r3,r6
   108e8:	2005883a 	mov	r2,r4
   108ec:	1800101e 	bne	r3,zero,10930 <strlen+0x74>
   108f0:	10800104 	addi	r2,r2,4
   108f4:	10c00017 	ldw	r3,0(r2)
   108f8:	19cb883a 	add	r5,r3,r7
   108fc:	00c6303a 	nor	r3,zero,r3
   10900:	28c6703a 	and	r3,r5,r3
   10904:	1986703a 	and	r3,r3,r6
   10908:	1800091e 	bne	r3,zero,10930 <strlen+0x74>
   1090c:	10800104 	addi	r2,r2,4
   10910:	10c00017 	ldw	r3,0(r2)
   10914:	19cb883a 	add	r5,r3,r7
   10918:	00c6303a 	nor	r3,zero,r3
   1091c:	28c6703a 	and	r3,r5,r3
   10920:	1986703a 	and	r3,r3,r6
   10924:	183ff226 	beq	r3,zero,108f0 <strlen+0x34>
   10928:	00000106 	br	10930 <strlen+0x74>
   1092c:	10800044 	addi	r2,r2,1
   10930:	10c00007 	ldb	r3,0(r2)
   10934:	183ffd1e 	bne	r3,zero,1092c <strlen+0x70>
   10938:	1105c83a 	sub	r2,r2,r4
   1093c:	f800283a 	ret
   10940:	2005883a 	mov	r2,r4
   10944:	003ffa06 	br	10930 <strlen+0x74>

00010948 <__sprint_r>:
   10948:	30800217 	ldw	r2,8(r6)
   1094c:	defffe04 	addi	sp,sp,-8
   10950:	dc000015 	stw	r16,0(sp)
   10954:	dfc00115 	stw	ra,4(sp)
   10958:	3021883a 	mov	r16,r6
   1095c:	10000226 	beq	r2,zero,10968 <__sprint_r+0x20>
   10960:	0014af80 	call	14af8 <__sfvwrite_r>
   10964:	80000215 	stw	zero,8(r16)
   10968:	80000115 	stw	zero,4(r16)
   1096c:	dfc00117 	ldw	ra,4(sp)
   10970:	dc000017 	ldw	r16,0(sp)
   10974:	dec00204 	addi	sp,sp,8
   10978:	f800283a 	ret

0001097c <___vfprintf_internal_r>:
   1097c:	defeb904 	addi	sp,sp,-1308
   10980:	dc013d15 	stw	r16,1268(sp)
   10984:	d9013015 	stw	r4,1216(sp)
   10988:	dfc14615 	stw	ra,1304(sp)
   1098c:	df014515 	stw	fp,1300(sp)
   10990:	ddc14415 	stw	r23,1296(sp)
   10994:	dd814315 	stw	r22,1292(sp)
   10998:	dd414215 	stw	r21,1288(sp)
   1099c:	dd014115 	stw	r20,1284(sp)
   109a0:	dcc14015 	stw	r19,1280(sp)
   109a4:	dc813f15 	stw	r18,1276(sp)
   109a8:	dc413e15 	stw	r17,1272(sp)
   109ac:	d9412915 	stw	r5,1188(sp)
   109b0:	3021883a 	mov	r16,r6
   109b4:	d9c12d15 	stw	r7,1204(sp)
   109b8:	00151e40 	call	151e4 <_localeconv_r>
   109bc:	10800017 	ldw	r2,0(r2)
   109c0:	d9013017 	ldw	r4,1216(sp)
   109c4:	d8013315 	stw	zero,1228(sp)
   109c8:	d8813715 	stw	r2,1244(sp)
   109cc:	d8013415 	stw	zero,1232(sp)
   109d0:	20000226 	beq	r4,zero,109dc <___vfprintf_internal_r+0x60>
   109d4:	20800e17 	ldw	r2,56(r4)
   109d8:	10014b26 	beq	r2,zero,10f08 <___vfprintf_internal_r+0x58c>
   109dc:	d8c12917 	ldw	r3,1188(sp)
   109e0:	1880030b 	ldhu	r2,12(r3)
   109e4:	10c0020c 	andi	r3,r2,8
   109e8:	18ffffcc 	andi	r3,r3,65535
   109ec:	18e0001c 	xori	r3,r3,32768
   109f0:	18e00004 	addi	r3,r3,-32768
   109f4:	1800ed26 	beq	r3,zero,10dac <___vfprintf_internal_r+0x430>
   109f8:	d9012917 	ldw	r4,1188(sp)
   109fc:	20c00417 	ldw	r3,16(r4)
   10a00:	1800ea26 	beq	r3,zero,10dac <___vfprintf_internal_r+0x430>
   10a04:	1100068c 	andi	r4,r2,26
   10a08:	00c00284 	movi	r3,10
   10a0c:	20c0f026 	beq	r4,r3,10dd0 <___vfprintf_internal_r+0x454>
   10a10:	d9010dc4 	addi	r4,sp,1079
   10a14:	d8810e04 	addi	r2,sp,1080
   10a18:	dc413017 	ldw	r17,1216(sp)
   10a1c:	d8c00404 	addi	r3,sp,16
   10a20:	d9012615 	stw	r4,1176(sp)
   10a24:	1109c83a 	sub	r4,r2,r4
   10a28:	d8812715 	stw	r2,1180(sp)
   10a2c:	d8c11b15 	stw	r3,1132(sp)
   10a30:	d8011d15 	stw	zero,1140(sp)
   10a34:	d8011c15 	stw	zero,1136(sp)
   10a38:	802b883a 	mov	r21,r16
   10a3c:	d8013215 	stw	zero,1224(sp)
   10a40:	d8013615 	stw	zero,1240(sp)
   10a44:	d8013515 	stw	zero,1236(sp)
   10a48:	d8012c15 	stw	zero,1200(sp)
   10a4c:	1813883a 	mov	r9,r3
   10a50:	d9013915 	stw	r4,1252(sp)
   10a54:	a8800007 	ldb	r2,0(r21)
   10a58:	1002f326 	beq	r2,zero,11628 <___vfprintf_internal_r+0xcac>
   10a5c:	00c00944 	movi	r3,37
   10a60:	a825883a 	mov	r18,r21
   10a64:	10c0021e 	bne	r2,r3,10a70 <___vfprintf_internal_r+0xf4>
   10a68:	00001406 	br	10abc <___vfprintf_internal_r+0x140>
   10a6c:	10c00326 	beq	r2,r3,10a7c <___vfprintf_internal_r+0x100>
   10a70:	94800044 	addi	r18,r18,1
   10a74:	90800007 	ldb	r2,0(r18)
   10a78:	103ffc1e 	bne	r2,zero,10a6c <___vfprintf_internal_r+0xf0>
   10a7c:	9561c83a 	sub	r16,r18,r21
   10a80:	80000e26 	beq	r16,zero,10abc <___vfprintf_internal_r+0x140>
   10a84:	da011d17 	ldw	r8,1140(sp)
   10a88:	d8c11c17 	ldw	r3,1136(sp)
   10a8c:	4d400015 	stw	r21,0(r9)
   10a90:	4c000115 	stw	r16,4(r9)
   10a94:	4411883a 	add	r8,r8,r16
   10a98:	18c00044 	addi	r3,r3,1
   10a9c:	da011d15 	stw	r8,1140(sp)
   10aa0:	d8c11c15 	stw	r3,1136(sp)
   10aa4:	008001c4 	movi	r2,7
   10aa8:	10c11016 	blt	r2,r3,10eec <___vfprintf_internal_r+0x570>
   10aac:	4a400204 	addi	r9,r9,8
   10ab0:	d8812c17 	ldw	r2,1200(sp)
   10ab4:	1405883a 	add	r2,r2,r16
   10ab8:	d8812c15 	stw	r2,1200(sp)
   10abc:	90800007 	ldb	r2,0(r18)
   10ac0:	1000ee26 	beq	r2,zero,10e7c <___vfprintf_internal_r+0x500>
   10ac4:	95400044 	addi	r21,r18,1
   10ac8:	94800047 	ldb	r18,1(r18)
   10acc:	073fffc4 	movi	fp,-1
   10ad0:	e007883a 	mov	r3,fp
   10ad4:	d8012585 	stb	zero,1174(sp)
   10ad8:	d8012e15 	stw	zero,1208(sp)
   10adc:	0021883a 	mov	r16,zero
   10ae0:	05001604 	movi	r20,88
   10ae4:	04c00244 	movi	r19,9
   10ae8:	4839883a 	mov	fp,r9
   10aec:	ad400044 	addi	r21,r21,1
   10af0:	90bff804 	addi	r2,r18,-32
   10af4:	a080462e 	bgeu	r20,r2,10c10 <___vfprintf_internal_r+0x294>
   10af8:	e013883a 	mov	r9,fp
   10afc:	9000df26 	beq	r18,zero,10e7c <___vfprintf_internal_r+0x500>
   10b00:	00c00044 	movi	r3,1
   10b04:	d8c12815 	stw	r3,1184(sp)
   10b08:	dc810405 	stb	r18,1040(sp)
   10b0c:	d8012585 	stb	zero,1174(sp)
   10b10:	d8c12b15 	stw	r3,1196(sp)
   10b14:	dcc10404 	addi	r19,sp,1040
   10b18:	d8013115 	stw	zero,1220(sp)
   10b1c:	80c0008c 	andi	r3,r16,2
   10b20:	d8c12a15 	stw	r3,1192(sp)
   10b24:	18000326 	beq	r3,zero,10b34 <___vfprintf_internal_r+0x1b8>
   10b28:	d8c12817 	ldw	r3,1184(sp)
   10b2c:	18c00084 	addi	r3,r3,2
   10b30:	d8c12815 	stw	r3,1184(sp)
   10b34:	80c0210c 	andi	r3,r16,132
   10b38:	d8c12f15 	stw	r3,1212(sp)
   10b3c:	1802251e 	bne	r3,zero,113d4 <___vfprintf_internal_r+0xa58>
   10b40:	d9012e17 	ldw	r4,1208(sp)
   10b44:	d8c12817 	ldw	r3,1184(sp)
   10b48:	20edc83a 	sub	r22,r4,r3
   10b4c:	0582210e 	bge	zero,r22,113d4 <___vfprintf_internal_r+0xa58>
   10b50:	02800404 	movi	r10,16
   10b54:	da011d17 	ldw	r8,1140(sp)
   10b58:	d8c11c17 	ldw	r3,1136(sp)
   10b5c:	05c000f4 	movhi	r23,3
   10b60:	bde02d84 	addi	r23,r23,-32586
   10b64:	5580200e 	bge	r10,r22,10be8 <___vfprintf_internal_r+0x26c>
   10b68:	dc813815 	stw	r18,1248(sp)
   10b6c:	5039883a 	mov	fp,r10
   10b70:	b825883a 	mov	r18,r23
   10b74:	050001c4 	movi	r20,7
   10b78:	b02f883a 	mov	r23,r22
   10b7c:	802d883a 	mov	r22,r16
   10b80:	dc012917 	ldw	r16,1188(sp)
   10b84:	00000306 	br	10b94 <___vfprintf_internal_r+0x218>
   10b88:	bdfffc04 	addi	r23,r23,-16
   10b8c:	4a400204 	addi	r9,r9,8
   10b90:	e5c0110e 	bge	fp,r23,10bd8 <___vfprintf_internal_r+0x25c>
   10b94:	4c800015 	stw	r18,0(r9)
   10b98:	4f000115 	stw	fp,4(r9)
   10b9c:	42000404 	addi	r8,r8,16
   10ba0:	18c00044 	addi	r3,r3,1
   10ba4:	da011d15 	stw	r8,1140(sp)
   10ba8:	d8c11c15 	stw	r3,1136(sp)
   10bac:	a0fff60e 	bge	r20,r3,10b88 <___vfprintf_internal_r+0x20c>
   10bb0:	8809883a 	mov	r4,r17
   10bb4:	800b883a 	mov	r5,r16
   10bb8:	d9811b04 	addi	r6,sp,1132
   10bbc:	00109480 	call	10948 <__sprint_r>
   10bc0:	1000b41e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   10bc4:	bdfffc04 	addi	r23,r23,-16
   10bc8:	da011d17 	ldw	r8,1140(sp)
   10bcc:	d8c11c17 	ldw	r3,1136(sp)
   10bd0:	da400404 	addi	r9,sp,16
   10bd4:	e5ffef16 	blt	fp,r23,10b94 <___vfprintf_internal_r+0x218>
   10bd8:	b021883a 	mov	r16,r22
   10bdc:	b82d883a 	mov	r22,r23
   10be0:	902f883a 	mov	r23,r18
   10be4:	dc813817 	ldw	r18,1248(sp)
   10be8:	4dc00015 	stw	r23,0(r9)
   10bec:	4d800115 	stw	r22,4(r9)
   10bf0:	4591883a 	add	r8,r8,r22
   10bf4:	18c00044 	addi	r3,r3,1
   10bf8:	da011d15 	stw	r8,1140(sp)
   10bfc:	d8c11c15 	stw	r3,1136(sp)
   10c00:	008001c4 	movi	r2,7
   10c04:	10c3fe16 	blt	r2,r3,11c00 <___vfprintf_internal_r+0x1284>
   10c08:	4a400204 	addi	r9,r9,8
   10c0c:	0001f306 	br	113dc <___vfprintf_internal_r+0xa60>
   10c10:	1085883a 	add	r2,r2,r2
   10c14:	1085883a 	add	r2,r2,r2
   10c18:	01000074 	movhi	r4,1
   10c1c:	21030b04 	addi	r4,r4,3116
   10c20:	1105883a 	add	r2,r2,r4
   10c24:	10800017 	ldw	r2,0(r2)
   10c28:	1000683a 	jmp	r2
   10c2c:	00011308 	cmpgei	zero,zero,1100
   10c30:	00010af8 	rdprs	zero,zero,1067
   10c34:	00010af8 	rdprs	zero,zero,1067
   10c38:	00011320 	cmpeqi	zero,zero,1100
   10c3c:	00010af8 	rdprs	zero,zero,1067
   10c40:	00010af8 	rdprs	zero,zero,1067
   10c44:	00010af8 	rdprs	zero,zero,1067
   10c48:	00010af8 	rdprs	zero,zero,1067
   10c4c:	00010af8 	rdprs	zero,zero,1067
   10c50:	00010af8 	rdprs	zero,zero,1067
   10c54:	000111d8 	cmpnei	zero,zero,1095
   10c58:	0001136c 	andhi	zero,zero,1101
   10c5c:	00010af8 	rdprs	zero,zero,1067
   10c60:	00010da0 	cmpeqi	zero,zero,1078
   10c64:	00011140 	call	1114 <__alt_mem_instruction_memory_1-0xeeec>
   10c68:	00010af8 	rdprs	zero,zero,1067
   10c6c:	0001132c 	andhi	zero,zero,1100
   10c70:	00011338 	rdprs	zero,zero,1100
   10c74:	00011338 	rdprs	zero,zero,1100
   10c78:	00011338 	rdprs	zero,zero,1100
   10c7c:	00011338 	rdprs	zero,zero,1100
   10c80:	00011338 	rdprs	zero,zero,1100
   10c84:	00011338 	rdprs	zero,zero,1100
   10c88:	00011338 	rdprs	zero,zero,1100
   10c8c:	00011338 	rdprs	zero,zero,1100
   10c90:	00011338 	rdprs	zero,zero,1100
   10c94:	00010af8 	rdprs	zero,zero,1067
   10c98:	00010af8 	rdprs	zero,zero,1067
   10c9c:	00010af8 	rdprs	zero,zero,1067
   10ca0:	00010af8 	rdprs	zero,zero,1067
   10ca4:	00010af8 	rdprs	zero,zero,1067
   10ca8:	00010af8 	rdprs	zero,zero,1067
   10cac:	00010af8 	rdprs	zero,zero,1067
   10cb0:	00010af8 	rdprs	zero,zero,1067
   10cb4:	00010af8 	rdprs	zero,zero,1067
   10cb8:	00010af8 	rdprs	zero,zero,1067
   10cbc:	00010f10 	cmplti	zero,zero,1084
   10cc0:	00010fd0 	cmplti	zero,zero,1087
   10cc4:	00010af8 	rdprs	zero,zero,1067
   10cc8:	00010fd0 	cmplti	zero,zero,1087
   10ccc:	00010af8 	rdprs	zero,zero,1067
   10cd0:	00010af8 	rdprs	zero,zero,1067
   10cd4:	00010af8 	rdprs	zero,zero,1067
   10cd8:	00010af8 	rdprs	zero,zero,1067
   10cdc:	00011064 	muli	zero,zero,1089
   10ce0:	00010af8 	rdprs	zero,zero,1067
   10ce4:	00010af8 	rdprs	zero,zero,1067
   10ce8:	00011070 	cmpltui	zero,zero,1089
   10cec:	00010af8 	rdprs	zero,zero,1067
   10cf0:	00010af8 	rdprs	zero,zero,1067
   10cf4:	00010af8 	rdprs	zero,zero,1067
   10cf8:	00010af8 	rdprs	zero,zero,1067
   10cfc:	00010af8 	rdprs	zero,zero,1067
   10d00:	000110a8 	cmpgeui	zero,zero,1090
   10d04:	00010af8 	rdprs	zero,zero,1067
   10d08:	00010af8 	rdprs	zero,zero,1067
   10d0c:	000110e4 	muli	zero,zero,1091
   10d10:	00010af8 	rdprs	zero,zero,1067
   10d14:	00010af8 	rdprs	zero,zero,1067
   10d18:	00010af8 	rdprs	zero,zero,1067
   10d1c:	00010af8 	rdprs	zero,zero,1067
   10d20:	00010af8 	rdprs	zero,zero,1067
   10d24:	00010af8 	rdprs	zero,zero,1067
   10d28:	00010af8 	rdprs	zero,zero,1067
   10d2c:	00010af8 	rdprs	zero,zero,1067
   10d30:	00010af8 	rdprs	zero,zero,1067
   10d34:	00010af8 	rdprs	zero,zero,1067
   10d38:	0001137c 	xorhi	zero,zero,1101
   10d3c:	000113b0 	cmpltui	zero,zero,1102
   10d40:	00010fd0 	cmplti	zero,zero,1087
   10d44:	00010fd0 	cmplti	zero,zero,1087
   10d48:	00010fd0 	cmplti	zero,zero,1087
   10d4c:	000112fc 	xorhi	zero,zero,1099
   10d50:	000113b0 	cmpltui	zero,zero,1102
   10d54:	00010af8 	rdprs	zero,zero,1067
   10d58:	00010af8 	rdprs	zero,zero,1067
   10d5c:	00011188 	cmpgei	zero,zero,1094
   10d60:	00010af8 	rdprs	zero,zero,1067
   10d64:	000111a0 	cmpeqi	zero,zero,1094
   10d68:	000113bc 	xorhi	zero,zero,1102
   10d6c:	00011200 	call	1120 <__alt_mem_instruction_memory_1-0xeee0>
   10d70:	00011250 	cmplti	zero,zero,1097
   10d74:	00010af8 	rdprs	zero,zero,1067
   10d78:	0001125c 	xori	zero,zero,1097
   10d7c:	00010af8 	rdprs	zero,zero,1067
   10d80:	000113c8 	cmpgei	zero,zero,1103
   10d84:	00010af8 	rdprs	zero,zero,1067
   10d88:	00010af8 	rdprs	zero,zero,1067
   10d8c:	000112c0 	call	112c <__alt_mem_instruction_memory_1-0xeed4>
   10d90:	d9012e17 	ldw	r4,1208(sp)
   10d94:	d8812d15 	stw	r2,1204(sp)
   10d98:	0109c83a 	sub	r4,zero,r4
   10d9c:	d9012e15 	stw	r4,1208(sp)
   10da0:	84000114 	ori	r16,r16,4
   10da4:	ac800007 	ldb	r18,0(r21)
   10da8:	003f5006 	br	10aec <___vfprintf_internal_r+0x170>
   10dac:	d9013017 	ldw	r4,1216(sp)
   10db0:	d9412917 	ldw	r5,1188(sp)
   10db4:	001281c0 	call	1281c <__swsetup_r>
   10db8:	10003d1e 	bne	r2,zero,10eb0 <___vfprintf_internal_r+0x534>
   10dbc:	d8c12917 	ldw	r3,1188(sp)
   10dc0:	1880030b 	ldhu	r2,12(r3)
   10dc4:	00c00284 	movi	r3,10
   10dc8:	1100068c 	andi	r4,r2,26
   10dcc:	20ff101e 	bne	r4,r3,10a10 <___vfprintf_internal_r+0x94>
   10dd0:	d9012917 	ldw	r4,1188(sp)
   10dd4:	20c0038b 	ldhu	r3,14(r4)
   10dd8:	193fffcc 	andi	r4,r3,65535
   10ddc:	2120001c 	xori	r4,r4,32768
   10de0:	21200004 	addi	r4,r4,-32768
   10de4:	203f0a16 	blt	r4,zero,10a10 <___vfprintf_internal_r+0x94>
   10de8:	d9012917 	ldw	r4,1188(sp)
   10dec:	d9c12d17 	ldw	r7,1204(sp)
   10df0:	10bfff4c 	andi	r2,r2,65533
   10df4:	22800717 	ldw	r10,28(r4)
   10df8:	22400917 	ldw	r9,36(r4)
   10dfc:	d9013017 	ldw	r4,1216(sp)
   10e00:	02010004 	movi	r8,1024
   10e04:	d881070d 	sth	r2,1052(sp)
   10e08:	d9410404 	addi	r5,sp,1040
   10e0c:	d8800404 	addi	r2,sp,16
   10e10:	800d883a 	mov	r6,r16
   10e14:	d8c1078d 	sth	r3,1054(sp)
   10e18:	da810b15 	stw	r10,1068(sp)
   10e1c:	da410d15 	stw	r9,1076(sp)
   10e20:	d8810415 	stw	r2,1040(sp)
   10e24:	d8810815 	stw	r2,1056(sp)
   10e28:	da010615 	stw	r8,1048(sp)
   10e2c:	da010915 	stw	r8,1060(sp)
   10e30:	d8010a15 	stw	zero,1064(sp)
   10e34:	001097c0 	call	1097c <___vfprintf_internal_r>
   10e38:	d8812c15 	stw	r2,1200(sp)
   10e3c:	10000416 	blt	r2,zero,10e50 <___vfprintf_internal_r+0x4d4>
   10e40:	d9013017 	ldw	r4,1216(sp)
   10e44:	d9410404 	addi	r5,sp,1040
   10e48:	00141e80 	call	141e8 <_fflush_r>
   10e4c:	1006501e 	bne	r2,zero,12790 <___vfprintf_internal_r+0x1e14>
   10e50:	d881070b 	ldhu	r2,1052(sp)
   10e54:	1080100c 	andi	r2,r2,64
   10e58:	10bfffcc 	andi	r2,r2,65535
   10e5c:	10a0001c 	xori	r2,r2,32768
   10e60:	10a00004 	addi	r2,r2,-32768
   10e64:	10001426 	beq	r2,zero,10eb8 <___vfprintf_internal_r+0x53c>
   10e68:	d8c12917 	ldw	r3,1188(sp)
   10e6c:	1880030b 	ldhu	r2,12(r3)
   10e70:	10801014 	ori	r2,r2,64
   10e74:	1880030d 	sth	r2,12(r3)
   10e78:	00000f06 	br	10eb8 <___vfprintf_internal_r+0x53c>
   10e7c:	d8811d17 	ldw	r2,1140(sp)
   10e80:	10000426 	beq	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   10e84:	d9013017 	ldw	r4,1216(sp)
   10e88:	d9412917 	ldw	r5,1188(sp)
   10e8c:	d9811b04 	addi	r6,sp,1132
   10e90:	00109480 	call	10948 <__sprint_r>
   10e94:	d8c12917 	ldw	r3,1188(sp)
   10e98:	1880030b 	ldhu	r2,12(r3)
   10e9c:	1080100c 	andi	r2,r2,64
   10ea0:	10bfffcc 	andi	r2,r2,65535
   10ea4:	10a0001c 	xori	r2,r2,32768
   10ea8:	10a00004 	addi	r2,r2,-32768
   10eac:	10000226 	beq	r2,zero,10eb8 <___vfprintf_internal_r+0x53c>
   10eb0:	00bfffc4 	movi	r2,-1
   10eb4:	d8812c15 	stw	r2,1200(sp)
   10eb8:	d8812c17 	ldw	r2,1200(sp)
   10ebc:	dfc14617 	ldw	ra,1304(sp)
   10ec0:	df014517 	ldw	fp,1300(sp)
   10ec4:	ddc14417 	ldw	r23,1296(sp)
   10ec8:	dd814317 	ldw	r22,1292(sp)
   10ecc:	dd414217 	ldw	r21,1288(sp)
   10ed0:	dd014117 	ldw	r20,1284(sp)
   10ed4:	dcc14017 	ldw	r19,1280(sp)
   10ed8:	dc813f17 	ldw	r18,1276(sp)
   10edc:	dc413e17 	ldw	r17,1272(sp)
   10ee0:	dc013d17 	ldw	r16,1268(sp)
   10ee4:	dec14704 	addi	sp,sp,1308
   10ee8:	f800283a 	ret
   10eec:	d9412917 	ldw	r5,1188(sp)
   10ef0:	8809883a 	mov	r4,r17
   10ef4:	d9811b04 	addi	r6,sp,1132
   10ef8:	00109480 	call	10948 <__sprint_r>
   10efc:	103fe51e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   10f00:	da400404 	addi	r9,sp,16
   10f04:	003eea06 	br	10ab0 <___vfprintf_internal_r+0x134>
   10f08:	00144a40 	call	144a4 <__sinit>
   10f0c:	003eb306 	br	109dc <___vfprintf_internal_r+0x60>
   10f10:	e013883a 	mov	r9,fp
   10f14:	84000414 	ori	r16,r16,16
   10f18:	1839883a 	mov	fp,r3
   10f1c:	8080080c 	andi	r2,r16,32
   10f20:	10034426 	beq	r2,zero,11c34 <___vfprintf_internal_r+0x12b8>
   10f24:	d8c12d17 	ldw	r3,1204(sp)
   10f28:	18800117 	ldw	r2,4(r3)
   10f2c:	1dc00017 	ldw	r23,0(r3)
   10f30:	18c00204 	addi	r3,r3,8
   10f34:	d8c12d15 	stw	r3,1204(sp)
   10f38:	102d883a 	mov	r22,r2
   10f3c:	1003020e 	bge	r2,zero,11b48 <___vfprintf_internal_r+0x11cc>
   10f40:	05efc83a 	sub	r23,zero,r23
   10f44:	b804c03a 	cmpne	r2,r23,zero
   10f48:	05adc83a 	sub	r22,zero,r22
   10f4c:	b0adc83a 	sub	r22,r22,r2
   10f50:	00800b44 	movi	r2,45
   10f54:	d8812585 	stb	r2,1174(sp)
   10f58:	00c00044 	movi	r3,1
   10f5c:	bd84b03a 	or	r2,r23,r22
   10f60:	e0000216 	blt	fp,zero,10f6c <___vfprintf_internal_r+0x5f0>
   10f64:	013fdfc4 	movi	r4,-129
   10f68:	8120703a 	and	r16,r16,r4
   10f6c:	1001cc1e 	bne	r2,zero,116a0 <___vfprintf_internal_r+0xd24>
   10f70:	e001cb1e 	bne	fp,zero,116a0 <___vfprintf_internal_r+0xd24>
   10f74:	18c03fcc 	andi	r3,r3,255
   10f78:	1802ca1e 	bne	r3,zero,11aa4 <___vfprintf_internal_r+0x1128>
   10f7c:	8080004c 	andi	r2,r16,1
   10f80:	1002c826 	beq	r2,zero,11aa4 <___vfprintf_internal_r+0x1128>
   10f84:	d8c13917 	ldw	r3,1252(sp)
   10f88:	00800c04 	movi	r2,48
   10f8c:	d8810dc5 	stb	r2,1079(sp)
   10f90:	d8c12b15 	stw	r3,1196(sp)
   10f94:	dcc10dc4 	addi	r19,sp,1079
   10f98:	d8812b17 	ldw	r2,1196(sp)
   10f9c:	d8812815 	stw	r2,1184(sp)
   10fa0:	1700010e 	bge	r2,fp,10fa8 <___vfprintf_internal_r+0x62c>
   10fa4:	df012815 	stw	fp,1184(sp)
   10fa8:	d8812583 	ldbu	r2,1174(sp)
   10fac:	df013115 	stw	fp,1220(sp)
   10fb0:	10803fcc 	andi	r2,r2,255
   10fb4:	1080201c 	xori	r2,r2,128
   10fb8:	10bfe004 	addi	r2,r2,-128
   10fbc:	103ed726 	beq	r2,zero,10b1c <___vfprintf_internal_r+0x1a0>
   10fc0:	d8c12817 	ldw	r3,1184(sp)
   10fc4:	18c00044 	addi	r3,r3,1
   10fc8:	d8c12815 	stw	r3,1184(sp)
   10fcc:	003ed306 	br	10b1c <___vfprintf_internal_r+0x1a0>
   10fd0:	8080020c 	andi	r2,r16,8
   10fd4:	e013883a 	mov	r9,fp
   10fd8:	1839883a 	mov	fp,r3
   10fdc:	1003a626 	beq	r2,zero,11e78 <___vfprintf_internal_r+0x14fc>
   10fe0:	d9012d17 	ldw	r4,1204(sp)
   10fe4:	25800017 	ldw	r22,0(r4)
   10fe8:	25000117 	ldw	r20,4(r4)
   10fec:	21000204 	addi	r4,r4,8
   10ff0:	d9012d15 	stw	r4,1204(sp)
   10ff4:	dd813315 	stw	r22,1228(sp)
   10ff8:	dd013415 	stw	r20,1232(sp)
   10ffc:	b009883a 	mov	r4,r22
   11000:	a00b883a 	mov	r5,r20
   11004:	da413c15 	stw	r9,1264(sp)
   11008:	00176300 	call	17630 <__isinfd>
   1100c:	da413c17 	ldw	r9,1264(sp)
   11010:	b009883a 	mov	r4,r22
   11014:	a00b883a 	mov	r5,r20
   11018:	10041d26 	beq	r2,zero,12090 <___vfprintf_internal_r+0x1714>
   1101c:	000d883a 	mov	r6,zero
   11020:	000f883a 	mov	r7,zero
   11024:	00194040 	call	19404 <__ltdf2>
   11028:	da413c17 	ldw	r9,1264(sp)
   1102c:	1004da16 	blt	r2,zero,12398 <___vfprintf_internal_r+0x1a1c>
   11030:	d8812583 	ldbu	r2,1174(sp)
   11034:	00c011c4 	movi	r3,71
   11038:	1c83d116 	blt	r3,r18,11f80 <___vfprintf_internal_r+0x1604>
   1103c:	04c000f4 	movhi	r19,3
   11040:	9ce01d04 	addi	r19,r19,-32652
   11044:	00c000c4 	movi	r3,3
   11048:	d8c12815 	stw	r3,1184(sp)
   1104c:	00ffdfc4 	movi	r3,-129
   11050:	80e0703a 	and	r16,r16,r3
   11054:	d8c12817 	ldw	r3,1184(sp)
   11058:	d8013115 	stw	zero,1220(sp)
   1105c:	d8c12b15 	stw	r3,1196(sp)
   11060:	003fd306 	br	10fb0 <___vfprintf_internal_r+0x634>
   11064:	84000214 	ori	r16,r16,8
   11068:	ac800007 	ldb	r18,0(r21)
   1106c:	003e9f06 	br	10aec <___vfprintf_internal_r+0x170>
   11070:	e013883a 	mov	r9,fp
   11074:	84000414 	ori	r16,r16,16
   11078:	1839883a 	mov	fp,r3
   1107c:	8080080c 	andi	r2,r16,32
   11080:	10031d26 	beq	r2,zero,11cf8 <___vfprintf_internal_r+0x137c>
   11084:	d8812d17 	ldw	r2,1204(sp)
   11088:	0007883a 	mov	r3,zero
   1108c:	15c00017 	ldw	r23,0(r2)
   11090:	15800117 	ldw	r22,4(r2)
   11094:	10800204 	addi	r2,r2,8
   11098:	d8812d15 	stw	r2,1204(sp)
   1109c:	d8012585 	stb	zero,1174(sp)
   110a0:	bd84b03a 	or	r2,r23,r22
   110a4:	003fae06 	br	10f60 <___vfprintf_internal_r+0x5e4>
   110a8:	e013883a 	mov	r9,fp
   110ac:	84000414 	ori	r16,r16,16
   110b0:	1839883a 	mov	fp,r3
   110b4:	8080080c 	andi	r2,r16,32
   110b8:	1002e726 	beq	r2,zero,11c58 <___vfprintf_internal_r+0x12dc>
   110bc:	d8c12d17 	ldw	r3,1204(sp)
   110c0:	d9012d17 	ldw	r4,1204(sp)
   110c4:	1dc00017 	ldw	r23,0(r3)
   110c8:	1d800117 	ldw	r22,4(r3)
   110cc:	21000204 	addi	r4,r4,8
   110d0:	00c00044 	movi	r3,1
   110d4:	d9012d15 	stw	r4,1204(sp)
   110d8:	bd84b03a 	or	r2,r23,r22
   110dc:	d8012585 	stb	zero,1174(sp)
   110e0:	003f9f06 	br	10f60 <___vfprintf_internal_r+0x5e4>
   110e4:	e013883a 	mov	r9,fp
   110e8:	1839883a 	mov	fp,r3
   110ec:	00c000f4 	movhi	r3,3
   110f0:	18e02104 	addi	r3,r3,-32636
   110f4:	d8c13615 	stw	r3,1240(sp)
   110f8:	8080080c 	andi	r2,r16,32
   110fc:	10007726 	beq	r2,zero,112dc <___vfprintf_internal_r+0x960>
   11100:	d9012d17 	ldw	r4,1204(sp)
   11104:	25c00017 	ldw	r23,0(r4)
   11108:	25800117 	ldw	r22,4(r4)
   1110c:	21000204 	addi	r4,r4,8
   11110:	d9012d15 	stw	r4,1204(sp)
   11114:	8080004c 	andi	r2,r16,1
   11118:	1002c226 	beq	r2,zero,11c24 <___vfprintf_internal_r+0x12a8>
   1111c:	bd84b03a 	or	r2,r23,r22
   11120:	10035d26 	beq	r2,zero,11e98 <___vfprintf_internal_r+0x151c>
   11124:	00c00c04 	movi	r3,48
   11128:	d8c12505 	stb	r3,1172(sp)
   1112c:	dc812545 	stb	r18,1173(sp)
   11130:	84000094 	ori	r16,r16,2
   11134:	00c00084 	movi	r3,2
   11138:	d8012585 	stb	zero,1174(sp)
   1113c:	003f8806 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11140:	ac800007 	ldb	r18,0(r21)
   11144:	00c00a84 	movi	r3,42
   11148:	adc00044 	addi	r23,r21,1
   1114c:	90c57526 	beq	r18,r3,12724 <___vfprintf_internal_r+0x1da8>
   11150:	95bff404 	addi	r22,r18,-48
   11154:	0009883a 	mov	r4,zero
   11158:	9d84ff36 	bltu	r19,r22,12558 <___vfprintf_internal_r+0x1bdc>
   1115c:	01400284 	movi	r5,10
   11160:	00107940 	call	10794 <__mulsi3>
   11164:	bc800007 	ldb	r18,0(r23)
   11168:	b089883a 	add	r4,r22,r2
   1116c:	bdc00044 	addi	r23,r23,1
   11170:	95bff404 	addi	r22,r18,-48
   11174:	9dbff92e 	bgeu	r19,r22,1115c <___vfprintf_internal_r+0x7e0>
   11178:	2007883a 	mov	r3,r4
   1117c:	20044316 	blt	r4,zero,1228c <___vfprintf_internal_r+0x1910>
   11180:	b82b883a 	mov	r21,r23
   11184:	003e5a06 	br	10af0 <___vfprintf_internal_r+0x174>
   11188:	ac800007 	ldb	r18,0(r21)
   1118c:	01001b04 	movi	r4,108
   11190:	a805883a 	mov	r2,r21
   11194:	91045526 	beq	r18,r4,122ec <___vfprintf_internal_r+0x1970>
   11198:	84000414 	ori	r16,r16,16
   1119c:	003e5306 	br	10aec <___vfprintf_internal_r+0x170>
   111a0:	8080080c 	andi	r2,r16,32
   111a4:	e013883a 	mov	r9,fp
   111a8:	10034026 	beq	r2,zero,11eac <___vfprintf_internal_r+0x1530>
   111ac:	d9012d17 	ldw	r4,1204(sp)
   111b0:	20800017 	ldw	r2,0(r4)
   111b4:	d9012c17 	ldw	r4,1200(sp)
   111b8:	2007d7fa 	srai	r3,r4,31
   111bc:	d9012d17 	ldw	r4,1204(sp)
   111c0:	10c00115 	stw	r3,4(r2)
   111c4:	21000104 	addi	r4,r4,4
   111c8:	d9012d15 	stw	r4,1204(sp)
   111cc:	d9012c17 	ldw	r4,1200(sp)
   111d0:	11000015 	stw	r4,0(r2)
   111d4:	003e1f06 	br	10a54 <___vfprintf_internal_r+0xd8>
   111d8:	d9012d17 	ldw	r4,1204(sp)
   111dc:	21000017 	ldw	r4,0(r4)
   111e0:	d9012e15 	stw	r4,1208(sp)
   111e4:	d9012d17 	ldw	r4,1204(sp)
   111e8:	20800104 	addi	r2,r4,4
   111ec:	d9012e17 	ldw	r4,1208(sp)
   111f0:	203ee716 	blt	r4,zero,10d90 <___vfprintf_internal_r+0x414>
   111f4:	d8812d15 	stw	r2,1204(sp)
   111f8:	ac800007 	ldb	r18,0(r21)
   111fc:	003e3b06 	br	10aec <___vfprintf_internal_r+0x170>
   11200:	e013883a 	mov	r9,fp
   11204:	1839883a 	mov	fp,r3
   11208:	d8c12d17 	ldw	r3,1204(sp)
   1120c:	00800c04 	movi	r2,48
   11210:	010000f4 	movhi	r4,3
   11214:	21202604 	addi	r4,r4,-32616
   11218:	1dc00017 	ldw	r23,0(r3)
   1121c:	18c00104 	addi	r3,r3,4
   11220:	d8812505 	stb	r2,1172(sp)
   11224:	00801e04 	movi	r2,120
   11228:	d8812545 	stb	r2,1173(sp)
   1122c:	d8c12d15 	stw	r3,1204(sp)
   11230:	002d883a 	mov	r22,zero
   11234:	84000094 	ori	r16,r16,2
   11238:	d9013615 	stw	r4,1240(sp)
   1123c:	00c00084 	movi	r3,2
   11240:	04801e04 	movi	r18,120
   11244:	b805883a 	mov	r2,r23
   11248:	d8012585 	stb	zero,1174(sp)
   1124c:	003f4406 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11250:	84000814 	ori	r16,r16,32
   11254:	ac800007 	ldb	r18,0(r21)
   11258:	003e2406 	br	10aec <___vfprintf_internal_r+0x170>
   1125c:	d8812d17 	ldw	r2,1204(sp)
   11260:	d8012585 	stb	zero,1174(sp)
   11264:	e013883a 	mov	r9,fp
   11268:	14c00017 	ldw	r19,0(r2)
   1126c:	1839883a 	mov	fp,r3
   11270:	15c00104 	addi	r23,r2,4
   11274:	98045526 	beq	r19,zero,123cc <___vfprintf_internal_r+0x1a50>
   11278:	9809883a 	mov	r4,r19
   1127c:	18043116 	blt	r3,zero,12344 <___vfprintf_internal_r+0x19c8>
   11280:	000b883a 	mov	r5,zero
   11284:	180d883a 	mov	r6,r3
   11288:	da413c15 	stw	r9,1264(sp)
   1128c:	0015b440 	call	15b44 <memchr>
   11290:	da413c17 	ldw	r9,1264(sp)
   11294:	10047a26 	beq	r2,zero,12480 <___vfprintf_internal_r+0x1b04>
   11298:	14c5c83a 	sub	r2,r2,r19
   1129c:	d8812b15 	stw	r2,1196(sp)
   112a0:	e083d40e 	bge	fp,r2,121f4 <___vfprintf_internal_r+0x1878>
   112a4:	df012815 	stw	fp,1184(sp)
   112a8:	e004e416 	blt	fp,zero,1263c <___vfprintf_internal_r+0x1cc0>
   112ac:	d8812583 	ldbu	r2,1174(sp)
   112b0:	df012b15 	stw	fp,1196(sp)
   112b4:	ddc12d15 	stw	r23,1204(sp)
   112b8:	d8013115 	stw	zero,1220(sp)
   112bc:	003f3c06 	br	10fb0 <___vfprintf_internal_r+0x634>
   112c0:	008000f4 	movhi	r2,3
   112c4:	10a02604 	addi	r2,r2,-32616
   112c8:	d8813615 	stw	r2,1240(sp)
   112cc:	8080080c 	andi	r2,r16,32
   112d0:	e013883a 	mov	r9,fp
   112d4:	1839883a 	mov	fp,r3
   112d8:	103f891e 	bne	r2,zero,11100 <___vfprintf_internal_r+0x784>
   112dc:	8080040c 	andi	r2,r16,16
   112e0:	1002c326 	beq	r2,zero,11df0 <___vfprintf_internal_r+0x1474>
   112e4:	d8812d17 	ldw	r2,1204(sp)
   112e8:	002d883a 	mov	r22,zero
   112ec:	15c00017 	ldw	r23,0(r2)
   112f0:	10800104 	addi	r2,r2,4
   112f4:	d8812d15 	stw	r2,1204(sp)
   112f8:	003f8606 	br	11114 <___vfprintf_internal_r+0x798>
   112fc:	84001014 	ori	r16,r16,64
   11300:	ac800007 	ldb	r18,0(r21)
   11304:	003df906 	br	10aec <___vfprintf_internal_r+0x170>
   11308:	d8812587 	ldb	r2,1174(sp)
   1130c:	1002e51e 	bne	r2,zero,11ea4 <___vfprintf_internal_r+0x1528>
   11310:	00800804 	movi	r2,32
   11314:	d8812585 	stb	r2,1174(sp)
   11318:	ac800007 	ldb	r18,0(r21)
   1131c:	003df306 	br	10aec <___vfprintf_internal_r+0x170>
   11320:	84000054 	ori	r16,r16,1
   11324:	ac800007 	ldb	r18,0(r21)
   11328:	003df006 	br	10aec <___vfprintf_internal_r+0x170>
   1132c:	84002014 	ori	r16,r16,128
   11330:	ac800007 	ldb	r18,0(r21)
   11334:	003ded06 	br	10aec <___vfprintf_internal_r+0x170>
   11338:	0009883a 	mov	r4,zero
   1133c:	95bff404 	addi	r22,r18,-48
   11340:	182f883a 	mov	r23,r3
   11344:	01400284 	movi	r5,10
   11348:	00107940 	call	10794 <__mulsi3>
   1134c:	ac800007 	ldb	r18,0(r21)
   11350:	1589883a 	add	r4,r2,r22
   11354:	ad400044 	addi	r21,r21,1
   11358:	95bff404 	addi	r22,r18,-48
   1135c:	9dbff92e 	bgeu	r19,r22,11344 <___vfprintf_internal_r+0x9c8>
   11360:	b807883a 	mov	r3,r23
   11364:	d9012e15 	stw	r4,1208(sp)
   11368:	003de106 	br	10af0 <___vfprintf_internal_r+0x174>
   1136c:	00800ac4 	movi	r2,43
   11370:	d8812585 	stb	r2,1174(sp)
   11374:	ac800007 	ldb	r18,0(r21)
   11378:	003ddc06 	br	10aec <___vfprintf_internal_r+0x170>
   1137c:	d8c12d17 	ldw	r3,1204(sp)
   11380:	d9012d17 	ldw	r4,1204(sp)
   11384:	e013883a 	mov	r9,fp
   11388:	18800017 	ldw	r2,0(r3)
   1138c:	21000104 	addi	r4,r4,4
   11390:	00c00044 	movi	r3,1
   11394:	d8c12815 	stw	r3,1184(sp)
   11398:	d8012585 	stb	zero,1174(sp)
   1139c:	d8810405 	stb	r2,1040(sp)
   113a0:	d9012d15 	stw	r4,1204(sp)
   113a4:	d8c12b15 	stw	r3,1196(sp)
   113a8:	dcc10404 	addi	r19,sp,1040
   113ac:	003dda06 	br	10b18 <___vfprintf_internal_r+0x19c>
   113b0:	e013883a 	mov	r9,fp
   113b4:	1839883a 	mov	fp,r3
   113b8:	003ed806 	br	10f1c <___vfprintf_internal_r+0x5a0>
   113bc:	e013883a 	mov	r9,fp
   113c0:	1839883a 	mov	fp,r3
   113c4:	003f2d06 	br	1107c <___vfprintf_internal_r+0x700>
   113c8:	e013883a 	mov	r9,fp
   113cc:	1839883a 	mov	fp,r3
   113d0:	003f3806 	br	110b4 <___vfprintf_internal_r+0x738>
   113d4:	da011d17 	ldw	r8,1140(sp)
   113d8:	d8c11c17 	ldw	r3,1136(sp)
   113dc:	d8812587 	ldb	r2,1174(sp)
   113e0:	10000b26 	beq	r2,zero,11410 <___vfprintf_internal_r+0xa94>
   113e4:	d8812584 	addi	r2,sp,1174
   113e8:	48800015 	stw	r2,0(r9)
   113ec:	00800044 	movi	r2,1
   113f0:	48800115 	stw	r2,4(r9)
   113f4:	4091883a 	add	r8,r8,r2
   113f8:	1887883a 	add	r3,r3,r2
   113fc:	da011d15 	stw	r8,1140(sp)
   11400:	d8c11c15 	stw	r3,1136(sp)
   11404:	008001c4 	movi	r2,7
   11408:	10c18e16 	blt	r2,r3,11a44 <___vfprintf_internal_r+0x10c8>
   1140c:	4a400204 	addi	r9,r9,8
   11410:	d9012a17 	ldw	r4,1192(sp)
   11414:	20000b26 	beq	r4,zero,11444 <___vfprintf_internal_r+0xac8>
   11418:	d8812504 	addi	r2,sp,1172
   1141c:	48800015 	stw	r2,0(r9)
   11420:	00800084 	movi	r2,2
   11424:	48800115 	stw	r2,4(r9)
   11428:	4091883a 	add	r8,r8,r2
   1142c:	18c00044 	addi	r3,r3,1
   11430:	da011d15 	stw	r8,1140(sp)
   11434:	d8c11c15 	stw	r3,1136(sp)
   11438:	008001c4 	movi	r2,7
   1143c:	10c17816 	blt	r2,r3,11a20 <___vfprintf_internal_r+0x10a4>
   11440:	4a400204 	addi	r9,r9,8
   11444:	d9012f17 	ldw	r4,1212(sp)
   11448:	00802004 	movi	r2,128
   1144c:	2080fc26 	beq	r4,r2,11840 <___vfprintf_internal_r+0xec4>
   11450:	d8813117 	ldw	r2,1220(sp)
   11454:	d9012b17 	ldw	r4,1196(sp)
   11458:	112fc83a 	sub	r23,r2,r4
   1145c:	05c02a0e 	bge	zero,r23,11508 <___vfprintf_internal_r+0xb8c>
   11460:	07000404 	movi	fp,16
   11464:	050000f4 	movhi	r20,3
   11468:	a5203184 	addi	r20,r20,-32570
   1146c:	e5c01d0e 	bge	fp,r23,114e4 <___vfprintf_internal_r+0xb68>
   11470:	dc812a15 	stw	r18,1192(sp)
   11474:	058001c4 	movi	r22,7
   11478:	a025883a 	mov	r18,r20
   1147c:	8029883a 	mov	r20,r16
   11480:	dc012917 	ldw	r16,1188(sp)
   11484:	00000306 	br	11494 <___vfprintf_internal_r+0xb18>
   11488:	bdfffc04 	addi	r23,r23,-16
   1148c:	4a400204 	addi	r9,r9,8
   11490:	e5c0110e 	bge	fp,r23,114d8 <___vfprintf_internal_r+0xb5c>
   11494:	4c800015 	stw	r18,0(r9)
   11498:	4f000115 	stw	fp,4(r9)
   1149c:	42000404 	addi	r8,r8,16
   114a0:	18c00044 	addi	r3,r3,1
   114a4:	da011d15 	stw	r8,1140(sp)
   114a8:	d8c11c15 	stw	r3,1136(sp)
   114ac:	b0fff60e 	bge	r22,r3,11488 <___vfprintf_internal_r+0xb0c>
   114b0:	8809883a 	mov	r4,r17
   114b4:	800b883a 	mov	r5,r16
   114b8:	d9811b04 	addi	r6,sp,1132
   114bc:	00109480 	call	10948 <__sprint_r>
   114c0:	103e741e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   114c4:	bdfffc04 	addi	r23,r23,-16
   114c8:	da011d17 	ldw	r8,1140(sp)
   114cc:	d8c11c17 	ldw	r3,1136(sp)
   114d0:	da400404 	addi	r9,sp,16
   114d4:	e5ffef16 	blt	fp,r23,11494 <___vfprintf_internal_r+0xb18>
   114d8:	a021883a 	mov	r16,r20
   114dc:	9029883a 	mov	r20,r18
   114e0:	dc812a17 	ldw	r18,1192(sp)
   114e4:	4d000015 	stw	r20,0(r9)
   114e8:	4dc00115 	stw	r23,4(r9)
   114ec:	45d1883a 	add	r8,r8,r23
   114f0:	18c00044 	addi	r3,r3,1
   114f4:	da011d15 	stw	r8,1140(sp)
   114f8:	d8c11c15 	stw	r3,1136(sp)
   114fc:	008001c4 	movi	r2,7
   11500:	10c13e16 	blt	r2,r3,119fc <___vfprintf_internal_r+0x1080>
   11504:	4a400204 	addi	r9,r9,8
   11508:	8080400c 	andi	r2,r16,256
   1150c:	1000831e 	bne	r2,zero,1171c <___vfprintf_internal_r+0xda0>
   11510:	d8812b17 	ldw	r2,1196(sp)
   11514:	4cc00015 	stw	r19,0(r9)
   11518:	48800115 	stw	r2,4(r9)
   1151c:	4091883a 	add	r8,r8,r2
   11520:	18c00044 	addi	r3,r3,1
   11524:	da011d15 	stw	r8,1140(sp)
   11528:	d8c11c15 	stw	r3,1136(sp)
   1152c:	008001c4 	movi	r2,7
   11530:	10c05316 	blt	r2,r3,11680 <___vfprintf_internal_r+0xd04>
   11534:	4a400204 	addi	r9,r9,8
   11538:	8400010c 	andi	r16,r16,4
   1153c:	80002e26 	beq	r16,zero,115f8 <___vfprintf_internal_r+0xc7c>
   11540:	d8812e17 	ldw	r2,1208(sp)
   11544:	d8c12817 	ldw	r3,1184(sp)
   11548:	10e1c83a 	sub	r16,r2,r3
   1154c:	04002a0e 	bge	zero,r16,115f8 <___vfprintf_internal_r+0xc7c>
   11550:	04800404 	movi	r18,16
   11554:	d8c11c17 	ldw	r3,1136(sp)
   11558:	05c000f4 	movhi	r23,3
   1155c:	bde02d84 	addi	r23,r23,-32586
   11560:	9400170e 	bge	r18,r16,115c0 <___vfprintf_internal_r+0xc44>
   11564:	04c001c4 	movi	r19,7
   11568:	dd012917 	ldw	r20,1188(sp)
   1156c:	00000306 	br	1157c <___vfprintf_internal_r+0xc00>
   11570:	843ffc04 	addi	r16,r16,-16
   11574:	4a400204 	addi	r9,r9,8
   11578:	9400110e 	bge	r18,r16,115c0 <___vfprintf_internal_r+0xc44>
   1157c:	4dc00015 	stw	r23,0(r9)
   11580:	4c800115 	stw	r18,4(r9)
   11584:	42000404 	addi	r8,r8,16
   11588:	18c00044 	addi	r3,r3,1
   1158c:	da011d15 	stw	r8,1140(sp)
   11590:	d8c11c15 	stw	r3,1136(sp)
   11594:	98fff60e 	bge	r19,r3,11570 <___vfprintf_internal_r+0xbf4>
   11598:	8809883a 	mov	r4,r17
   1159c:	a00b883a 	mov	r5,r20
   115a0:	d9811b04 	addi	r6,sp,1132
   115a4:	00109480 	call	10948 <__sprint_r>
   115a8:	103e3a1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   115ac:	843ffc04 	addi	r16,r16,-16
   115b0:	da011d17 	ldw	r8,1140(sp)
   115b4:	d8c11c17 	ldw	r3,1136(sp)
   115b8:	da400404 	addi	r9,sp,16
   115bc:	943fef16 	blt	r18,r16,1157c <___vfprintf_internal_r+0xc00>
   115c0:	4dc00015 	stw	r23,0(r9)
   115c4:	4c000115 	stw	r16,4(r9)
   115c8:	8211883a 	add	r8,r16,r8
   115cc:	18c00044 	addi	r3,r3,1
   115d0:	da011d15 	stw	r8,1140(sp)
   115d4:	d8c11c15 	stw	r3,1136(sp)
   115d8:	008001c4 	movi	r2,7
   115dc:	10c0060e 	bge	r2,r3,115f8 <___vfprintf_internal_r+0xc7c>
   115e0:	d9412917 	ldw	r5,1188(sp)
   115e4:	8809883a 	mov	r4,r17
   115e8:	d9811b04 	addi	r6,sp,1132
   115ec:	00109480 	call	10948 <__sprint_r>
   115f0:	103e281e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   115f4:	da011d17 	ldw	r8,1140(sp)
   115f8:	dd012817 	ldw	r20,1184(sp)
   115fc:	d9012e17 	ldw	r4,1208(sp)
   11600:	a100010e 	bge	r20,r4,11608 <___vfprintf_internal_r+0xc8c>
   11604:	2029883a 	mov	r20,r4
   11608:	d8812c17 	ldw	r2,1200(sp)
   1160c:	1505883a 	add	r2,r2,r20
   11610:	d8812c15 	stw	r2,1200(sp)
   11614:	4000b91e 	bne	r8,zero,118fc <___vfprintf_internal_r+0xf80>
   11618:	d8011c15 	stw	zero,1136(sp)
   1161c:	a8800007 	ldb	r2,0(r21)
   11620:	da400404 	addi	r9,sp,16
   11624:	103d0d1e 	bne	r2,zero,10a5c <___vfprintf_internal_r+0xe0>
   11628:	a825883a 	mov	r18,r21
   1162c:	003d2306 	br	10abc <___vfprintf_internal_r+0x140>
   11630:	d9412917 	ldw	r5,1188(sp)
   11634:	8809883a 	mov	r4,r17
   11638:	d9811b04 	addi	r6,sp,1132
   1163c:	00109480 	call	10948 <__sprint_r>
   11640:	103e141e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11644:	da011d17 	ldw	r8,1140(sp)
   11648:	da400404 	addi	r9,sp,16
   1164c:	8080004c 	andi	r2,r16,1
   11650:	103fb926 	beq	r2,zero,11538 <___vfprintf_internal_r+0xbbc>
   11654:	d8c11c17 	ldw	r3,1136(sp)
   11658:	d9013717 	ldw	r4,1244(sp)
   1165c:	00800044 	movi	r2,1
   11660:	48800115 	stw	r2,4(r9)
   11664:	49000015 	stw	r4,0(r9)
   11668:	4091883a 	add	r8,r8,r2
   1166c:	1887883a 	add	r3,r3,r2
   11670:	da011d15 	stw	r8,1140(sp)
   11674:	d8c11c15 	stw	r3,1136(sp)
   11678:	008001c4 	movi	r2,7
   1167c:	10ffad0e 	bge	r2,r3,11534 <___vfprintf_internal_r+0xbb8>
   11680:	d9412917 	ldw	r5,1188(sp)
   11684:	8809883a 	mov	r4,r17
   11688:	d9811b04 	addi	r6,sp,1132
   1168c:	00109480 	call	10948 <__sprint_r>
   11690:	103e001e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11694:	da400404 	addi	r9,sp,16
   11698:	da011d17 	ldw	r8,1140(sp)
   1169c:	003fa606 	br	11538 <___vfprintf_internal_r+0xbbc>
   116a0:	18803fcc 	andi	r2,r3,255
   116a4:	00c00044 	movi	r3,1
   116a8:	10c10126 	beq	r2,r3,11ab0 <___vfprintf_internal_r+0x1134>
   116ac:	00c00084 	movi	r3,2
   116b0:	10c0ed26 	beq	r2,r3,11a68 <___vfprintf_internal_r+0x10ec>
   116b4:	d8c10dc4 	addi	r3,sp,1079
   116b8:	b808d0fa 	srli	r4,r23,3
   116bc:	b00a977a 	slli	r5,r22,29
   116c0:	b02cd0fa 	srli	r22,r22,3
   116c4:	bdc001cc 	andi	r23,r23,7
   116c8:	b8800c04 	addi	r2,r23,48
   116cc:	292eb03a 	or	r23,r5,r4
   116d0:	18800005 	stb	r2,0(r3)
   116d4:	bd88b03a 	or	r4,r23,r22
   116d8:	1827883a 	mov	r19,r3
   116dc:	18ffffc4 	addi	r3,r3,-1
   116e0:	203ff51e 	bne	r4,zero,116b8 <___vfprintf_internal_r+0xd3c>
   116e4:	8100004c 	andi	r4,r16,1
   116e8:	980b883a 	mov	r5,r19
   116ec:	20000726 	beq	r4,zero,1170c <___vfprintf_internal_r+0xd90>
   116f0:	10803fcc 	andi	r2,r2,255
   116f4:	1080201c 	xori	r2,r2,128
   116f8:	10bfe004 	addi	r2,r2,-128
   116fc:	01000c04 	movi	r4,48
   11700:	11000226 	beq	r2,r4,1170c <___vfprintf_internal_r+0xd90>
   11704:	1827883a 	mov	r19,r3
   11708:	293fffc5 	stb	r4,-1(r5)
   1170c:	d8812717 	ldw	r2,1180(sp)
   11710:	14c5c83a 	sub	r2,r2,r19
   11714:	d8812b15 	stw	r2,1196(sp)
   11718:	003e1f06 	br	10f98 <___vfprintf_internal_r+0x61c>
   1171c:	00801944 	movi	r2,101
   11720:	14807c0e 	bge	r2,r18,11914 <___vfprintf_internal_r+0xf98>
   11724:	d9013317 	ldw	r4,1228(sp)
   11728:	d9413417 	ldw	r5,1232(sp)
   1172c:	000d883a 	mov	r6,zero
   11730:	000f883a 	mov	r7,zero
   11734:	d8c13b15 	stw	r3,1260(sp)
   11738:	da013a15 	stw	r8,1256(sp)
   1173c:	da413c15 	stw	r9,1264(sp)
   11740:	00192840 	call	19284 <__eqdf2>
   11744:	d8c13b17 	ldw	r3,1260(sp)
   11748:	da013a17 	ldw	r8,1256(sp)
   1174c:	da413c17 	ldw	r9,1264(sp)
   11750:	1001001e 	bne	r2,zero,11b54 <___vfprintf_internal_r+0x11d8>
   11754:	008000f4 	movhi	r2,3
   11758:	10a02d04 	addi	r2,r2,-32588
   1175c:	48800015 	stw	r2,0(r9)
   11760:	00800044 	movi	r2,1
   11764:	48800115 	stw	r2,4(r9)
   11768:	4091883a 	add	r8,r8,r2
   1176c:	1887883a 	add	r3,r3,r2
   11770:	da011d15 	stw	r8,1140(sp)
   11774:	d8c11c15 	stw	r3,1136(sp)
   11778:	008001c4 	movi	r2,7
   1177c:	10c20316 	blt	r2,r3,11f8c <___vfprintf_internal_r+0x1610>
   11780:	4a400204 	addi	r9,r9,8
   11784:	d8812417 	ldw	r2,1168(sp)
   11788:	d8c13217 	ldw	r3,1224(sp)
   1178c:	10c00216 	blt	r2,r3,11798 <___vfprintf_internal_r+0xe1c>
   11790:	8080004c 	andi	r2,r16,1
   11794:	103f6826 	beq	r2,zero,11538 <___vfprintf_internal_r+0xbbc>
   11798:	d8c11c17 	ldw	r3,1136(sp)
   1179c:	d9013717 	ldw	r4,1244(sp)
   117a0:	00800044 	movi	r2,1
   117a4:	48800115 	stw	r2,4(r9)
   117a8:	49000015 	stw	r4,0(r9)
   117ac:	4091883a 	add	r8,r8,r2
   117b0:	1887883a 	add	r3,r3,r2
   117b4:	da011d15 	stw	r8,1140(sp)
   117b8:	d8c11c15 	stw	r3,1136(sp)
   117bc:	008001c4 	movi	r2,7
   117c0:	10c2ce16 	blt	r2,r3,122fc <___vfprintf_internal_r+0x1980>
   117c4:	4a400204 	addi	r9,r9,8
   117c8:	d8813217 	ldw	r2,1224(sp)
   117cc:	14bfffc4 	addi	r18,r2,-1
   117d0:	04bf590e 	bge	zero,r18,11538 <___vfprintf_internal_r+0xbbc>
   117d4:	04c00404 	movi	r19,16
   117d8:	d8c11c17 	ldw	r3,1136(sp)
   117dc:	050000f4 	movhi	r20,3
   117e0:	a5203184 	addi	r20,r20,-32570
   117e4:	9c818a0e 	bge	r19,r18,11e10 <___vfprintf_internal_r+0x1494>
   117e8:	058001c4 	movi	r22,7
   117ec:	ddc12917 	ldw	r23,1188(sp)
   117f0:	00000306 	br	11800 <___vfprintf_internal_r+0xe84>
   117f4:	4a400204 	addi	r9,r9,8
   117f8:	94bffc04 	addi	r18,r18,-16
   117fc:	9c81840e 	bge	r19,r18,11e10 <___vfprintf_internal_r+0x1494>
   11800:	4d000015 	stw	r20,0(r9)
   11804:	4cc00115 	stw	r19,4(r9)
   11808:	42000404 	addi	r8,r8,16
   1180c:	18c00044 	addi	r3,r3,1
   11810:	da011d15 	stw	r8,1140(sp)
   11814:	d8c11c15 	stw	r3,1136(sp)
   11818:	b0fff60e 	bge	r22,r3,117f4 <___vfprintf_internal_r+0xe78>
   1181c:	8809883a 	mov	r4,r17
   11820:	b80b883a 	mov	r5,r23
   11824:	d9811b04 	addi	r6,sp,1132
   11828:	00109480 	call	10948 <__sprint_r>
   1182c:	103d991e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11830:	da011d17 	ldw	r8,1140(sp)
   11834:	d8c11c17 	ldw	r3,1136(sp)
   11838:	da400404 	addi	r9,sp,16
   1183c:	003fee06 	br	117f8 <___vfprintf_internal_r+0xe7c>
   11840:	d8812e17 	ldw	r2,1208(sp)
   11844:	d9012817 	ldw	r4,1184(sp)
   11848:	112fc83a 	sub	r23,r2,r4
   1184c:	05ff000e 	bge	zero,r23,11450 <___vfprintf_internal_r+0xad4>
   11850:	07000404 	movi	fp,16
   11854:	050000f4 	movhi	r20,3
   11858:	a5203184 	addi	r20,r20,-32570
   1185c:	e5c01d0e 	bge	fp,r23,118d4 <___vfprintf_internal_r+0xf58>
   11860:	dc812a15 	stw	r18,1192(sp)
   11864:	058001c4 	movi	r22,7
   11868:	a025883a 	mov	r18,r20
   1186c:	8029883a 	mov	r20,r16
   11870:	dc012917 	ldw	r16,1188(sp)
   11874:	00000306 	br	11884 <___vfprintf_internal_r+0xf08>
   11878:	bdfffc04 	addi	r23,r23,-16
   1187c:	4a400204 	addi	r9,r9,8
   11880:	e5c0110e 	bge	fp,r23,118c8 <___vfprintf_internal_r+0xf4c>
   11884:	4c800015 	stw	r18,0(r9)
   11888:	4f000115 	stw	fp,4(r9)
   1188c:	42000404 	addi	r8,r8,16
   11890:	18c00044 	addi	r3,r3,1
   11894:	da011d15 	stw	r8,1140(sp)
   11898:	d8c11c15 	stw	r3,1136(sp)
   1189c:	b0fff60e 	bge	r22,r3,11878 <___vfprintf_internal_r+0xefc>
   118a0:	8809883a 	mov	r4,r17
   118a4:	800b883a 	mov	r5,r16
   118a8:	d9811b04 	addi	r6,sp,1132
   118ac:	00109480 	call	10948 <__sprint_r>
   118b0:	103d781e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   118b4:	bdfffc04 	addi	r23,r23,-16
   118b8:	da011d17 	ldw	r8,1140(sp)
   118bc:	d8c11c17 	ldw	r3,1136(sp)
   118c0:	da400404 	addi	r9,sp,16
   118c4:	e5ffef16 	blt	fp,r23,11884 <___vfprintf_internal_r+0xf08>
   118c8:	a021883a 	mov	r16,r20
   118cc:	9029883a 	mov	r20,r18
   118d0:	dc812a17 	ldw	r18,1192(sp)
   118d4:	4d000015 	stw	r20,0(r9)
   118d8:	4dc00115 	stw	r23,4(r9)
   118dc:	45d1883a 	add	r8,r8,r23
   118e0:	18c00044 	addi	r3,r3,1
   118e4:	da011d15 	stw	r8,1140(sp)
   118e8:	d8c11c15 	stw	r3,1136(sp)
   118ec:	008001c4 	movi	r2,7
   118f0:	10c13616 	blt	r2,r3,11dcc <___vfprintf_internal_r+0x1450>
   118f4:	4a400204 	addi	r9,r9,8
   118f8:	003ed506 	br	11450 <___vfprintf_internal_r+0xad4>
   118fc:	d9412917 	ldw	r5,1188(sp)
   11900:	8809883a 	mov	r4,r17
   11904:	d9811b04 	addi	r6,sp,1132
   11908:	00109480 	call	10948 <__sprint_r>
   1190c:	103f4226 	beq	r2,zero,11618 <___vfprintf_internal_r+0xc9c>
   11910:	003d6006 	br	10e94 <___vfprintf_internal_r+0x518>
   11914:	d9013217 	ldw	r4,1224(sp)
   11918:	00800044 	movi	r2,1
   1191c:	4cc00015 	stw	r19,0(r9)
   11920:	1101000e 	bge	r2,r4,11d24 <___vfprintf_internal_r+0x13a8>
   11924:	00800044 	movi	r2,1
   11928:	48800115 	stw	r2,4(r9)
   1192c:	4091883a 	add	r8,r8,r2
   11930:	1887883a 	add	r3,r3,r2
   11934:	da011d15 	stw	r8,1140(sp)
   11938:	d8c11c15 	stw	r3,1136(sp)
   1193c:	008001c4 	movi	r2,7
   11940:	10c10c16 	blt	r2,r3,11d74 <___vfprintf_internal_r+0x13f8>
   11944:	4a400204 	addi	r9,r9,8
   11948:	d8813717 	ldw	r2,1244(sp)
   1194c:	48800015 	stw	r2,0(r9)
   11950:	00800044 	movi	r2,1
   11954:	48800115 	stw	r2,4(r9)
   11958:	4091883a 	add	r8,r8,r2
   1195c:	1887883a 	add	r3,r3,r2
   11960:	da011d15 	stw	r8,1140(sp)
   11964:	d8c11c15 	stw	r3,1136(sp)
   11968:	008001c4 	movi	r2,7
   1196c:	10c10a16 	blt	r2,r3,11d98 <___vfprintf_internal_r+0x141c>
   11970:	4c800204 	addi	r18,r9,8
   11974:	d9013317 	ldw	r4,1228(sp)
   11978:	d9413417 	ldw	r5,1232(sp)
   1197c:	000d883a 	mov	r6,zero
   11980:	000f883a 	mov	r7,zero
   11984:	d8c13b15 	stw	r3,1260(sp)
   11988:	da013a15 	stw	r8,1256(sp)
   1198c:	00192e00 	call	192e0 <__nedf2>
   11990:	d8c13b17 	ldw	r3,1260(sp)
   11994:	da013a17 	ldw	r8,1256(sp)
   11998:	1000ba26 	beq	r2,zero,11c84 <___vfprintf_internal_r+0x1308>
   1199c:	d9013217 	ldw	r4,1224(sp)
   119a0:	9cc00044 	addi	r19,r19,1
   119a4:	94c00015 	stw	r19,0(r18)
   119a8:	20bfffc4 	addi	r2,r4,-1
   119ac:	90800115 	stw	r2,4(r18)
   119b0:	4091883a 	add	r8,r8,r2
   119b4:	18c00044 	addi	r3,r3,1
   119b8:	da011d15 	stw	r8,1140(sp)
   119bc:	d8c11c15 	stw	r3,1136(sp)
   119c0:	008001c4 	movi	r2,7
   119c4:	10c0e216 	blt	r2,r3,11d50 <___vfprintf_internal_r+0x13d4>
   119c8:	94800204 	addi	r18,r18,8
   119cc:	d9013517 	ldw	r4,1236(sp)
   119d0:	d8811fc4 	addi	r2,sp,1151
   119d4:	90800015 	stw	r2,0(r18)
   119d8:	91000115 	stw	r4,4(r18)
   119dc:	4111883a 	add	r8,r8,r4
   119e0:	18c00044 	addi	r3,r3,1
   119e4:	da011d15 	stw	r8,1140(sp)
   119e8:	d8c11c15 	stw	r3,1136(sp)
   119ec:	008001c4 	movi	r2,7
   119f0:	10ff2316 	blt	r2,r3,11680 <___vfprintf_internal_r+0xd04>
   119f4:	92400204 	addi	r9,r18,8
   119f8:	003ecf06 	br	11538 <___vfprintf_internal_r+0xbbc>
   119fc:	d9412917 	ldw	r5,1188(sp)
   11a00:	8809883a 	mov	r4,r17
   11a04:	d9811b04 	addi	r6,sp,1132
   11a08:	00109480 	call	10948 <__sprint_r>
   11a0c:	103d211e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11a10:	da011d17 	ldw	r8,1140(sp)
   11a14:	d8c11c17 	ldw	r3,1136(sp)
   11a18:	da400404 	addi	r9,sp,16
   11a1c:	003eba06 	br	11508 <___vfprintf_internal_r+0xb8c>
   11a20:	d9412917 	ldw	r5,1188(sp)
   11a24:	8809883a 	mov	r4,r17
   11a28:	d9811b04 	addi	r6,sp,1132
   11a2c:	00109480 	call	10948 <__sprint_r>
   11a30:	103d181e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11a34:	da011d17 	ldw	r8,1140(sp)
   11a38:	d8c11c17 	ldw	r3,1136(sp)
   11a3c:	da400404 	addi	r9,sp,16
   11a40:	003e8006 	br	11444 <___vfprintf_internal_r+0xac8>
   11a44:	d9412917 	ldw	r5,1188(sp)
   11a48:	8809883a 	mov	r4,r17
   11a4c:	d9811b04 	addi	r6,sp,1132
   11a50:	00109480 	call	10948 <__sprint_r>
   11a54:	103d0f1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11a58:	da011d17 	ldw	r8,1140(sp)
   11a5c:	d8c11c17 	ldw	r3,1136(sp)
   11a60:	da400404 	addi	r9,sp,16
   11a64:	003e6a06 	br	11410 <___vfprintf_internal_r+0xa94>
   11a68:	d9413617 	ldw	r5,1240(sp)
   11a6c:	d8810dc4 	addi	r2,sp,1079
   11a70:	b8c003cc 	andi	r3,r23,15
   11a74:	b008973a 	slli	r4,r22,28
   11a78:	28c7883a 	add	r3,r5,r3
   11a7c:	b82ed13a 	srli	r23,r23,4
   11a80:	18c00003 	ldbu	r3,0(r3)
   11a84:	b02cd13a 	srli	r22,r22,4
   11a88:	25eeb03a 	or	r23,r4,r23
   11a8c:	10c00005 	stb	r3,0(r2)
   11a90:	bd86b03a 	or	r3,r23,r22
   11a94:	1027883a 	mov	r19,r2
   11a98:	10bfffc4 	addi	r2,r2,-1
   11a9c:	183ff41e 	bne	r3,zero,11a70 <___vfprintf_internal_r+0x10f4>
   11aa0:	003f1a06 	br	1170c <___vfprintf_internal_r+0xd90>
   11aa4:	d8012b15 	stw	zero,1196(sp)
   11aa8:	dcc10e04 	addi	r19,sp,1080
   11aac:	003d3a06 	br	10f98 <___vfprintf_internal_r+0x61c>
   11ab0:	b0025426 	beq	r22,zero,12404 <___vfprintf_internal_r+0x1a88>
   11ab4:	b807883a 	mov	r3,r23
   11ab8:	d8810dc4 	addi	r2,sp,1079
   11abc:	882f883a 	mov	r23,r17
   11ac0:	04c00244 	movi	r19,9
   11ac4:	8023883a 	mov	r17,r16
   11ac8:	da412815 	stw	r9,1184(sp)
   11acc:	1821883a 	mov	r16,r3
   11ad0:	8009883a 	mov	r4,r16
   11ad4:	b00b883a 	mov	r5,r22
   11ad8:	01800284 	movi	r6,10
   11adc:	000f883a 	mov	r7,zero
   11ae0:	1029883a 	mov	r20,r2
   11ae4:	00183bc0 	call	183bc <__umoddi3>
   11ae8:	10800c04 	addi	r2,r2,48
   11aec:	8009883a 	mov	r4,r16
   11af0:	b00b883a 	mov	r5,r22
   11af4:	a0800005 	stb	r2,0(r20)
   11af8:	01800284 	movi	r6,10
   11afc:	000f883a 	mov	r7,zero
   11b00:	0017d6c0 	call	17d6c <__udivdi3>
   11b04:	1021883a 	mov	r16,r2
   11b08:	182d883a 	mov	r22,r3
   11b0c:	a0bfffc4 	addi	r2,r20,-1
   11b10:	183fef1e 	bne	r3,zero,11ad0 <___vfprintf_internal_r+0x1154>
   11b14:	9c3fee36 	bltu	r19,r16,11ad0 <___vfprintf_internal_r+0x1154>
   11b18:	da412817 	ldw	r9,1184(sp)
   11b1c:	8005883a 	mov	r2,r16
   11b20:	8821883a 	mov	r16,r17
   11b24:	b823883a 	mov	r17,r23
   11b28:	102f883a 	mov	r23,r2
   11b2c:	d8812717 	ldw	r2,1180(sp)
   11b30:	a4ffffc4 	addi	r19,r20,-1
   11b34:	bdc00c04 	addi	r23,r23,48
   11b38:	14c5c83a 	sub	r2,r2,r19
   11b3c:	a5ffffc5 	stb	r23,-1(r20)
   11b40:	d8812b15 	stw	r2,1196(sp)
   11b44:	003d1406 	br	10f98 <___vfprintf_internal_r+0x61c>
   11b48:	00c00044 	movi	r3,1
   11b4c:	bd84b03a 	or	r2,r23,r22
   11b50:	003d0306 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11b54:	dc812417 	ldw	r18,1168(sp)
   11b58:	0481140e 	bge	zero,r18,11fac <___vfprintf_internal_r+0x1630>
   11b5c:	d9013217 	ldw	r4,1224(sp)
   11b60:	4cc00015 	stw	r19,0(r9)
   11b64:	9100ec16 	blt	r18,r4,11f18 <___vfprintf_internal_r+0x159c>
   11b68:	49000115 	stw	r4,4(r9)
   11b6c:	4111883a 	add	r8,r8,r4
   11b70:	18c00044 	addi	r3,r3,1
   11b74:	da011d15 	stw	r8,1140(sp)
   11b78:	d8c11c15 	stw	r3,1136(sp)
   11b7c:	008001c4 	movi	r2,7
   11b80:	10c23616 	blt	r2,r3,1245c <___vfprintf_internal_r+0x1ae0>
   11b84:	4a400204 	addi	r9,r9,8
   11b88:	d8813217 	ldw	r2,1224(sp)
   11b8c:	90a5c83a 	sub	r18,r18,r2
   11b90:	04beae0e 	bge	zero,r18,1164c <___vfprintf_internal_r+0xcd0>
   11b94:	04c00404 	movi	r19,16
   11b98:	d8c11c17 	ldw	r3,1136(sp)
   11b9c:	050000f4 	movhi	r20,3
   11ba0:	a5203184 	addi	r20,r20,-32570
   11ba4:	9c81dd0e 	bge	r19,r18,1231c <___vfprintf_internal_r+0x19a0>
   11ba8:	058001c4 	movi	r22,7
   11bac:	ddc12917 	ldw	r23,1188(sp)
   11bb0:	00000306 	br	11bc0 <___vfprintf_internal_r+0x1244>
   11bb4:	4a400204 	addi	r9,r9,8
   11bb8:	94bffc04 	addi	r18,r18,-16
   11bbc:	9c81d70e 	bge	r19,r18,1231c <___vfprintf_internal_r+0x19a0>
   11bc0:	4d000015 	stw	r20,0(r9)
   11bc4:	4cc00115 	stw	r19,4(r9)
   11bc8:	42000404 	addi	r8,r8,16
   11bcc:	18c00044 	addi	r3,r3,1
   11bd0:	da011d15 	stw	r8,1140(sp)
   11bd4:	d8c11c15 	stw	r3,1136(sp)
   11bd8:	b0fff60e 	bge	r22,r3,11bb4 <___vfprintf_internal_r+0x1238>
   11bdc:	8809883a 	mov	r4,r17
   11be0:	b80b883a 	mov	r5,r23
   11be4:	d9811b04 	addi	r6,sp,1132
   11be8:	00109480 	call	10948 <__sprint_r>
   11bec:	103ca91e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11bf0:	da011d17 	ldw	r8,1140(sp)
   11bf4:	d8c11c17 	ldw	r3,1136(sp)
   11bf8:	da400404 	addi	r9,sp,16
   11bfc:	003fee06 	br	11bb8 <___vfprintf_internal_r+0x123c>
   11c00:	d9412917 	ldw	r5,1188(sp)
   11c04:	8809883a 	mov	r4,r17
   11c08:	d9811b04 	addi	r6,sp,1132
   11c0c:	00109480 	call	10948 <__sprint_r>
   11c10:	103ca01e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11c14:	da011d17 	ldw	r8,1140(sp)
   11c18:	d8c11c17 	ldw	r3,1136(sp)
   11c1c:	da400404 	addi	r9,sp,16
   11c20:	003dee06 	br	113dc <___vfprintf_internal_r+0xa60>
   11c24:	00c00084 	movi	r3,2
   11c28:	bd84b03a 	or	r2,r23,r22
   11c2c:	d8012585 	stb	zero,1174(sp)
   11c30:	003ccb06 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11c34:	8080040c 	andi	r2,r16,16
   11c38:	1000ae26 	beq	r2,zero,11ef4 <___vfprintf_internal_r+0x1578>
   11c3c:	d9012d17 	ldw	r4,1204(sp)
   11c40:	25c00017 	ldw	r23,0(r4)
   11c44:	21000104 	addi	r4,r4,4
   11c48:	d9012d15 	stw	r4,1204(sp)
   11c4c:	b82dd7fa 	srai	r22,r23,31
   11c50:	b005883a 	mov	r2,r22
   11c54:	003cb906 	br	10f3c <___vfprintf_internal_r+0x5c0>
   11c58:	8080040c 	andi	r2,r16,16
   11c5c:	10007026 	beq	r2,zero,11e20 <___vfprintf_internal_r+0x14a4>
   11c60:	d8812d17 	ldw	r2,1204(sp)
   11c64:	002d883a 	mov	r22,zero
   11c68:	00c00044 	movi	r3,1
   11c6c:	15c00017 	ldw	r23,0(r2)
   11c70:	10800104 	addi	r2,r2,4
   11c74:	d8812d15 	stw	r2,1204(sp)
   11c78:	d8012585 	stb	zero,1174(sp)
   11c7c:	b805883a 	mov	r2,r23
   11c80:	003cb706 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11c84:	d8813217 	ldw	r2,1224(sp)
   11c88:	14ffffc4 	addi	r19,r2,-1
   11c8c:	04ff4f0e 	bge	zero,r19,119cc <___vfprintf_internal_r+0x1050>
   11c90:	05800404 	movi	r22,16
   11c94:	050000f4 	movhi	r20,3
   11c98:	a5203184 	addi	r20,r20,-32570
   11c9c:	b4c0470e 	bge	r22,r19,11dbc <___vfprintf_internal_r+0x1440>
   11ca0:	05c001c4 	movi	r23,7
   11ca4:	df012917 	ldw	fp,1188(sp)
   11ca8:	00000306 	br	11cb8 <___vfprintf_internal_r+0x133c>
   11cac:	94800204 	addi	r18,r18,8
   11cb0:	9cfffc04 	addi	r19,r19,-16
   11cb4:	b4c0410e 	bge	r22,r19,11dbc <___vfprintf_internal_r+0x1440>
   11cb8:	95000015 	stw	r20,0(r18)
   11cbc:	95800115 	stw	r22,4(r18)
   11cc0:	42000404 	addi	r8,r8,16
   11cc4:	18c00044 	addi	r3,r3,1
   11cc8:	da011d15 	stw	r8,1140(sp)
   11ccc:	d8c11c15 	stw	r3,1136(sp)
   11cd0:	b8fff60e 	bge	r23,r3,11cac <___vfprintf_internal_r+0x1330>
   11cd4:	8809883a 	mov	r4,r17
   11cd8:	e00b883a 	mov	r5,fp
   11cdc:	d9811b04 	addi	r6,sp,1132
   11ce0:	00109480 	call	10948 <__sprint_r>
   11ce4:	103c6b1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11ce8:	da011d17 	ldw	r8,1140(sp)
   11cec:	d8c11c17 	ldw	r3,1136(sp)
   11cf0:	dc800404 	addi	r18,sp,16
   11cf4:	003fee06 	br	11cb0 <___vfprintf_internal_r+0x1334>
   11cf8:	8080040c 	andi	r2,r16,16
   11cfc:	10005326 	beq	r2,zero,11e4c <___vfprintf_internal_r+0x14d0>
   11d00:	d8c12d17 	ldw	r3,1204(sp)
   11d04:	002d883a 	mov	r22,zero
   11d08:	1dc00017 	ldw	r23,0(r3)
   11d0c:	18c00104 	addi	r3,r3,4
   11d10:	d8c12d15 	stw	r3,1204(sp)
   11d14:	b805883a 	mov	r2,r23
   11d18:	0007883a 	mov	r3,zero
   11d1c:	d8012585 	stb	zero,1174(sp)
   11d20:	003c8f06 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11d24:	8088703a 	and	r4,r16,r2
   11d28:	203efe1e 	bne	r4,zero,11924 <___vfprintf_internal_r+0xfa8>
   11d2c:	48800115 	stw	r2,4(r9)
   11d30:	42000044 	addi	r8,r8,1
   11d34:	18c00044 	addi	r3,r3,1
   11d38:	da011d15 	stw	r8,1140(sp)
   11d3c:	d8c11c15 	stw	r3,1136(sp)
   11d40:	008001c4 	movi	r2,7
   11d44:	10c00216 	blt	r2,r3,11d50 <___vfprintf_internal_r+0x13d4>
   11d48:	4c800204 	addi	r18,r9,8
   11d4c:	003f1f06 	br	119cc <___vfprintf_internal_r+0x1050>
   11d50:	d9412917 	ldw	r5,1188(sp)
   11d54:	8809883a 	mov	r4,r17
   11d58:	d9811b04 	addi	r6,sp,1132
   11d5c:	00109480 	call	10948 <__sprint_r>
   11d60:	103c4c1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11d64:	dc800404 	addi	r18,sp,16
   11d68:	da011d17 	ldw	r8,1140(sp)
   11d6c:	d8c11c17 	ldw	r3,1136(sp)
   11d70:	003f1606 	br	119cc <___vfprintf_internal_r+0x1050>
   11d74:	d9412917 	ldw	r5,1188(sp)
   11d78:	8809883a 	mov	r4,r17
   11d7c:	d9811b04 	addi	r6,sp,1132
   11d80:	00109480 	call	10948 <__sprint_r>
   11d84:	103c431e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11d88:	da011d17 	ldw	r8,1140(sp)
   11d8c:	d8c11c17 	ldw	r3,1136(sp)
   11d90:	da400404 	addi	r9,sp,16
   11d94:	003eec06 	br	11948 <___vfprintf_internal_r+0xfcc>
   11d98:	d9412917 	ldw	r5,1188(sp)
   11d9c:	8809883a 	mov	r4,r17
   11da0:	d9811b04 	addi	r6,sp,1132
   11da4:	00109480 	call	10948 <__sprint_r>
   11da8:	103c3a1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11dac:	da011d17 	ldw	r8,1140(sp)
   11db0:	d8c11c17 	ldw	r3,1136(sp)
   11db4:	dc800404 	addi	r18,sp,16
   11db8:	003eee06 	br	11974 <___vfprintf_internal_r+0xff8>
   11dbc:	95000015 	stw	r20,0(r18)
   11dc0:	94c00115 	stw	r19,4(r18)
   11dc4:	44d1883a 	add	r8,r8,r19
   11dc8:	003efa06 	br	119b4 <___vfprintf_internal_r+0x1038>
   11dcc:	d9412917 	ldw	r5,1188(sp)
   11dd0:	8809883a 	mov	r4,r17
   11dd4:	d9811b04 	addi	r6,sp,1132
   11dd8:	00109480 	call	10948 <__sprint_r>
   11ddc:	103c2d1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11de0:	da011d17 	ldw	r8,1140(sp)
   11de4:	d8c11c17 	ldw	r3,1136(sp)
   11de8:	da400404 	addi	r9,sp,16
   11dec:	003d9806 	br	11450 <___vfprintf_internal_r+0xad4>
   11df0:	8080100c 	andi	r2,r16,64
   11df4:	10011626 	beq	r2,zero,12250 <___vfprintf_internal_r+0x18d4>
   11df8:	d8c12d17 	ldw	r3,1204(sp)
   11dfc:	002d883a 	mov	r22,zero
   11e00:	1dc0000b 	ldhu	r23,0(r3)
   11e04:	18c00104 	addi	r3,r3,4
   11e08:	d8c12d15 	stw	r3,1204(sp)
   11e0c:	003cc106 	br	11114 <___vfprintf_internal_r+0x798>
   11e10:	4d000015 	stw	r20,0(r9)
   11e14:	4c800115 	stw	r18,4(r9)
   11e18:	4491883a 	add	r8,r8,r18
   11e1c:	003dc006 	br	11520 <___vfprintf_internal_r+0xba4>
   11e20:	8080100c 	andi	r2,r16,64
   11e24:	10010126 	beq	r2,zero,1222c <___vfprintf_internal_r+0x18b0>
   11e28:	d8c12d17 	ldw	r3,1204(sp)
   11e2c:	002d883a 	mov	r22,zero
   11e30:	1dc0000b 	ldhu	r23,0(r3)
   11e34:	18c00104 	addi	r3,r3,4
   11e38:	d8c12d15 	stw	r3,1204(sp)
   11e3c:	b805883a 	mov	r2,r23
   11e40:	00c00044 	movi	r3,1
   11e44:	d8012585 	stb	zero,1174(sp)
   11e48:	003c4506 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11e4c:	8080100c 	andi	r2,r16,64
   11e50:	10010526 	beq	r2,zero,12268 <___vfprintf_internal_r+0x18ec>
   11e54:	d9012d17 	ldw	r4,1204(sp)
   11e58:	002d883a 	mov	r22,zero
   11e5c:	0007883a 	mov	r3,zero
   11e60:	25c0000b 	ldhu	r23,0(r4)
   11e64:	21000104 	addi	r4,r4,4
   11e68:	d9012d15 	stw	r4,1204(sp)
   11e6c:	b805883a 	mov	r2,r23
   11e70:	d8012585 	stb	zero,1174(sp)
   11e74:	003c3a06 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11e78:	d8812d17 	ldw	r2,1204(sp)
   11e7c:	15800017 	ldw	r22,0(r2)
   11e80:	15000117 	ldw	r20,4(r2)
   11e84:	10800204 	addi	r2,r2,8
   11e88:	d8812d15 	stw	r2,1204(sp)
   11e8c:	dd813315 	stw	r22,1228(sp)
   11e90:	dd013415 	stw	r20,1232(sp)
   11e94:	003c5906 	br	10ffc <___vfprintf_internal_r+0x680>
   11e98:	00c00084 	movi	r3,2
   11e9c:	d8012585 	stb	zero,1174(sp)
   11ea0:	003c2f06 	br	10f60 <___vfprintf_internal_r+0x5e4>
   11ea4:	ac800007 	ldb	r18,0(r21)
   11ea8:	003b1006 	br	10aec <___vfprintf_internal_r+0x170>
   11eac:	8080040c 	andi	r2,r16,16
   11eb0:	1000091e 	bne	r2,zero,11ed8 <___vfprintf_internal_r+0x155c>
   11eb4:	8400100c 	andi	r16,r16,64
   11eb8:	80000726 	beq	r16,zero,11ed8 <___vfprintf_internal_r+0x155c>
   11ebc:	d8c12d17 	ldw	r3,1204(sp)
   11ec0:	d9012c17 	ldw	r4,1200(sp)
   11ec4:	18800017 	ldw	r2,0(r3)
   11ec8:	18c00104 	addi	r3,r3,4
   11ecc:	d8c12d15 	stw	r3,1204(sp)
   11ed0:	1100000d 	sth	r4,0(r2)
   11ed4:	003adf06 	br	10a54 <___vfprintf_internal_r+0xd8>
   11ed8:	d8c12d17 	ldw	r3,1204(sp)
   11edc:	d9012c17 	ldw	r4,1200(sp)
   11ee0:	18800017 	ldw	r2,0(r3)
   11ee4:	18c00104 	addi	r3,r3,4
   11ee8:	d8c12d15 	stw	r3,1204(sp)
   11eec:	11000015 	stw	r4,0(r2)
   11ef0:	003ad806 	br	10a54 <___vfprintf_internal_r+0xd8>
   11ef4:	8080100c 	andi	r2,r16,64
   11ef8:	1000c526 	beq	r2,zero,12210 <___vfprintf_internal_r+0x1894>
   11efc:	d8812d17 	ldw	r2,1204(sp)
   11f00:	15c0000f 	ldh	r23,0(r2)
   11f04:	10800104 	addi	r2,r2,4
   11f08:	d8812d15 	stw	r2,1204(sp)
   11f0c:	b82dd7fa 	srai	r22,r23,31
   11f10:	b005883a 	mov	r2,r22
   11f14:	003c0906 	br	10f3c <___vfprintf_internal_r+0x5c0>
   11f18:	4c800115 	stw	r18,4(r9)
   11f1c:	9211883a 	add	r8,r18,r8
   11f20:	18c00044 	addi	r3,r3,1
   11f24:	da011d15 	stw	r8,1140(sp)
   11f28:	d8c11c15 	stw	r3,1136(sp)
   11f2c:	008001c4 	movi	r2,7
   11f30:	10c14016 	blt	r2,r3,12434 <___vfprintf_internal_r+0x1ab8>
   11f34:	4a400204 	addi	r9,r9,8
   11f38:	d8813717 	ldw	r2,1244(sp)
   11f3c:	9ca7883a 	add	r19,r19,r18
   11f40:	48800015 	stw	r2,0(r9)
   11f44:	00800044 	movi	r2,1
   11f48:	48800115 	stw	r2,4(r9)
   11f4c:	4091883a 	add	r8,r8,r2
   11f50:	1887883a 	add	r3,r3,r2
   11f54:	da011d15 	stw	r8,1140(sp)
   11f58:	d8c11c15 	stw	r3,1136(sp)
   11f5c:	008001c4 	movi	r2,7
   11f60:	10c12c16 	blt	r2,r3,12414 <___vfprintf_internal_r+0x1a98>
   11f64:	4a400204 	addi	r9,r9,8
   11f68:	d9013217 	ldw	r4,1224(sp)
   11f6c:	da011d17 	ldw	r8,1140(sp)
   11f70:	d8c11c17 	ldw	r3,1136(sp)
   11f74:	24a5c83a 	sub	r18,r4,r18
   11f78:	4cc00015 	stw	r19,0(r9)
   11f7c:	003fa506 	br	11e14 <___vfprintf_internal_r+0x1498>
   11f80:	04c000f4 	movhi	r19,3
   11f84:	9ce01e04 	addi	r19,r19,-32648
   11f88:	003c2e06 	br	11044 <___vfprintf_internal_r+0x6c8>
   11f8c:	d9412917 	ldw	r5,1188(sp)
   11f90:	8809883a 	mov	r4,r17
   11f94:	d9811b04 	addi	r6,sp,1132
   11f98:	00109480 	call	10948 <__sprint_r>
   11f9c:	103bbd1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   11fa0:	da011d17 	ldw	r8,1140(sp)
   11fa4:	da400404 	addi	r9,sp,16
   11fa8:	003df606 	br	11784 <___vfprintf_internal_r+0xe08>
   11fac:	008000f4 	movhi	r2,3
   11fb0:	10a02d04 	addi	r2,r2,-32588
   11fb4:	48800015 	stw	r2,0(r9)
   11fb8:	00800044 	movi	r2,1
   11fbc:	48800115 	stw	r2,4(r9)
   11fc0:	4091883a 	add	r8,r8,r2
   11fc4:	1887883a 	add	r3,r3,r2
   11fc8:	da011d15 	stw	r8,1140(sp)
   11fcc:	d8c11c15 	stw	r3,1136(sp)
   11fd0:	008001c4 	movi	r2,7
   11fd4:	10c0bc16 	blt	r2,r3,122c8 <___vfprintf_internal_r+0x194c>
   11fd8:	4a400204 	addi	r9,r9,8
   11fdc:	9000041e 	bne	r18,zero,11ff0 <___vfprintf_internal_r+0x1674>
   11fe0:	d8c13217 	ldw	r3,1224(sp)
   11fe4:	1800021e 	bne	r3,zero,11ff0 <___vfprintf_internal_r+0x1674>
   11fe8:	8080004c 	andi	r2,r16,1
   11fec:	103d5226 	beq	r2,zero,11538 <___vfprintf_internal_r+0xbbc>
   11ff0:	d8c11c17 	ldw	r3,1136(sp)
   11ff4:	d9013717 	ldw	r4,1244(sp)
   11ff8:	00800044 	movi	r2,1
   11ffc:	48800115 	stw	r2,4(r9)
   12000:	49000015 	stw	r4,0(r9)
   12004:	4091883a 	add	r8,r8,r2
   12008:	1887883a 	add	r3,r3,r2
   1200c:	da011d15 	stw	r8,1140(sp)
   12010:	d8c11c15 	stw	r3,1136(sp)
   12014:	008001c4 	movi	r2,7
   12018:	10c14516 	blt	r2,r3,12530 <___vfprintf_internal_r+0x1bb4>
   1201c:	4a400204 	addi	r9,r9,8
   12020:	04a5c83a 	sub	r18,zero,r18
   12024:	0480d70e 	bge	zero,r18,12384 <___vfprintf_internal_r+0x1a08>
   12028:	05800404 	movi	r22,16
   1202c:	050000f4 	movhi	r20,3
   12030:	a5203184 	addi	r20,r20,-32570
   12034:	b480db0e 	bge	r22,r18,123a4 <___vfprintf_internal_r+0x1a28>
   12038:	05c001c4 	movi	r23,7
   1203c:	df012917 	ldw	fp,1188(sp)
   12040:	00000306 	br	12050 <___vfprintf_internal_r+0x16d4>
   12044:	4a400204 	addi	r9,r9,8
   12048:	94bffc04 	addi	r18,r18,-16
   1204c:	b480d50e 	bge	r22,r18,123a4 <___vfprintf_internal_r+0x1a28>
   12050:	4d000015 	stw	r20,0(r9)
   12054:	4d800115 	stw	r22,4(r9)
   12058:	42000404 	addi	r8,r8,16
   1205c:	18c00044 	addi	r3,r3,1
   12060:	da011d15 	stw	r8,1140(sp)
   12064:	d8c11c15 	stw	r3,1136(sp)
   12068:	b8fff60e 	bge	r23,r3,12044 <___vfprintf_internal_r+0x16c8>
   1206c:	8809883a 	mov	r4,r17
   12070:	e00b883a 	mov	r5,fp
   12074:	d9811b04 	addi	r6,sp,1132
   12078:	00109480 	call	10948 <__sprint_r>
   1207c:	103b851e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   12080:	da011d17 	ldw	r8,1140(sp)
   12084:	d8c11c17 	ldw	r3,1136(sp)
   12088:	da400404 	addi	r9,sp,16
   1208c:	003fee06 	br	12048 <___vfprintf_internal_r+0x16cc>
   12090:	da413c15 	stw	r9,1264(sp)
   12094:	00176680 	call	17668 <__isnand>
   12098:	da413c17 	ldw	r9,1264(sp)
   1209c:	10007e1e 	bne	r2,zero,12298 <___vfprintf_internal_r+0x191c>
   120a0:	00bfffc4 	movi	r2,-1
   120a4:	e0816a26 	beq	fp,r2,12650 <___vfprintf_internal_r+0x1cd4>
   120a8:	008019c4 	movi	r2,103
   120ac:	90816526 	beq	r18,r2,12644 <___vfprintf_internal_r+0x1cc8>
   120b0:	008011c4 	movi	r2,71
   120b4:	90816326 	beq	r18,r2,12644 <___vfprintf_internal_r+0x1cc8>
   120b8:	80c04014 	ori	r3,r16,256
   120bc:	d8c12a15 	stw	r3,1192(sp)
   120c0:	a0016516 	blt	r20,zero,12658 <___vfprintf_internal_r+0x1cdc>
   120c4:	d8012f05 	stb	zero,1212(sp)
   120c8:	00801984 	movi	r2,102
   120cc:	9080f226 	beq	r18,r2,12498 <___vfprintf_internal_r+0x1b1c>
   120d0:	00801184 	movi	r2,70
   120d4:	9080f026 	beq	r18,r2,12498 <___vfprintf_internal_r+0x1b1c>
   120d8:	00801944 	movi	r2,101
   120dc:	90818d26 	beq	r18,r2,12714 <___vfprintf_internal_r+0x1d98>
   120e0:	00801144 	movi	r2,69
   120e4:	90818b26 	beq	r18,r2,12714 <___vfprintf_internal_r+0x1d98>
   120e8:	e02f883a 	mov	r23,fp
   120ec:	d8812404 	addi	r2,sp,1168
   120f0:	d8800115 	stw	r2,4(sp)
   120f4:	d8812304 	addi	r2,sp,1164
   120f8:	d8800215 	stw	r2,8(sp)
   120fc:	d8812204 	addi	r2,sp,1160
   12100:	ddc00015 	stw	r23,0(sp)
   12104:	d8800315 	stw	r2,12(sp)
   12108:	8809883a 	mov	r4,r17
   1210c:	b00b883a 	mov	r5,r22
   12110:	a00d883a 	mov	r6,r20
   12114:	01c00084 	movi	r7,2
   12118:	da413c15 	stw	r9,1264(sp)
   1211c:	0012bcc0 	call	12bcc <_dtoa_r>
   12120:	1027883a 	mov	r19,r2
   12124:	008019c4 	movi	r2,103
   12128:	da413c17 	ldw	r9,1264(sp)
   1212c:	9081951e 	bne	r18,r2,12784 <___vfprintf_internal_r+0x1e08>
   12130:	8080004c 	andi	r2,r16,1
   12134:	10017926 	beq	r2,zero,1271c <___vfprintf_internal_r+0x1da0>
   12138:	00801184 	movi	r2,70
   1213c:	9dc7883a 	add	r3,r19,r23
   12140:	9080e626 	beq	r18,r2,124dc <___vfprintf_internal_r+0x1b60>
   12144:	b009883a 	mov	r4,r22
   12148:	a00b883a 	mov	r5,r20
   1214c:	000d883a 	mov	r6,zero
   12150:	000f883a 	mov	r7,zero
   12154:	d8c13b15 	stw	r3,1260(sp)
   12158:	da413c15 	stw	r9,1264(sp)
   1215c:	00192840 	call	19284 <__eqdf2>
   12160:	d8c13b17 	ldw	r3,1260(sp)
   12164:	da413c17 	ldw	r9,1264(sp)
   12168:	10000726 	beq	r2,zero,12188 <___vfprintf_internal_r+0x180c>
   1216c:	d8812217 	ldw	r2,1160(sp)
   12170:	10c18a2e 	bgeu	r2,r3,1279c <___vfprintf_internal_r+0x1e20>
   12174:	01000c04 	movi	r4,48
   12178:	11000005 	stb	r4,0(r2)
   1217c:	10800044 	addi	r2,r2,1
   12180:	d8812215 	stw	r2,1160(sp)
   12184:	10fffc1e 	bne	r2,r3,12178 <___vfprintf_internal_r+0x17fc>
   12188:	1cc7c83a 	sub	r3,r3,r19
   1218c:	d8c13215 	stw	r3,1224(sp)
   12190:	008019c4 	movi	r2,103
   12194:	9080fa26 	beq	r18,r2,12580 <___vfprintf_internal_r+0x1c04>
   12198:	008011c4 	movi	r2,71
   1219c:	9080f826 	beq	r18,r2,12580 <___vfprintf_internal_r+0x1c04>
   121a0:	00801984 	movi	r2,102
   121a4:	90818e1e 	bne	r18,r2,127e0 <___vfprintf_internal_r+0x1e64>
   121a8:	d8812417 	ldw	r2,1168(sp)
   121ac:	d8812b15 	stw	r2,1196(sp)
   121b0:	00817c0e 	bge	zero,r2,127a4 <___vfprintf_internal_r+0x1e28>
   121b4:	e000021e 	bne	fp,zero,121c0 <___vfprintf_internal_r+0x1844>
   121b8:	8400004c 	andi	r16,r16,1
   121bc:	80000426 	beq	r16,zero,121d0 <___vfprintf_internal_r+0x1854>
   121c0:	d8812b17 	ldw	r2,1196(sp)
   121c4:	e2000044 	addi	r8,fp,1
   121c8:	1205883a 	add	r2,r2,r8
   121cc:	d8812b15 	stw	r2,1196(sp)
   121d0:	d8812815 	stw	r2,1184(sp)
   121d4:	10010b16 	blt	r2,zero,12604 <___vfprintf_internal_r+0x1c88>
   121d8:	ddc12f07 	ldb	r23,1212(sp)
   121dc:	b800e426 	beq	r23,zero,12570 <___vfprintf_internal_r+0x1bf4>
   121e0:	00800b44 	movi	r2,45
   121e4:	d8812585 	stb	r2,1174(sp)
   121e8:	dc012a17 	ldw	r16,1192(sp)
   121ec:	d8013115 	stw	zero,1220(sp)
   121f0:	003b7306 	br	10fc0 <___vfprintf_internal_r+0x644>
   121f4:	d8812b17 	ldw	r2,1196(sp)
   121f8:	d8812815 	stw	r2,1184(sp)
   121fc:	10005716 	blt	r2,zero,1235c <___vfprintf_internal_r+0x19e0>
   12200:	d8812583 	ldbu	r2,1174(sp)
   12204:	ddc12d15 	stw	r23,1204(sp)
   12208:	d8013115 	stw	zero,1220(sp)
   1220c:	003b6806 	br	10fb0 <___vfprintf_internal_r+0x634>
   12210:	d8c12d17 	ldw	r3,1204(sp)
   12214:	1dc00017 	ldw	r23,0(r3)
   12218:	18c00104 	addi	r3,r3,4
   1221c:	d8c12d15 	stw	r3,1204(sp)
   12220:	b82dd7fa 	srai	r22,r23,31
   12224:	b005883a 	mov	r2,r22
   12228:	003b4406 	br	10f3c <___vfprintf_internal_r+0x5c0>
   1222c:	d9012d17 	ldw	r4,1204(sp)
   12230:	002d883a 	mov	r22,zero
   12234:	00c00044 	movi	r3,1
   12238:	25c00017 	ldw	r23,0(r4)
   1223c:	21000104 	addi	r4,r4,4
   12240:	d9012d15 	stw	r4,1204(sp)
   12244:	b805883a 	mov	r2,r23
   12248:	d8012585 	stb	zero,1174(sp)
   1224c:	003b4406 	br	10f60 <___vfprintf_internal_r+0x5e4>
   12250:	d9012d17 	ldw	r4,1204(sp)
   12254:	002d883a 	mov	r22,zero
   12258:	25c00017 	ldw	r23,0(r4)
   1225c:	21000104 	addi	r4,r4,4
   12260:	d9012d15 	stw	r4,1204(sp)
   12264:	003bab06 	br	11114 <___vfprintf_internal_r+0x798>
   12268:	d8812d17 	ldw	r2,1204(sp)
   1226c:	002d883a 	mov	r22,zero
   12270:	0007883a 	mov	r3,zero
   12274:	15c00017 	ldw	r23,0(r2)
   12278:	10800104 	addi	r2,r2,4
   1227c:	d8812d15 	stw	r2,1204(sp)
   12280:	d8012585 	stb	zero,1174(sp)
   12284:	b805883a 	mov	r2,r23
   12288:	003b3506 	br	10f60 <___vfprintf_internal_r+0x5e4>
   1228c:	00ffffc4 	movi	r3,-1
   12290:	b82b883a 	mov	r21,r23
   12294:	003a1606 	br	10af0 <___vfprintf_internal_r+0x174>
   12298:	008011c4 	movi	r2,71
   1229c:	1480b116 	blt	r2,r18,12564 <___vfprintf_internal_r+0x1be8>
   122a0:	04c000f4 	movhi	r19,3
   122a4:	9ce01f04 	addi	r19,r19,-32644
   122a8:	00c000c4 	movi	r3,3
   122ac:	00bfdfc4 	movi	r2,-129
   122b0:	80a0703a 	and	r16,r16,r2
   122b4:	d8c12815 	stw	r3,1184(sp)
   122b8:	d8812583 	ldbu	r2,1174(sp)
   122bc:	d8c12b15 	stw	r3,1196(sp)
   122c0:	d8013115 	stw	zero,1220(sp)
   122c4:	003b3a06 	br	10fb0 <___vfprintf_internal_r+0x634>
   122c8:	d9412917 	ldw	r5,1188(sp)
   122cc:	8809883a 	mov	r4,r17
   122d0:	d9811b04 	addi	r6,sp,1132
   122d4:	00109480 	call	10948 <__sprint_r>
   122d8:	103aee1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   122dc:	dc812417 	ldw	r18,1168(sp)
   122e0:	da011d17 	ldw	r8,1140(sp)
   122e4:	da400404 	addi	r9,sp,16
   122e8:	003f3c06 	br	11fdc <___vfprintf_internal_r+0x1660>
   122ec:	ad400044 	addi	r21,r21,1
   122f0:	84000814 	ori	r16,r16,32
   122f4:	14800047 	ldb	r18,1(r2)
   122f8:	0039fc06 	br	10aec <___vfprintf_internal_r+0x170>
   122fc:	d9412917 	ldw	r5,1188(sp)
   12300:	8809883a 	mov	r4,r17
   12304:	d9811b04 	addi	r6,sp,1132
   12308:	00109480 	call	10948 <__sprint_r>
   1230c:	103ae11e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   12310:	da011d17 	ldw	r8,1140(sp)
   12314:	da400404 	addi	r9,sp,16
   12318:	003d2b06 	br	117c8 <___vfprintf_internal_r+0xe4c>
   1231c:	4d000015 	stw	r20,0(r9)
   12320:	4c800115 	stw	r18,4(r9)
   12324:	4491883a 	add	r8,r8,r18
   12328:	18c00044 	addi	r3,r3,1
   1232c:	da011d15 	stw	r8,1140(sp)
   12330:	d8c11c15 	stw	r3,1136(sp)
   12334:	008001c4 	movi	r2,7
   12338:	10fcbd16 	blt	r2,r3,11630 <___vfprintf_internal_r+0xcb4>
   1233c:	4a400204 	addi	r9,r9,8
   12340:	003cc206 	br	1164c <___vfprintf_internal_r+0xcd0>
   12344:	da413c15 	stw	r9,1264(sp)
   12348:	00108bc0 	call	108bc <strlen>
   1234c:	d8812b15 	stw	r2,1196(sp)
   12350:	d8812815 	stw	r2,1184(sp)
   12354:	da413c17 	ldw	r9,1264(sp)
   12358:	103fa90e 	bge	r2,zero,12200 <___vfprintf_internal_r+0x1884>
   1235c:	d8012815 	stw	zero,1184(sp)
   12360:	003fa706 	br	12200 <___vfprintf_internal_r+0x1884>
   12364:	d9412917 	ldw	r5,1188(sp)
   12368:	8809883a 	mov	r4,r17
   1236c:	d9811b04 	addi	r6,sp,1132
   12370:	00109480 	call	10948 <__sprint_r>
   12374:	103ac71e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   12378:	da011d17 	ldw	r8,1140(sp)
   1237c:	d8c11c17 	ldw	r3,1136(sp)
   12380:	da400404 	addi	r9,sp,16
   12384:	d8813217 	ldw	r2,1224(sp)
   12388:	4cc00015 	stw	r19,0(r9)
   1238c:	48800115 	stw	r2,4(r9)
   12390:	4091883a 	add	r8,r8,r2
   12394:	003c6206 	br	11520 <___vfprintf_internal_r+0xba4>
   12398:	00800b44 	movi	r2,45
   1239c:	d8812585 	stb	r2,1174(sp)
   123a0:	003b2406 	br	11034 <___vfprintf_internal_r+0x6b8>
   123a4:	4d000015 	stw	r20,0(r9)
   123a8:	4c800115 	stw	r18,4(r9)
   123ac:	4491883a 	add	r8,r8,r18
   123b0:	18c00044 	addi	r3,r3,1
   123b4:	da011d15 	stw	r8,1140(sp)
   123b8:	d8c11c15 	stw	r3,1136(sp)
   123bc:	008001c4 	movi	r2,7
   123c0:	10ffe816 	blt	r2,r3,12364 <___vfprintf_internal_r+0x19e8>
   123c4:	4a400204 	addi	r9,r9,8
   123c8:	003fee06 	br	12384 <___vfprintf_internal_r+0x1a08>
   123cc:	d8c12b15 	stw	r3,1196(sp)
   123d0:	00800184 	movi	r2,6
   123d4:	10c0062e 	bgeu	r2,r3,123f0 <___vfprintf_internal_r+0x1a74>
   123d8:	d8812b15 	stw	r2,1196(sp)
   123dc:	d8812815 	stw	r2,1184(sp)
   123e0:	ddc12d15 	stw	r23,1204(sp)
   123e4:	04c000f4 	movhi	r19,3
   123e8:	9ce02b04 	addi	r19,r19,-32596
   123ec:	0039ca06 	br	10b18 <___vfprintf_internal_r+0x19c>
   123f0:	d8812b17 	ldw	r2,1196(sp)
   123f4:	d8812815 	stw	r2,1184(sp)
   123f8:	103ff90e 	bge	r2,zero,123e0 <___vfprintf_internal_r+0x1a64>
   123fc:	d8012815 	stw	zero,1184(sp)
   12400:	003ff706 	br	123e0 <___vfprintf_internal_r+0x1a64>
   12404:	00800244 	movi	r2,9
   12408:	15fdaa36 	bltu	r2,r23,11ab4 <___vfprintf_internal_r+0x1138>
   1240c:	dd010e04 	addi	r20,sp,1080
   12410:	003dc606 	br	11b2c <___vfprintf_internal_r+0x11b0>
   12414:	d9412917 	ldw	r5,1188(sp)
   12418:	8809883a 	mov	r4,r17
   1241c:	d9811b04 	addi	r6,sp,1132
   12420:	00109480 	call	10948 <__sprint_r>
   12424:	103a9b1e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   12428:	dc812417 	ldw	r18,1168(sp)
   1242c:	da400404 	addi	r9,sp,16
   12430:	003ecd06 	br	11f68 <___vfprintf_internal_r+0x15ec>
   12434:	d9412917 	ldw	r5,1188(sp)
   12438:	8809883a 	mov	r4,r17
   1243c:	d9811b04 	addi	r6,sp,1132
   12440:	00109480 	call	10948 <__sprint_r>
   12444:	103a931e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   12448:	dc812417 	ldw	r18,1168(sp)
   1244c:	da011d17 	ldw	r8,1140(sp)
   12450:	d8c11c17 	ldw	r3,1136(sp)
   12454:	da400404 	addi	r9,sp,16
   12458:	003eb706 	br	11f38 <___vfprintf_internal_r+0x15bc>
   1245c:	d9412917 	ldw	r5,1188(sp)
   12460:	8809883a 	mov	r4,r17
   12464:	d9811b04 	addi	r6,sp,1132
   12468:	00109480 	call	10948 <__sprint_r>
   1246c:	103a891e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   12470:	dc812417 	ldw	r18,1168(sp)
   12474:	da011d17 	ldw	r8,1140(sp)
   12478:	da400404 	addi	r9,sp,16
   1247c:	003dc206 	br	11b88 <___vfprintf_internal_r+0x120c>
   12480:	df012815 	stw	fp,1184(sp)
   12484:	d8812583 	ldbu	r2,1174(sp)
   12488:	df012b15 	stw	fp,1196(sp)
   1248c:	ddc12d15 	stw	r23,1204(sp)
   12490:	d8013115 	stw	zero,1220(sp)
   12494:	003ac606 	br	10fb0 <___vfprintf_internal_r+0x634>
   12498:	d8812404 	addi	r2,sp,1168
   1249c:	d8800115 	stw	r2,4(sp)
   124a0:	d8812304 	addi	r2,sp,1164
   124a4:	d8800215 	stw	r2,8(sp)
   124a8:	d8812204 	addi	r2,sp,1160
   124ac:	df000015 	stw	fp,0(sp)
   124b0:	d8800315 	stw	r2,12(sp)
   124b4:	8809883a 	mov	r4,r17
   124b8:	b00b883a 	mov	r5,r22
   124bc:	a00d883a 	mov	r6,r20
   124c0:	01c000c4 	movi	r7,3
   124c4:	da413c15 	stw	r9,1264(sp)
   124c8:	0012bcc0 	call	12bcc <_dtoa_r>
   124cc:	da413c17 	ldw	r9,1264(sp)
   124d0:	1027883a 	mov	r19,r2
   124d4:	1707883a 	add	r3,r2,fp
   124d8:	e02f883a 	mov	r23,fp
   124dc:	99000007 	ldb	r4,0(r19)
   124e0:	00800c04 	movi	r2,48
   124e4:	20800326 	beq	r4,r2,124f4 <___vfprintf_internal_r+0x1b78>
   124e8:	da812417 	ldw	r10,1168(sp)
   124ec:	1a87883a 	add	r3,r3,r10
   124f0:	003f1406 	br	12144 <___vfprintf_internal_r+0x17c8>
   124f4:	b009883a 	mov	r4,r22
   124f8:	a00b883a 	mov	r5,r20
   124fc:	000d883a 	mov	r6,zero
   12500:	000f883a 	mov	r7,zero
   12504:	d8c13b15 	stw	r3,1260(sp)
   12508:	da413c15 	stw	r9,1264(sp)
   1250c:	00192e00 	call	192e0 <__nedf2>
   12510:	d8c13b17 	ldw	r3,1260(sp)
   12514:	da413c17 	ldw	r9,1264(sp)
   12518:	103ff326 	beq	r2,zero,124e8 <___vfprintf_internal_r+0x1b6c>
   1251c:	00800044 	movi	r2,1
   12520:	15d5c83a 	sub	r10,r2,r23
   12524:	da812415 	stw	r10,1168(sp)
   12528:	1a87883a 	add	r3,r3,r10
   1252c:	003f0506 	br	12144 <___vfprintf_internal_r+0x17c8>
   12530:	d9412917 	ldw	r5,1188(sp)
   12534:	8809883a 	mov	r4,r17
   12538:	d9811b04 	addi	r6,sp,1132
   1253c:	00109480 	call	10948 <__sprint_r>
   12540:	103a541e 	bne	r2,zero,10e94 <___vfprintf_internal_r+0x518>
   12544:	dc812417 	ldw	r18,1168(sp)
   12548:	da011d17 	ldw	r8,1140(sp)
   1254c:	d8c11c17 	ldw	r3,1136(sp)
   12550:	da400404 	addi	r9,sp,16
   12554:	003eb206 	br	12020 <___vfprintf_internal_r+0x16a4>
   12558:	b82b883a 	mov	r21,r23
   1255c:	0007883a 	mov	r3,zero
   12560:	00396306 	br	10af0 <___vfprintf_internal_r+0x174>
   12564:	04c000f4 	movhi	r19,3
   12568:	9ce02004 	addi	r19,r19,-32640
   1256c:	003f4e06 	br	122a8 <___vfprintf_internal_r+0x192c>
   12570:	d8812583 	ldbu	r2,1174(sp)
   12574:	dc012a17 	ldw	r16,1192(sp)
   12578:	d8013115 	stw	zero,1220(sp)
   1257c:	003a8c06 	br	10fb0 <___vfprintf_internal_r+0x634>
   12580:	d8812417 	ldw	r2,1168(sp)
   12584:	d8812b15 	stw	r2,1196(sp)
   12588:	1029883a 	mov	r20,r2
   1258c:	00bfff44 	movi	r2,-3
   12590:	a0800116 	blt	r20,r2,12598 <___vfprintf_internal_r+0x1c1c>
   12594:	e5001d0e 	bge	fp,r20,1260c <___vfprintf_internal_r+0x1c90>
   12598:	94bfff84 	addi	r18,r18,-2
   1259c:	a53fffc4 	addi	r20,r20,-1
   125a0:	dd012415 	stw	r20,1168(sp)
   125a4:	dc811fc5 	stb	r18,1151(sp)
   125a8:	a0007216 	blt	r20,zero,12774 <___vfprintf_internal_r+0x1df8>
   125ac:	00800ac4 	movi	r2,43
   125b0:	d8812005 	stb	r2,1152(sp)
   125b4:	00800244 	movi	r2,9
   125b8:	15003516 	blt	r2,r20,12690 <___vfprintf_internal_r+0x1d14>
   125bc:	00800c04 	movi	r2,48
   125c0:	a5000c04 	addi	r20,r20,48
   125c4:	d8812045 	stb	r2,1153(sp)
   125c8:	dd012085 	stb	r20,1154(sp)
   125cc:	d8c120c4 	addi	r3,sp,1155
   125d0:	d8811fc4 	addi	r2,sp,1151
   125d4:	1885c83a 	sub	r2,r3,r2
   125d8:	d8c13217 	ldw	r3,1224(sp)
   125dc:	d8813515 	stw	r2,1236(sp)
   125e0:	1885883a 	add	r2,r3,r2
   125e4:	d8812b15 	stw	r2,1196(sp)
   125e8:	00800044 	movi	r2,1
   125ec:	10c0580e 	bge	r2,r3,12750 <___vfprintf_internal_r+0x1dd4>
   125f0:	d8812b17 	ldw	r2,1196(sp)
   125f4:	10800044 	addi	r2,r2,1
   125f8:	d8812b15 	stw	r2,1196(sp)
   125fc:	d8812815 	stw	r2,1184(sp)
   12600:	103ef50e 	bge	r2,zero,121d8 <___vfprintf_internal_r+0x185c>
   12604:	d8012815 	stw	zero,1184(sp)
   12608:	003ef306 	br	121d8 <___vfprintf_internal_r+0x185c>
   1260c:	d8812b17 	ldw	r2,1196(sp)
   12610:	d8c13217 	ldw	r3,1224(sp)
   12614:	10c01416 	blt	r2,r3,12668 <___vfprintf_internal_r+0x1cec>
   12618:	8400004c 	andi	r16,r16,1
   1261c:	80000326 	beq	r16,zero,1262c <___vfprintf_internal_r+0x1cb0>
   12620:	d8812b17 	ldw	r2,1196(sp)
   12624:	10800044 	addi	r2,r2,1
   12628:	d8812b15 	stw	r2,1196(sp)
   1262c:	d8812815 	stw	r2,1184(sp)
   12630:	10001416 	blt	r2,zero,12684 <___vfprintf_internal_r+0x1d08>
   12634:	048019c4 	movi	r18,103
   12638:	003ee706 	br	121d8 <___vfprintf_internal_r+0x185c>
   1263c:	d8012815 	stw	zero,1184(sp)
   12640:	003b1a06 	br	112ac <___vfprintf_internal_r+0x930>
   12644:	e03e9c1e 	bne	fp,zero,120b8 <___vfprintf_internal_r+0x173c>
   12648:	07000044 	movi	fp,1
   1264c:	003e9a06 	br	120b8 <___vfprintf_internal_r+0x173c>
   12650:	07000184 	movi	fp,6
   12654:	003e9806 	br	120b8 <___vfprintf_internal_r+0x173c>
   12658:	00c00b44 	movi	r3,45
   1265c:	a520003c 	xorhi	r20,r20,32768
   12660:	d8c12f05 	stb	r3,1212(sp)
   12664:	003e9806 	br	120c8 <___vfprintf_internal_r+0x174c>
   12668:	05003f0e 	bge	zero,r20,12768 <___vfprintf_internal_r+0x1dec>
   1266c:	05000044 	movi	r20,1
   12670:	d8c13217 	ldw	r3,1224(sp)
   12674:	a0e9883a 	add	r20,r20,r3
   12678:	dd012b15 	stw	r20,1196(sp)
   1267c:	dd012815 	stw	r20,1184(sp)
   12680:	a03fec0e 	bge	r20,zero,12634 <___vfprintf_internal_r+0x1cb8>
   12684:	d8012815 	stw	zero,1184(sp)
   12688:	048019c4 	movi	r18,103
   1268c:	003ed206 	br	121d8 <___vfprintf_internal_r+0x185c>
   12690:	d8c11f84 	addi	r3,sp,1150
   12694:	102f883a 	mov	r23,r2
   12698:	4839883a 	mov	fp,r9
   1269c:	a009883a 	mov	r4,r20
   126a0:	01400284 	movi	r5,10
   126a4:	182d883a 	mov	r22,r3
   126a8:	00107280 	call	10728 <__modsi3>
   126ac:	10800c04 	addi	r2,r2,48
   126b0:	a009883a 	mov	r4,r20
   126b4:	b0800005 	stb	r2,0(r22)
   126b8:	01400284 	movi	r5,10
   126bc:	00106d80 	call	106d8 <__divsi3>
   126c0:	1029883a 	mov	r20,r2
   126c4:	b0ffffc4 	addi	r3,r22,-1
   126c8:	b8bff416 	blt	r23,r2,1269c <___vfprintf_internal_r+0x1d20>
   126cc:	11400c04 	addi	r5,r2,48
   126d0:	b17fffc5 	stb	r5,-1(r22)
   126d4:	d8811fc4 	addi	r2,sp,1151
   126d8:	e013883a 	mov	r9,fp
   126dc:	18803e2e 	bgeu	r3,r2,127d8 <___vfprintf_internal_r+0x1e5c>
   126e0:	b007883a 	mov	r3,r22
   126e4:	d9012044 	addi	r4,sp,1153
   126e8:	00000206 	br	126f4 <___vfprintf_internal_r+0x1d78>
   126ec:	19400003 	ldbu	r5,0(r3)
   126f0:	18c00044 	addi	r3,r3,1
   126f4:	21400005 	stb	r5,0(r4)
   126f8:	21000044 	addi	r4,r4,1
   126fc:	10fffb1e 	bne	r2,r3,126ec <___vfprintf_internal_r+0x1d70>
   12700:	d8c12004 	addi	r3,sp,1152
   12704:	1d87c83a 	sub	r3,r3,r22
   12708:	d9012044 	addi	r4,sp,1153
   1270c:	20c7883a 	add	r3,r4,r3
   12710:	003fb006 	br	125d4 <___vfprintf_internal_r+0x1c58>
   12714:	e5c00044 	addi	r23,fp,1
   12718:	003e7406 	br	120ec <___vfprintf_internal_r+0x1770>
   1271c:	d8c12217 	ldw	r3,1160(sp)
   12720:	003e9906 	br	12188 <___vfprintf_internal_r+0x180c>
   12724:	d9012d17 	ldw	r4,1204(sp)
   12728:	ac800043 	ldbu	r18,1(r21)
   1272c:	b82b883a 	mov	r21,r23
   12730:	20c00017 	ldw	r3,0(r4)
   12734:	20800104 	addi	r2,r4,4
   12738:	d8812d15 	stw	r2,1204(sp)
   1273c:	18002116 	blt	r3,zero,127c4 <___vfprintf_internal_r+0x1e48>
   12740:	94803fcc 	andi	r18,r18,255
   12744:	9480201c 	xori	r18,r18,128
   12748:	94bfe004 	addi	r18,r18,-128
   1274c:	0038e706 	br	10aec <___vfprintf_internal_r+0x170>
   12750:	80a0703a 	and	r16,r16,r2
   12754:	803fa61e 	bne	r16,zero,125f0 <___vfprintf_internal_r+0x1c74>
   12758:	d8812b17 	ldw	r2,1196(sp)
   1275c:	d8812815 	stw	r2,1184(sp)
   12760:	103e9d0e 	bge	r2,zero,121d8 <___vfprintf_internal_r+0x185c>
   12764:	003fa706 	br	12604 <___vfprintf_internal_r+0x1c88>
   12768:	00800084 	movi	r2,2
   1276c:	1529c83a 	sub	r20,r2,r20
   12770:	003fbf06 	br	12670 <___vfprintf_internal_r+0x1cf4>
   12774:	00800b44 	movi	r2,45
   12778:	0529c83a 	sub	r20,zero,r20
   1277c:	d8812005 	stb	r2,1152(sp)
   12780:	003f8c06 	br	125b4 <___vfprintf_internal_r+0x1c38>
   12784:	008011c4 	movi	r2,71
   12788:	90be6926 	beq	r18,r2,12130 <___vfprintf_internal_r+0x17b4>
   1278c:	003e6a06 	br	12138 <___vfprintf_internal_r+0x17bc>
   12790:	00bfffc4 	movi	r2,-1
   12794:	d8812c15 	stw	r2,1200(sp)
   12798:	0039ad06 	br	10e50 <___vfprintf_internal_r+0x4d4>
   1279c:	1007883a 	mov	r3,r2
   127a0:	003e7906 	br	12188 <___vfprintf_internal_r+0x180c>
   127a4:	e000021e 	bne	fp,zero,127b0 <___vfprintf_internal_r+0x1e34>
   127a8:	8400004c 	andi	r16,r16,1
   127ac:	80000e26 	beq	r16,zero,127e8 <___vfprintf_internal_r+0x1e6c>
   127b0:	e7000084 	addi	fp,fp,2
   127b4:	df012b15 	stw	fp,1196(sp)
   127b8:	df012815 	stw	fp,1184(sp)
   127bc:	e03e860e 	bge	fp,zero,121d8 <___vfprintf_internal_r+0x185c>
   127c0:	003f9006 	br	12604 <___vfprintf_internal_r+0x1c88>
   127c4:	94803fcc 	andi	r18,r18,255
   127c8:	9480201c 	xori	r18,r18,128
   127cc:	00ffffc4 	movi	r3,-1
   127d0:	94bfe004 	addi	r18,r18,-128
   127d4:	0038c506 	br	10aec <___vfprintf_internal_r+0x170>
   127d8:	d8c12044 	addi	r3,sp,1153
   127dc:	003f7d06 	br	125d4 <___vfprintf_internal_r+0x1c58>
   127e0:	dd012417 	ldw	r20,1168(sp)
   127e4:	003f6d06 	br	1259c <___vfprintf_internal_r+0x1c20>
   127e8:	00c00044 	movi	r3,1
   127ec:	d8c12815 	stw	r3,1184(sp)
   127f0:	d8c12b15 	stw	r3,1196(sp)
   127f4:	003e7806 	br	121d8 <___vfprintf_internal_r+0x185c>

000127f8 <__vfprintf_internal>:
   127f8:	008000f4 	movhi	r2,3
   127fc:	10a76e04 	addi	r2,r2,-25160
   12800:	2007883a 	mov	r3,r4
   12804:	11000017 	ldw	r4,0(r2)
   12808:	2805883a 	mov	r2,r5
   1280c:	300f883a 	mov	r7,r6
   12810:	180b883a 	mov	r5,r3
   12814:	100d883a 	mov	r6,r2
   12818:	001097c1 	jmpi	1097c <___vfprintf_internal_r>

0001281c <__swsetup_r>:
   1281c:	008000f4 	movhi	r2,3
   12820:	10a76e04 	addi	r2,r2,-25160
   12824:	10800017 	ldw	r2,0(r2)
   12828:	defffd04 	addi	sp,sp,-12
   1282c:	dc400115 	stw	r17,4(sp)
   12830:	dc000015 	stw	r16,0(sp)
   12834:	dfc00215 	stw	ra,8(sp)
   12838:	2023883a 	mov	r17,r4
   1283c:	2821883a 	mov	r16,r5
   12840:	10000226 	beq	r2,zero,1284c <__swsetup_r+0x30>
   12844:	10c00e17 	ldw	r3,56(r2)
   12848:	18003d26 	beq	r3,zero,12940 <__swsetup_r+0x124>
   1284c:	8080030b 	ldhu	r2,12(r16)
   12850:	10c0020c 	andi	r3,r2,8
   12854:	18ffffcc 	andi	r3,r3,65535
   12858:	18e0001c 	xori	r3,r3,32768
   1285c:	18e00004 	addi	r3,r3,-32768
   12860:	18001226 	beq	r3,zero,128ac <__swsetup_r+0x90>
   12864:	80c00417 	ldw	r3,16(r16)
   12868:	18001f26 	beq	r3,zero,128e8 <__swsetup_r+0xcc>
   1286c:	1100004c 	andi	r4,r2,1
   12870:	2000261e 	bne	r4,zero,1290c <__swsetup_r+0xf0>
   12874:	1080008c 	andi	r2,r2,2
   12878:	10bfffcc 	andi	r2,r2,65535
   1287c:	10a0001c 	xori	r2,r2,32768
   12880:	10a00004 	addi	r2,r2,-32768
   12884:	1000311e 	bne	r2,zero,1294c <__swsetup_r+0x130>
   12888:	80800517 	ldw	r2,20(r16)
   1288c:	80800215 	stw	r2,8(r16)
   12890:	18002326 	beq	r3,zero,12920 <__swsetup_r+0x104>
   12894:	0005883a 	mov	r2,zero
   12898:	dfc00217 	ldw	ra,8(sp)
   1289c:	dc400117 	ldw	r17,4(sp)
   128a0:	dc000017 	ldw	r16,0(sp)
   128a4:	dec00304 	addi	sp,sp,12
   128a8:	f800283a 	ret
   128ac:	10c0040c 	andi	r3,r2,16
   128b0:	18ffffcc 	andi	r3,r3,65535
   128b4:	18e0001c 	xori	r3,r3,32768
   128b8:	18e00004 	addi	r3,r3,-32768
   128bc:	18001e26 	beq	r3,zero,12938 <__swsetup_r+0x11c>
   128c0:	10c0010c 	andi	r3,r2,4
   128c4:	18ffffcc 	andi	r3,r3,65535
   128c8:	18e0001c 	xori	r3,r3,32768
   128cc:	18e00004 	addi	r3,r3,-32768
   128d0:	1800211e 	bne	r3,zero,12958 <__swsetup_r+0x13c>
   128d4:	80c00417 	ldw	r3,16(r16)
   128d8:	11400214 	ori	r5,r2,8
   128dc:	8140030d 	sth	r5,12(r16)
   128e0:	2805883a 	mov	r2,r5
   128e4:	183fe11e 	bne	r3,zero,1286c <__swsetup_r+0x50>
   128e8:	1140a00c 	andi	r5,r2,640
   128ec:	01008004 	movi	r4,512
   128f0:	293fde26 	beq	r5,r4,1286c <__swsetup_r+0x50>
   128f4:	8809883a 	mov	r4,r17
   128f8:	800b883a 	mov	r5,r16
   128fc:	00152180 	call	15218 <__smakebuf_r>
   12900:	8080030b 	ldhu	r2,12(r16)
   12904:	80c00417 	ldw	r3,16(r16)
   12908:	003fd806 	br	1286c <__swsetup_r+0x50>
   1290c:	80800517 	ldw	r2,20(r16)
   12910:	80000215 	stw	zero,8(r16)
   12914:	0085c83a 	sub	r2,zero,r2
   12918:	80800615 	stw	r2,24(r16)
   1291c:	183fdd1e 	bne	r3,zero,12894 <__swsetup_r+0x78>
   12920:	8080030b 	ldhu	r2,12(r16)
   12924:	1080200c 	andi	r2,r2,128
   12928:	10bfffcc 	andi	r2,r2,65535
   1292c:	10a0001c 	xori	r2,r2,32768
   12930:	10a00004 	addi	r2,r2,-32768
   12934:	103fd826 	beq	r2,zero,12898 <__swsetup_r+0x7c>
   12938:	00bfffc4 	movi	r2,-1
   1293c:	003fd606 	br	12898 <__swsetup_r+0x7c>
   12940:	1009883a 	mov	r4,r2
   12944:	00144a40 	call	144a4 <__sinit>
   12948:	003fc006 	br	1284c <__swsetup_r+0x30>
   1294c:	0005883a 	mov	r2,zero
   12950:	80800215 	stw	r2,8(r16)
   12954:	003fce06 	br	12890 <__swsetup_r+0x74>
   12958:	81400c17 	ldw	r5,48(r16)
   1295c:	28000626 	beq	r5,zero,12978 <__swsetup_r+0x15c>
   12960:	80c01004 	addi	r3,r16,64
   12964:	28c00326 	beq	r5,r3,12974 <__swsetup_r+0x158>
   12968:	8809883a 	mov	r4,r17
   1296c:	00148280 	call	14828 <_free_r>
   12970:	8080030b 	ldhu	r2,12(r16)
   12974:	80000c15 	stw	zero,48(r16)
   12978:	80c00417 	ldw	r3,16(r16)
   1297c:	013ff6c4 	movi	r4,-37
   12980:	2084703a 	and	r2,r4,r2
   12984:	80000115 	stw	zero,4(r16)
   12988:	80c00015 	stw	r3,0(r16)
   1298c:	003fd206 	br	128d8 <__swsetup_r+0xbc>

00012990 <quorem>:
   12990:	defff204 	addi	sp,sp,-56
   12994:	dd000815 	stw	r20,32(sp)
   12998:	20800417 	ldw	r2,16(r4)
   1299c:	2d000417 	ldw	r20,16(r5)
   129a0:	dcc00715 	stw	r19,28(sp)
   129a4:	dfc00d15 	stw	ra,52(sp)
   129a8:	df000c15 	stw	fp,48(sp)
   129ac:	ddc00b15 	stw	r23,44(sp)
   129b0:	dd800a15 	stw	r22,40(sp)
   129b4:	dd400915 	stw	r21,36(sp)
   129b8:	dc800615 	stw	r18,24(sp)
   129bc:	dc400515 	stw	r17,20(sp)
   129c0:	dc000415 	stw	r16,16(sp)
   129c4:	d9400015 	stw	r5,0(sp)
   129c8:	2027883a 	mov	r19,r4
   129cc:	15007d16 	blt	r2,r20,12bc4 <quorem+0x234>
   129d0:	a0800104 	addi	r2,r20,4
   129d4:	1085883a 	add	r2,r2,r2
   129d8:	1085883a 	add	r2,r2,r2
   129dc:	28ad883a 	add	r22,r5,r2
   129e0:	2085883a 	add	r2,r4,r2
   129e4:	10800017 	ldw	r2,0(r2)
   129e8:	b1400017 	ldw	r5,0(r22)
   129ec:	a53fffc4 	addi	r20,r20,-1
   129f0:	1009883a 	mov	r4,r2
   129f4:	29400044 	addi	r5,r5,1
   129f8:	d8800115 	stw	r2,4(sp)
   129fc:	00107840 	call	10784 <__udivsi3>
   12a00:	1025883a 	mov	r18,r2
   12a04:	d8800017 	ldw	r2,0(sp)
   12a08:	9f000504 	addi	fp,r19,20
   12a0c:	14000504 	addi	r16,r2,20
   12a10:	90003626 	beq	r18,zero,12aec <quorem+0x15c>
   12a14:	802b883a 	mov	r21,r16
   12a18:	e023883a 	mov	r17,fp
   12a1c:	0007883a 	mov	r3,zero
   12a20:	002f883a 	mov	r23,zero
   12a24:	a9800017 	ldw	r6,0(r21)
   12a28:	900b883a 	mov	r5,r18
   12a2c:	d8c00315 	stw	r3,12(sp)
   12a30:	313fffcc 	andi	r4,r6,65535
   12a34:	d9800215 	stw	r6,8(sp)
   12a38:	00107940 	call	10794 <__mulsi3>
   12a3c:	d9800217 	ldw	r6,8(sp)
   12a40:	d8c00317 	ldw	r3,12(sp)
   12a44:	900b883a 	mov	r5,r18
   12a48:	3008d43a 	srli	r4,r6,16
   12a4c:	1887883a 	add	r3,r3,r2
   12a50:	d8c00315 	stw	r3,12(sp)
   12a54:	00107940 	call	10794 <__mulsi3>
   12a58:	89400017 	ldw	r5,0(r17)
   12a5c:	d8c00317 	ldw	r3,12(sp)
   12a60:	ad400104 	addi	r21,r21,4
   12a64:	293fffcc 	andi	r4,r5,65535
   12a68:	1810d43a 	srli	r8,r3,16
   12a6c:	25c9883a 	add	r4,r4,r23
   12a70:	18ffffcc 	andi	r3,r3,65535
   12a74:	20c9c83a 	sub	r4,r4,r3
   12a78:	280cd43a 	srli	r6,r5,16
   12a7c:	4085883a 	add	r2,r8,r2
   12a80:	2007d43a 	srai	r3,r4,16
   12a84:	117fffcc 	andi	r5,r2,65535
   12a88:	314bc83a 	sub	r5,r6,r5
   12a8c:	28cb883a 	add	r5,r5,r3
   12a90:	8940008d 	sth	r5,2(r17)
   12a94:	8900000d 	sth	r4,0(r17)
   12a98:	1006d43a 	srli	r3,r2,16
   12a9c:	282fd43a 	srai	r23,r5,16
   12aa0:	8c400104 	addi	r17,r17,4
   12aa4:	b57fdf2e 	bgeu	r22,r21,12a24 <quorem+0x94>
   12aa8:	d8c00117 	ldw	r3,4(sp)
   12aac:	18000f1e 	bne	r3,zero,12aec <quorem+0x15c>
   12ab0:	a0800144 	addi	r2,r20,5
   12ab4:	1085883a 	add	r2,r2,r2
   12ab8:	1085883a 	add	r2,r2,r2
   12abc:	9887883a 	add	r3,r19,r2
   12ac0:	18bfff04 	addi	r2,r3,-4
   12ac4:	e080082e 	bgeu	fp,r2,12ae8 <quorem+0x158>
   12ac8:	18ffff17 	ldw	r3,-4(r3)
   12acc:	18000326 	beq	r3,zero,12adc <quorem+0x14c>
   12ad0:	00000506 	br	12ae8 <quorem+0x158>
   12ad4:	10c00017 	ldw	r3,0(r2)
   12ad8:	1800031e 	bne	r3,zero,12ae8 <quorem+0x158>
   12adc:	10bfff04 	addi	r2,r2,-4
   12ae0:	a53fffc4 	addi	r20,r20,-1
   12ae4:	e0bffb36 	bltu	fp,r2,12ad4 <quorem+0x144>
   12ae8:	9d000415 	stw	r20,16(r19)
   12aec:	d9400017 	ldw	r5,0(sp)
   12af0:	9809883a 	mov	r4,r19
   12af4:	00169300 	call	16930 <__mcmp>
   12af8:	10002516 	blt	r2,zero,12b90 <quorem+0x200>
   12afc:	94800044 	addi	r18,r18,1
   12b00:	e007883a 	mov	r3,fp
   12b04:	000d883a 	mov	r6,zero
   12b08:	18800017 	ldw	r2,0(r3)
   12b0c:	82000017 	ldw	r8,0(r16)
   12b10:	84000104 	addi	r16,r16,4
   12b14:	11ffffcc 	andi	r7,r2,65535
   12b18:	413fffcc 	andi	r4,r8,65535
   12b1c:	398d883a 	add	r6,r7,r6
   12b20:	310fc83a 	sub	r7,r6,r4
   12b24:	4010d43a 	srli	r8,r8,16
   12b28:	100cd43a 	srli	r6,r2,16
   12b2c:	3809d43a 	srai	r4,r7,16
   12b30:	19c0000d 	sth	r7,0(r3)
   12b34:	320dc83a 	sub	r6,r6,r8
   12b38:	310d883a 	add	r6,r6,r4
   12b3c:	1980008d 	sth	r6,2(r3)
   12b40:	300dd43a 	srai	r6,r6,16
   12b44:	18c00104 	addi	r3,r3,4
   12b48:	b43fef2e 	bgeu	r22,r16,12b08 <quorem+0x178>
   12b4c:	a0800144 	addi	r2,r20,5
   12b50:	1085883a 	add	r2,r2,r2
   12b54:	1085883a 	add	r2,r2,r2
   12b58:	9885883a 	add	r2,r19,r2
   12b5c:	10c00017 	ldw	r3,0(r2)
   12b60:	18000b1e 	bne	r3,zero,12b90 <quorem+0x200>
   12b64:	10ffff04 	addi	r3,r2,-4
   12b68:	e0c0082e 	bgeu	fp,r3,12b8c <quorem+0x1fc>
   12b6c:	10bfff17 	ldw	r2,-4(r2)
   12b70:	10000326 	beq	r2,zero,12b80 <quorem+0x1f0>
   12b74:	00000506 	br	12b8c <quorem+0x1fc>
   12b78:	18800017 	ldw	r2,0(r3)
   12b7c:	1000031e 	bne	r2,zero,12b8c <quorem+0x1fc>
   12b80:	18ffff04 	addi	r3,r3,-4
   12b84:	a53fffc4 	addi	r20,r20,-1
   12b88:	e0fffb36 	bltu	fp,r3,12b78 <quorem+0x1e8>
   12b8c:	9d000415 	stw	r20,16(r19)
   12b90:	9005883a 	mov	r2,r18
   12b94:	dfc00d17 	ldw	ra,52(sp)
   12b98:	df000c17 	ldw	fp,48(sp)
   12b9c:	ddc00b17 	ldw	r23,44(sp)
   12ba0:	dd800a17 	ldw	r22,40(sp)
   12ba4:	dd400917 	ldw	r21,36(sp)
   12ba8:	dd000817 	ldw	r20,32(sp)
   12bac:	dcc00717 	ldw	r19,28(sp)
   12bb0:	dc800617 	ldw	r18,24(sp)
   12bb4:	dc400517 	ldw	r17,20(sp)
   12bb8:	dc000417 	ldw	r16,16(sp)
   12bbc:	dec00e04 	addi	sp,sp,56
   12bc0:	f800283a 	ret
   12bc4:	0005883a 	mov	r2,zero
   12bc8:	003ff206 	br	12b94 <quorem+0x204>

00012bcc <_dtoa_r>:
   12bcc:	20801017 	ldw	r2,64(r4)
   12bd0:	deffdf04 	addi	sp,sp,-132
   12bd4:	dcc01a15 	stw	r19,104(sp)
   12bd8:	dc801915 	stw	r18,100(sp)
   12bdc:	dc401815 	stw	r17,96(sp)
   12be0:	dc001715 	stw	r16,92(sp)
   12be4:	dfc02015 	stw	ra,128(sp)
   12be8:	df001f15 	stw	fp,124(sp)
   12bec:	ddc01e15 	stw	r23,120(sp)
   12bf0:	dd801d15 	stw	r22,116(sp)
   12bf4:	dd401c15 	stw	r21,112(sp)
   12bf8:	dd001b15 	stw	r20,108(sp)
   12bfc:	d9400315 	stw	r5,12(sp)
   12c00:	d9c00415 	stw	r7,16(sp)
   12c04:	2021883a 	mov	r16,r4
   12c08:	3025883a 	mov	r18,r6
   12c0c:	dcc02317 	ldw	r19,140(sp)
   12c10:	3023883a 	mov	r17,r6
   12c14:	10000826 	beq	r2,zero,12c38 <_dtoa_r+0x6c>
   12c18:	20c01117 	ldw	r3,68(r4)
   12c1c:	01800044 	movi	r6,1
   12c20:	100b883a 	mov	r5,r2
   12c24:	30cc983a 	sll	r6,r6,r3
   12c28:	10c00115 	stw	r3,4(r2)
   12c2c:	11800215 	stw	r6,8(r2)
   12c30:	001608c0 	call	1608c <_Bfree>
   12c34:	80001015 	stw	zero,64(r16)
   12c38:	90002f16 	blt	r18,zero,12cf8 <_dtoa_r+0x12c>
   12c3c:	98000015 	stw	zero,0(r19)
   12c40:	90dffc2c 	andhi	r3,r18,32752
   12c44:	009ffc34 	movhi	r2,32752
   12c48:	18801c26 	beq	r3,r2,12cbc <_dtoa_r+0xf0>
   12c4c:	d9000317 	ldw	r4,12(sp)
   12c50:	880b883a 	mov	r5,r17
   12c54:	000d883a 	mov	r6,zero
   12c58:	000f883a 	mov	r7,zero
   12c5c:	00192840 	call	19284 <__eqdf2>
   12c60:	10002c1e 	bne	r2,zero,12d14 <_dtoa_r+0x148>
   12c64:	d9002217 	ldw	r4,136(sp)
   12c68:	d9c02417 	ldw	r7,144(sp)
   12c6c:	00800044 	movi	r2,1
   12c70:	20800015 	stw	r2,0(r4)
   12c74:	38019426 	beq	r7,zero,132c8 <_dtoa_r+0x6fc>
   12c78:	008000f4 	movhi	r2,3
   12c7c:	10a02d44 	addi	r2,r2,-32587
   12c80:	38800015 	stw	r2,0(r7)
   12c84:	15ffffc4 	addi	r23,r2,-1
   12c88:	b805883a 	mov	r2,r23
   12c8c:	dfc02017 	ldw	ra,128(sp)
   12c90:	df001f17 	ldw	fp,124(sp)
   12c94:	ddc01e17 	ldw	r23,120(sp)
   12c98:	dd801d17 	ldw	r22,116(sp)
   12c9c:	dd401c17 	ldw	r21,112(sp)
   12ca0:	dd001b17 	ldw	r20,108(sp)
   12ca4:	dcc01a17 	ldw	r19,104(sp)
   12ca8:	dc801917 	ldw	r18,100(sp)
   12cac:	dc401817 	ldw	r17,96(sp)
   12cb0:	dc001717 	ldw	r16,92(sp)
   12cb4:	dec02104 	addi	sp,sp,132
   12cb8:	f800283a 	ret
   12cbc:	d8c02217 	ldw	r3,136(sp)
   12cc0:	d9000317 	ldw	r4,12(sp)
   12cc4:	0089c3c4 	movi	r2,9999
   12cc8:	18800015 	stw	r2,0(r3)
   12ccc:	20016c26 	beq	r4,zero,13280 <_dtoa_r+0x6b4>
   12cd0:	05c000f4 	movhi	r23,3
   12cd4:	bde03904 	addi	r23,r23,-32540
   12cd8:	d9c02417 	ldw	r7,144(sp)
   12cdc:	383fea26 	beq	r7,zero,12c88 <_dtoa_r+0xbc>
   12ce0:	b88000c7 	ldb	r2,3(r23)
   12ce4:	10016d1e 	bne	r2,zero,1329c <_dtoa_r+0x6d0>
   12ce8:	b88000c4 	addi	r2,r23,3
   12cec:	d8c02417 	ldw	r3,144(sp)
   12cf0:	18800015 	stw	r2,0(r3)
   12cf4:	003fe406 	br	12c88 <_dtoa_r+0xbc>
   12cf8:	04600034 	movhi	r17,32768
   12cfc:	8c7fffc4 	addi	r17,r17,-1
   12d00:	9462703a 	and	r17,r18,r17
   12d04:	00800044 	movi	r2,1
   12d08:	98800015 	stw	r2,0(r19)
   12d0c:	8825883a 	mov	r18,r17
   12d10:	003fcb06 	br	12c40 <_dtoa_r+0x74>
   12d14:	d9400317 	ldw	r5,12(sp)
   12d18:	9028d53a 	srli	r20,r18,20
   12d1c:	d8800204 	addi	r2,sp,8
   12d20:	d8800015 	stw	r2,0(sp)
   12d24:	8009883a 	mov	r4,r16
   12d28:	880d883a 	mov	r6,r17
   12d2c:	d9c00104 	addi	r7,sp,4
   12d30:	0016cd80 	call	16cd8 <__d2b>
   12d34:	a501ffcc 	andi	r20,r20,2047
   12d38:	1039883a 	mov	fp,r2
   12d3c:	a001591e 	bne	r20,zero,132a4 <_dtoa_r+0x6d8>
   12d40:	dd400217 	ldw	r21,8(sp)
   12d44:	dd000117 	ldw	r20,4(sp)
   12d48:	00befbc4 	movi	r2,-1041
   12d4c:	ad29883a 	add	r20,r21,r20
   12d50:	a082d216 	blt	r20,r2,1389c <_dtoa_r+0xcd0>
   12d54:	d8c00317 	ldw	r3,12(sp)
   12d58:	013f0384 	movi	r4,-1010
   12d5c:	2509c83a 	sub	r4,r4,r20
   12d60:	a0810484 	addi	r2,r20,1042
   12d64:	9124983a 	sll	r18,r18,r4
   12d68:	1884d83a 	srl	r2,r3,r2
   12d6c:	9088b03a 	or	r4,r18,r2
   12d70:	00196080 	call	19608 <__floatunsidf>
   12d74:	1009883a 	mov	r4,r2
   12d78:	017f8434 	movhi	r5,65040
   12d7c:	00800044 	movi	r2,1
   12d80:	194b883a 	add	r5,r3,r5
   12d84:	a53fffc4 	addi	r20,r20,-1
   12d88:	d8800f15 	stw	r2,60(sp)
   12d8c:	000d883a 	mov	r6,zero
   12d90:	01cffe34 	movhi	r7,16376
   12d94:	0018d8c0 	call	18d8c <__subdf3>
   12d98:	1009883a 	mov	r4,r2
   12d9c:	180b883a 	mov	r5,r3
   12da0:	0198dbf4 	movhi	r6,25455
   12da4:	3190d844 	addi	r6,r6,17249
   12da8:	01cff4f4 	movhi	r7,16339
   12dac:	39e1e9c4 	addi	r7,r7,-30809
   12db0:	0018dec0 	call	18dec <__muldf3>
   12db4:	180b883a 	mov	r5,r3
   12db8:	01a2d874 	movhi	r6,35681
   12dbc:	31b22cc4 	addi	r6,r6,-14157
   12dc0:	01cff1f4 	movhi	r7,16327
   12dc4:	39e28a04 	addi	r7,r7,-30168
   12dc8:	1009883a 	mov	r4,r2
   12dcc:	0018d380 	call	18d38 <__adddf3>
   12dd0:	a009883a 	mov	r4,r20
   12dd4:	1027883a 	mov	r19,r2
   12dd8:	1825883a 	mov	r18,r3
   12ddc:	00194600 	call	19460 <__floatsidf>
   12de0:	1009883a 	mov	r4,r2
   12de4:	180b883a 	mov	r5,r3
   12de8:	019427f4 	movhi	r6,20639
   12dec:	319e7ec4 	addi	r6,r6,31227
   12df0:	01cff4f4 	movhi	r7,16339
   12df4:	39d104c4 	addi	r7,r7,17427
   12df8:	0018dec0 	call	18dec <__muldf3>
   12dfc:	9809883a 	mov	r4,r19
   12e00:	900b883a 	mov	r5,r18
   12e04:	100d883a 	mov	r6,r2
   12e08:	180f883a 	mov	r7,r3
   12e0c:	0018d380 	call	18d38 <__adddf3>
   12e10:	1009883a 	mov	r4,r2
   12e14:	180b883a 	mov	r5,r3
   12e18:	1027883a 	mov	r19,r2
   12e1c:	1825883a 	mov	r18,r3
   12e20:	00195340 	call	19534 <__fixdfsi>
   12e24:	9809883a 	mov	r4,r19
   12e28:	900b883a 	mov	r5,r18
   12e2c:	000d883a 	mov	r6,zero
   12e30:	000f883a 	mov	r7,zero
   12e34:	d8800615 	stw	r2,24(sp)
   12e38:	00194040 	call	19404 <__ltdf2>
   12e3c:	10027e16 	blt	r2,zero,13838 <_dtoa_r+0xc6c>
   12e40:	d8c00617 	ldw	r3,24(sp)
   12e44:	00800584 	movi	r2,22
   12e48:	10c26c36 	bltu	r2,r3,137fc <_dtoa_r+0xc30>
   12e4c:	180490fa 	slli	r2,r3,3
   12e50:	00c000f4 	movhi	r3,3
   12e54:	18e05f04 	addi	r3,r3,-32388
   12e58:	d9800317 	ldw	r6,12(sp)
   12e5c:	1885883a 	add	r2,r3,r2
   12e60:	11000017 	ldw	r4,0(r2)
   12e64:	11400117 	ldw	r5,4(r2)
   12e68:	880f883a 	mov	r7,r17
   12e6c:	001933c0 	call	1933c <__gtdf2>
   12e70:	00828f0e 	bge	zero,r2,138b0 <_dtoa_r+0xce4>
   12e74:	d8800617 	ldw	r2,24(sp)
   12e78:	d8000d15 	stw	zero,52(sp)
   12e7c:	10bfffc4 	addi	r2,r2,-1
   12e80:	d8800615 	stw	r2,24(sp)
   12e84:	ad29c83a 	sub	r20,r21,r20
   12e88:	a53fffc4 	addi	r20,r20,-1
   12e8c:	a0026616 	blt	r20,zero,13828 <_dtoa_r+0xc5c>
   12e90:	dd000715 	stw	r20,28(sp)
   12e94:	d8000815 	stw	zero,32(sp)
   12e98:	d8800617 	ldw	r2,24(sp)
   12e9c:	10025a16 	blt	r2,zero,13808 <_dtoa_r+0xc3c>
   12ea0:	d8c00717 	ldw	r3,28(sp)
   12ea4:	d8800b15 	stw	r2,44(sp)
   12ea8:	d8000a15 	stw	zero,40(sp)
   12eac:	1887883a 	add	r3,r3,r2
   12eb0:	d8c00715 	stw	r3,28(sp)
   12eb4:	d9c00417 	ldw	r7,16(sp)
   12eb8:	00800244 	movi	r2,9
   12ebc:	11c10536 	bltu	r2,r7,132d4 <_dtoa_r+0x708>
   12ec0:	00800144 	movi	r2,5
   12ec4:	11c4c60e 	bge	r2,r7,141e0 <_dtoa_r+0x1614>
   12ec8:	39ffff04 	addi	r7,r7,-4
   12ecc:	d9c00415 	stw	r7,16(sp)
   12ed0:	0027883a 	mov	r19,zero
   12ed4:	d9c00417 	ldw	r7,16(sp)
   12ed8:	008000c4 	movi	r2,3
   12edc:	3883a226 	beq	r7,r2,13d68 <_dtoa_r+0x119c>
   12ee0:	11c2bc16 	blt	r2,r7,139d4 <_dtoa_r+0xe08>
   12ee4:	00800084 	movi	r2,2
   12ee8:	3880fb1e 	bne	r7,r2,132d8 <_dtoa_r+0x70c>
   12eec:	d8000c15 	stw	zero,48(sp)
   12ef0:	d9002117 	ldw	r4,132(sp)
   12ef4:	0103ae0e 	bge	zero,r4,13db0 <_dtoa_r+0x11e4>
   12ef8:	2025883a 	mov	r18,r4
   12efc:	d9000e15 	stw	r4,56(sp)
   12f00:	d9000915 	stw	r4,36(sp)
   12f04:	80001115 	stw	zero,68(r16)
   12f08:	008005c4 	movi	r2,23
   12f0c:	1484b22e 	bgeu	r2,r18,141d8 <_dtoa_r+0x160c>
   12f10:	00c00044 	movi	r3,1
   12f14:	00800104 	movi	r2,4
   12f18:	1085883a 	add	r2,r2,r2
   12f1c:	11000504 	addi	r4,r2,20
   12f20:	180b883a 	mov	r5,r3
   12f24:	18c00044 	addi	r3,r3,1
   12f28:	913ffb2e 	bgeu	r18,r4,12f18 <_dtoa_r+0x34c>
   12f2c:	81401115 	stw	r5,68(r16)
   12f30:	8009883a 	mov	r4,r16
   12f34:	0015fe40 	call	15fe4 <_Balloc>
   12f38:	102f883a 	mov	r23,r2
   12f3c:	80801015 	stw	r2,64(r16)
   12f40:	00800384 	movi	r2,14
   12f44:	1480f036 	bltu	r2,r18,13308 <_dtoa_r+0x73c>
   12f48:	9800ef26 	beq	r19,zero,13308 <_dtoa_r+0x73c>
   12f4c:	d8800617 	ldw	r2,24(sp)
   12f50:	00839c0e 	bge	zero,r2,13dc4 <_dtoa_r+0x11f8>
   12f54:	d8c00617 	ldw	r3,24(sp)
   12f58:	108003cc 	andi	r2,r2,15
   12f5c:	100490fa 	slli	r2,r2,3
   12f60:	182bd13a 	srai	r21,r3,4
   12f64:	00c000f4 	movhi	r3,3
   12f68:	18e05f04 	addi	r3,r3,-32388
   12f6c:	1885883a 	add	r2,r3,r2
   12f70:	a8c0040c 	andi	r3,r21,16
   12f74:	12800017 	ldw	r10,0(r2)
   12f78:	15800117 	ldw	r22,4(r2)
   12f7c:	18038726 	beq	r3,zero,13d9c <_dtoa_r+0x11d0>
   12f80:	008000f4 	movhi	r2,3
   12f84:	10a05504 	addi	r2,r2,-32428
   12f88:	11800817 	ldw	r6,32(r2)
   12f8c:	11c00917 	ldw	r7,36(r2)
   12f90:	d9000317 	ldw	r4,12(sp)
   12f94:	880b883a 	mov	r5,r17
   12f98:	da801515 	stw	r10,84(sp)
   12f9c:	00190d00 	call	190d0 <__divdf3>
   12fa0:	da801517 	ldw	r10,84(sp)
   12fa4:	d8801015 	stw	r2,64(sp)
   12fa8:	1829883a 	mov	r20,r3
   12fac:	ad4003cc 	andi	r21,r21,15
   12fb0:	048000c4 	movi	r18,3
   12fb4:	a8001126 	beq	r21,zero,12ffc <_dtoa_r+0x430>
   12fb8:	04c000f4 	movhi	r19,3
   12fbc:	9ce05504 	addi	r19,r19,-32428
   12fc0:	5005883a 	mov	r2,r10
   12fc4:	b007883a 	mov	r3,r22
   12fc8:	a980004c 	andi	r6,r21,1
   12fcc:	1009883a 	mov	r4,r2
   12fd0:	a82bd07a 	srai	r21,r21,1
   12fd4:	180b883a 	mov	r5,r3
   12fd8:	30000426 	beq	r6,zero,12fec <_dtoa_r+0x420>
   12fdc:	99800017 	ldw	r6,0(r19)
   12fe0:	99c00117 	ldw	r7,4(r19)
   12fe4:	94800044 	addi	r18,r18,1
   12fe8:	0018dec0 	call	18dec <__muldf3>
   12fec:	9cc00204 	addi	r19,r19,8
   12ff0:	a83ff51e 	bne	r21,zero,12fc8 <_dtoa_r+0x3fc>
   12ff4:	1015883a 	mov	r10,r2
   12ff8:	182d883a 	mov	r22,r3
   12ffc:	d9001017 	ldw	r4,64(sp)
   13000:	a00b883a 	mov	r5,r20
   13004:	500d883a 	mov	r6,r10
   13008:	b00f883a 	mov	r7,r22
   1300c:	00190d00 	call	190d0 <__divdf3>
   13010:	1027883a 	mov	r19,r2
   13014:	1829883a 	mov	r20,r3
   13018:	d8c00d17 	ldw	r3,52(sp)
   1301c:	18000626 	beq	r3,zero,13038 <_dtoa_r+0x46c>
   13020:	9809883a 	mov	r4,r19
   13024:	a00b883a 	mov	r5,r20
   13028:	000d883a 	mov	r6,zero
   1302c:	01cffc34 	movhi	r7,16368
   13030:	00194040 	call	19404 <__ltdf2>
   13034:	10040e16 	blt	r2,zero,14070 <_dtoa_r+0x14a4>
   13038:	9009883a 	mov	r4,r18
   1303c:	00194600 	call	19460 <__floatsidf>
   13040:	1009883a 	mov	r4,r2
   13044:	180b883a 	mov	r5,r3
   13048:	980d883a 	mov	r6,r19
   1304c:	a00f883a 	mov	r7,r20
   13050:	0018dec0 	call	18dec <__muldf3>
   13054:	1009883a 	mov	r4,r2
   13058:	180b883a 	mov	r5,r3
   1305c:	000d883a 	mov	r6,zero
   13060:	01d00734 	movhi	r7,16412
   13064:	0018d380 	call	18d38 <__adddf3>
   13068:	057f3034 	movhi	r21,64704
   1306c:	1d6b883a 	add	r21,r3,r21
   13070:	d8c00917 	ldw	r3,36(sp)
   13074:	1025883a 	mov	r18,r2
   13078:	18031f26 	beq	r3,zero,13cf8 <_dtoa_r+0x112c>
   1307c:	d8800617 	ldw	r2,24(sp)
   13080:	dac00917 	ldw	r11,36(sp)
   13084:	d8801315 	stw	r2,76(sp)
   13088:	d8c00c17 	ldw	r3,48(sp)
   1308c:	18039026 	beq	r3,zero,13ed0 <_dtoa_r+0x1304>
   13090:	58bfffc4 	addi	r2,r11,-1
   13094:	100490fa 	slli	r2,r2,3
   13098:	00c000f4 	movhi	r3,3
   1309c:	18e05f04 	addi	r3,r3,-32388
   130a0:	0009883a 	mov	r4,zero
   130a4:	1885883a 	add	r2,r3,r2
   130a8:	11800017 	ldw	r6,0(r2)
   130ac:	11c00117 	ldw	r7,4(r2)
   130b0:	014ff834 	movhi	r5,16352
   130b4:	dac01615 	stw	r11,88(sp)
   130b8:	00190d00 	call	190d0 <__divdf3>
   130bc:	900d883a 	mov	r6,r18
   130c0:	a80f883a 	mov	r7,r21
   130c4:	1009883a 	mov	r4,r2
   130c8:	180b883a 	mov	r5,r3
   130cc:	0018d8c0 	call	18d8c <__subdf3>
   130d0:	a00b883a 	mov	r5,r20
   130d4:	9809883a 	mov	r4,r19
   130d8:	182b883a 	mov	r21,r3
   130dc:	d8801015 	stw	r2,64(sp)
   130e0:	00195340 	call	19534 <__fixdfsi>
   130e4:	1009883a 	mov	r4,r2
   130e8:	d8801515 	stw	r2,84(sp)
   130ec:	00194600 	call	19460 <__floatsidf>
   130f0:	9809883a 	mov	r4,r19
   130f4:	a00b883a 	mov	r5,r20
   130f8:	100d883a 	mov	r6,r2
   130fc:	180f883a 	mov	r7,r3
   13100:	0018d8c0 	call	18d8c <__subdf3>
   13104:	da401517 	ldw	r9,84(sp)
   13108:	d9001017 	ldw	r4,64(sp)
   1310c:	a80b883a 	mov	r5,r21
   13110:	4d000c04 	addi	r20,r9,48
   13114:	bd000005 	stb	r20,0(r23)
   13118:	100d883a 	mov	r6,r2
   1311c:	180f883a 	mov	r7,r3
   13120:	bd800044 	addi	r22,r23,1
   13124:	1025883a 	mov	r18,r2
   13128:	1827883a 	mov	r19,r3
   1312c:	001933c0 	call	1933c <__gtdf2>
   13130:	00842216 	blt	zero,r2,141bc <_dtoa_r+0x15f0>
   13134:	0009883a 	mov	r4,zero
   13138:	014ffc34 	movhi	r5,16368
   1313c:	900d883a 	mov	r6,r18
   13140:	980f883a 	mov	r7,r19
   13144:	0018d8c0 	call	18d8c <__subdf3>
   13148:	d9001017 	ldw	r4,64(sp)
   1314c:	a80b883a 	mov	r5,r21
   13150:	100d883a 	mov	r6,r2
   13154:	180f883a 	mov	r7,r3
   13158:	001933c0 	call	1933c <__gtdf2>
   1315c:	dac01617 	ldw	r11,88(sp)
   13160:	00841316 	blt	zero,r2,141b0 <_dtoa_r+0x15e4>
   13164:	00800044 	movi	r2,1
   13168:	12c0670e 	bge	r2,r11,13308 <_dtoa_r+0x73c>
   1316c:	bad7883a 	add	r11,r23,r11
   13170:	df001115 	stw	fp,68(sp)
   13174:	dc401215 	stw	r17,72(sp)
   13178:	5839883a 	mov	fp,r11
   1317c:	dc401017 	ldw	r17,64(sp)
   13180:	00000806 	br	131a4 <_dtoa_r+0x5d8>
   13184:	0018d8c0 	call	18d8c <__subdf3>
   13188:	1009883a 	mov	r4,r2
   1318c:	180b883a 	mov	r5,r3
   13190:	880d883a 	mov	r6,r17
   13194:	a80f883a 	mov	r7,r21
   13198:	00194040 	call	19404 <__ltdf2>
   1319c:	1003ee16 	blt	r2,zero,14158 <_dtoa_r+0x158c>
   131a0:	b703f126 	beq	r22,fp,14168 <_dtoa_r+0x159c>
   131a4:	8809883a 	mov	r4,r17
   131a8:	a80b883a 	mov	r5,r21
   131ac:	000d883a 	mov	r6,zero
   131b0:	01d00934 	movhi	r7,16420
   131b4:	0018dec0 	call	18dec <__muldf3>
   131b8:	000d883a 	mov	r6,zero
   131bc:	01d00934 	movhi	r7,16420
   131c0:	9009883a 	mov	r4,r18
   131c4:	980b883a 	mov	r5,r19
   131c8:	1023883a 	mov	r17,r2
   131cc:	182b883a 	mov	r21,r3
   131d0:	0018dec0 	call	18dec <__muldf3>
   131d4:	180b883a 	mov	r5,r3
   131d8:	1009883a 	mov	r4,r2
   131dc:	1825883a 	mov	r18,r3
   131e0:	1027883a 	mov	r19,r2
   131e4:	00195340 	call	19534 <__fixdfsi>
   131e8:	1009883a 	mov	r4,r2
   131ec:	1029883a 	mov	r20,r2
   131f0:	00194600 	call	19460 <__floatsidf>
   131f4:	9809883a 	mov	r4,r19
   131f8:	900b883a 	mov	r5,r18
   131fc:	100d883a 	mov	r6,r2
   13200:	180f883a 	mov	r7,r3
   13204:	0018d8c0 	call	18d8c <__subdf3>
   13208:	a5000c04 	addi	r20,r20,48
   1320c:	b5000005 	stb	r20,0(r22)
   13210:	1009883a 	mov	r4,r2
   13214:	180b883a 	mov	r5,r3
   13218:	880d883a 	mov	r6,r17
   1321c:	a80f883a 	mov	r7,r21
   13220:	1025883a 	mov	r18,r2
   13224:	1827883a 	mov	r19,r3
   13228:	00194040 	call	19404 <__ltdf2>
   1322c:	b5800044 	addi	r22,r22,1
   13230:	0009883a 	mov	r4,zero
   13234:	014ffc34 	movhi	r5,16368
   13238:	900d883a 	mov	r6,r18
   1323c:	980f883a 	mov	r7,r19
   13240:	103fd00e 	bge	r2,zero,13184 <_dtoa_r+0x5b8>
   13244:	d9001317 	ldw	r4,76(sp)
   13248:	df001117 	ldw	fp,68(sp)
   1324c:	d9000615 	stw	r4,24(sp)
   13250:	8009883a 	mov	r4,r16
   13254:	e00b883a 	mov	r5,fp
   13258:	001608c0 	call	1608c <_Bfree>
   1325c:	d9c00617 	ldw	r7,24(sp)
   13260:	d8c02217 	ldw	r3,136(sp)
   13264:	d9002417 	ldw	r4,144(sp)
   13268:	b0000005 	stb	zero,0(r22)
   1326c:	38800044 	addi	r2,r7,1
   13270:	18800015 	stw	r2,0(r3)
   13274:	203e8426 	beq	r4,zero,12c88 <_dtoa_r+0xbc>
   13278:	25800015 	stw	r22,0(r4)
   1327c:	003e8206 	br	12c88 <_dtoa_r+0xbc>
   13280:	00800434 	movhi	r2,16
   13284:	10bfffc4 	addi	r2,r2,-1
   13288:	90a4703a 	and	r18,r18,r2
   1328c:	903e901e 	bne	r18,zero,12cd0 <_dtoa_r+0x104>
   13290:	05c000f4 	movhi	r23,3
   13294:	bde03604 	addi	r23,r23,-32552
   13298:	003e8f06 	br	12cd8 <_dtoa_r+0x10c>
   1329c:	b8800204 	addi	r2,r23,8
   132a0:	003e9206 	br	12cec <_dtoa_r+0x120>
   132a4:	01400434 	movhi	r5,16
   132a8:	297fffc4 	addi	r5,r5,-1
   132ac:	894a703a 	and	r5,r17,r5
   132b0:	d9000317 	ldw	r4,12(sp)
   132b4:	294ffc34 	orhi	r5,r5,16368
   132b8:	a53f0044 	addi	r20,r20,-1023
   132bc:	dd400217 	ldw	r21,8(sp)
   132c0:	d8000f15 	stw	zero,60(sp)
   132c4:	003eb106 	br	12d8c <_dtoa_r+0x1c0>
   132c8:	05c000f4 	movhi	r23,3
   132cc:	bde02d04 	addi	r23,r23,-32588
   132d0:	003e6d06 	br	12c88 <_dtoa_r+0xbc>
   132d4:	d8000415 	stw	zero,16(sp)
   132d8:	80001115 	stw	zero,68(r16)
   132dc:	8009883a 	mov	r4,r16
   132e0:	000b883a 	mov	r5,zero
   132e4:	0015fe40 	call	15fe4 <_Balloc>
   132e8:	01ffffc4 	movi	r7,-1
   132ec:	102f883a 	mov	r23,r2
   132f0:	80801015 	stw	r2,64(r16)
   132f4:	00800044 	movi	r2,1
   132f8:	d9c00915 	stw	r7,36(sp)
   132fc:	d8002115 	stw	zero,132(sp)
   13300:	d9c00e15 	stw	r7,56(sp)
   13304:	d8800c15 	stw	r2,48(sp)
   13308:	d8800117 	ldw	r2,4(sp)
   1330c:	10008b16 	blt	r2,zero,1353c <_dtoa_r+0x970>
   13310:	d9000617 	ldw	r4,24(sp)
   13314:	00c00384 	movi	r3,14
   13318:	19008816 	blt	r3,r4,1353c <_dtoa_r+0x970>
   1331c:	200490fa 	slli	r2,r4,3
   13320:	d9c02117 	ldw	r7,132(sp)
   13324:	00c000f4 	movhi	r3,3
   13328:	18e05f04 	addi	r3,r3,-32388
   1332c:	1885883a 	add	r2,r3,r2
   13330:	14800017 	ldw	r18,0(r2)
   13334:	14c00117 	ldw	r19,4(r2)
   13338:	3801c916 	blt	r7,zero,13a60 <_dtoa_r+0xe94>
   1333c:	d9000317 	ldw	r4,12(sp)
   13340:	900d883a 	mov	r6,r18
   13344:	980f883a 	mov	r7,r19
   13348:	880b883a 	mov	r5,r17
   1334c:	00190d00 	call	190d0 <__divdf3>
   13350:	180b883a 	mov	r5,r3
   13354:	1009883a 	mov	r4,r2
   13358:	00195340 	call	19534 <__fixdfsi>
   1335c:	1009883a 	mov	r4,r2
   13360:	102b883a 	mov	r21,r2
   13364:	00194600 	call	19460 <__floatsidf>
   13368:	1009883a 	mov	r4,r2
   1336c:	180b883a 	mov	r5,r3
   13370:	900d883a 	mov	r6,r18
   13374:	980f883a 	mov	r7,r19
   13378:	0018dec0 	call	18dec <__muldf3>
   1337c:	d9000317 	ldw	r4,12(sp)
   13380:	880b883a 	mov	r5,r17
   13384:	100d883a 	mov	r6,r2
   13388:	180f883a 	mov	r7,r3
   1338c:	0018d8c0 	call	18d8c <__subdf3>
   13390:	d9c00917 	ldw	r7,36(sp)
   13394:	1009883a 	mov	r4,r2
   13398:	a8800c04 	addi	r2,r21,48
   1339c:	b8800005 	stb	r2,0(r23)
   133a0:	01800044 	movi	r6,1
   133a4:	180b883a 	mov	r5,r3
   133a8:	2005883a 	mov	r2,r4
   133ac:	bd800044 	addi	r22,r23,1
   133b0:	39803726 	beq	r7,r6,13490 <_dtoa_r+0x8c4>
   133b4:	000d883a 	mov	r6,zero
   133b8:	01d00934 	movhi	r7,16420
   133bc:	0018dec0 	call	18dec <__muldf3>
   133c0:	1009883a 	mov	r4,r2
   133c4:	180b883a 	mov	r5,r3
   133c8:	000d883a 	mov	r6,zero
   133cc:	000f883a 	mov	r7,zero
   133d0:	1029883a 	mov	r20,r2
   133d4:	1823883a 	mov	r17,r3
   133d8:	00192840 	call	19284 <__eqdf2>
   133dc:	103f9c26 	beq	r2,zero,13250 <_dtoa_r+0x684>
   133e0:	dd400917 	ldw	r21,36(sp)
   133e4:	dc000415 	stw	r16,16(sp)
   133e8:	00000906 	br	13410 <_dtoa_r+0x844>
   133ec:	0018dec0 	call	18dec <__muldf3>
   133f0:	1009883a 	mov	r4,r2
   133f4:	180b883a 	mov	r5,r3
   133f8:	000d883a 	mov	r6,zero
   133fc:	000f883a 	mov	r7,zero
   13400:	1029883a 	mov	r20,r2
   13404:	1823883a 	mov	r17,r3
   13408:	00192840 	call	19284 <__eqdf2>
   1340c:	10022926 	beq	r2,zero,13cb4 <_dtoa_r+0x10e8>
   13410:	900d883a 	mov	r6,r18
   13414:	980f883a 	mov	r7,r19
   13418:	a009883a 	mov	r4,r20
   1341c:	880b883a 	mov	r5,r17
   13420:	00190d00 	call	190d0 <__divdf3>
   13424:	180b883a 	mov	r5,r3
   13428:	1009883a 	mov	r4,r2
   1342c:	00195340 	call	19534 <__fixdfsi>
   13430:	1009883a 	mov	r4,r2
   13434:	1021883a 	mov	r16,r2
   13438:	00194600 	call	19460 <__floatsidf>
   1343c:	1009883a 	mov	r4,r2
   13440:	180b883a 	mov	r5,r3
   13444:	900d883a 	mov	r6,r18
   13448:	980f883a 	mov	r7,r19
   1344c:	0018dec0 	call	18dec <__muldf3>
   13450:	a009883a 	mov	r4,r20
   13454:	880b883a 	mov	r5,r17
   13458:	100d883a 	mov	r6,r2
   1345c:	180f883a 	mov	r7,r3
   13460:	0018d8c0 	call	18d8c <__subdf3>
   13464:	82400c04 	addi	r9,r16,48
   13468:	b2400005 	stb	r9,0(r22)
   1346c:	b5800044 	addi	r22,r22,1
   13470:	b5d3c83a 	sub	r9,r22,r23
   13474:	000d883a 	mov	r6,zero
   13478:	01d00934 	movhi	r7,16420
   1347c:	1009883a 	mov	r4,r2
   13480:	180b883a 	mov	r5,r3
   13484:	aa7fd91e 	bne	r21,r9,133ec <_dtoa_r+0x820>
   13488:	802b883a 	mov	r21,r16
   1348c:	dc000417 	ldw	r16,16(sp)
   13490:	1009883a 	mov	r4,r2
   13494:	180b883a 	mov	r5,r3
   13498:	100d883a 	mov	r6,r2
   1349c:	180f883a 	mov	r7,r3
   134a0:	0018d380 	call	18d38 <__adddf3>
   134a4:	9009883a 	mov	r4,r18
   134a8:	980b883a 	mov	r5,r19
   134ac:	100d883a 	mov	r6,r2
   134b0:	180f883a 	mov	r7,r3
   134b4:	1023883a 	mov	r17,r2
   134b8:	1829883a 	mov	r20,r3
   134bc:	00194040 	call	19404 <__ltdf2>
   134c0:	10000816 	blt	r2,zero,134e4 <_dtoa_r+0x918>
   134c4:	9009883a 	mov	r4,r18
   134c8:	980b883a 	mov	r5,r19
   134cc:	880d883a 	mov	r6,r17
   134d0:	a00f883a 	mov	r7,r20
   134d4:	00192840 	call	19284 <__eqdf2>
   134d8:	103f5d1e 	bne	r2,zero,13250 <_dtoa_r+0x684>
   134dc:	ad40004c 	andi	r21,r21,1
   134e0:	a83f5b26 	beq	r21,zero,13250 <_dtoa_r+0x684>
   134e4:	b53fffc3 	ldbu	r20,-1(r22)
   134e8:	b0ffff84 	addi	r3,r22,-2
   134ec:	01400e44 	movi	r5,57
   134f0:	00000306 	br	13500 <_dtoa_r+0x934>
   134f4:	1d000003 	ldbu	r20,0(r3)
   134f8:	102d883a 	mov	r22,r2
   134fc:	18ffffc4 	addi	r3,r3,-1
   13500:	a1003fcc 	andi	r4,r20,255
   13504:	2100201c 	xori	r4,r4,128
   13508:	213fe004 	addi	r4,r4,-128
   1350c:	b0bfffc4 	addi	r2,r22,-1
   13510:	2142ca1e 	bne	r4,r5,1403c <_dtoa_r+0x1470>
   13514:	b8bff71e 	bne	r23,r2,134f4 <_dtoa_r+0x928>
   13518:	d8800617 	ldw	r2,24(sp)
   1351c:	05000c44 	movi	r20,49
   13520:	10800044 	addi	r2,r2,1
   13524:	d8800615 	stw	r2,24(sp)
   13528:	00800c04 	movi	r2,48
   1352c:	b8800005 	stb	r2,0(r23)
   13530:	b805883a 	mov	r2,r23
   13534:	15000005 	stb	r20,0(r2)
   13538:	003f4506 	br	13250 <_dtoa_r+0x684>
   1353c:	d9c00c17 	ldw	r7,48(sp)
   13540:	3800c926 	beq	r7,zero,13868 <_dtoa_r+0xc9c>
   13544:	d9c00417 	ldw	r7,16(sp)
   13548:	00c00044 	movi	r3,1
   1354c:	19c16c0e 	bge	r3,r7,13b00 <_dtoa_r+0xf34>
   13550:	d9000917 	ldw	r4,36(sp)
   13554:	d9c00a17 	ldw	r7,40(sp)
   13558:	24ffffc4 	addi	r19,r4,-1
   1355c:	3cc20716 	blt	r7,r19,13d7c <_dtoa_r+0x11b0>
   13560:	3ce7c83a 	sub	r19,r7,r19
   13564:	d9c00917 	ldw	r7,36(sp)
   13568:	3802ae16 	blt	r7,zero,14024 <_dtoa_r+0x1458>
   1356c:	dc800817 	ldw	r18,32(sp)
   13570:	d8800917 	ldw	r2,36(sp)
   13574:	d8c00817 	ldw	r3,32(sp)
   13578:	d9c00717 	ldw	r7,28(sp)
   1357c:	8009883a 	mov	r4,r16
   13580:	1887883a 	add	r3,r3,r2
   13584:	388f883a 	add	r7,r7,r2
   13588:	01400044 	movi	r5,1
   1358c:	d8c00815 	stw	r3,32(sp)
   13590:	d9c00715 	stw	r7,28(sp)
   13594:	00164140 	call	16414 <__i2b>
   13598:	102b883a 	mov	r21,r2
   1359c:	90000a26 	beq	r18,zero,135c8 <_dtoa_r+0x9fc>
   135a0:	d8800717 	ldw	r2,28(sp)
   135a4:	0080080e 	bge	zero,r2,135c8 <_dtoa_r+0x9fc>
   135a8:	90812b16 	blt	r18,r2,13a58 <_dtoa_r+0xe8c>
   135ac:	d8c00817 	ldw	r3,32(sp)
   135b0:	d9000717 	ldw	r4,28(sp)
   135b4:	90a5c83a 	sub	r18,r18,r2
   135b8:	1887c83a 	sub	r3,r3,r2
   135bc:	2089c83a 	sub	r4,r4,r2
   135c0:	d8c00815 	stw	r3,32(sp)
   135c4:	d9000715 	stw	r4,28(sp)
   135c8:	d9c00a17 	ldw	r7,40(sp)
   135cc:	01c0140e 	bge	zero,r7,13620 <_dtoa_r+0xa54>
   135d0:	d8800c17 	ldw	r2,48(sp)
   135d4:	1001de26 	beq	r2,zero,13d50 <_dtoa_r+0x1184>
   135d8:	04c00e0e 	bge	zero,r19,13614 <_dtoa_r+0xa48>
   135dc:	a80b883a 	mov	r5,r21
   135e0:	8009883a 	mov	r4,r16
   135e4:	980d883a 	mov	r6,r19
   135e8:	00166a80 	call	166a8 <__pow5mult>
   135ec:	e00d883a 	mov	r6,fp
   135f0:	8009883a 	mov	r4,r16
   135f4:	100b883a 	mov	r5,r2
   135f8:	102b883a 	mov	r21,r2
   135fc:	00164500 	call	16450 <__multiply>
   13600:	1029883a 	mov	r20,r2
   13604:	e00b883a 	mov	r5,fp
   13608:	8009883a 	mov	r4,r16
   1360c:	001608c0 	call	1608c <_Bfree>
   13610:	a039883a 	mov	fp,r20
   13614:	d8c00a17 	ldw	r3,40(sp)
   13618:	1ccdc83a 	sub	r6,r3,r19
   1361c:	3001291e 	bne	r6,zero,13ac4 <_dtoa_r+0xef8>
   13620:	8009883a 	mov	r4,r16
   13624:	01400044 	movi	r5,1
   13628:	00164140 	call	16414 <__i2b>
   1362c:	d9000b17 	ldw	r4,44(sp)
   13630:	1029883a 	mov	r20,r2
   13634:	0100050e 	bge	zero,r4,1364c <_dtoa_r+0xa80>
   13638:	d9800b17 	ldw	r6,44(sp)
   1363c:	8009883a 	mov	r4,r16
   13640:	100b883a 	mov	r5,r2
   13644:	00166a80 	call	166a8 <__pow5mult>
   13648:	1029883a 	mov	r20,r2
   1364c:	d9c00417 	ldw	r7,16(sp)
   13650:	00800044 	movi	r2,1
   13654:	11c0f00e 	bge	r2,r7,13a18 <_dtoa_r+0xe4c>
   13658:	0023883a 	mov	r17,zero
   1365c:	d8800b17 	ldw	r2,44(sp)
   13660:	1001741e 	bne	r2,zero,13c34 <_dtoa_r+0x1068>
   13664:	00800044 	movi	r2,1
   13668:	d8c00717 	ldw	r3,28(sp)
   1366c:	10c5883a 	add	r2,r2,r3
   13670:	108007cc 	andi	r2,r2,31
   13674:	10008026 	beq	r2,zero,13878 <_dtoa_r+0xcac>
   13678:	01000804 	movi	r4,32
   1367c:	2089c83a 	sub	r4,r4,r2
   13680:	00c00104 	movi	r3,4
   13684:	1902d00e 	bge	r3,r4,141c8 <_dtoa_r+0x15fc>
   13688:	d9000817 	ldw	r4,32(sp)
   1368c:	d9c00717 	ldw	r7,28(sp)
   13690:	00c00704 	movi	r3,28
   13694:	1885c83a 	sub	r2,r3,r2
   13698:	2089883a 	add	r4,r4,r2
   1369c:	388f883a 	add	r7,r7,r2
   136a0:	d9000815 	stw	r4,32(sp)
   136a4:	90a5883a 	add	r18,r18,r2
   136a8:	d9c00715 	stw	r7,28(sp)
   136ac:	d9c00817 	ldw	r7,32(sp)
   136b0:	01c0050e 	bge	zero,r7,136c8 <_dtoa_r+0xafc>
   136b4:	e00b883a 	mov	r5,fp
   136b8:	8009883a 	mov	r4,r16
   136bc:	380d883a 	mov	r6,r7
   136c0:	00167d40 	call	167d4 <__lshift>
   136c4:	1039883a 	mov	fp,r2
   136c8:	d8800717 	ldw	r2,28(sp)
   136cc:	0080050e 	bge	zero,r2,136e4 <_dtoa_r+0xb18>
   136d0:	a00b883a 	mov	r5,r20
   136d4:	8009883a 	mov	r4,r16
   136d8:	100d883a 	mov	r6,r2
   136dc:	00167d40 	call	167d4 <__lshift>
   136e0:	1029883a 	mov	r20,r2
   136e4:	d8c00d17 	ldw	r3,52(sp)
   136e8:	1801401e 	bne	r3,zero,13bec <_dtoa_r+0x1020>
   136ec:	d8800917 	ldw	r2,36(sp)
   136f0:	00815a0e 	bge	zero,r2,13c5c <_dtoa_r+0x1090>
   136f4:	d8c00c17 	ldw	r3,48(sp)
   136f8:	18006f1e 	bne	r3,zero,138b8 <_dtoa_r+0xcec>
   136fc:	b823883a 	mov	r17,r23
   13700:	dc800917 	ldw	r18,36(sp)
   13704:	00000206 	br	13710 <_dtoa_r+0xb44>
   13708:	00160b40 	call	160b4 <__multadd>
   1370c:	1039883a 	mov	fp,r2
   13710:	e009883a 	mov	r4,fp
   13714:	a00b883a 	mov	r5,r20
   13718:	00129900 	call	12990 <quorem>
   1371c:	10800c04 	addi	r2,r2,48
   13720:	88800005 	stb	r2,0(r17)
   13724:	8c400044 	addi	r17,r17,1
   13728:	8dc7c83a 	sub	r3,r17,r23
   1372c:	8009883a 	mov	r4,r16
   13730:	e00b883a 	mov	r5,fp
   13734:	01800284 	movi	r6,10
   13738:	000f883a 	mov	r7,zero
   1373c:	1cbff216 	blt	r3,r18,13708 <_dtoa_r+0xb3c>
   13740:	dd800917 	ldw	r22,36(sp)
   13744:	1007883a 	mov	r3,r2
   13748:	05823a0e 	bge	zero,r22,14034 <_dtoa_r+0x1468>
   1374c:	bdad883a 	add	r22,r23,r22
   13750:	0023883a 	mov	r17,zero
   13754:	e00b883a 	mov	r5,fp
   13758:	01800044 	movi	r6,1
   1375c:	8009883a 	mov	r4,r16
   13760:	d8c01515 	stw	r3,84(sp)
   13764:	00167d40 	call	167d4 <__lshift>
   13768:	1009883a 	mov	r4,r2
   1376c:	a00b883a 	mov	r5,r20
   13770:	1039883a 	mov	fp,r2
   13774:	00169300 	call	16930 <__mcmp>
   13778:	d8c01517 	ldw	r3,84(sp)
   1377c:	0080d60e 	bge	zero,r2,13ad8 <_dtoa_r+0xf0c>
   13780:	b13fffc3 	ldbu	r4,-1(r22)
   13784:	b0ffff84 	addi	r3,r22,-2
   13788:	01800e44 	movi	r6,57
   1378c:	00000306 	br	1379c <_dtoa_r+0xbd0>
   13790:	19000003 	ldbu	r4,0(r3)
   13794:	102d883a 	mov	r22,r2
   13798:	18ffffc4 	addi	r3,r3,-1
   1379c:	21403fcc 	andi	r5,r4,255
   137a0:	2940201c 	xori	r5,r5,128
   137a4:	297fe004 	addi	r5,r5,-128
   137a8:	b0bfffc4 	addi	r2,r22,-1
   137ac:	2981a71e 	bne	r5,r6,13e4c <_dtoa_r+0x1280>
   137b0:	b8bff71e 	bne	r23,r2,13790 <_dtoa_r+0xbc4>
   137b4:	d8800617 	ldw	r2,24(sp)
   137b8:	10800044 	addi	r2,r2,1
   137bc:	d8800615 	stw	r2,24(sp)
   137c0:	00800c44 	movi	r2,49
   137c4:	b8800005 	stb	r2,0(r23)
   137c8:	8009883a 	mov	r4,r16
   137cc:	a00b883a 	mov	r5,r20
   137d0:	001608c0 	call	1608c <_Bfree>
   137d4:	a83e9e26 	beq	r21,zero,13250 <_dtoa_r+0x684>
   137d8:	88000426 	beq	r17,zero,137ec <_dtoa_r+0xc20>
   137dc:	8d400326 	beq	r17,r21,137ec <_dtoa_r+0xc20>
   137e0:	8009883a 	mov	r4,r16
   137e4:	880b883a 	mov	r5,r17
   137e8:	001608c0 	call	1608c <_Bfree>
   137ec:	8009883a 	mov	r4,r16
   137f0:	a80b883a 	mov	r5,r21
   137f4:	001608c0 	call	1608c <_Bfree>
   137f8:	003e9506 	br	13250 <_dtoa_r+0x684>
   137fc:	00c00044 	movi	r3,1
   13800:	d8c00d15 	stw	r3,52(sp)
   13804:	003d9f06 	br	12e84 <_dtoa_r+0x2b8>
   13808:	d9000817 	ldw	r4,32(sp)
   1380c:	d8800617 	ldw	r2,24(sp)
   13810:	d8000b15 	stw	zero,44(sp)
   13814:	2089c83a 	sub	r4,r4,r2
   13818:	0087c83a 	sub	r3,zero,r2
   1381c:	d9000815 	stw	r4,32(sp)
   13820:	d8c00a15 	stw	r3,40(sp)
   13824:	003da306 	br	12eb4 <_dtoa_r+0x2e8>
   13828:	0529c83a 	sub	r20,zero,r20
   1382c:	dd000815 	stw	r20,32(sp)
   13830:	d8000715 	stw	zero,28(sp)
   13834:	003d9806 	br	12e98 <_dtoa_r+0x2cc>
   13838:	d9000617 	ldw	r4,24(sp)
   1383c:	00194600 	call	19460 <__floatsidf>
   13840:	1009883a 	mov	r4,r2
   13844:	180b883a 	mov	r5,r3
   13848:	980d883a 	mov	r6,r19
   1384c:	900f883a 	mov	r7,r18
   13850:	00192e00 	call	192e0 <__nedf2>
   13854:	103d7a26 	beq	r2,zero,12e40 <_dtoa_r+0x274>
   13858:	d8800617 	ldw	r2,24(sp)
   1385c:	10bfffc4 	addi	r2,r2,-1
   13860:	d8800615 	stw	r2,24(sp)
   13864:	003d7606 	br	12e40 <_dtoa_r+0x274>
   13868:	dcc00a17 	ldw	r19,40(sp)
   1386c:	dc800817 	ldw	r18,32(sp)
   13870:	002b883a 	mov	r21,zero
   13874:	003f4906 	br	1359c <_dtoa_r+0x9d0>
   13878:	00800704 	movi	r2,28
   1387c:	d8c00817 	ldw	r3,32(sp)
   13880:	d9000717 	ldw	r4,28(sp)
   13884:	90a5883a 	add	r18,r18,r2
   13888:	1887883a 	add	r3,r3,r2
   1388c:	2089883a 	add	r4,r4,r2
   13890:	d8c00815 	stw	r3,32(sp)
   13894:	d9000715 	stw	r4,28(sp)
   13898:	003f8406 	br	136ac <_dtoa_r+0xae0>
   1389c:	d9c00317 	ldw	r7,12(sp)
   138a0:	013efb84 	movi	r4,-1042
   138a4:	2509c83a 	sub	r4,r4,r20
   138a8:	3908983a 	sll	r4,r7,r4
   138ac:	003d3006 	br	12d70 <_dtoa_r+0x1a4>
   138b0:	d8000d15 	stw	zero,52(sp)
   138b4:	003d7306 	br	12e84 <_dtoa_r+0x2b8>
   138b8:	0480050e 	bge	zero,r18,138d0 <_dtoa_r+0xd04>
   138bc:	a80b883a 	mov	r5,r21
   138c0:	8009883a 	mov	r4,r16
   138c4:	900d883a 	mov	r6,r18
   138c8:	00167d40 	call	167d4 <__lshift>
   138cc:	102b883a 	mov	r21,r2
   138d0:	8801611e 	bne	r17,zero,13e58 <_dtoa_r+0x128c>
   138d4:	a827883a 	mov	r19,r21
   138d8:	d8c00317 	ldw	r3,12(sp)
   138dc:	d9000917 	ldw	r4,36(sp)
   138e0:	b8bfffc4 	addi	r2,r23,-1
   138e4:	18c0004c 	andi	r3,r3,1
   138e8:	1105883a 	add	r2,r2,r4
   138ec:	b825883a 	mov	r18,r23
   138f0:	d8800515 	stw	r2,20(sp)
   138f4:	a823883a 	mov	r17,r21
   138f8:	d8c00315 	stw	r3,12(sp)
   138fc:	ddc00715 	stw	r23,28(sp)
   13900:	e009883a 	mov	r4,fp
   13904:	a00b883a 	mov	r5,r20
   13908:	00129900 	call	12990 <quorem>
   1390c:	e009883a 	mov	r4,fp
   13910:	880b883a 	mov	r5,r17
   13914:	102d883a 	mov	r22,r2
   13918:	00169300 	call	16930 <__mcmp>
   1391c:	980d883a 	mov	r6,r19
   13920:	8009883a 	mov	r4,r16
   13924:	a00b883a 	mov	r5,r20
   13928:	102b883a 	mov	r21,r2
   1392c:	00169880 	call	16988 <__mdiff>
   13930:	100d883a 	mov	r6,r2
   13934:	10800317 	ldw	r2,12(r2)
   13938:	b5c00c04 	addi	r23,r22,48
   1393c:	10008c26 	beq	r2,zero,13b70 <_dtoa_r+0xfa4>
   13940:	8009883a 	mov	r4,r16
   13944:	300b883a 	mov	r5,r6
   13948:	001608c0 	call	1608c <_Bfree>
   1394c:	00800044 	movi	r2,1
   13950:	a8007116 	blt	r21,zero,13b18 <_dtoa_r+0xf4c>
   13954:	a800041e 	bne	r21,zero,13968 <_dtoa_r+0xd9c>
   13958:	d9c00417 	ldw	r7,16(sp)
   1395c:	3800021e 	bne	r7,zero,13968 <_dtoa_r+0xd9c>
   13960:	d8c00317 	ldw	r3,12(sp)
   13964:	18006c26 	beq	r3,zero,13b18 <_dtoa_r+0xf4c>
   13968:	00814c16 	blt	zero,r2,13e9c <_dtoa_r+0x12d0>
   1396c:	d8c00517 	ldw	r3,20(sp)
   13970:	95400044 	addi	r21,r18,1
   13974:	95c00005 	stb	r23,0(r18)
   13978:	a82d883a 	mov	r22,r21
   1397c:	90c14d26 	beq	r18,r3,13eb4 <_dtoa_r+0x12e8>
   13980:	e00b883a 	mov	r5,fp
   13984:	8009883a 	mov	r4,r16
   13988:	01800284 	movi	r6,10
   1398c:	000f883a 	mov	r7,zero
   13990:	00160b40 	call	160b4 <__multadd>
   13994:	1039883a 	mov	fp,r2
   13998:	8cc08b26 	beq	r17,r19,13bc8 <_dtoa_r+0xffc>
   1399c:	880b883a 	mov	r5,r17
   139a0:	01800284 	movi	r6,10
   139a4:	000f883a 	mov	r7,zero
   139a8:	8009883a 	mov	r4,r16
   139ac:	00160b40 	call	160b4 <__multadd>
   139b0:	980b883a 	mov	r5,r19
   139b4:	8009883a 	mov	r4,r16
   139b8:	01800284 	movi	r6,10
   139bc:	000f883a 	mov	r7,zero
   139c0:	1023883a 	mov	r17,r2
   139c4:	00160b40 	call	160b4 <__multadd>
   139c8:	1027883a 	mov	r19,r2
   139cc:	a825883a 	mov	r18,r21
   139d0:	003fcb06 	br	13900 <_dtoa_r+0xd34>
   139d4:	d9c00417 	ldw	r7,16(sp)
   139d8:	00800104 	movi	r2,4
   139dc:	3880e426 	beq	r7,r2,13d70 <_dtoa_r+0x11a4>
   139e0:	00800144 	movi	r2,5
   139e4:	38be3c1e 	bne	r7,r2,132d8 <_dtoa_r+0x70c>
   139e8:	00c00044 	movi	r3,1
   139ec:	d8c00c15 	stw	r3,48(sp)
   139f0:	d9c02117 	ldw	r7,132(sp)
   139f4:	d8800617 	ldw	r2,24(sp)
   139f8:	388f883a 	add	r7,r7,r2
   139fc:	3c800044 	addi	r18,r7,1
   13a00:	d9c00e15 	stw	r7,56(sp)
   13a04:	dc800915 	stw	r18,36(sp)
   13a08:	04bd3e16 	blt	zero,r18,12f04 <_dtoa_r+0x338>
   13a0c:	80001115 	stw	zero,68(r16)
   13a10:	000b883a 	mov	r5,zero
   13a14:	003d4606 	br	12f30 <_dtoa_r+0x364>
   13a18:	d8c00317 	ldw	r3,12(sp)
   13a1c:	183f0e1e 	bne	r3,zero,13658 <_dtoa_r+0xa8c>
   13a20:	00c00434 	movhi	r3,16
   13a24:	18ffffc4 	addi	r3,r3,-1
   13a28:	88c6703a 	and	r3,r17,r3
   13a2c:	183f0a1e 	bne	r3,zero,13658 <_dtoa_r+0xa8c>
   13a30:	8c5ffc2c 	andhi	r17,r17,32752
   13a34:	883f0826 	beq	r17,zero,13658 <_dtoa_r+0xa8c>
   13a38:	d9000817 	ldw	r4,32(sp)
   13a3c:	d9c00717 	ldw	r7,28(sp)
   13a40:	1023883a 	mov	r17,r2
   13a44:	2089883a 	add	r4,r4,r2
   13a48:	388f883a 	add	r7,r7,r2
   13a4c:	d9000815 	stw	r4,32(sp)
   13a50:	d9c00715 	stw	r7,28(sp)
   13a54:	003f0106 	br	1365c <_dtoa_r+0xa90>
   13a58:	9005883a 	mov	r2,r18
   13a5c:	003ed306 	br	135ac <_dtoa_r+0x9e0>
   13a60:	d8800917 	ldw	r2,36(sp)
   13a64:	00be3516 	blt	zero,r2,1333c <_dtoa_r+0x770>
   13a68:	1000b61e 	bne	r2,zero,13d44 <_dtoa_r+0x1178>
   13a6c:	9009883a 	mov	r4,r18
   13a70:	980b883a 	mov	r5,r19
   13a74:	000d883a 	mov	r6,zero
   13a78:	01d00534 	movhi	r7,16404
   13a7c:	0018dec0 	call	18dec <__muldf3>
   13a80:	d9800317 	ldw	r6,12(sp)
   13a84:	1009883a 	mov	r4,r2
   13a88:	180b883a 	mov	r5,r3
   13a8c:	880f883a 	mov	r7,r17
   13a90:	00193a00 	call	193a0 <__gedf2>
   13a94:	0029883a 	mov	r20,zero
   13a98:	002b883a 	mov	r21,zero
   13a9c:	10007e16 	blt	r2,zero,13c98 <_dtoa_r+0x10cc>
   13aa0:	d8802117 	ldw	r2,132(sp)
   13aa4:	b82d883a 	mov	r22,r23
   13aa8:	0084303a 	nor	r2,zero,r2
   13aac:	d8800615 	stw	r2,24(sp)
   13ab0:	8009883a 	mov	r4,r16
   13ab4:	a00b883a 	mov	r5,r20
   13ab8:	001608c0 	call	1608c <_Bfree>
   13abc:	a83f4b1e 	bne	r21,zero,137ec <_dtoa_r+0xc20>
   13ac0:	003de306 	br	13250 <_dtoa_r+0x684>
   13ac4:	e00b883a 	mov	r5,fp
   13ac8:	8009883a 	mov	r4,r16
   13acc:	00166a80 	call	166a8 <__pow5mult>
   13ad0:	1039883a 	mov	fp,r2
   13ad4:	003ed206 	br	13620 <_dtoa_r+0xa54>
   13ad8:	1000021e 	bne	r2,zero,13ae4 <_dtoa_r+0xf18>
   13adc:	18c0004c 	andi	r3,r3,1
   13ae0:	183f271e 	bne	r3,zero,13780 <_dtoa_r+0xbb4>
   13ae4:	01000c04 	movi	r4,48
   13ae8:	00000106 	br	13af0 <_dtoa_r+0xf24>
   13aec:	102d883a 	mov	r22,r2
   13af0:	b0bfffc4 	addi	r2,r22,-1
   13af4:	10c00007 	ldb	r3,0(r2)
   13af8:	193ffc26 	beq	r3,r4,13aec <_dtoa_r+0xf20>
   13afc:	003f3206 	br	137c8 <_dtoa_r+0xbfc>
   13b00:	d8c00f17 	ldw	r3,60(sp)
   13b04:	18015026 	beq	r3,zero,14048 <_dtoa_r+0x147c>
   13b08:	10810cc4 	addi	r2,r2,1075
   13b0c:	dcc00a17 	ldw	r19,40(sp)
   13b10:	dc800817 	ldw	r18,32(sp)
   13b14:	003e9706 	br	13574 <_dtoa_r+0x9a8>
   13b18:	b807883a 	mov	r3,r23
   13b1c:	182b883a 	mov	r21,r3
   13b20:	ddc00717 	ldw	r23,28(sp)
   13b24:	00800e0e 	bge	zero,r2,13b60 <_dtoa_r+0xf94>
   13b28:	e00b883a 	mov	r5,fp
   13b2c:	01800044 	movi	r6,1
   13b30:	8009883a 	mov	r4,r16
   13b34:	d8c01515 	stw	r3,84(sp)
   13b38:	00167d40 	call	167d4 <__lshift>
   13b3c:	1009883a 	mov	r4,r2
   13b40:	a00b883a 	mov	r5,r20
   13b44:	1039883a 	mov	fp,r2
   13b48:	00169300 	call	16930 <__mcmp>
   13b4c:	d8c01517 	ldw	r3,84(sp)
   13b50:	0081880e 	bge	zero,r2,14174 <_dtoa_r+0x15a8>
   13b54:	00800e44 	movi	r2,57
   13b58:	b0c00c44 	addi	r3,r22,49
   13b5c:	a8816326 	beq	r21,r2,140ec <_dtoa_r+0x1520>
   13b60:	90c00005 	stb	r3,0(r18)
   13b64:	95800044 	addi	r22,r18,1
   13b68:	982b883a 	mov	r21,r19
   13b6c:	003f1606 	br	137c8 <_dtoa_r+0xbfc>
   13b70:	300b883a 	mov	r5,r6
   13b74:	e009883a 	mov	r4,fp
   13b78:	d9801515 	stw	r6,84(sp)
   13b7c:	00169300 	call	16930 <__mcmp>
   13b80:	d9801517 	ldw	r6,84(sp)
   13b84:	8009883a 	mov	r4,r16
   13b88:	d8801515 	stw	r2,84(sp)
   13b8c:	300b883a 	mov	r5,r6
   13b90:	001608c0 	call	1608c <_Bfree>
   13b94:	d8801517 	ldw	r2,84(sp)
   13b98:	103f6d1e 	bne	r2,zero,13950 <_dtoa_r+0xd84>
   13b9c:	d9c00417 	ldw	r7,16(sp)
   13ba0:	383f6b1e 	bne	r7,zero,13950 <_dtoa_r+0xd84>
   13ba4:	d8c00317 	ldw	r3,12(sp)
   13ba8:	183f691e 	bne	r3,zero,13950 <_dtoa_r+0xd84>
   13bac:	b807883a 	mov	r3,r23
   13bb0:	00800e44 	movi	r2,57
   13bb4:	ddc00717 	ldw	r23,28(sp)
   13bb8:	18814c26 	beq	r3,r2,140ec <_dtoa_r+0x1520>
   13bbc:	057fe80e 	bge	zero,r21,13b60 <_dtoa_r+0xf94>
   13bc0:	b0c00c44 	addi	r3,r22,49
   13bc4:	003fe606 	br	13b60 <_dtoa_r+0xf94>
   13bc8:	880b883a 	mov	r5,r17
   13bcc:	8009883a 	mov	r4,r16
   13bd0:	01800284 	movi	r6,10
   13bd4:	000f883a 	mov	r7,zero
   13bd8:	00160b40 	call	160b4 <__multadd>
   13bdc:	1023883a 	mov	r17,r2
   13be0:	1027883a 	mov	r19,r2
   13be4:	a825883a 	mov	r18,r21
   13be8:	003f4506 	br	13900 <_dtoa_r+0xd34>
   13bec:	e009883a 	mov	r4,fp
   13bf0:	a00b883a 	mov	r5,r20
   13bf4:	00169300 	call	16930 <__mcmp>
   13bf8:	103ebc0e 	bge	r2,zero,136ec <_dtoa_r+0xb20>
   13bfc:	e00b883a 	mov	r5,fp
   13c00:	8009883a 	mov	r4,r16
   13c04:	01800284 	movi	r6,10
   13c08:	000f883a 	mov	r7,zero
   13c0c:	00160b40 	call	160b4 <__multadd>
   13c10:	1039883a 	mov	fp,r2
   13c14:	d8800617 	ldw	r2,24(sp)
   13c18:	d8c00c17 	ldw	r3,48(sp)
   13c1c:	10bfffc4 	addi	r2,r2,-1
   13c20:	d8800615 	stw	r2,24(sp)
   13c24:	1801571e 	bne	r3,zero,14184 <_dtoa_r+0x15b8>
   13c28:	d9c00e17 	ldw	r7,56(sp)
   13c2c:	d9c00915 	stw	r7,36(sp)
   13c30:	003eae06 	br	136ec <_dtoa_r+0xb20>
   13c34:	a0800417 	ldw	r2,16(r20)
   13c38:	10800104 	addi	r2,r2,4
   13c3c:	1085883a 	add	r2,r2,r2
   13c40:	1085883a 	add	r2,r2,r2
   13c44:	a085883a 	add	r2,r20,r2
   13c48:	11000017 	ldw	r4,0(r2)
   13c4c:	00162fc0 	call	162fc <__hi0bits>
   13c50:	00c00804 	movi	r3,32
   13c54:	1885c83a 	sub	r2,r3,r2
   13c58:	003e8306 	br	13668 <_dtoa_r+0xa9c>
   13c5c:	d9c00417 	ldw	r7,16(sp)
   13c60:	00800084 	movi	r2,2
   13c64:	11fea30e 	bge	r2,r7,136f4 <_dtoa_r+0xb28>
   13c68:	d8800917 	ldw	r2,36(sp)
   13c6c:	103f8c1e 	bne	r2,zero,13aa0 <_dtoa_r+0xed4>
   13c70:	a00b883a 	mov	r5,r20
   13c74:	8009883a 	mov	r4,r16
   13c78:	01800144 	movi	r6,5
   13c7c:	000f883a 	mov	r7,zero
   13c80:	00160b40 	call	160b4 <__multadd>
   13c84:	e009883a 	mov	r4,fp
   13c88:	100b883a 	mov	r5,r2
   13c8c:	1029883a 	mov	r20,r2
   13c90:	00169300 	call	16930 <__mcmp>
   13c94:	00bf820e 	bge	zero,r2,13aa0 <_dtoa_r+0xed4>
   13c98:	00800c44 	movi	r2,49
   13c9c:	b8800005 	stb	r2,0(r23)
   13ca0:	d8800617 	ldw	r2,24(sp)
   13ca4:	bd800044 	addi	r22,r23,1
   13ca8:	10800044 	addi	r2,r2,1
   13cac:	d8800615 	stw	r2,24(sp)
   13cb0:	003f7f06 	br	13ab0 <_dtoa_r+0xee4>
   13cb4:	dc000417 	ldw	r16,16(sp)
   13cb8:	003d6506 	br	13250 <_dtoa_r+0x684>
   13cbc:	9009883a 	mov	r4,r18
   13cc0:	00194600 	call	19460 <__floatsidf>
   13cc4:	1009883a 	mov	r4,r2
   13cc8:	180b883a 	mov	r5,r3
   13ccc:	980d883a 	mov	r6,r19
   13cd0:	a00f883a 	mov	r7,r20
   13cd4:	0018dec0 	call	18dec <__muldf3>
   13cd8:	1009883a 	mov	r4,r2
   13cdc:	180b883a 	mov	r5,r3
   13ce0:	000d883a 	mov	r6,zero
   13ce4:	01d00734 	movhi	r7,16412
   13ce8:	0018d380 	call	18d38 <__adddf3>
   13cec:	057f3034 	movhi	r21,64704
   13cf0:	1025883a 	mov	r18,r2
   13cf4:	1d6b883a 	add	r21,r3,r21
   13cf8:	9809883a 	mov	r4,r19
   13cfc:	a00b883a 	mov	r5,r20
   13d00:	000d883a 	mov	r6,zero
   13d04:	01d00534 	movhi	r7,16404
   13d08:	0018d8c0 	call	18d8c <__subdf3>
   13d0c:	1009883a 	mov	r4,r2
   13d10:	180b883a 	mov	r5,r3
   13d14:	900d883a 	mov	r6,r18
   13d18:	a80f883a 	mov	r7,r21
   13d1c:	1027883a 	mov	r19,r2
   13d20:	1829883a 	mov	r20,r3
   13d24:	001933c0 	call	1933c <__gtdf2>
   13d28:	00806616 	blt	zero,r2,13ec4 <_dtoa_r+0x12f8>
   13d2c:	a9e0003c 	xorhi	r7,r21,32768
   13d30:	9809883a 	mov	r4,r19
   13d34:	a00b883a 	mov	r5,r20
   13d38:	900d883a 	mov	r6,r18
   13d3c:	00194040 	call	19404 <__ltdf2>
   13d40:	103d710e 	bge	r2,zero,13308 <_dtoa_r+0x73c>
   13d44:	0029883a 	mov	r20,zero
   13d48:	002b883a 	mov	r21,zero
   13d4c:	003f5406 	br	13aa0 <_dtoa_r+0xed4>
   13d50:	d9800a17 	ldw	r6,40(sp)
   13d54:	e00b883a 	mov	r5,fp
   13d58:	8009883a 	mov	r4,r16
   13d5c:	00166a80 	call	166a8 <__pow5mult>
   13d60:	1039883a 	mov	fp,r2
   13d64:	003e2e06 	br	13620 <_dtoa_r+0xa54>
   13d68:	d8000c15 	stw	zero,48(sp)
   13d6c:	003f2006 	br	139f0 <_dtoa_r+0xe24>
   13d70:	00800044 	movi	r2,1
   13d74:	d8800c15 	stw	r2,48(sp)
   13d78:	003c5d06 	br	12ef0 <_dtoa_r+0x324>
   13d7c:	d8c00a17 	ldw	r3,40(sp)
   13d80:	d9000b17 	ldw	r4,44(sp)
   13d84:	dcc00a15 	stw	r19,40(sp)
   13d88:	98c5c83a 	sub	r2,r19,r3
   13d8c:	2089883a 	add	r4,r4,r2
   13d90:	d9000b15 	stw	r4,44(sp)
   13d94:	0027883a 	mov	r19,zero
   13d98:	003df206 	br	13564 <_dtoa_r+0x998>
   13d9c:	d9000317 	ldw	r4,12(sp)
   13da0:	8829883a 	mov	r20,r17
   13da4:	04800084 	movi	r18,2
   13da8:	d9001015 	stw	r4,64(sp)
   13dac:	003c8106 	br	12fb4 <_dtoa_r+0x3e8>
   13db0:	04800044 	movi	r18,1
   13db4:	dc800e15 	stw	r18,56(sp)
   13db8:	dc800915 	stw	r18,36(sp)
   13dbc:	dc802115 	stw	r18,132(sp)
   13dc0:	003f1206 	br	13a0c <_dtoa_r+0xe40>
   13dc4:	d8800617 	ldw	r2,24(sp)
   13dc8:	00abc83a 	sub	r21,zero,r2
   13dcc:	a800a426 	beq	r21,zero,14060 <_dtoa_r+0x1494>
   13dd0:	a88003cc 	andi	r2,r21,15
   13dd4:	100490fa 	slli	r2,r2,3
   13dd8:	00c000f4 	movhi	r3,3
   13ddc:	18e05f04 	addi	r3,r3,-32388
   13de0:	d9000317 	ldw	r4,12(sp)
   13de4:	1885883a 	add	r2,r3,r2
   13de8:	11800017 	ldw	r6,0(r2)
   13dec:	11c00117 	ldw	r7,4(r2)
   13df0:	a82bd13a 	srai	r21,r21,4
   13df4:	880b883a 	mov	r5,r17
   13df8:	0018dec0 	call	18dec <__muldf3>
   13dfc:	1027883a 	mov	r19,r2
   13e00:	1829883a 	mov	r20,r3
   13e04:	a800e826 	beq	r21,zero,141a8 <_dtoa_r+0x15dc>
   13e08:	058000f4 	movhi	r22,3
   13e0c:	b5a05504 	addi	r22,r22,-32428
   13e10:	04800084 	movi	r18,2
   13e14:	a980004c 	andi	r6,r21,1
   13e18:	1009883a 	mov	r4,r2
   13e1c:	a82bd07a 	srai	r21,r21,1
   13e20:	180b883a 	mov	r5,r3
   13e24:	30000426 	beq	r6,zero,13e38 <_dtoa_r+0x126c>
   13e28:	b1800017 	ldw	r6,0(r22)
   13e2c:	b1c00117 	ldw	r7,4(r22)
   13e30:	94800044 	addi	r18,r18,1
   13e34:	0018dec0 	call	18dec <__muldf3>
   13e38:	b5800204 	addi	r22,r22,8
   13e3c:	a83ff51e 	bne	r21,zero,13e14 <_dtoa_r+0x1248>
   13e40:	1027883a 	mov	r19,r2
   13e44:	1829883a 	mov	r20,r3
   13e48:	003c7306 	br	13018 <_dtoa_r+0x44c>
   13e4c:	21000044 	addi	r4,r4,1
   13e50:	11000005 	stb	r4,0(r2)
   13e54:	003e5c06 	br	137c8 <_dtoa_r+0xbfc>
   13e58:	a9400117 	ldw	r5,4(r21)
   13e5c:	8009883a 	mov	r4,r16
   13e60:	0015fe40 	call	15fe4 <_Balloc>
   13e64:	a9800417 	ldw	r6,16(r21)
   13e68:	11000304 	addi	r4,r2,12
   13e6c:	a9400304 	addi	r5,r21,12
   13e70:	31800084 	addi	r6,r6,2
   13e74:	318d883a 	add	r6,r6,r6
   13e78:	318d883a 	add	r6,r6,r6
   13e7c:	1023883a 	mov	r17,r2
   13e80:	0015c3c0 	call	15c3c <memcpy>
   13e84:	8009883a 	mov	r4,r16
   13e88:	880b883a 	mov	r5,r17
   13e8c:	01800044 	movi	r6,1
   13e90:	00167d40 	call	167d4 <__lshift>
   13e94:	1027883a 	mov	r19,r2
   13e98:	003e8f06 	br	138d8 <_dtoa_r+0xd0c>
   13e9c:	b807883a 	mov	r3,r23
   13ea0:	00800e44 	movi	r2,57
   13ea4:	ddc00717 	ldw	r23,28(sp)
   13ea8:	18809026 	beq	r3,r2,140ec <_dtoa_r+0x1520>
   13eac:	18c00044 	addi	r3,r3,1
   13eb0:	003f2b06 	br	13b60 <_dtoa_r+0xf94>
   13eb4:	b807883a 	mov	r3,r23
   13eb8:	982b883a 	mov	r21,r19
   13ebc:	ddc00717 	ldw	r23,28(sp)
   13ec0:	003e2406 	br	13754 <_dtoa_r+0xb88>
   13ec4:	0029883a 	mov	r20,zero
   13ec8:	002b883a 	mov	r21,zero
   13ecc:	003f7206 	br	13c98 <_dtoa_r+0x10cc>
   13ed0:	593fffc4 	addi	r4,r11,-1
   13ed4:	200490fa 	slli	r2,r4,3
   13ed8:	00c000f4 	movhi	r3,3
   13edc:	18e05f04 	addi	r3,r3,-32388
   13ee0:	d9001015 	stw	r4,64(sp)
   13ee4:	1885883a 	add	r2,r3,r2
   13ee8:	11000017 	ldw	r4,0(r2)
   13eec:	11400117 	ldw	r5,4(r2)
   13ef0:	900d883a 	mov	r6,r18
   13ef4:	a80f883a 	mov	r7,r21
   13ef8:	dac01615 	stw	r11,88(sp)
   13efc:	0018dec0 	call	18dec <__muldf3>
   13f00:	a00b883a 	mov	r5,r20
   13f04:	9809883a 	mov	r4,r19
   13f08:	d8c01215 	stw	r3,72(sp)
   13f0c:	d8801115 	stw	r2,68(sp)
   13f10:	00195340 	call	19534 <__fixdfsi>
   13f14:	1009883a 	mov	r4,r2
   13f18:	1025883a 	mov	r18,r2
   13f1c:	00194600 	call	19460 <__floatsidf>
   13f20:	9809883a 	mov	r4,r19
   13f24:	a00b883a 	mov	r5,r20
   13f28:	100d883a 	mov	r6,r2
   13f2c:	180f883a 	mov	r7,r3
   13f30:	94800c04 	addi	r18,r18,48
   13f34:	0018d8c0 	call	18d8c <__subdf3>
   13f38:	bc800005 	stb	r18,0(r23)
   13f3c:	dac01617 	ldw	r11,88(sp)
   13f40:	102b883a 	mov	r21,r2
   13f44:	00800044 	movi	r2,1
   13f48:	bd800044 	addi	r22,r23,1
   13f4c:	1815883a 	mov	r10,r3
   13f50:	58802226 	beq	r11,r2,13fdc <_dtoa_r+0x1410>
   13f54:	bad7883a 	add	r11,r23,r11
   13f58:	dc001415 	stw	r16,80(sp)
   13f5c:	a805883a 	mov	r2,r21
   13f60:	b027883a 	mov	r19,r22
   13f64:	5821883a 	mov	r16,r11
   13f68:	882b883a 	mov	r21,r17
   13f6c:	000d883a 	mov	r6,zero
   13f70:	01d00934 	movhi	r7,16420
   13f74:	1009883a 	mov	r4,r2
   13f78:	180b883a 	mov	r5,r3
   13f7c:	0018dec0 	call	18dec <__muldf3>
   13f80:	180b883a 	mov	r5,r3
   13f84:	1009883a 	mov	r4,r2
   13f88:	1829883a 	mov	r20,r3
   13f8c:	1023883a 	mov	r17,r2
   13f90:	00195340 	call	19534 <__fixdfsi>
   13f94:	1009883a 	mov	r4,r2
   13f98:	1025883a 	mov	r18,r2
   13f9c:	00194600 	call	19460 <__floatsidf>
   13fa0:	8809883a 	mov	r4,r17
   13fa4:	a00b883a 	mov	r5,r20
   13fa8:	100d883a 	mov	r6,r2
   13fac:	180f883a 	mov	r7,r3
   13fb0:	94800c04 	addi	r18,r18,48
   13fb4:	0018d8c0 	call	18d8c <__subdf3>
   13fb8:	9cc00044 	addi	r19,r19,1
   13fbc:	9cbfffc5 	stb	r18,-1(r19)
   13fc0:	9c3fea1e 	bne	r19,r16,13f6c <_dtoa_r+0x13a0>
   13fc4:	1815883a 	mov	r10,r3
   13fc8:	d8c01017 	ldw	r3,64(sp)
   13fcc:	dc001417 	ldw	r16,80(sp)
   13fd0:	a823883a 	mov	r17,r21
   13fd4:	b0ed883a 	add	r22,r22,r3
   13fd8:	102b883a 	mov	r21,r2
   13fdc:	d9001117 	ldw	r4,68(sp)
   13fe0:	d9401217 	ldw	r5,72(sp)
   13fe4:	000d883a 	mov	r6,zero
   13fe8:	01cff834 	movhi	r7,16352
   13fec:	da801515 	stw	r10,84(sp)
   13ff0:	0018d380 	call	18d38 <__adddf3>
   13ff4:	da801517 	ldw	r10,84(sp)
   13ff8:	1009883a 	mov	r4,r2
   13ffc:	180b883a 	mov	r5,r3
   14000:	500f883a 	mov	r7,r10
   14004:	a80d883a 	mov	r6,r21
   14008:	00194040 	call	19404 <__ltdf2>
   1400c:	da801517 	ldw	r10,84(sp)
   14010:	10003b0e 	bge	r2,zero,14100 <_dtoa_r+0x1534>
   14014:	d9c01317 	ldw	r7,76(sp)
   14018:	b53fffc3 	ldbu	r20,-1(r22)
   1401c:	d9c00615 	stw	r7,24(sp)
   14020:	003d3106 	br	134e8 <_dtoa_r+0x91c>
   14024:	d8800817 	ldw	r2,32(sp)
   14028:	11e5c83a 	sub	r18,r2,r7
   1402c:	0005883a 	mov	r2,zero
   14030:	003d5006 	br	13574 <_dtoa_r+0x9a8>
   14034:	05800044 	movi	r22,1
   14038:	003dc406 	br	1374c <_dtoa_r+0xb80>
   1403c:	a5000044 	addi	r20,r20,1
   14040:	15000005 	stb	r20,0(r2)
   14044:	003c8206 	br	13250 <_dtoa_r+0x684>
   14048:	d8800217 	ldw	r2,8(sp)
   1404c:	00c00d84 	movi	r3,54
   14050:	dcc00a17 	ldw	r19,40(sp)
   14054:	1885c83a 	sub	r2,r3,r2
   14058:	dc800817 	ldw	r18,32(sp)
   1405c:	003d4506 	br	13574 <_dtoa_r+0x9a8>
   14060:	dcc00317 	ldw	r19,12(sp)
   14064:	8829883a 	mov	r20,r17
   14068:	04800084 	movi	r18,2
   1406c:	003bea06 	br	13018 <_dtoa_r+0x44c>
   14070:	d9000917 	ldw	r4,36(sp)
   14074:	203f1126 	beq	r4,zero,13cbc <_dtoa_r+0x10f0>
   14078:	d9c00e17 	ldw	r7,56(sp)
   1407c:	01fca20e 	bge	zero,r7,13308 <_dtoa_r+0x73c>
   14080:	a00b883a 	mov	r5,r20
   14084:	9809883a 	mov	r4,r19
   14088:	000d883a 	mov	r6,zero
   1408c:	01d00934 	movhi	r7,16420
   14090:	0018dec0 	call	18dec <__muldf3>
   14094:	91000044 	addi	r4,r18,1
   14098:	1027883a 	mov	r19,r2
   1409c:	1829883a 	mov	r20,r3
   140a0:	00194600 	call	19460 <__floatsidf>
   140a4:	9809883a 	mov	r4,r19
   140a8:	a00b883a 	mov	r5,r20
   140ac:	100d883a 	mov	r6,r2
   140b0:	180f883a 	mov	r7,r3
   140b4:	0018dec0 	call	18dec <__muldf3>
   140b8:	1009883a 	mov	r4,r2
   140bc:	180b883a 	mov	r5,r3
   140c0:	000d883a 	mov	r6,zero
   140c4:	01d00734 	movhi	r7,16412
   140c8:	0018d380 	call	18d38 <__adddf3>
   140cc:	1025883a 	mov	r18,r2
   140d0:	d8800617 	ldw	r2,24(sp)
   140d4:	057f3034 	movhi	r21,64704
   140d8:	1d6b883a 	add	r21,r3,r21
   140dc:	10bfffc4 	addi	r2,r2,-1
   140e0:	d8801315 	stw	r2,76(sp)
   140e4:	dac00e17 	ldw	r11,56(sp)
   140e8:	003be706 	br	13088 <_dtoa_r+0x4bc>
   140ec:	01000e44 	movi	r4,57
   140f0:	91000005 	stb	r4,0(r18)
   140f4:	95800044 	addi	r22,r18,1
   140f8:	982b883a 	mov	r21,r19
   140fc:	003da106 	br	13784 <_dtoa_r+0xbb8>
   14100:	d9801117 	ldw	r6,68(sp)
   14104:	d9c01217 	ldw	r7,72(sp)
   14108:	0009883a 	mov	r4,zero
   1410c:	014ff834 	movhi	r5,16352
   14110:	da801515 	stw	r10,84(sp)
   14114:	0018d8c0 	call	18d8c <__subdf3>
   14118:	da801517 	ldw	r10,84(sp)
   1411c:	1009883a 	mov	r4,r2
   14120:	180b883a 	mov	r5,r3
   14124:	a80d883a 	mov	r6,r21
   14128:	500f883a 	mov	r7,r10
   1412c:	001933c0 	call	1933c <__gtdf2>
   14130:	00bc750e 	bge	zero,r2,13308 <_dtoa_r+0x73c>
   14134:	01000c04 	movi	r4,48
   14138:	00000106 	br	14140 <_dtoa_r+0x1574>
   1413c:	102d883a 	mov	r22,r2
   14140:	b0bfffc4 	addi	r2,r22,-1
   14144:	10c00007 	ldb	r3,0(r2)
   14148:	193ffc26 	beq	r3,r4,1413c <_dtoa_r+0x1570>
   1414c:	d8801317 	ldw	r2,76(sp)
   14150:	d8800615 	stw	r2,24(sp)
   14154:	003c3e06 	br	13250 <_dtoa_r+0x684>
   14158:	d9001317 	ldw	r4,76(sp)
   1415c:	df001117 	ldw	fp,68(sp)
   14160:	d9000615 	stw	r4,24(sp)
   14164:	003ce006 	br	134e8 <_dtoa_r+0x91c>
   14168:	df001117 	ldw	fp,68(sp)
   1416c:	dc401217 	ldw	r17,72(sp)
   14170:	003c6506 	br	13308 <_dtoa_r+0x73c>
   14174:	103e7a1e 	bne	r2,zero,13b60 <_dtoa_r+0xf94>
   14178:	1880004c 	andi	r2,r3,1
   1417c:	103e7826 	beq	r2,zero,13b60 <_dtoa_r+0xf94>
   14180:	003e7406 	br	13b54 <_dtoa_r+0xf88>
   14184:	8009883a 	mov	r4,r16
   14188:	a80b883a 	mov	r5,r21
   1418c:	01800284 	movi	r6,10
   14190:	000f883a 	mov	r7,zero
   14194:	00160b40 	call	160b4 <__multadd>
   14198:	d9000e17 	ldw	r4,56(sp)
   1419c:	102b883a 	mov	r21,r2
   141a0:	d9000915 	stw	r4,36(sp)
   141a4:	003d5106 	br	136ec <_dtoa_r+0xb20>
   141a8:	04800084 	movi	r18,2
   141ac:	003b9a06 	br	13018 <_dtoa_r+0x44c>
   141b0:	d8c01317 	ldw	r3,76(sp)
   141b4:	d8c00615 	stw	r3,24(sp)
   141b8:	003ccb06 	br	134e8 <_dtoa_r+0x91c>
   141bc:	d8c01317 	ldw	r3,76(sp)
   141c0:	d8c00615 	stw	r3,24(sp)
   141c4:	003c2206 	br	13250 <_dtoa_r+0x684>
   141c8:	20fd3826 	beq	r4,r3,136ac <_dtoa_r+0xae0>
   141cc:	00c00f04 	movi	r3,60
   141d0:	1885c83a 	sub	r2,r3,r2
   141d4:	003da906 	br	1387c <_dtoa_r+0xcb0>
   141d8:	000b883a 	mov	r5,zero
   141dc:	003b5406 	br	12f30 <_dtoa_r+0x364>
   141e0:	04c00044 	movi	r19,1
   141e4:	003b3b06 	br	12ed4 <_dtoa_r+0x308>

000141e8 <_fflush_r>:
   141e8:	defffb04 	addi	sp,sp,-20
   141ec:	dcc00315 	stw	r19,12(sp)
   141f0:	dc400115 	stw	r17,4(sp)
   141f4:	dfc00415 	stw	ra,16(sp)
   141f8:	dc800215 	stw	r18,8(sp)
   141fc:	dc000015 	stw	r16,0(sp)
   14200:	2027883a 	mov	r19,r4
   14204:	2823883a 	mov	r17,r5
   14208:	20000226 	beq	r4,zero,14214 <_fflush_r+0x2c>
   1420c:	20800e17 	ldw	r2,56(r4)
   14210:	10005726 	beq	r2,zero,14370 <_fflush_r+0x188>
   14214:	8880030b 	ldhu	r2,12(r17)
   14218:	10c0020c 	andi	r3,r2,8
   1421c:	18ffffcc 	andi	r3,r3,65535
   14220:	18e0001c 	xori	r3,r3,32768
   14224:	18e00004 	addi	r3,r3,-32768
   14228:	1800311e 	bne	r3,zero,142f0 <_fflush_r+0x108>
   1422c:	89000117 	ldw	r4,4(r17)
   14230:	10c20014 	ori	r3,r2,2048
   14234:	88c0030d 	sth	r3,12(r17)
   14238:	180b883a 	mov	r5,r3
   1423c:	0100520e 	bge	zero,r4,14388 <_fflush_r+0x1a0>
   14240:	88c00a17 	ldw	r3,40(r17)
   14244:	18002226 	beq	r3,zero,142d0 <_fflush_r+0xe8>
   14248:	1084000c 	andi	r2,r2,4096
   1424c:	10bfffcc 	andi	r2,r2,65535
   14250:	10a0001c 	xori	r2,r2,32768
   14254:	10a00004 	addi	r2,r2,-32768
   14258:	10004e26 	beq	r2,zero,14394 <_fflush_r+0x1ac>
   1425c:	8c001417 	ldw	r16,80(r17)
   14260:	2940010c 	andi	r5,r5,4
   14264:	297fffcc 	andi	r5,r5,65535
   14268:	2960001c 	xori	r5,r5,32768
   1426c:	29600004 	addi	r5,r5,-32768
   14270:	28000626 	beq	r5,zero,1428c <_fflush_r+0xa4>
   14274:	89000117 	ldw	r4,4(r17)
   14278:	88800c17 	ldw	r2,48(r17)
   1427c:	8121c83a 	sub	r16,r16,r4
   14280:	10000226 	beq	r2,zero,1428c <_fflush_r+0xa4>
   14284:	88800f17 	ldw	r2,60(r17)
   14288:	80a1c83a 	sub	r16,r16,r2
   1428c:	89400717 	ldw	r5,28(r17)
   14290:	9809883a 	mov	r4,r19
   14294:	800d883a 	mov	r6,r16
   14298:	000f883a 	mov	r7,zero
   1429c:	183ee83a 	callr	r3
   142a0:	8080281e 	bne	r16,r2,14344 <_fflush_r+0x15c>
   142a4:	8880030b 	ldhu	r2,12(r17)
   142a8:	88c00417 	ldw	r3,16(r17)
   142ac:	88000115 	stw	zero,4(r17)
   142b0:	113dffcc 	andi	r4,r2,63487
   142b4:	1084000c 	andi	r2,r2,4096
   142b8:	10bfffcc 	andi	r2,r2,65535
   142bc:	10a0001c 	xori	r2,r2,32768
   142c0:	8900030d 	sth	r4,12(r17)
   142c4:	88c00015 	stw	r3,0(r17)
   142c8:	10a00004 	addi	r2,r2,-32768
   142cc:	10002c1e 	bne	r2,zero,14380 <_fflush_r+0x198>
   142d0:	0005883a 	mov	r2,zero
   142d4:	dfc00417 	ldw	ra,16(sp)
   142d8:	dcc00317 	ldw	r19,12(sp)
   142dc:	dc800217 	ldw	r18,8(sp)
   142e0:	dc400117 	ldw	r17,4(sp)
   142e4:	dc000017 	ldw	r16,0(sp)
   142e8:	dec00504 	addi	sp,sp,20
   142ec:	f800283a 	ret
   142f0:	8c800417 	ldw	r18,16(r17)
   142f4:	903ff626 	beq	r18,zero,142d0 <_fflush_r+0xe8>
   142f8:	8c000017 	ldw	r16,0(r17)
   142fc:	108000cc 	andi	r2,r2,3
   14300:	8c800015 	stw	r18,0(r17)
   14304:	84a1c83a 	sub	r16,r16,r18
   14308:	10001b1e 	bne	r2,zero,14378 <_fflush_r+0x190>
   1430c:	88800517 	ldw	r2,20(r17)
   14310:	88800215 	stw	r2,8(r17)
   14314:	04000316 	blt	zero,r16,14324 <_fflush_r+0x13c>
   14318:	003fed06 	br	142d0 <_fflush_r+0xe8>
   1431c:	90a5883a 	add	r18,r18,r2
   14320:	043feb0e 	bge	zero,r16,142d0 <_fflush_r+0xe8>
   14324:	88800917 	ldw	r2,36(r17)
   14328:	89400717 	ldw	r5,28(r17)
   1432c:	800f883a 	mov	r7,r16
   14330:	900d883a 	mov	r6,r18
   14334:	9809883a 	mov	r4,r19
   14338:	103ee83a 	callr	r2
   1433c:	80a1c83a 	sub	r16,r16,r2
   14340:	00bff616 	blt	zero,r2,1431c <_fflush_r+0x134>
   14344:	88c0030b 	ldhu	r3,12(r17)
   14348:	00bfffc4 	movi	r2,-1
   1434c:	18c01014 	ori	r3,r3,64
   14350:	88c0030d 	sth	r3,12(r17)
   14354:	dfc00417 	ldw	ra,16(sp)
   14358:	dcc00317 	ldw	r19,12(sp)
   1435c:	dc800217 	ldw	r18,8(sp)
   14360:	dc400117 	ldw	r17,4(sp)
   14364:	dc000017 	ldw	r16,0(sp)
   14368:	dec00504 	addi	sp,sp,20
   1436c:	f800283a 	ret
   14370:	00144a40 	call	144a4 <__sinit>
   14374:	003fa706 	br	14214 <_fflush_r+0x2c>
   14378:	0005883a 	mov	r2,zero
   1437c:	003fe406 	br	14310 <_fflush_r+0x128>
   14380:	8c001415 	stw	r16,80(r17)
   14384:	003fd206 	br	142d0 <_fflush_r+0xe8>
   14388:	88c00f17 	ldw	r3,60(r17)
   1438c:	00ffac16 	blt	zero,r3,14240 <_fflush_r+0x58>
   14390:	003fcf06 	br	142d0 <_fflush_r+0xe8>
   14394:	89400717 	ldw	r5,28(r17)
   14398:	9809883a 	mov	r4,r19
   1439c:	000d883a 	mov	r6,zero
   143a0:	01c00044 	movi	r7,1
   143a4:	183ee83a 	callr	r3
   143a8:	1021883a 	mov	r16,r2
   143ac:	00bfffc4 	movi	r2,-1
   143b0:	80800326 	beq	r16,r2,143c0 <_fflush_r+0x1d8>
   143b4:	8940030b 	ldhu	r5,12(r17)
   143b8:	88c00a17 	ldw	r3,40(r17)
   143bc:	003fa806 	br	14260 <_fflush_r+0x78>
   143c0:	98c00017 	ldw	r3,0(r19)
   143c4:	00800744 	movi	r2,29
   143c8:	18bfde1e 	bne	r3,r2,14344 <_fflush_r+0x15c>
   143cc:	003fc006 	br	142d0 <_fflush_r+0xe8>

000143d0 <fflush>:
   143d0:	200b883a 	mov	r5,r4
   143d4:	20000426 	beq	r4,zero,143e8 <fflush+0x18>
   143d8:	008000f4 	movhi	r2,3
   143dc:	10a76e04 	addi	r2,r2,-25160
   143e0:	11000017 	ldw	r4,0(r2)
   143e4:	00141e81 	jmpi	141e8 <_fflush_r>
   143e8:	008000f4 	movhi	r2,3
   143ec:	10a76d04 	addi	r2,r2,-25164
   143f0:	11000017 	ldw	r4,0(r2)
   143f4:	01400074 	movhi	r5,1
   143f8:	29507a04 	addi	r5,r5,16872
   143fc:	00150841 	jmpi	15084 <_fwalk_reent>

00014400 <__fp_lock>:
   14400:	0005883a 	mov	r2,zero
   14404:	f800283a 	ret

00014408 <__fp_unlock>:
   14408:	0005883a 	mov	r2,zero
   1440c:	f800283a 	ret

00014410 <_cleanup_r>:
   14410:	01400074 	movhi	r5,1
   14414:	295eed04 	addi	r5,r5,31668
   14418:	0014fdc1 	jmpi	14fdc <_fwalk>

0001441c <__sfmoreglue>:
   1441c:	defffc04 	addi	sp,sp,-16
   14420:	dc800215 	stw	r18,8(sp)
   14424:	2825883a 	mov	r18,r5
   14428:	dc000015 	stw	r16,0(sp)
   1442c:	01401704 	movi	r5,92
   14430:	2021883a 	mov	r16,r4
   14434:	9009883a 	mov	r4,r18
   14438:	dfc00315 	stw	ra,12(sp)
   1443c:	dc400115 	stw	r17,4(sp)
   14440:	00107940 	call	10794 <__mulsi3>
   14444:	8009883a 	mov	r4,r16
   14448:	11400304 	addi	r5,r2,12
   1444c:	1023883a 	mov	r17,r2
   14450:	00153c00 	call	153c0 <_malloc_r>
   14454:	1021883a 	mov	r16,r2
   14458:	10000726 	beq	r2,zero,14478 <__sfmoreglue+0x5c>
   1445c:	11000304 	addi	r4,r2,12
   14460:	10000015 	stw	zero,0(r2)
   14464:	14800115 	stw	r18,4(r2)
   14468:	11000215 	stw	r4,8(r2)
   1446c:	000b883a 	mov	r5,zero
   14470:	880d883a 	mov	r6,r17
   14474:	0015f080 	call	15f08 <memset>
   14478:	8005883a 	mov	r2,r16
   1447c:	dfc00317 	ldw	ra,12(sp)
   14480:	dc800217 	ldw	r18,8(sp)
   14484:	dc400117 	ldw	r17,4(sp)
   14488:	dc000017 	ldw	r16,0(sp)
   1448c:	dec00404 	addi	sp,sp,16
   14490:	f800283a 	ret

00014494 <_cleanup>:
   14494:	008000f4 	movhi	r2,3
   14498:	10a76d04 	addi	r2,r2,-25164
   1449c:	11000017 	ldw	r4,0(r2)
   144a0:	00144101 	jmpi	14410 <_cleanup_r>

000144a4 <__sinit>:
   144a4:	20800e17 	ldw	r2,56(r4)
   144a8:	1000401e 	bne	r2,zero,145ac <__sinit+0x108>
   144ac:	21400117 	ldw	r5,4(r4)
   144b0:	01800074 	movhi	r6,1
   144b4:	31910404 	addi	r6,r6,17424
   144b8:	20c00217 	ldw	r3,8(r4)
   144bc:	21800f15 	stw	r6,60(r4)
   144c0:	2080bb04 	addi	r2,r4,748
   144c4:	02400044 	movi	r9,1
   144c8:	018000c4 	movi	r6,3
   144cc:	2180b915 	stw	r6,740(r4)
   144d0:	2080ba15 	stw	r2,744(r4)
   144d4:	22400e15 	stw	r9,56(r4)
   144d8:	20800317 	ldw	r2,12(r4)
   144dc:	2000b815 	stw	zero,736(r4)
   144e0:	02000074 	movhi	r8,1
   144e4:	421dbe04 	addi	r8,r8,30456
   144e8:	01c00074 	movhi	r7,1
   144ec:	39ddd304 	addi	r7,r7,30540
   144f0:	01800074 	movhi	r6,1
   144f4:	319df504 	addi	r6,r6,30676
   144f8:	01000074 	movhi	r4,1
   144fc:	211e0c04 	addi	r4,r4,30768
   14500:	02800104 	movi	r10,4
   14504:	28000015 	stw	zero,0(r5)
   14508:	28000115 	stw	zero,4(r5)
   1450c:	28000215 	stw	zero,8(r5)
   14510:	2a80030d 	sth	r10,12(r5)
   14514:	2800038d 	sth	zero,14(r5)
   14518:	28000415 	stw	zero,16(r5)
   1451c:	28000515 	stw	zero,20(r5)
   14520:	28000615 	stw	zero,24(r5)
   14524:	29400715 	stw	r5,28(r5)
   14528:	2a000815 	stw	r8,32(r5)
   1452c:	29c00915 	stw	r7,36(r5)
   14530:	29800a15 	stw	r6,40(r5)
   14534:	29000b15 	stw	r4,44(r5)
   14538:	01400284 	movi	r5,10
   1453c:	18000015 	stw	zero,0(r3)
   14540:	18000115 	stw	zero,4(r3)
   14544:	18000215 	stw	zero,8(r3)
   14548:	1940030d 	sth	r5,12(r3)
   1454c:	1a40038d 	sth	r9,14(r3)
   14550:	18000415 	stw	zero,16(r3)
   14554:	18000515 	stw	zero,20(r3)
   14558:	18000615 	stw	zero,24(r3)
   1455c:	18c00715 	stw	r3,28(r3)
   14560:	1a000815 	stw	r8,32(r3)
   14564:	19c00915 	stw	r7,36(r3)
   14568:	19800a15 	stw	r6,40(r3)
   1456c:	19000b15 	stw	r4,44(r3)
   14570:	00c00484 	movi	r3,18
   14574:	10c0030d 	sth	r3,12(r2)
   14578:	00c00084 	movi	r3,2
   1457c:	10000015 	stw	zero,0(r2)
   14580:	10000115 	stw	zero,4(r2)
   14584:	10000215 	stw	zero,8(r2)
   14588:	10c0038d 	sth	r3,14(r2)
   1458c:	10000415 	stw	zero,16(r2)
   14590:	10000515 	stw	zero,20(r2)
   14594:	10000615 	stw	zero,24(r2)
   14598:	10800715 	stw	r2,28(r2)
   1459c:	12000815 	stw	r8,32(r2)
   145a0:	11c00915 	stw	r7,36(r2)
   145a4:	11800a15 	stw	r6,40(r2)
   145a8:	11000b15 	stw	r4,44(r2)
   145ac:	f800283a 	ret

000145b0 <__sfp>:
   145b0:	defffc04 	addi	sp,sp,-16
   145b4:	008000f4 	movhi	r2,3
   145b8:	10a76d04 	addi	r2,r2,-25164
   145bc:	dc400115 	stw	r17,4(sp)
   145c0:	14400017 	ldw	r17,0(r2)
   145c4:	dc800215 	stw	r18,8(sp)
   145c8:	dfc00315 	stw	ra,12(sp)
   145cc:	88800e17 	ldw	r2,56(r17)
   145d0:	dc000015 	stw	r16,0(sp)
   145d4:	2025883a 	mov	r18,r4
   145d8:	10002826 	beq	r2,zero,1467c <__sfp+0xcc>
   145dc:	8c40b804 	addi	r17,r17,736
   145e0:	043fffc4 	movi	r16,-1
   145e4:	89400117 	ldw	r5,4(r17)
   145e8:	88800217 	ldw	r2,8(r17)
   145ec:	297fffc4 	addi	r5,r5,-1
   145f0:	28000a16 	blt	r5,zero,1461c <__sfp+0x6c>
   145f4:	10c0030f 	ldh	r3,12(r2)
   145f8:	18000c26 	beq	r3,zero,1462c <__sfp+0x7c>
   145fc:	10c01a04 	addi	r3,r2,104
   14600:	00000206 	br	1460c <__sfp+0x5c>
   14604:	19bfe90f 	ldh	r6,-92(r3)
   14608:	30000826 	beq	r6,zero,1462c <__sfp+0x7c>
   1460c:	297fffc4 	addi	r5,r5,-1
   14610:	18bffd04 	addi	r2,r3,-12
   14614:	18c01704 	addi	r3,r3,92
   14618:	2c3ffa1e 	bne	r5,r16,14604 <__sfp+0x54>
   1461c:	88800017 	ldw	r2,0(r17)
   14620:	10001926 	beq	r2,zero,14688 <__sfp+0xd8>
   14624:	1023883a 	mov	r17,r2
   14628:	003fee06 	br	145e4 <__sfp+0x34>
   1462c:	00ffffc4 	movi	r3,-1
   14630:	10c0038d 	sth	r3,14(r2)
   14634:	00c00044 	movi	r3,1
   14638:	10c0030d 	sth	r3,12(r2)
   1463c:	10000015 	stw	zero,0(r2)
   14640:	10000215 	stw	zero,8(r2)
   14644:	10000115 	stw	zero,4(r2)
   14648:	10000415 	stw	zero,16(r2)
   1464c:	10000515 	stw	zero,20(r2)
   14650:	10000615 	stw	zero,24(r2)
   14654:	10000c15 	stw	zero,48(r2)
   14658:	10000d15 	stw	zero,52(r2)
   1465c:	10001115 	stw	zero,68(r2)
   14660:	10001215 	stw	zero,72(r2)
   14664:	dfc00317 	ldw	ra,12(sp)
   14668:	dc800217 	ldw	r18,8(sp)
   1466c:	dc400117 	ldw	r17,4(sp)
   14670:	dc000017 	ldw	r16,0(sp)
   14674:	dec00404 	addi	sp,sp,16
   14678:	f800283a 	ret
   1467c:	8809883a 	mov	r4,r17
   14680:	00144a40 	call	144a4 <__sinit>
   14684:	003fd506 	br	145dc <__sfp+0x2c>
   14688:	9009883a 	mov	r4,r18
   1468c:	01400104 	movi	r5,4
   14690:	001441c0 	call	1441c <__sfmoreglue>
   14694:	88800015 	stw	r2,0(r17)
   14698:	103fe21e 	bne	r2,zero,14624 <__sfp+0x74>
   1469c:	00800304 	movi	r2,12
   146a0:	90800015 	stw	r2,0(r18)
   146a4:	0005883a 	mov	r2,zero
   146a8:	003fee06 	br	14664 <__sfp+0xb4>

000146ac <__sfp_lock_acquire>:
   146ac:	f800283a 	ret

000146b0 <__sfp_lock_release>:
   146b0:	f800283a 	ret

000146b4 <__sinit_lock_acquire>:
   146b4:	f800283a 	ret

000146b8 <__sinit_lock_release>:
   146b8:	f800283a 	ret

000146bc <__fp_lock_all>:
   146bc:	008000f4 	movhi	r2,3
   146c0:	10a76e04 	addi	r2,r2,-25160
   146c4:	11000017 	ldw	r4,0(r2)
   146c8:	01400074 	movhi	r5,1
   146cc:	29510004 	addi	r5,r5,17408
   146d0:	0014fdc1 	jmpi	14fdc <_fwalk>

000146d4 <__fp_unlock_all>:
   146d4:	008000f4 	movhi	r2,3
   146d8:	10a76e04 	addi	r2,r2,-25160
   146dc:	11000017 	ldw	r4,0(r2)
   146e0:	01400074 	movhi	r5,1
   146e4:	29510204 	addi	r5,r5,17416
   146e8:	0014fdc1 	jmpi	14fdc <_fwalk>

000146ec <_malloc_trim_r>:
   146ec:	defffb04 	addi	sp,sp,-20
   146f0:	dcc00315 	stw	r19,12(sp)
   146f4:	dc800215 	stw	r18,8(sp)
   146f8:	dc400115 	stw	r17,4(sp)
   146fc:	dc000015 	stw	r16,0(sp)
   14700:	2827883a 	mov	r19,r5
   14704:	dfc00415 	stw	ra,16(sp)
   14708:	044000f4 	movhi	r17,3
   1470c:	8c61e904 	addi	r17,r17,-30812
   14710:	2021883a 	mov	r16,r4
   14714:	001a3240 	call	1a324 <__malloc_lock>
   14718:	88800217 	ldw	r2,8(r17)
   1471c:	14800117 	ldw	r18,4(r2)
   14720:	00bfff04 	movi	r2,-4
   14724:	90a4703a 	and	r18,r18,r2
   14728:	9083fbc4 	addi	r2,r18,4079
   1472c:	14e7c83a 	sub	r19,r2,r19
   14730:	9826d33a 	srli	r19,r19,12
   14734:	0083ffc4 	movi	r2,4095
   14738:	9cffffc4 	addi	r19,r19,-1
   1473c:	9826933a 	slli	r19,r19,12
   14740:	14c0060e 	bge	r2,r19,1475c <_malloc_trim_r+0x70>
   14744:	8009883a 	mov	r4,r16
   14748:	000b883a 	mov	r5,zero
   1474c:	00176940 	call	17694 <_sbrk_r>
   14750:	88c00217 	ldw	r3,8(r17)
   14754:	1c87883a 	add	r3,r3,r18
   14758:	10c00a26 	beq	r2,r3,14784 <_malloc_trim_r+0x98>
   1475c:	8009883a 	mov	r4,r16
   14760:	001a3440 	call	1a344 <__malloc_unlock>
   14764:	0005883a 	mov	r2,zero
   14768:	dfc00417 	ldw	ra,16(sp)
   1476c:	dcc00317 	ldw	r19,12(sp)
   14770:	dc800217 	ldw	r18,8(sp)
   14774:	dc400117 	ldw	r17,4(sp)
   14778:	dc000017 	ldw	r16,0(sp)
   1477c:	dec00504 	addi	sp,sp,20
   14780:	f800283a 	ret
   14784:	8009883a 	mov	r4,r16
   14788:	04cbc83a 	sub	r5,zero,r19
   1478c:	00176940 	call	17694 <_sbrk_r>
   14790:	00ffffc4 	movi	r3,-1
   14794:	10c01326 	beq	r2,r3,147e4 <_malloc_trim_r+0xf8>
   14798:	008000f4 	movhi	r2,3
   1479c:	10a79004 	addi	r2,r2,-25024
   147a0:	11000017 	ldw	r4,0(r2)
   147a4:	88c00217 	ldw	r3,8(r17)
   147a8:	94e5c83a 	sub	r18,r18,r19
   147ac:	94800054 	ori	r18,r18,1
   147b0:	24e7c83a 	sub	r19,r4,r19
   147b4:	1c800115 	stw	r18,4(r3)
   147b8:	8009883a 	mov	r4,r16
   147bc:	14c00015 	stw	r19,0(r2)
   147c0:	001a3440 	call	1a344 <__malloc_unlock>
   147c4:	00800044 	movi	r2,1
   147c8:	dfc00417 	ldw	ra,16(sp)
   147cc:	dcc00317 	ldw	r19,12(sp)
   147d0:	dc800217 	ldw	r18,8(sp)
   147d4:	dc400117 	ldw	r17,4(sp)
   147d8:	dc000017 	ldw	r16,0(sp)
   147dc:	dec00504 	addi	sp,sp,20
   147e0:	f800283a 	ret
   147e4:	8009883a 	mov	r4,r16
   147e8:	000b883a 	mov	r5,zero
   147ec:	00176940 	call	17694 <_sbrk_r>
   147f0:	88c00217 	ldw	r3,8(r17)
   147f4:	014003c4 	movi	r5,15
   147f8:	10c9c83a 	sub	r4,r2,r3
   147fc:	293fd70e 	bge	r5,r4,1475c <_malloc_trim_r+0x70>
   14800:	014000f4 	movhi	r5,3
   14804:	29677004 	addi	r5,r5,-25152
   14808:	29400017 	ldw	r5,0(r5)
   1480c:	21000054 	ori	r4,r4,1
   14810:	19000115 	stw	r4,4(r3)
   14814:	1145c83a 	sub	r2,r2,r5
   14818:	014000f4 	movhi	r5,3
   1481c:	29679004 	addi	r5,r5,-25024
   14820:	28800015 	stw	r2,0(r5)
   14824:	003fcd06 	br	1475c <_malloc_trim_r+0x70>

00014828 <_free_r>:
   14828:	defffd04 	addi	sp,sp,-12
   1482c:	dc400115 	stw	r17,4(sp)
   14830:	dc000015 	stw	r16,0(sp)
   14834:	dfc00215 	stw	ra,8(sp)
   14838:	2821883a 	mov	r16,r5
   1483c:	2023883a 	mov	r17,r4
   14840:	28004b26 	beq	r5,zero,14970 <_free_r+0x148>
   14844:	001a3240 	call	1a324 <__malloc_lock>
   14848:	823fff17 	ldw	r8,-4(r16)
   1484c:	00bfff84 	movi	r2,-2
   14850:	81bffe04 	addi	r6,r16,-8
   14854:	4084703a 	and	r2,r8,r2
   14858:	3087883a 	add	r3,r6,r2
   1485c:	014000f4 	movhi	r5,3
   14860:	2961e904 	addi	r5,r5,-30812
   14864:	1a400117 	ldw	r9,4(r3)
   14868:	29000217 	ldw	r4,8(r5)
   1486c:	01ffff04 	movi	r7,-4
   14870:	49ce703a 	and	r7,r9,r7
   14874:	20c06526 	beq	r4,r3,14a0c <_free_r+0x1e4>
   14878:	19c00115 	stw	r7,4(r3)
   1487c:	4200004c 	andi	r8,r8,1
   14880:	40003026 	beq	r8,zero,14944 <_free_r+0x11c>
   14884:	0009883a 	mov	r4,zero
   14888:	19d1883a 	add	r8,r3,r7
   1488c:	42000117 	ldw	r8,4(r8)
   14890:	4200004c 	andi	r8,r8,1
   14894:	4000061e 	bne	r8,zero,148b0 <_free_r+0x88>
   14898:	11c5883a 	add	r2,r2,r7
   1489c:	19c00217 	ldw	r7,8(r3)
   148a0:	20004e26 	beq	r4,zero,149dc <_free_r+0x1b4>
   148a4:	18c00317 	ldw	r3,12(r3)
   148a8:	38c00315 	stw	r3,12(r7)
   148ac:	19c00215 	stw	r7,8(r3)
   148b0:	11c00054 	ori	r7,r2,1
   148b4:	3087883a 	add	r3,r6,r2
   148b8:	31c00115 	stw	r7,4(r6)
   148bc:	18800015 	stw	r2,0(r3)
   148c0:	20001a1e 	bne	r4,zero,1492c <_free_r+0x104>
   148c4:	00c07fc4 	movi	r3,511
   148c8:	18802e2e 	bgeu	r3,r2,14984 <_free_r+0x15c>
   148cc:	1006d27a 	srli	r3,r2,9
   148d0:	01000104 	movi	r4,4
   148d4:	20c06636 	bltu	r4,r3,14a70 <_free_r+0x248>
   148d8:	1008d1ba 	srli	r4,r2,6
   148dc:	21000e04 	addi	r4,r4,56
   148e0:	210f883a 	add	r7,r4,r4
   148e4:	39cf883a 	add	r7,r7,r7
   148e8:	39cf883a 	add	r7,r7,r7
   148ec:	29cf883a 	add	r7,r5,r7
   148f0:	38c00217 	ldw	r3,8(r7)
   148f4:	014000f4 	movhi	r5,3
   148f8:	2961e904 	addi	r5,r5,-30812
   148fc:	19c06126 	beq	r3,r7,14a84 <_free_r+0x25c>
   14900:	013fff04 	movi	r4,-4
   14904:	19400117 	ldw	r5,4(r3)
   14908:	290a703a 	and	r5,r5,r4
   1490c:	1140022e 	bgeu	r2,r5,14918 <_free_r+0xf0>
   14910:	18c00217 	ldw	r3,8(r3)
   14914:	38fffb1e 	bne	r7,r3,14904 <_free_r+0xdc>
   14918:	18800317 	ldw	r2,12(r3)
   1491c:	30800315 	stw	r2,12(r6)
   14920:	30c00215 	stw	r3,8(r6)
   14924:	11800215 	stw	r6,8(r2)
   14928:	19800315 	stw	r6,12(r3)
   1492c:	8809883a 	mov	r4,r17
   14930:	dfc00217 	ldw	ra,8(sp)
   14934:	dc400117 	ldw	r17,4(sp)
   14938:	dc000017 	ldw	r16,0(sp)
   1493c:	dec00304 	addi	sp,sp,12
   14940:	001a3441 	jmpi	1a344 <__malloc_unlock>
   14944:	813ffe17 	ldw	r4,-8(r16)
   14948:	2a400204 	addi	r9,r5,8
   1494c:	310dc83a 	sub	r6,r6,r4
   14950:	32000217 	ldw	r8,8(r6)
   14954:	1105883a 	add	r2,r2,r4
   14958:	42404326 	beq	r8,r9,14a68 <_free_r+0x240>
   1495c:	32400317 	ldw	r9,12(r6)
   14960:	0009883a 	mov	r4,zero
   14964:	42400315 	stw	r9,12(r8)
   14968:	4a000215 	stw	r8,8(r9)
   1496c:	003fc606 	br	14888 <_free_r+0x60>
   14970:	dfc00217 	ldw	ra,8(sp)
   14974:	dc400117 	ldw	r17,4(sp)
   14978:	dc000017 	ldw	r16,0(sp)
   1497c:	dec00304 	addi	sp,sp,12
   14980:	f800283a 	ret
   14984:	1004d0fa 	srli	r2,r2,3
   14988:	02000044 	movi	r8,1
   1498c:	29c00117 	ldw	r7,4(r5)
   14990:	1087883a 	add	r3,r2,r2
   14994:	18c7883a 	add	r3,r3,r3
   14998:	1005d0ba 	srai	r2,r2,2
   1499c:	18c7883a 	add	r3,r3,r3
   149a0:	28c7883a 	add	r3,r5,r3
   149a4:	19000217 	ldw	r4,8(r3)
   149a8:	4084983a 	sll	r2,r8,r2
   149ac:	30c00315 	stw	r3,12(r6)
   149b0:	31000215 	stw	r4,8(r6)
   149b4:	11c4b03a 	or	r2,r2,r7
   149b8:	21800315 	stw	r6,12(r4)
   149bc:	8809883a 	mov	r4,r17
   149c0:	28800115 	stw	r2,4(r5)
   149c4:	19800215 	stw	r6,8(r3)
   149c8:	dfc00217 	ldw	ra,8(sp)
   149cc:	dc400117 	ldw	r17,4(sp)
   149d0:	dc000017 	ldw	r16,0(sp)
   149d4:	dec00304 	addi	sp,sp,12
   149d8:	001a3441 	jmpi	1a344 <__malloc_unlock>
   149dc:	020000f4 	movhi	r8,3
   149e0:	4221eb04 	addi	r8,r8,-30804
   149e4:	3a3faf1e 	bne	r7,r8,148a4 <_free_r+0x7c>
   149e8:	29800515 	stw	r6,20(r5)
   149ec:	29800415 	stw	r6,16(r5)
   149f0:	11000054 	ori	r4,r2,1
   149f4:	3087883a 	add	r3,r6,r2
   149f8:	31c00315 	stw	r7,12(r6)
   149fc:	31c00215 	stw	r7,8(r6)
   14a00:	31000115 	stw	r4,4(r6)
   14a04:	18800015 	stw	r2,0(r3)
   14a08:	003fc806 	br	1492c <_free_r+0x104>
   14a0c:	4200004c 	andi	r8,r8,1
   14a10:	3885883a 	add	r2,r7,r2
   14a14:	4000071e 	bne	r8,zero,14a34 <_free_r+0x20c>
   14a18:	81fffe17 	ldw	r7,-8(r16)
   14a1c:	31cdc83a 	sub	r6,r6,r7
   14a20:	30c00317 	ldw	r3,12(r6)
   14a24:	31000217 	ldw	r4,8(r6)
   14a28:	11c5883a 	add	r2,r2,r7
   14a2c:	20c00315 	stw	r3,12(r4)
   14a30:	19000215 	stw	r4,8(r3)
   14a34:	00c000f4 	movhi	r3,3
   14a38:	18e77104 	addi	r3,r3,-25148
   14a3c:	18c00017 	ldw	r3,0(r3)
   14a40:	11000054 	ori	r4,r2,1
   14a44:	31000115 	stw	r4,4(r6)
   14a48:	29800215 	stw	r6,8(r5)
   14a4c:	10ffb736 	bltu	r2,r3,1492c <_free_r+0x104>
   14a50:	008000f4 	movhi	r2,3
   14a54:	10a78604 	addi	r2,r2,-25064
   14a58:	11400017 	ldw	r5,0(r2)
   14a5c:	8809883a 	mov	r4,r17
   14a60:	00146ec0 	call	146ec <_malloc_trim_r>
   14a64:	003fb106 	br	1492c <_free_r+0x104>
   14a68:	01000044 	movi	r4,1
   14a6c:	003f8606 	br	14888 <_free_r+0x60>
   14a70:	01000504 	movi	r4,20
   14a74:	20c00b36 	bltu	r4,r3,14aa4 <_free_r+0x27c>
   14a78:	190016c4 	addi	r4,r3,91
   14a7c:	210f883a 	add	r7,r4,r4
   14a80:	003f9806 	br	148e4 <_free_r+0xbc>
   14a84:	2009d0ba 	srai	r4,r4,2
   14a88:	00800044 	movi	r2,1
   14a8c:	29c00117 	ldw	r7,4(r5)
   14a90:	1108983a 	sll	r4,r2,r4
   14a94:	1805883a 	mov	r2,r3
   14a98:	21c8b03a 	or	r4,r4,r7
   14a9c:	29000115 	stw	r4,4(r5)
   14aa0:	003f9e06 	br	1491c <_free_r+0xf4>
   14aa4:	01001504 	movi	r4,84
   14aa8:	20c00436 	bltu	r4,r3,14abc <_free_r+0x294>
   14aac:	1008d33a 	srli	r4,r2,12
   14ab0:	21001b84 	addi	r4,r4,110
   14ab4:	210f883a 	add	r7,r4,r4
   14ab8:	003f8a06 	br	148e4 <_free_r+0xbc>
   14abc:	01005504 	movi	r4,340
   14ac0:	20c00436 	bltu	r4,r3,14ad4 <_free_r+0x2ac>
   14ac4:	1008d3fa 	srli	r4,r2,15
   14ac8:	21001dc4 	addi	r4,r4,119
   14acc:	210f883a 	add	r7,r4,r4
   14ad0:	003f8406 	br	148e4 <_free_r+0xbc>
   14ad4:	01015504 	movi	r4,1364
   14ad8:	20c00436 	bltu	r4,r3,14aec <_free_r+0x2c4>
   14adc:	1008d4ba 	srli	r4,r2,18
   14ae0:	21001f04 	addi	r4,r4,124
   14ae4:	210f883a 	add	r7,r4,r4
   14ae8:	003f7e06 	br	148e4 <_free_r+0xbc>
   14aec:	01c03f04 	movi	r7,252
   14af0:	01001f84 	movi	r4,126
   14af4:	003f7b06 	br	148e4 <_free_r+0xbc>

00014af8 <__sfvwrite_r>:
   14af8:	30800217 	ldw	r2,8(r6)
   14afc:	defff504 	addi	sp,sp,-44
   14b00:	dd400615 	stw	r21,24(sp)
   14b04:	dd000515 	stw	r20,20(sp)
   14b08:	dc000115 	stw	r16,4(sp)
   14b0c:	dfc00a15 	stw	ra,40(sp)
   14b10:	df000915 	stw	fp,36(sp)
   14b14:	ddc00815 	stw	r23,32(sp)
   14b18:	dd800715 	stw	r22,28(sp)
   14b1c:	dcc00415 	stw	r19,16(sp)
   14b20:	dc800315 	stw	r18,12(sp)
   14b24:	dc400215 	stw	r17,8(sp)
   14b28:	3029883a 	mov	r20,r6
   14b2c:	202b883a 	mov	r21,r4
   14b30:	2821883a 	mov	r16,r5
   14b34:	10002126 	beq	r2,zero,14bbc <__sfvwrite_r+0xc4>
   14b38:	2880030b 	ldhu	r2,12(r5)
   14b3c:	10c0020c 	andi	r3,r2,8
   14b40:	18ffffcc 	andi	r3,r3,65535
   14b44:	18e0001c 	xori	r3,r3,32768
   14b48:	18e00004 	addi	r3,r3,-32768
   14b4c:	18002826 	beq	r3,zero,14bf0 <__sfvwrite_r+0xf8>
   14b50:	28c00417 	ldw	r3,16(r5)
   14b54:	18002626 	beq	r3,zero,14bf0 <__sfvwrite_r+0xf8>
   14b58:	10c0008c 	andi	r3,r2,2
   14b5c:	18ffffcc 	andi	r3,r3,65535
   14b60:	18e0001c 	xori	r3,r3,32768
   14b64:	18e00004 	addi	r3,r3,-32768
   14b68:	a4400017 	ldw	r17,0(r20)
   14b6c:	18002b26 	beq	r3,zero,14c1c <__sfvwrite_r+0x124>
   14b70:	0027883a 	mov	r19,zero
   14b74:	0025883a 	mov	r18,zero
   14b78:	05810004 	movi	r22,1024
   14b7c:	980d883a 	mov	r6,r19
   14b80:	a809883a 	mov	r4,r21
   14b84:	90004f26 	beq	r18,zero,14cc4 <__sfvwrite_r+0x1cc>
   14b88:	900f883a 	mov	r7,r18
   14b8c:	81400717 	ldw	r5,28(r16)
   14b90:	b480012e 	bgeu	r22,r18,14b98 <__sfvwrite_r+0xa0>
   14b94:	01c10004 	movi	r7,1024
   14b98:	80800917 	ldw	r2,36(r16)
   14b9c:	103ee83a 	callr	r2
   14ba0:	0080540e 	bge	zero,r2,14cf4 <__sfvwrite_r+0x1fc>
   14ba4:	a0c00217 	ldw	r3,8(r20)
   14ba8:	98a7883a 	add	r19,r19,r2
   14bac:	90a5c83a 	sub	r18,r18,r2
   14bb0:	1885c83a 	sub	r2,r3,r2
   14bb4:	a0800215 	stw	r2,8(r20)
   14bb8:	103ff01e 	bne	r2,zero,14b7c <__sfvwrite_r+0x84>
   14bbc:	0005883a 	mov	r2,zero
   14bc0:	dfc00a17 	ldw	ra,40(sp)
   14bc4:	df000917 	ldw	fp,36(sp)
   14bc8:	ddc00817 	ldw	r23,32(sp)
   14bcc:	dd800717 	ldw	r22,28(sp)
   14bd0:	dd400617 	ldw	r21,24(sp)
   14bd4:	dd000517 	ldw	r20,20(sp)
   14bd8:	dcc00417 	ldw	r19,16(sp)
   14bdc:	dc800317 	ldw	r18,12(sp)
   14be0:	dc400217 	ldw	r17,8(sp)
   14be4:	dc000117 	ldw	r16,4(sp)
   14be8:	dec00b04 	addi	sp,sp,44
   14bec:	f800283a 	ret
   14bf0:	a809883a 	mov	r4,r21
   14bf4:	800b883a 	mov	r5,r16
   14bf8:	001281c0 	call	1281c <__swsetup_r>
   14bfc:	1000f01e 	bne	r2,zero,14fc0 <__sfvwrite_r+0x4c8>
   14c00:	8080030b 	ldhu	r2,12(r16)
   14c04:	a4400017 	ldw	r17,0(r20)
   14c08:	10c0008c 	andi	r3,r2,2
   14c0c:	18ffffcc 	andi	r3,r3,65535
   14c10:	18e0001c 	xori	r3,r3,32768
   14c14:	18e00004 	addi	r3,r3,-32768
   14c18:	183fd51e 	bne	r3,zero,14b70 <__sfvwrite_r+0x78>
   14c1c:	10c0004c 	andi	r3,r2,1
   14c20:	002d883a 	mov	r22,zero
   14c24:	1800381e 	bne	r3,zero,14d08 <__sfvwrite_r+0x210>
   14c28:	0025883a 	mov	r18,zero
   14c2c:	90002126 	beq	r18,zero,14cb4 <__sfvwrite_r+0x1bc>
   14c30:	10c0800c 	andi	r3,r2,512
   14c34:	18ffffcc 	andi	r3,r3,65535
   14c38:	18e0001c 	xori	r3,r3,32768
   14c3c:	18e00004 	addi	r3,r3,-32768
   14c40:	84c00217 	ldw	r19,8(r16)
   14c44:	18006b26 	beq	r3,zero,14df4 <__sfvwrite_r+0x2fc>
   14c48:	980f883a 	mov	r7,r19
   14c4c:	94c08636 	bltu	r18,r19,14e68 <__sfvwrite_r+0x370>
   14c50:	10c1200c 	andi	r3,r2,1152
   14c54:	18009f1e 	bne	r3,zero,14ed4 <__sfvwrite_r+0x3dc>
   14c58:	81000017 	ldw	r4,0(r16)
   14c5c:	982f883a 	mov	r23,r19
   14c60:	9039883a 	mov	fp,r18
   14c64:	9027883a 	mov	r19,r18
   14c68:	380d883a 	mov	r6,r7
   14c6c:	b00b883a 	mov	r5,r22
   14c70:	d9c00015 	stw	r7,0(sp)
   14c74:	0015d7c0 	call	15d7c <memmove>
   14c78:	d9c00017 	ldw	r7,0(sp)
   14c7c:	81000217 	ldw	r4,8(r16)
   14c80:	80800017 	ldw	r2,0(r16)
   14c84:	25efc83a 	sub	r23,r4,r23
   14c88:	11cf883a 	add	r7,r2,r7
   14c8c:	85c00215 	stw	r23,8(r16)
   14c90:	81c00015 	stw	r7,0(r16)
   14c94:	a0800217 	ldw	r2,8(r20)
   14c98:	b72d883a 	add	r22,r22,fp
   14c9c:	9725c83a 	sub	r18,r18,fp
   14ca0:	14e7c83a 	sub	r19,r2,r19
   14ca4:	a4c00215 	stw	r19,8(r20)
   14ca8:	983fc426 	beq	r19,zero,14bbc <__sfvwrite_r+0xc4>
   14cac:	8080030b 	ldhu	r2,12(r16)
   14cb0:	903fdf1e 	bne	r18,zero,14c30 <__sfvwrite_r+0x138>
   14cb4:	8d800017 	ldw	r22,0(r17)
   14cb8:	8c800117 	ldw	r18,4(r17)
   14cbc:	8c400204 	addi	r17,r17,8
   14cc0:	003fda06 	br	14c2c <__sfvwrite_r+0x134>
   14cc4:	8cc00017 	ldw	r19,0(r17)
   14cc8:	8c800117 	ldw	r18,4(r17)
   14ccc:	8c400204 	addi	r17,r17,8
   14cd0:	003faa06 	br	14b7c <__sfvwrite_r+0x84>
   14cd4:	00170340 	call	17034 <_realloc_r>
   14cd8:	102f883a 	mov	r23,r2
   14cdc:	10009f1e 	bne	r2,zero,14f5c <__sfvwrite_r+0x464>
   14ce0:	81400417 	ldw	r5,16(r16)
   14ce4:	a809883a 	mov	r4,r21
   14ce8:	00148280 	call	14828 <_free_r>
   14cec:	00800304 	movi	r2,12
   14cf0:	a8800015 	stw	r2,0(r21)
   14cf4:	80c0030b 	ldhu	r3,12(r16)
   14cf8:	00bfffc4 	movi	r2,-1
   14cfc:	18c01014 	ori	r3,r3,64
   14d00:	80c0030d 	sth	r3,12(r16)
   14d04:	003fae06 	br	14bc0 <__sfvwrite_r+0xc8>
   14d08:	0007883a 	mov	r3,zero
   14d0c:	0039883a 	mov	fp,zero
   14d10:	0025883a 	mov	r18,zero
   14d14:	90001e26 	beq	r18,zero,14d90 <__sfvwrite_r+0x298>
   14d18:	18006526 	beq	r3,zero,14eb0 <__sfvwrite_r+0x3b8>
   14d1c:	b02f883a 	mov	r23,r22
   14d20:	9580012e 	bgeu	r18,r22,14d28 <__sfvwrite_r+0x230>
   14d24:	902f883a 	mov	r23,r18
   14d28:	81000017 	ldw	r4,0(r16)
   14d2c:	80800417 	ldw	r2,16(r16)
   14d30:	84c00217 	ldw	r19,8(r16)
   14d34:	81c00517 	ldw	r7,20(r16)
   14d38:	1100022e 	bgeu	r2,r4,14d44 <__sfvwrite_r+0x24c>
   14d3c:	99e7883a 	add	r19,r19,r7
   14d40:	9dc01816 	blt	r19,r23,14da4 <__sfvwrite_r+0x2ac>
   14d44:	b9c03b16 	blt	r23,r7,14e34 <__sfvwrite_r+0x33c>
   14d48:	80800917 	ldw	r2,36(r16)
   14d4c:	81400717 	ldw	r5,28(r16)
   14d50:	a809883a 	mov	r4,r21
   14d54:	d8c00015 	stw	r3,0(sp)
   14d58:	e00d883a 	mov	r6,fp
   14d5c:	103ee83a 	callr	r2
   14d60:	1027883a 	mov	r19,r2
   14d64:	d8c00017 	ldw	r3,0(sp)
   14d68:	00bfe20e 	bge	zero,r2,14cf4 <__sfvwrite_r+0x1fc>
   14d6c:	b4edc83a 	sub	r22,r22,r19
   14d70:	b0001a26 	beq	r22,zero,14ddc <__sfvwrite_r+0x2e4>
   14d74:	a0800217 	ldw	r2,8(r20)
   14d78:	e4f9883a 	add	fp,fp,r19
   14d7c:	94e5c83a 	sub	r18,r18,r19
   14d80:	14e7c83a 	sub	r19,r2,r19
   14d84:	a4c00215 	stw	r19,8(r20)
   14d88:	983f8c26 	beq	r19,zero,14bbc <__sfvwrite_r+0xc4>
   14d8c:	903fe21e 	bne	r18,zero,14d18 <__sfvwrite_r+0x220>
   14d90:	8f000017 	ldw	fp,0(r17)
   14d94:	8c800117 	ldw	r18,4(r17)
   14d98:	0007883a 	mov	r3,zero
   14d9c:	8c400204 	addi	r17,r17,8
   14da0:	003fdc06 	br	14d14 <__sfvwrite_r+0x21c>
   14da4:	e00b883a 	mov	r5,fp
   14da8:	980d883a 	mov	r6,r19
   14dac:	d8c00015 	stw	r3,0(sp)
   14db0:	0015d7c0 	call	15d7c <memmove>
   14db4:	80800017 	ldw	r2,0(r16)
   14db8:	a809883a 	mov	r4,r21
   14dbc:	800b883a 	mov	r5,r16
   14dc0:	14c5883a 	add	r2,r2,r19
   14dc4:	80800015 	stw	r2,0(r16)
   14dc8:	00141e80 	call	141e8 <_fflush_r>
   14dcc:	d8c00017 	ldw	r3,0(sp)
   14dd0:	103fc81e 	bne	r2,zero,14cf4 <__sfvwrite_r+0x1fc>
   14dd4:	b4edc83a 	sub	r22,r22,r19
   14dd8:	b03fe61e 	bne	r22,zero,14d74 <__sfvwrite_r+0x27c>
   14ddc:	a809883a 	mov	r4,r21
   14de0:	800b883a 	mov	r5,r16
   14de4:	00141e80 	call	141e8 <_fflush_r>
   14de8:	103fc21e 	bne	r2,zero,14cf4 <__sfvwrite_r+0x1fc>
   14dec:	0007883a 	mov	r3,zero
   14df0:	003fe006 	br	14d74 <__sfvwrite_r+0x27c>
   14df4:	81000017 	ldw	r4,0(r16)
   14df8:	80800417 	ldw	r2,16(r16)
   14dfc:	1100022e 	bgeu	r2,r4,14e08 <__sfvwrite_r+0x310>
   14e00:	9839883a 	mov	fp,r19
   14e04:	9c806036 	bltu	r19,r18,14f88 <__sfvwrite_r+0x490>
   14e08:	81c00517 	ldw	r7,20(r16)
   14e0c:	91c01c36 	bltu	r18,r7,14e80 <__sfvwrite_r+0x388>
   14e10:	80800917 	ldw	r2,36(r16)
   14e14:	81400717 	ldw	r5,28(r16)
   14e18:	a809883a 	mov	r4,r21
   14e1c:	b00d883a 	mov	r6,r22
   14e20:	103ee83a 	callr	r2
   14e24:	1027883a 	mov	r19,r2
   14e28:	00bfb20e 	bge	zero,r2,14cf4 <__sfvwrite_r+0x1fc>
   14e2c:	1039883a 	mov	fp,r2
   14e30:	003f9806 	br	14c94 <__sfvwrite_r+0x19c>
   14e34:	b80d883a 	mov	r6,r23
   14e38:	e00b883a 	mov	r5,fp
   14e3c:	d8c00015 	stw	r3,0(sp)
   14e40:	0015d7c0 	call	15d7c <memmove>
   14e44:	80800217 	ldw	r2,8(r16)
   14e48:	81000017 	ldw	r4,0(r16)
   14e4c:	b827883a 	mov	r19,r23
   14e50:	15c5c83a 	sub	r2,r2,r23
   14e54:	25ef883a 	add	r23,r4,r23
   14e58:	80800215 	stw	r2,8(r16)
   14e5c:	85c00015 	stw	r23,0(r16)
   14e60:	d8c00017 	ldw	r3,0(sp)
   14e64:	003fc106 	br	14d6c <__sfvwrite_r+0x274>
   14e68:	81000017 	ldw	r4,0(r16)
   14e6c:	902f883a 	mov	r23,r18
   14e70:	9039883a 	mov	fp,r18
   14e74:	9027883a 	mov	r19,r18
   14e78:	900f883a 	mov	r7,r18
   14e7c:	003f7a06 	br	14c68 <__sfvwrite_r+0x170>
   14e80:	b00b883a 	mov	r5,r22
   14e84:	900d883a 	mov	r6,r18
   14e88:	0015d7c0 	call	15d7c <memmove>
   14e8c:	80c00217 	ldw	r3,8(r16)
   14e90:	80800017 	ldw	r2,0(r16)
   14e94:	9027883a 	mov	r19,r18
   14e98:	1c87c83a 	sub	r3,r3,r18
   14e9c:	1485883a 	add	r2,r2,r18
   14ea0:	80c00215 	stw	r3,8(r16)
   14ea4:	80800015 	stw	r2,0(r16)
   14ea8:	9039883a 	mov	fp,r18
   14eac:	003f7906 	br	14c94 <__sfvwrite_r+0x19c>
   14eb0:	e009883a 	mov	r4,fp
   14eb4:	01400284 	movi	r5,10
   14eb8:	900d883a 	mov	r6,r18
   14ebc:	0015b440 	call	15b44 <memchr>
   14ec0:	10003c26 	beq	r2,zero,14fb4 <__sfvwrite_r+0x4bc>
   14ec4:	15800044 	addi	r22,r2,1
   14ec8:	b72dc83a 	sub	r22,r22,fp
   14ecc:	00c00044 	movi	r3,1
   14ed0:	003f9206 	br	14d1c <__sfvwrite_r+0x224>
   14ed4:	81000517 	ldw	r4,20(r16)
   14ed8:	81400417 	ldw	r5,16(r16)
   14edc:	80c00017 	ldw	r3,0(r16)
   14ee0:	210d883a 	add	r6,r4,r4
   14ee4:	3109883a 	add	r4,r6,r4
   14ee8:	2026d7fa 	srli	r19,r4,31
   14eec:	1979c83a 	sub	fp,r3,r5
   14ef0:	e1800044 	addi	r6,fp,1
   14ef4:	9909883a 	add	r4,r19,r4
   14ef8:	2027d07a 	srai	r19,r4,1
   14efc:	3489883a 	add	r4,r6,r18
   14f00:	980d883a 	mov	r6,r19
   14f04:	9900022e 	bgeu	r19,r4,14f10 <__sfvwrite_r+0x418>
   14f08:	2027883a 	mov	r19,r4
   14f0c:	200d883a 	mov	r6,r4
   14f10:	1081000c 	andi	r2,r2,1024
   14f14:	10bfffcc 	andi	r2,r2,65535
   14f18:	10a0001c 	xori	r2,r2,32768
   14f1c:	10a00004 	addi	r2,r2,-32768
   14f20:	a809883a 	mov	r4,r21
   14f24:	103f6b26 	beq	r2,zero,14cd4 <__sfvwrite_r+0x1dc>
   14f28:	300b883a 	mov	r5,r6
   14f2c:	00153c00 	call	153c0 <_malloc_r>
   14f30:	102f883a 	mov	r23,r2
   14f34:	103f6d26 	beq	r2,zero,14cec <__sfvwrite_r+0x1f4>
   14f38:	81400417 	ldw	r5,16(r16)
   14f3c:	1009883a 	mov	r4,r2
   14f40:	e00d883a 	mov	r6,fp
   14f44:	0015c3c0 	call	15c3c <memcpy>
   14f48:	8080030b 	ldhu	r2,12(r16)
   14f4c:	00fedfc4 	movi	r3,-1153
   14f50:	10c4703a 	and	r2,r2,r3
   14f54:	10802014 	ori	r2,r2,128
   14f58:	8080030d 	sth	r2,12(r16)
   14f5c:	bf09883a 	add	r4,r23,fp
   14f60:	9f07c83a 	sub	r3,r19,fp
   14f64:	85c00415 	stw	r23,16(r16)
   14f68:	84c00515 	stw	r19,20(r16)
   14f6c:	81000015 	stw	r4,0(r16)
   14f70:	902f883a 	mov	r23,r18
   14f74:	80c00215 	stw	r3,8(r16)
   14f78:	9039883a 	mov	fp,r18
   14f7c:	9027883a 	mov	r19,r18
   14f80:	900f883a 	mov	r7,r18
   14f84:	003f3806 	br	14c68 <__sfvwrite_r+0x170>
   14f88:	b00b883a 	mov	r5,r22
   14f8c:	980d883a 	mov	r6,r19
   14f90:	0015d7c0 	call	15d7c <memmove>
   14f94:	80800017 	ldw	r2,0(r16)
   14f98:	a809883a 	mov	r4,r21
   14f9c:	800b883a 	mov	r5,r16
   14fa0:	14c5883a 	add	r2,r2,r19
   14fa4:	80800015 	stw	r2,0(r16)
   14fa8:	00141e80 	call	141e8 <_fflush_r>
   14fac:	103f3926 	beq	r2,zero,14c94 <__sfvwrite_r+0x19c>
   14fb0:	003f5006 	br	14cf4 <__sfvwrite_r+0x1fc>
   14fb4:	95800044 	addi	r22,r18,1
   14fb8:	00c00044 	movi	r3,1
   14fbc:	003f5706 	br	14d1c <__sfvwrite_r+0x224>
   14fc0:	80c0030b 	ldhu	r3,12(r16)
   14fc4:	00bfffc4 	movi	r2,-1
   14fc8:	18c01014 	ori	r3,r3,64
   14fcc:	80c0030d 	sth	r3,12(r16)
   14fd0:	00c00244 	movi	r3,9
   14fd4:	a8c00015 	stw	r3,0(r21)
   14fd8:	003ef906 	br	14bc0 <__sfvwrite_r+0xc8>

00014fdc <_fwalk>:
   14fdc:	defff904 	addi	sp,sp,-28
   14fe0:	dcc00315 	stw	r19,12(sp)
   14fe4:	24c0b804 	addi	r19,r4,736
   14fe8:	dd400515 	stw	r21,20(sp)
   14fec:	dd000415 	stw	r20,16(sp)
   14ff0:	dfc00615 	stw	ra,24(sp)
   14ff4:	dc800215 	stw	r18,8(sp)
   14ff8:	dc400115 	stw	r17,4(sp)
   14ffc:	dc000015 	stw	r16,0(sp)
   15000:	282b883a 	mov	r21,r5
   15004:	0029883a 	mov	r20,zero
   15008:	00146ac0 	call	146ac <__sfp_lock_acquire>
   1500c:	98001226 	beq	r19,zero,15058 <_fwalk+0x7c>
   15010:	04bfffc4 	movi	r18,-1
   15014:	9c400117 	ldw	r17,4(r19)
   15018:	9c000217 	ldw	r16,8(r19)
   1501c:	8c7fffc4 	addi	r17,r17,-1
   15020:	88000b16 	blt	r17,zero,15050 <_fwalk+0x74>
   15024:	84000304 	addi	r16,r16,12
   15028:	80c0000f 	ldh	r3,0(r16)
   1502c:	8c7fffc4 	addi	r17,r17,-1
   15030:	813ffd04 	addi	r4,r16,-12
   15034:	18000426 	beq	r3,zero,15048 <_fwalk+0x6c>
   15038:	80c0008f 	ldh	r3,2(r16)
   1503c:	1c800226 	beq	r3,r18,15048 <_fwalk+0x6c>
   15040:	a83ee83a 	callr	r21
   15044:	a0a8b03a 	or	r20,r20,r2
   15048:	84001704 	addi	r16,r16,92
   1504c:	8cbff61e 	bne	r17,r18,15028 <_fwalk+0x4c>
   15050:	9cc00017 	ldw	r19,0(r19)
   15054:	983fef1e 	bne	r19,zero,15014 <_fwalk+0x38>
   15058:	00146b00 	call	146b0 <__sfp_lock_release>
   1505c:	a005883a 	mov	r2,r20
   15060:	dfc00617 	ldw	ra,24(sp)
   15064:	dd400517 	ldw	r21,20(sp)
   15068:	dd000417 	ldw	r20,16(sp)
   1506c:	dcc00317 	ldw	r19,12(sp)
   15070:	dc800217 	ldw	r18,8(sp)
   15074:	dc400117 	ldw	r17,4(sp)
   15078:	dc000017 	ldw	r16,0(sp)
   1507c:	dec00704 	addi	sp,sp,28
   15080:	f800283a 	ret

00015084 <_fwalk_reent>:
   15084:	defff804 	addi	sp,sp,-32
   15088:	dcc00315 	stw	r19,12(sp)
   1508c:	24c0b804 	addi	r19,r4,736
   15090:	dd800615 	stw	r22,24(sp)
   15094:	dd400515 	stw	r21,20(sp)
   15098:	dd000415 	stw	r20,16(sp)
   1509c:	dfc00715 	stw	ra,28(sp)
   150a0:	dc800215 	stw	r18,8(sp)
   150a4:	dc400115 	stw	r17,4(sp)
   150a8:	dc000015 	stw	r16,0(sp)
   150ac:	2029883a 	mov	r20,r4
   150b0:	282b883a 	mov	r21,r5
   150b4:	002d883a 	mov	r22,zero
   150b8:	00146ac0 	call	146ac <__sfp_lock_acquire>
   150bc:	98001326 	beq	r19,zero,1510c <_fwalk_reent+0x88>
   150c0:	04bfffc4 	movi	r18,-1
   150c4:	9c400117 	ldw	r17,4(r19)
   150c8:	9c000217 	ldw	r16,8(r19)
   150cc:	8c7fffc4 	addi	r17,r17,-1
   150d0:	88000c16 	blt	r17,zero,15104 <_fwalk_reent+0x80>
   150d4:	84000304 	addi	r16,r16,12
   150d8:	80c0000f 	ldh	r3,0(r16)
   150dc:	8c7fffc4 	addi	r17,r17,-1
   150e0:	817ffd04 	addi	r5,r16,-12
   150e4:	18000526 	beq	r3,zero,150fc <_fwalk_reent+0x78>
   150e8:	80c0008f 	ldh	r3,2(r16)
   150ec:	a009883a 	mov	r4,r20
   150f0:	1c800226 	beq	r3,r18,150fc <_fwalk_reent+0x78>
   150f4:	a83ee83a 	callr	r21
   150f8:	b0acb03a 	or	r22,r22,r2
   150fc:	84001704 	addi	r16,r16,92
   15100:	8cbff51e 	bne	r17,r18,150d8 <_fwalk_reent+0x54>
   15104:	9cc00017 	ldw	r19,0(r19)
   15108:	983fee1e 	bne	r19,zero,150c4 <_fwalk_reent+0x40>
   1510c:	00146b00 	call	146b0 <__sfp_lock_release>
   15110:	b005883a 	mov	r2,r22
   15114:	dfc00717 	ldw	ra,28(sp)
   15118:	dd800617 	ldw	r22,24(sp)
   1511c:	dd400517 	ldw	r21,20(sp)
   15120:	dd000417 	ldw	r20,16(sp)
   15124:	dcc00317 	ldw	r19,12(sp)
   15128:	dc800217 	ldw	r18,8(sp)
   1512c:	dc400117 	ldw	r17,4(sp)
   15130:	dc000017 	ldw	r16,0(sp)
   15134:	dec00804 	addi	sp,sp,32
   15138:	f800283a 	ret

0001513c <_setlocale_r>:
   1513c:	defffc04 	addi	sp,sp,-16
   15140:	dc800215 	stw	r18,8(sp)
   15144:	dc400115 	stw	r17,4(sp)
   15148:	dc000015 	stw	r16,0(sp)
   1514c:	dfc00315 	stw	ra,12(sp)
   15150:	3021883a 	mov	r16,r6
   15154:	2023883a 	mov	r17,r4
   15158:	2825883a 	mov	r18,r5
   1515c:	30001626 	beq	r6,zero,151b8 <_setlocale_r+0x7c>
   15160:	3009883a 	mov	r4,r6
   15164:	014000f4 	movhi	r5,3
   15168:	29603a04 	addi	r5,r5,-32536
   1516c:	00178380 	call	17838 <strcmp>
   15170:	10000a1e 	bne	r2,zero,1519c <_setlocale_r+0x60>
   15174:	8c800c15 	stw	r18,48(r17)
   15178:	8c000d15 	stw	r16,52(r17)
   1517c:	008000f4 	movhi	r2,3
   15180:	10a03a04 	addi	r2,r2,-32536
   15184:	dfc00317 	ldw	ra,12(sp)
   15188:	dc800217 	ldw	r18,8(sp)
   1518c:	dc400117 	ldw	r17,4(sp)
   15190:	dc000017 	ldw	r16,0(sp)
   15194:	dec00404 	addi	sp,sp,16
   15198:	f800283a 	ret
   1519c:	8009883a 	mov	r4,r16
   151a0:	014000f4 	movhi	r5,3
   151a4:	29602504 	addi	r5,r5,-32620
   151a8:	00178380 	call	17838 <strcmp>
   151ac:	103ff126 	beq	r2,zero,15174 <_setlocale_r+0x38>
   151b0:	0005883a 	mov	r2,zero
   151b4:	003ff306 	br	15184 <_setlocale_r+0x48>
   151b8:	008000f4 	movhi	r2,3
   151bc:	10a03a04 	addi	r2,r2,-32536
   151c0:	dfc00317 	ldw	ra,12(sp)
   151c4:	dc800217 	ldw	r18,8(sp)
   151c8:	dc400117 	ldw	r17,4(sp)
   151cc:	dc000017 	ldw	r16,0(sp)
   151d0:	dec00404 	addi	sp,sp,16
   151d4:	f800283a 	ret

000151d8 <__locale_charset>:
   151d8:	008000f4 	movhi	r2,3
   151dc:	10a03b04 	addi	r2,r2,-32532
   151e0:	f800283a 	ret

000151e4 <_localeconv_r>:
   151e4:	008000f4 	movhi	r2,3
   151e8:	10a03f04 	addi	r2,r2,-32516
   151ec:	f800283a 	ret

000151f0 <setlocale>:
   151f0:	00c000f4 	movhi	r3,3
   151f4:	18e76e04 	addi	r3,r3,-25160
   151f8:	2005883a 	mov	r2,r4
   151fc:	19000017 	ldw	r4,0(r3)
   15200:	280d883a 	mov	r6,r5
   15204:	100b883a 	mov	r5,r2
   15208:	001513c1 	jmpi	1513c <_setlocale_r>

0001520c <localeconv>:
   1520c:	008000f4 	movhi	r2,3
   15210:	10a03f04 	addi	r2,r2,-32516
   15214:	f800283a 	ret

00015218 <__smakebuf_r>:
   15218:	2880030b 	ldhu	r2,12(r5)
   1521c:	deffed04 	addi	sp,sp,-76
   15220:	dc401015 	stw	r17,64(sp)
   15224:	10c0008c 	andi	r3,r2,2
   15228:	18ffffcc 	andi	r3,r3,65535
   1522c:	18e0001c 	xori	r3,r3,32768
   15230:	dc000f15 	stw	r16,60(sp)
   15234:	dfc01215 	stw	ra,72(sp)
   15238:	dc801115 	stw	r18,68(sp)
   1523c:	18e00004 	addi	r3,r3,-32768
   15240:	2821883a 	mov	r16,r5
   15244:	2023883a 	mov	r17,r4
   15248:	1800381e 	bne	r3,zero,1532c <__smakebuf_r+0x114>
   1524c:	2940038f 	ldh	r5,14(r5)
   15250:	28002d16 	blt	r5,zero,15308 <__smakebuf_r+0xf0>
   15254:	d80d883a 	mov	r6,sp
   15258:	0017bc80 	call	17bc8 <_fstat_r>
   1525c:	10002916 	blt	r2,zero,15304 <__smakebuf_r+0xec>
   15260:	d8800117 	ldw	r2,4(sp)
   15264:	00e00014 	movui	r3,32768
   15268:	10bc000c 	andi	r2,r2,61440
   1526c:	10c03c26 	beq	r2,r3,15360 <__smakebuf_r+0x148>
   15270:	80c0030b 	ldhu	r3,12(r16)
   15274:	18c20014 	ori	r3,r3,2048
   15278:	80c0030d 	sth	r3,12(r16)
   1527c:	00c80004 	movi	r3,8192
   15280:	10c00c1e 	bne	r2,r3,152b4 <__smakebuf_r+0x9c>
   15284:	8140038f 	ldh	r5,14(r16)
   15288:	8809883a 	mov	r4,r17
   1528c:	0017c300 	call	17c30 <_isatty_r>
   15290:	10000826 	beq	r2,zero,152b4 <__smakebuf_r+0x9c>
   15294:	80c0030b 	ldhu	r3,12(r16)
   15298:	808010c4 	addi	r2,r16,67
   1529c:	80800015 	stw	r2,0(r16)
   152a0:	18c00054 	ori	r3,r3,1
   152a4:	80800415 	stw	r2,16(r16)
   152a8:	00800044 	movi	r2,1
   152ac:	80c0030d 	sth	r3,12(r16)
   152b0:	80800515 	stw	r2,20(r16)
   152b4:	04810004 	movi	r18,1024
   152b8:	8809883a 	mov	r4,r17
   152bc:	900b883a 	mov	r5,r18
   152c0:	00153c00 	call	153c0 <_malloc_r>
   152c4:	10003026 	beq	r2,zero,15388 <__smakebuf_r+0x170>
   152c8:	80c0030b 	ldhu	r3,12(r16)
   152cc:	01000074 	movhi	r4,1
   152d0:	21110404 	addi	r4,r4,17424
   152d4:	89000f15 	stw	r4,60(r17)
   152d8:	18c02014 	ori	r3,r3,128
   152dc:	80c0030d 	sth	r3,12(r16)
   152e0:	80800015 	stw	r2,0(r16)
   152e4:	80800415 	stw	r2,16(r16)
   152e8:	84800515 	stw	r18,20(r16)
   152ec:	dfc01217 	ldw	ra,72(sp)
   152f0:	dc801117 	ldw	r18,68(sp)
   152f4:	dc401017 	ldw	r17,64(sp)
   152f8:	dc000f17 	ldw	r16,60(sp)
   152fc:	dec01304 	addi	sp,sp,76
   15300:	f800283a 	ret
   15304:	8080030b 	ldhu	r2,12(r16)
   15308:	10c0200c 	andi	r3,r2,128
   1530c:	18ffffcc 	andi	r3,r3,65535
   15310:	18e0001c 	xori	r3,r3,32768
   15314:	18e00004 	addi	r3,r3,-32768
   15318:	18000f1e 	bne	r3,zero,15358 <__smakebuf_r+0x140>
   1531c:	04810004 	movi	r18,1024
   15320:	10820014 	ori	r2,r2,2048
   15324:	8080030d 	sth	r2,12(r16)
   15328:	003fe306 	br	152b8 <__smakebuf_r+0xa0>
   1532c:	288010c4 	addi	r2,r5,67
   15330:	28800015 	stw	r2,0(r5)
   15334:	28800415 	stw	r2,16(r5)
   15338:	00800044 	movi	r2,1
   1533c:	28800515 	stw	r2,20(r5)
   15340:	dfc01217 	ldw	ra,72(sp)
   15344:	dc801117 	ldw	r18,68(sp)
   15348:	dc401017 	ldw	r17,64(sp)
   1534c:	dc000f17 	ldw	r16,60(sp)
   15350:	dec01304 	addi	sp,sp,76
   15354:	f800283a 	ret
   15358:	04801004 	movi	r18,64
   1535c:	003ff006 	br	15320 <__smakebuf_r+0x108>
   15360:	81000a17 	ldw	r4,40(r16)
   15364:	00c00074 	movhi	r3,1
   15368:	18ddf504 	addi	r3,r3,30676
   1536c:	20ffc01e 	bne	r4,r3,15270 <__smakebuf_r+0x58>
   15370:	8080030b 	ldhu	r2,12(r16)
   15374:	00c10004 	movi	r3,1024
   15378:	80c01315 	stw	r3,76(r16)
   1537c:	10c4b03a 	or	r2,r2,r3
   15380:	8080030d 	sth	r2,12(r16)
   15384:	003fcb06 	br	152b4 <__smakebuf_r+0x9c>
   15388:	8080030b 	ldhu	r2,12(r16)
   1538c:	10c0800c 	andi	r3,r2,512
   15390:	18ffffcc 	andi	r3,r3,65535
   15394:	18e0001c 	xori	r3,r3,32768
   15398:	18e00004 	addi	r3,r3,-32768
   1539c:	183fd31e 	bne	r3,zero,152ec <__smakebuf_r+0xd4>
   153a0:	10800094 	ori	r2,r2,2
   153a4:	80c010c4 	addi	r3,r16,67
   153a8:	8080030d 	sth	r2,12(r16)
   153ac:	00800044 	movi	r2,1
   153b0:	80c00015 	stw	r3,0(r16)
   153b4:	80c00415 	stw	r3,16(r16)
   153b8:	80800515 	stw	r2,20(r16)
   153bc:	003fcb06 	br	152ec <__smakebuf_r+0xd4>

000153c0 <_malloc_r>:
   153c0:	defff604 	addi	sp,sp,-40
   153c4:	dc800215 	stw	r18,8(sp)
   153c8:	dfc00915 	stw	ra,36(sp)
   153cc:	df000815 	stw	fp,32(sp)
   153d0:	ddc00715 	stw	r23,28(sp)
   153d4:	dd800615 	stw	r22,24(sp)
   153d8:	dd400515 	stw	r21,20(sp)
   153dc:	dd000415 	stw	r20,16(sp)
   153e0:	dcc00315 	stw	r19,12(sp)
   153e4:	dc400115 	stw	r17,4(sp)
   153e8:	dc000015 	stw	r16,0(sp)
   153ec:	288002c4 	addi	r2,r5,11
   153f0:	00c00584 	movi	r3,22
   153f4:	2025883a 	mov	r18,r4
   153f8:	18802b2e 	bgeu	r3,r2,154a8 <_malloc_r+0xe8>
   153fc:	047ffe04 	movi	r17,-8
   15400:	1462703a 	and	r17,r2,r17
   15404:	88002a16 	blt	r17,zero,154b0 <_malloc_r+0xf0>
   15408:	89402936 	bltu	r17,r5,154b0 <_malloc_r+0xf0>
   1540c:	9009883a 	mov	r4,r18
   15410:	001a3240 	call	1a324 <__malloc_lock>
   15414:	00807dc4 	movi	r2,503
   15418:	14402936 	bltu	r2,r17,154c0 <_malloc_r+0x100>
   1541c:	8808d0fa 	srli	r4,r17,3
   15420:	04c000f4 	movhi	r19,3
   15424:	9ce1e904 	addi	r19,r19,-30812
   15428:	2105883a 	add	r2,r4,r4
   1542c:	1085883a 	add	r2,r2,r2
   15430:	1085883a 	add	r2,r2,r2
   15434:	9885883a 	add	r2,r19,r2
   15438:	14000317 	ldw	r16,12(r2)
   1543c:	80815526 	beq	r16,r2,15994 <_malloc_r+0x5d4>
   15440:	81000117 	ldw	r4,4(r16)
   15444:	00bfff04 	movi	r2,-4
   15448:	80c00317 	ldw	r3,12(r16)
   1544c:	2084703a 	and	r2,r4,r2
   15450:	8085883a 	add	r2,r16,r2
   15454:	11800117 	ldw	r6,4(r2)
   15458:	81400217 	ldw	r5,8(r16)
   1545c:	9009883a 	mov	r4,r18
   15460:	31800054 	ori	r6,r6,1
   15464:	11800115 	stw	r6,4(r2)
   15468:	28c00315 	stw	r3,12(r5)
   1546c:	19400215 	stw	r5,8(r3)
   15470:	001a3440 	call	1a344 <__malloc_unlock>
   15474:	80800204 	addi	r2,r16,8
   15478:	dfc00917 	ldw	ra,36(sp)
   1547c:	df000817 	ldw	fp,32(sp)
   15480:	ddc00717 	ldw	r23,28(sp)
   15484:	dd800617 	ldw	r22,24(sp)
   15488:	dd400517 	ldw	r21,20(sp)
   1548c:	dd000417 	ldw	r20,16(sp)
   15490:	dcc00317 	ldw	r19,12(sp)
   15494:	dc800217 	ldw	r18,8(sp)
   15498:	dc400117 	ldw	r17,4(sp)
   1549c:	dc000017 	ldw	r16,0(sp)
   154a0:	dec00a04 	addi	sp,sp,40
   154a4:	f800283a 	ret
   154a8:	04400404 	movi	r17,16
   154ac:	897fd72e 	bgeu	r17,r5,1540c <_malloc_r+0x4c>
   154b0:	00800304 	movi	r2,12
   154b4:	90800015 	stw	r2,0(r18)
   154b8:	0005883a 	mov	r2,zero
   154bc:	003fee06 	br	15478 <_malloc_r+0xb8>
   154c0:	8808d27a 	srli	r4,r17,9
   154c4:	20007126 	beq	r4,zero,1568c <_malloc_r+0x2cc>
   154c8:	00800104 	movi	r2,4
   154cc:	1100eb36 	bltu	r2,r4,1587c <_malloc_r+0x4bc>
   154d0:	8808d1ba 	srli	r4,r17,6
   154d4:	21000e04 	addi	r4,r4,56
   154d8:	210b883a 	add	r5,r4,r4
   154dc:	294b883a 	add	r5,r5,r5
   154e0:	294b883a 	add	r5,r5,r5
   154e4:	04c000f4 	movhi	r19,3
   154e8:	9ce1e904 	addi	r19,r19,-30812
   154ec:	994b883a 	add	r5,r19,r5
   154f0:	2c000317 	ldw	r16,12(r5)
   154f4:	2c000e26 	beq	r5,r16,15530 <_malloc_r+0x170>
   154f8:	80c00117 	ldw	r3,4(r16)
   154fc:	01ffff04 	movi	r7,-4
   15500:	018003c4 	movi	r6,15
   15504:	19c6703a 	and	r3,r3,r7
   15508:	1c45c83a 	sub	r2,r3,r17
   1550c:	30800716 	blt	r6,r2,1552c <_malloc_r+0x16c>
   15510:	1000610e 	bge	r2,zero,15698 <_malloc_r+0x2d8>
   15514:	84000317 	ldw	r16,12(r16)
   15518:	2c000526 	beq	r5,r16,15530 <_malloc_r+0x170>
   1551c:	80c00117 	ldw	r3,4(r16)
   15520:	19c6703a 	and	r3,r3,r7
   15524:	1c45c83a 	sub	r2,r3,r17
   15528:	30bff90e 	bge	r6,r2,15510 <_malloc_r+0x150>
   1552c:	213fffc4 	addi	r4,r4,-1
   15530:	21000044 	addi	r4,r4,1
   15534:	9c000417 	ldw	r16,16(r19)
   15538:	00c000f4 	movhi	r3,3
   1553c:	18e1e904 	addi	r3,r3,-30812
   15540:	1a400204 	addi	r9,r3,8
   15544:	8240ff26 	beq	r16,r9,15944 <_malloc_r+0x584>
   15548:	81400117 	ldw	r5,4(r16)
   1554c:	00bfff04 	movi	r2,-4
   15550:	018003c4 	movi	r6,15
   15554:	2884703a 	and	r2,r5,r2
   15558:	144bc83a 	sub	r5,r2,r17
   1555c:	3140ea16 	blt	r6,r5,15908 <_malloc_r+0x548>
   15560:	1a400515 	stw	r9,20(r3)
   15564:	1a400415 	stw	r9,16(r3)
   15568:	2800570e 	bge	r5,zero,156c8 <_malloc_r+0x308>
   1556c:	01407fc4 	movi	r5,511
   15570:	2880ca36 	bltu	r5,r2,1589c <_malloc_r+0x4dc>
   15574:	1004d0fa 	srli	r2,r2,3
   15578:	02000044 	movi	r8,1
   1557c:	19c00117 	ldw	r7,4(r3)
   15580:	108b883a 	add	r5,r2,r2
   15584:	294b883a 	add	r5,r5,r5
   15588:	1005d0ba 	srai	r2,r2,2
   1558c:	294b883a 	add	r5,r5,r5
   15590:	28cb883a 	add	r5,r5,r3
   15594:	29800217 	ldw	r6,8(r5)
   15598:	4084983a 	sll	r2,r8,r2
   1559c:	81400315 	stw	r5,12(r16)
   155a0:	81800215 	stw	r6,8(r16)
   155a4:	11c4b03a 	or	r2,r2,r7
   155a8:	18800115 	stw	r2,4(r3)
   155ac:	2c000215 	stw	r16,8(r5)
   155b0:	34000315 	stw	r16,12(r6)
   155b4:	200bd0ba 	srai	r5,r4,2
   155b8:	00c00044 	movi	r3,1
   155bc:	194a983a 	sll	r5,r3,r5
   155c0:	11404936 	bltu	r2,r5,156e8 <_malloc_r+0x328>
   155c4:	1146703a 	and	r3,r2,r5
   155c8:	18000a1e 	bne	r3,zero,155f4 <_malloc_r+0x234>
   155cc:	00ffff04 	movi	r3,-4
   155d0:	294b883a 	add	r5,r5,r5
   155d4:	20c8703a 	and	r4,r4,r3
   155d8:	1146703a 	and	r3,r2,r5
   155dc:	21000104 	addi	r4,r4,4
   155e0:	1800041e 	bne	r3,zero,155f4 <_malloc_r+0x234>
   155e4:	294b883a 	add	r5,r5,r5
   155e8:	1146703a 	and	r3,r2,r5
   155ec:	21000104 	addi	r4,r4,4
   155f0:	183ffc26 	beq	r3,zero,155e4 <_malloc_r+0x224>
   155f4:	023fff04 	movi	r8,-4
   155f8:	01c003c4 	movi	r7,15
   155fc:	2105883a 	add	r2,r4,r4
   15600:	1085883a 	add	r2,r2,r2
   15604:	1085883a 	add	r2,r2,r2
   15608:	9899883a 	add	r12,r19,r2
   1560c:	62800304 	addi	r10,r12,12
   15610:	2017883a 	mov	r11,r4
   15614:	54000017 	ldw	r16,0(r10)
   15618:	51bffd04 	addi	r6,r10,-12
   1561c:	8180041e 	bne	r16,r6,15630 <_malloc_r+0x270>
   15620:	0000ca06 	br	1594c <_malloc_r+0x58c>
   15624:	10001c0e 	bge	r2,zero,15698 <_malloc_r+0x2d8>
   15628:	84000317 	ldw	r16,12(r16)
   1562c:	8180c726 	beq	r16,r6,1594c <_malloc_r+0x58c>
   15630:	80c00117 	ldw	r3,4(r16)
   15634:	1a06703a 	and	r3,r3,r8
   15638:	1c45c83a 	sub	r2,r3,r17
   1563c:	38bff90e 	bge	r7,r2,15624 <_malloc_r+0x264>
   15640:	81000317 	ldw	r4,12(r16)
   15644:	81400217 	ldw	r5,8(r16)
   15648:	8447883a 	add	r3,r16,r17
   1564c:	8c400054 	ori	r17,r17,1
   15650:	29000315 	stw	r4,12(r5)
   15654:	21400215 	stw	r5,8(r4)
   15658:	84400115 	stw	r17,4(r16)
   1565c:	1889883a 	add	r4,r3,r2
   15660:	11400054 	ori	r5,r2,1
   15664:	98c00515 	stw	r3,20(r19)
   15668:	98c00415 	stw	r3,16(r19)
   1566c:	20800015 	stw	r2,0(r4)
   15670:	1a400315 	stw	r9,12(r3)
   15674:	1a400215 	stw	r9,8(r3)
   15678:	19400115 	stw	r5,4(r3)
   1567c:	9009883a 	mov	r4,r18
   15680:	001a3440 	call	1a344 <__malloc_unlock>
   15684:	80800204 	addi	r2,r16,8
   15688:	003f7b06 	br	15478 <_malloc_r+0xb8>
   1568c:	8808d0fa 	srli	r4,r17,3
   15690:	210b883a 	add	r5,r4,r4
   15694:	003f9106 	br	154dc <_malloc_r+0x11c>
   15698:	80c7883a 	add	r3,r16,r3
   1569c:	19400117 	ldw	r5,4(r3)
   156a0:	80800317 	ldw	r2,12(r16)
   156a4:	81000217 	ldw	r4,8(r16)
   156a8:	29400054 	ori	r5,r5,1
   156ac:	19400115 	stw	r5,4(r3)
   156b0:	20800315 	stw	r2,12(r4)
   156b4:	11000215 	stw	r4,8(r2)
   156b8:	9009883a 	mov	r4,r18
   156bc:	001a3440 	call	1a344 <__malloc_unlock>
   156c0:	80800204 	addi	r2,r16,8
   156c4:	003f6c06 	br	15478 <_malloc_r+0xb8>
   156c8:	8085883a 	add	r2,r16,r2
   156cc:	10c00117 	ldw	r3,4(r2)
   156d0:	9009883a 	mov	r4,r18
   156d4:	18c00054 	ori	r3,r3,1
   156d8:	10c00115 	stw	r3,4(r2)
   156dc:	001a3440 	call	1a344 <__malloc_unlock>
   156e0:	80800204 	addi	r2,r16,8
   156e4:	003f6406 	br	15478 <_malloc_r+0xb8>
   156e8:	9c000217 	ldw	r16,8(r19)
   156ec:	00bfff04 	movi	r2,-4
   156f0:	85400117 	ldw	r21,4(r16)
   156f4:	a8aa703a 	and	r21,r21,r2
   156f8:	ac400336 	bltu	r21,r17,15708 <_malloc_r+0x348>
   156fc:	ac45c83a 	sub	r2,r21,r17
   15700:	00c003c4 	movi	r3,15
   15704:	18805316 	blt	r3,r2,15854 <_malloc_r+0x494>
   15708:	d5e01917 	ldw	r23,-32668(gp)
   1570c:	d0e00317 	ldw	r3,-32756(gp)
   15710:	00bfffc4 	movi	r2,-1
   15714:	8579883a 	add	fp,r16,r21
   15718:	8def883a 	add	r23,r17,r23
   1571c:	1880d226 	beq	r3,r2,15a68 <_malloc_r+0x6a8>
   15720:	bdc403c4 	addi	r23,r23,4111
   15724:	00bc0004 	movi	r2,-4096
   15728:	b8ae703a 	and	r23,r23,r2
   1572c:	9009883a 	mov	r4,r18
   15730:	b80b883a 	mov	r5,r23
   15734:	00176940 	call	17694 <_sbrk_r>
   15738:	1029883a 	mov	r20,r2
   1573c:	00bfffc4 	movi	r2,-1
   15740:	a080d126 	beq	r20,r2,15a88 <_malloc_r+0x6c8>
   15744:	a7009f36 	bltu	r20,fp,159c4 <_malloc_r+0x604>
   15748:	058000f4 	movhi	r22,3
   1574c:	b5a79004 	addi	r22,r22,-25024
   15750:	b0800017 	ldw	r2,0(r22)
   15754:	b885883a 	add	r2,r23,r2
   15758:	b0800015 	stw	r2,0(r22)
   1575c:	e500cf26 	beq	fp,r20,15a9c <_malloc_r+0x6dc>
   15760:	d1200317 	ldw	r4,-32756(gp)
   15764:	00ffffc4 	movi	r3,-1
   15768:	20c0e026 	beq	r4,r3,15aec <_malloc_r+0x72c>
   1576c:	a739c83a 	sub	fp,r20,fp
   15770:	1705883a 	add	r2,r2,fp
   15774:	b0800015 	stw	r2,0(r22)
   15778:	a08001cc 	andi	r2,r20,7
   1577c:	1000a526 	beq	r2,zero,15a14 <_malloc_r+0x654>
   15780:	a0a9c83a 	sub	r20,r20,r2
   15784:	00c40204 	movi	r3,4104
   15788:	a5000204 	addi	r20,r20,8
   1578c:	1885c83a 	sub	r2,r3,r2
   15790:	a5c7883a 	add	r3,r20,r23
   15794:	18c3ffcc 	andi	r3,r3,4095
   15798:	10efc83a 	sub	r23,r2,r3
   1579c:	9009883a 	mov	r4,r18
   157a0:	b80b883a 	mov	r5,r23
   157a4:	00176940 	call	17694 <_sbrk_r>
   157a8:	00ffffc4 	movi	r3,-1
   157ac:	10c0cc26 	beq	r2,r3,15ae0 <_malloc_r+0x720>
   157b0:	1505c83a 	sub	r2,r2,r20
   157b4:	b887883a 	add	r3,r23,r2
   157b8:	18c00054 	ori	r3,r3,1
   157bc:	b0800017 	ldw	r2,0(r22)
   157c0:	9d000215 	stw	r20,8(r19)
   157c4:	a0c00115 	stw	r3,4(r20)
   157c8:	b885883a 	add	r2,r23,r2
   157cc:	b0800015 	stw	r2,0(r22)
   157d0:	84c00e26 	beq	r16,r19,1580c <_malloc_r+0x44c>
   157d4:	00c003c4 	movi	r3,15
   157d8:	1d40902e 	bgeu	r3,r21,15a1c <_malloc_r+0x65c>
   157dc:	ad7ffd04 	addi	r21,r21,-12
   157e0:	013ffe04 	movi	r4,-8
   157e4:	a908703a 	and	r4,r21,r4
   157e8:	810b883a 	add	r5,r16,r4
   157ec:	01800144 	movi	r6,5
   157f0:	29800115 	stw	r6,4(r5)
   157f4:	29800215 	stw	r6,8(r5)
   157f8:	81400117 	ldw	r5,4(r16)
   157fc:	2940004c 	andi	r5,r5,1
   15800:	214ab03a 	or	r5,r4,r5
   15804:	81400115 	stw	r5,4(r16)
   15808:	1900ae36 	bltu	r3,r4,15ac4 <_malloc_r+0x704>
   1580c:	d0e01817 	ldw	r3,-32672(gp)
   15810:	1880012e 	bgeu	r3,r2,15818 <_malloc_r+0x458>
   15814:	d0a01815 	stw	r2,-32672(gp)
   15818:	d0e01717 	ldw	r3,-32676(gp)
   1581c:	9c000217 	ldw	r16,8(r19)
   15820:	1880012e 	bgeu	r3,r2,15828 <_malloc_r+0x468>
   15824:	d0a01715 	stw	r2,-32676(gp)
   15828:	80c00117 	ldw	r3,4(r16)
   1582c:	00bfff04 	movi	r2,-4
   15830:	1886703a 	and	r3,r3,r2
   15834:	1c45c83a 	sub	r2,r3,r17
   15838:	1c400236 	bltu	r3,r17,15844 <_malloc_r+0x484>
   1583c:	00c003c4 	movi	r3,15
   15840:	18800416 	blt	r3,r2,15854 <_malloc_r+0x494>
   15844:	9009883a 	mov	r4,r18
   15848:	001a3440 	call	1a344 <__malloc_unlock>
   1584c:	0005883a 	mov	r2,zero
   15850:	003f0906 	br	15478 <_malloc_r+0xb8>
   15854:	88c00054 	ori	r3,r17,1
   15858:	10800054 	ori	r2,r2,1
   1585c:	80c00115 	stw	r3,4(r16)
   15860:	8463883a 	add	r17,r16,r17
   15864:	88800115 	stw	r2,4(r17)
   15868:	9009883a 	mov	r4,r18
   1586c:	9c400215 	stw	r17,8(r19)
   15870:	001a3440 	call	1a344 <__malloc_unlock>
   15874:	80800204 	addi	r2,r16,8
   15878:	003eff06 	br	15478 <_malloc_r+0xb8>
   1587c:	00800504 	movi	r2,20
   15880:	1100492e 	bgeu	r2,r4,159a8 <_malloc_r+0x5e8>
   15884:	00801504 	movi	r2,84
   15888:	11005c36 	bltu	r2,r4,159fc <_malloc_r+0x63c>
   1588c:	8808d33a 	srli	r4,r17,12
   15890:	21001b84 	addi	r4,r4,110
   15894:	210b883a 	add	r5,r4,r4
   15898:	003f1006 	br	154dc <_malloc_r+0x11c>
   1589c:	1006d27a 	srli	r3,r2,9
   158a0:	01400104 	movi	r5,4
   158a4:	28c0432e 	bgeu	r5,r3,159b4 <_malloc_r+0x5f4>
   158a8:	01400504 	movi	r5,20
   158ac:	28c07036 	bltu	r5,r3,15a70 <_malloc_r+0x6b0>
   158b0:	194016c4 	addi	r5,r3,91
   158b4:	294d883a 	add	r6,r5,r5
   158b8:	318d883a 	add	r6,r6,r6
   158bc:	318d883a 	add	r6,r6,r6
   158c0:	998d883a 	add	r6,r19,r6
   158c4:	30c00217 	ldw	r3,8(r6)
   158c8:	01c000f4 	movhi	r7,3
   158cc:	39e1e904 	addi	r7,r7,-30812
   158d0:	19805726 	beq	r3,r6,15a30 <_malloc_r+0x670>
   158d4:	01ffff04 	movi	r7,-4
   158d8:	19400117 	ldw	r5,4(r3)
   158dc:	29ca703a 	and	r5,r5,r7
   158e0:	1140022e 	bgeu	r2,r5,158ec <_malloc_r+0x52c>
   158e4:	18c00217 	ldw	r3,8(r3)
   158e8:	30fffb1e 	bne	r6,r3,158d8 <_malloc_r+0x518>
   158ec:	19400317 	ldw	r5,12(r3)
   158f0:	98800117 	ldw	r2,4(r19)
   158f4:	81400315 	stw	r5,12(r16)
   158f8:	80c00215 	stw	r3,8(r16)
   158fc:	2c000215 	stw	r16,8(r5)
   15900:	1c000315 	stw	r16,12(r3)
   15904:	003f2b06 	br	155b4 <_malloc_r+0x1f4>
   15908:	8445883a 	add	r2,r16,r17
   1590c:	8c400054 	ori	r17,r17,1
   15910:	18800515 	stw	r2,20(r3)
   15914:	18800415 	stw	r2,16(r3)
   15918:	29000054 	ori	r4,r5,1
   1591c:	1147883a 	add	r3,r2,r5
   15920:	84400115 	stw	r17,4(r16)
   15924:	11000115 	stw	r4,4(r2)
   15928:	12400315 	stw	r9,12(r2)
   1592c:	12400215 	stw	r9,8(r2)
   15930:	19400015 	stw	r5,0(r3)
   15934:	9009883a 	mov	r4,r18
   15938:	001a3440 	call	1a344 <__malloc_unlock>
   1593c:	80800204 	addi	r2,r16,8
   15940:	003ecd06 	br	15478 <_malloc_r+0xb8>
   15944:	18800117 	ldw	r2,4(r3)
   15948:	003f1a06 	br	155b4 <_malloc_r+0x1f4>
   1594c:	5ac00044 	addi	r11,r11,1
   15950:	588000cc 	andi	r2,r11,3
   15954:	52800204 	addi	r10,r10,8
   15958:	103f2e1e 	bne	r2,zero,15614 <_malloc_r+0x254>
   1595c:	20c000cc 	andi	r3,r4,3
   15960:	60bffe04 	addi	r2,r12,-8
   15964:	18006f26 	beq	r3,zero,15b24 <_malloc_r+0x764>
   15968:	63000017 	ldw	r12,0(r12)
   1596c:	213fffc4 	addi	r4,r4,-1
   15970:	60bffa26 	beq	r12,r2,1595c <_malloc_r+0x59c>
   15974:	98800117 	ldw	r2,4(r19)
   15978:	294b883a 	add	r5,r5,r5
   1597c:	117f5a36 	bltu	r2,r5,156e8 <_malloc_r+0x328>
   15980:	283f5926 	beq	r5,zero,156e8 <_malloc_r+0x328>
   15984:	1146703a 	and	r3,r2,r5
   15988:	18001626 	beq	r3,zero,159e4 <_malloc_r+0x624>
   1598c:	5809883a 	mov	r4,r11
   15990:	003f1a06 	br	155fc <_malloc_r+0x23c>
   15994:	80800204 	addi	r2,r16,8
   15998:	84000517 	ldw	r16,20(r16)
   1599c:	143ea81e 	bne	r2,r16,15440 <_malloc_r+0x80>
   159a0:	21000084 	addi	r4,r4,2
   159a4:	003ee306 	br	15534 <_malloc_r+0x174>
   159a8:	210016c4 	addi	r4,r4,91
   159ac:	210b883a 	add	r5,r4,r4
   159b0:	003eca06 	br	154dc <_malloc_r+0x11c>
   159b4:	100ad1ba 	srli	r5,r2,6
   159b8:	29400e04 	addi	r5,r5,56
   159bc:	294d883a 	add	r6,r5,r5
   159c0:	003fbd06 	br	158b8 <_malloc_r+0x4f8>
   159c4:	84ff6026 	beq	r16,r19,15748 <_malloc_r+0x388>
   159c8:	008000f4 	movhi	r2,3
   159cc:	10a1e904 	addi	r2,r2,-30812
   159d0:	14000217 	ldw	r16,8(r2)
   159d4:	00bfff04 	movi	r2,-4
   159d8:	80c00117 	ldw	r3,4(r16)
   159dc:	1886703a 	and	r3,r3,r2
   159e0:	003f9406 	br	15834 <_malloc_r+0x474>
   159e4:	294b883a 	add	r5,r5,r5
   159e8:	1146703a 	and	r3,r2,r5
   159ec:	5ac00104 	addi	r11,r11,4
   159f0:	183ffc26 	beq	r3,zero,159e4 <_malloc_r+0x624>
   159f4:	5809883a 	mov	r4,r11
   159f8:	003f0006 	br	155fc <_malloc_r+0x23c>
   159fc:	00805504 	movi	r2,340
   15a00:	11001336 	bltu	r2,r4,15a50 <_malloc_r+0x690>
   15a04:	8808d3fa 	srli	r4,r17,15
   15a08:	21001dc4 	addi	r4,r4,119
   15a0c:	210b883a 	add	r5,r4,r4
   15a10:	003eb206 	br	154dc <_malloc_r+0x11c>
   15a14:	00840004 	movi	r2,4096
   15a18:	003f5d06 	br	15790 <_malloc_r+0x3d0>
   15a1c:	00800044 	movi	r2,1
   15a20:	a0800115 	stw	r2,4(r20)
   15a24:	a021883a 	mov	r16,r20
   15a28:	0007883a 	mov	r3,zero
   15a2c:	003f8106 	br	15834 <_malloc_r+0x474>
   15a30:	280bd0ba 	srai	r5,r5,2
   15a34:	01800044 	movi	r6,1
   15a38:	38800117 	ldw	r2,4(r7)
   15a3c:	314c983a 	sll	r6,r6,r5
   15a40:	180b883a 	mov	r5,r3
   15a44:	3084b03a 	or	r2,r6,r2
   15a48:	38800115 	stw	r2,4(r7)
   15a4c:	003fa906 	br	158f4 <_malloc_r+0x534>
   15a50:	00815504 	movi	r2,1364
   15a54:	11001836 	bltu	r2,r4,15ab8 <_malloc_r+0x6f8>
   15a58:	8808d4ba 	srli	r4,r17,18
   15a5c:	21001f04 	addi	r4,r4,124
   15a60:	210b883a 	add	r5,r4,r4
   15a64:	003e9d06 	br	154dc <_malloc_r+0x11c>
   15a68:	bdc00404 	addi	r23,r23,16
   15a6c:	003f2f06 	br	1572c <_malloc_r+0x36c>
   15a70:	01401504 	movi	r5,84
   15a74:	28c01f36 	bltu	r5,r3,15af4 <_malloc_r+0x734>
   15a78:	100ad33a 	srli	r5,r2,12
   15a7c:	29401b84 	addi	r5,r5,110
   15a80:	294d883a 	add	r6,r5,r5
   15a84:	003f8c06 	br	158b8 <_malloc_r+0x4f8>
   15a88:	9c000217 	ldw	r16,8(r19)
   15a8c:	00bfff04 	movi	r2,-4
   15a90:	80c00117 	ldw	r3,4(r16)
   15a94:	1886703a 	and	r3,r3,r2
   15a98:	003f6606 	br	15834 <_malloc_r+0x474>
   15a9c:	e0c3ffcc 	andi	r3,fp,4095
   15aa0:	183f2f1e 	bne	r3,zero,15760 <_malloc_r+0x3a0>
   15aa4:	98c00217 	ldw	r3,8(r19)
   15aa8:	bd49883a 	add	r4,r23,r21
   15aac:	21000054 	ori	r4,r4,1
   15ab0:	19000115 	stw	r4,4(r3)
   15ab4:	003f5506 	br	1580c <_malloc_r+0x44c>
   15ab8:	01403f04 	movi	r5,252
   15abc:	01001f84 	movi	r4,126
   15ac0:	003e8606 	br	154dc <_malloc_r+0x11c>
   15ac4:	9009883a 	mov	r4,r18
   15ac8:	81400204 	addi	r5,r16,8
   15acc:	00148280 	call	14828 <_free_r>
   15ad0:	008000f4 	movhi	r2,3
   15ad4:	10a79004 	addi	r2,r2,-25024
   15ad8:	10800017 	ldw	r2,0(r2)
   15adc:	003f4b06 	br	1580c <_malloc_r+0x44c>
   15ae0:	00c00044 	movi	r3,1
   15ae4:	002f883a 	mov	r23,zero
   15ae8:	003f3406 	br	157bc <_malloc_r+0x3fc>
   15aec:	d5200315 	stw	r20,-32756(gp)
   15af0:	003f2106 	br	15778 <_malloc_r+0x3b8>
   15af4:	01405504 	movi	r5,340
   15af8:	28c00436 	bltu	r5,r3,15b0c <_malloc_r+0x74c>
   15afc:	100ad3fa 	srli	r5,r2,15
   15b00:	29401dc4 	addi	r5,r5,119
   15b04:	294d883a 	add	r6,r5,r5
   15b08:	003f6b06 	br	158b8 <_malloc_r+0x4f8>
   15b0c:	01415504 	movi	r5,1364
   15b10:	28c00936 	bltu	r5,r3,15b38 <_malloc_r+0x778>
   15b14:	100ad4ba 	srli	r5,r2,18
   15b18:	29401f04 	addi	r5,r5,124
   15b1c:	294d883a 	add	r6,r5,r5
   15b20:	003f6506 	br	158b8 <_malloc_r+0x4f8>
   15b24:	98800117 	ldw	r2,4(r19)
   15b28:	0146303a 	nor	r3,zero,r5
   15b2c:	1884703a 	and	r2,r3,r2
   15b30:	98800115 	stw	r2,4(r19)
   15b34:	003f9006 	br	15978 <_malloc_r+0x5b8>
   15b38:	01803f04 	movi	r6,252
   15b3c:	01401f84 	movi	r5,126
   15b40:	003f5d06 	br	158b8 <_malloc_r+0x4f8>

00015b44 <memchr>:
   15b44:	008000c4 	movi	r2,3
   15b48:	29403fcc 	andi	r5,r5,255
   15b4c:	1180282e 	bgeu	r2,r6,15bf0 <memchr+0xac>
   15b50:	2086703a 	and	r3,r4,r2
   15b54:	1800351e 	bne	r3,zero,15c2c <memchr+0xe8>
   15b58:	2816923a 	slli	r11,r5,8
   15b5c:	2093883a 	add	r9,r4,r2
   15b60:	22000084 	addi	r8,r4,2
   15b64:	5957883a 	add	r11,r11,r5
   15b68:	5816923a 	slli	r11,r11,8
   15b6c:	20c00044 	addi	r3,r4,1
   15b70:	037fbff4 	movhi	r13,65279
   15b74:	6b7fbfc4 	addi	r13,r13,-257
   15b78:	5957883a 	add	r11,r11,r5
   15b7c:	5816923a 	slli	r11,r11,8
   15b80:	03202074 	movhi	r12,32897
   15b84:	63202004 	addi	r12,r12,-32640
   15b88:	101d883a 	mov	r14,r2
   15b8c:	5957883a 	add	r11,r11,r5
   15b90:	21c00017 	ldw	r7,0(r4)
   15b94:	31bfff04 	addi	r6,r6,-4
   15b98:	1805883a 	mov	r2,r3
   15b9c:	3acef03a 	xor	r7,r7,r11
   15ba0:	3b55883a 	add	r10,r7,r13
   15ba4:	01ce303a 	nor	r7,zero,r7
   15ba8:	51ce703a 	and	r7,r10,r7
   15bac:	3b0e703a 	and	r7,r7,r12
   15bb0:	38000a26 	beq	r7,zero,15bdc <memchr+0x98>
   15bb4:	21c00003 	ldbu	r7,0(r4)
   15bb8:	39401e26 	beq	r7,r5,15c34 <memchr+0xf0>
   15bbc:	19c00003 	ldbu	r7,0(r3)
   15bc0:	39401926 	beq	r7,r5,15c28 <memchr+0xe4>
   15bc4:	41c00003 	ldbu	r7,0(r8)
   15bc8:	4005883a 	mov	r2,r8
   15bcc:	39401626 	beq	r7,r5,15c28 <memchr+0xe4>
   15bd0:	49c00003 	ldbu	r7,0(r9)
   15bd4:	4805883a 	mov	r2,r9
   15bd8:	39401326 	beq	r7,r5,15c28 <memchr+0xe4>
   15bdc:	21000104 	addi	r4,r4,4
   15be0:	4a400104 	addi	r9,r9,4
   15be4:	42000104 	addi	r8,r8,4
   15be8:	18c00104 	addi	r3,r3,4
   15bec:	71bfe836 	bltu	r14,r6,15b90 <memchr+0x4c>
   15bf0:	2005883a 	mov	r2,r4
   15bf4:	30000a26 	beq	r6,zero,15c20 <memchr+0xdc>
   15bf8:	10c00003 	ldbu	r3,0(r2)
   15bfc:	19400a26 	beq	r3,r5,15c28 <memchr+0xe4>
   15c00:	10c00044 	addi	r3,r2,1
   15c04:	118d883a 	add	r6,r2,r6
   15c08:	00000306 	br	15c18 <memchr+0xd4>
   15c0c:	11000003 	ldbu	r4,0(r2)
   15c10:	18c00044 	addi	r3,r3,1
   15c14:	21400426 	beq	r4,r5,15c28 <memchr+0xe4>
   15c18:	1805883a 	mov	r2,r3
   15c1c:	19bffb1e 	bne	r3,r6,15c0c <memchr+0xc8>
   15c20:	0005883a 	mov	r2,zero
   15c24:	f800283a 	ret
   15c28:	f800283a 	ret
   15c2c:	2005883a 	mov	r2,r4
   15c30:	003ff106 	br	15bf8 <memchr+0xb4>
   15c34:	2005883a 	mov	r2,r4
   15c38:	f800283a 	ret

00015c3c <memcpy>:
   15c3c:	defffb04 	addi	sp,sp,-20
   15c40:	dc000015 	stw	r16,0(sp)
   15c44:	dfc00415 	stw	ra,16(sp)
   15c48:	dcc00315 	stw	r19,12(sp)
   15c4c:	dc800215 	stw	r18,8(sp)
   15c50:	dc400115 	stw	r17,4(sp)
   15c54:	00c003c4 	movi	r3,15
   15c58:	2021883a 	mov	r16,r4
   15c5c:	3005883a 	mov	r2,r6
   15c60:	1980032e 	bgeu	r3,r6,15c70 <memcpy+0x34>
   15c64:	2906b03a 	or	r3,r5,r4
   15c68:	18c000cc 	andi	r3,r3,3
   15c6c:	18001026 	beq	r3,zero,15cb0 <memcpy+0x74>
   15c70:	8007883a 	mov	r3,r16
   15c74:	288f883a 	add	r7,r5,r2
   15c78:	10000526 	beq	r2,zero,15c90 <memcpy+0x54>
   15c7c:	29800003 	ldbu	r6,0(r5)
   15c80:	18c00044 	addi	r3,r3,1
   15c84:	29400044 	addi	r5,r5,1
   15c88:	19bfffc5 	stb	r6,-1(r3)
   15c8c:	29fffb1e 	bne	r5,r7,15c7c <memcpy+0x40>
   15c90:	8005883a 	mov	r2,r16
   15c94:	dfc00417 	ldw	ra,16(sp)
   15c98:	dcc00317 	ldw	r19,12(sp)
   15c9c:	dc800217 	ldw	r18,8(sp)
   15ca0:	dc400117 	ldw	r17,4(sp)
   15ca4:	dc000017 	ldw	r16,0(sp)
   15ca8:	dec00504 	addi	sp,sp,20
   15cac:	f800283a 	ret
   15cb0:	32bffc04 	addi	r10,r6,-16
   15cb4:	5014d13a 	srli	r10,r10,4
   15cb8:	20800404 	addi	r2,r4,16
   15cbc:	2007883a 	mov	r3,r4
   15cc0:	5008913a 	slli	r4,r10,4
   15cc4:	280f883a 	mov	r7,r5
   15cc8:	1105883a 	add	r2,r2,r4
   15ccc:	3a000017 	ldw	r8,0(r7)
   15cd0:	18c00404 	addi	r3,r3,16
   15cd4:	39c00404 	addi	r7,r7,16
   15cd8:	1a3ffc15 	stw	r8,-16(r3)
   15cdc:	3a3ffd17 	ldw	r8,-12(r7)
   15ce0:	1a3ffd15 	stw	r8,-12(r3)
   15ce4:	3a3ffe17 	ldw	r8,-8(r7)
   15ce8:	1a3ffe15 	stw	r8,-8(r3)
   15cec:	3a3fff17 	ldw	r8,-4(r7)
   15cf0:	1a3fff15 	stw	r8,-4(r3)
   15cf4:	18bff51e 	bne	r3,r2,15ccc <memcpy+0x90>
   15cf8:	52800044 	addi	r10,r10,1
   15cfc:	5014913a 	slli	r10,r10,4
   15d00:	308003cc 	andi	r2,r6,15
   15d04:	010000c4 	movi	r4,3
   15d08:	8287883a 	add	r3,r16,r10
   15d0c:	2a95883a 	add	r10,r5,r10
   15d10:	2080182e 	bgeu	r4,r2,15d74 <memcpy+0x138>
   15d14:	147fff04 	addi	r17,r2,-4
   15d18:	8808d0ba 	srli	r4,r17,2
   15d1c:	1a400104 	addi	r9,r3,4
   15d20:	180d883a 	mov	r6,r3
   15d24:	2105883a 	add	r2,r4,r4
   15d28:	1085883a 	add	r2,r2,r2
   15d2c:	4893883a 	add	r9,r9,r2
   15d30:	500f883a 	mov	r7,r10
   15d34:	3a000017 	ldw	r8,0(r7)
   15d38:	31800104 	addi	r6,r6,4
   15d3c:	39c00104 	addi	r7,r7,4
   15d40:	323fff15 	stw	r8,-4(r6)
   15d44:	327ffb1e 	bne	r6,r9,15d34 <memcpy+0xf8>
   15d48:	20800044 	addi	r2,r4,1
   15d4c:	1085883a 	add	r2,r2,r2
   15d50:	1085883a 	add	r2,r2,r2
   15d54:	017fff04 	movi	r5,-4
   15d58:	18a5883a 	add	r18,r3,r2
   15d5c:	50a7883a 	add	r19,r10,r2
   15d60:	00107940 	call	10794 <__mulsi3>
   15d64:	1445883a 	add	r2,r2,r17
   15d68:	980b883a 	mov	r5,r19
   15d6c:	9007883a 	mov	r3,r18
   15d70:	003fc006 	br	15c74 <memcpy+0x38>
   15d74:	500b883a 	mov	r5,r10
   15d78:	003fbe06 	br	15c74 <memcpy+0x38>

00015d7c <memmove>:
   15d7c:	defffb04 	addi	sp,sp,-20
   15d80:	dc000015 	stw	r16,0(sp)
   15d84:	dfc00415 	stw	ra,16(sp)
   15d88:	dcc00315 	stw	r19,12(sp)
   15d8c:	dc800215 	stw	r18,8(sp)
   15d90:	dc400115 	stw	r17,4(sp)
   15d94:	2021883a 	mov	r16,r4
   15d98:	300f883a 	mov	r7,r6
   15d9c:	2900122e 	bgeu	r5,r4,15de8 <memmove+0x6c>
   15da0:	2987883a 	add	r3,r5,r6
   15da4:	20c0102e 	bgeu	r4,r3,15de8 <memmove+0x6c>
   15da8:	218b883a 	add	r5,r4,r6
   15dac:	1989c83a 	sub	r4,r3,r6
   15db0:	30000526 	beq	r6,zero,15dc8 <memmove+0x4c>
   15db4:	18ffffc4 	addi	r3,r3,-1
   15db8:	18800003 	ldbu	r2,0(r3)
   15dbc:	297fffc4 	addi	r5,r5,-1
   15dc0:	28800005 	stb	r2,0(r5)
   15dc4:	193ffb1e 	bne	r3,r4,15db4 <memmove+0x38>
   15dc8:	8005883a 	mov	r2,r16
   15dcc:	dfc00417 	ldw	ra,16(sp)
   15dd0:	dcc00317 	ldw	r19,12(sp)
   15dd4:	dc800217 	ldw	r18,8(sp)
   15dd8:	dc400117 	ldw	r17,4(sp)
   15ddc:	dc000017 	ldw	r16,0(sp)
   15de0:	dec00504 	addi	sp,sp,20
   15de4:	f800283a 	ret
   15de8:	008003c4 	movi	r2,15
   15dec:	1180422e 	bgeu	r2,r6,15ef8 <memmove+0x17c>
   15df0:	2c04b03a 	or	r2,r5,r16
   15df4:	108000cc 	andi	r2,r2,3
   15df8:	10003f1e 	bne	r2,zero,15ef8 <memmove+0x17c>
   15dfc:	32bffc04 	addi	r10,r6,-16
   15e00:	5014d13a 	srli	r10,r10,4
   15e04:	81000404 	addi	r4,r16,16
   15e08:	8007883a 	mov	r3,r16
   15e0c:	5004913a 	slli	r2,r10,4
   15e10:	280f883a 	mov	r7,r5
   15e14:	2089883a 	add	r4,r4,r2
   15e18:	38800017 	ldw	r2,0(r7)
   15e1c:	18c00404 	addi	r3,r3,16
   15e20:	39c00404 	addi	r7,r7,16
   15e24:	18bffc15 	stw	r2,-16(r3)
   15e28:	38bffd17 	ldw	r2,-12(r7)
   15e2c:	18bffd15 	stw	r2,-12(r3)
   15e30:	38bffe17 	ldw	r2,-8(r7)
   15e34:	18bffe15 	stw	r2,-8(r3)
   15e38:	38bfff17 	ldw	r2,-4(r7)
   15e3c:	18bfff15 	stw	r2,-4(r3)
   15e40:	193ff51e 	bne	r3,r4,15e18 <memmove+0x9c>
   15e44:	52800044 	addi	r10,r10,1
   15e48:	5014913a 	slli	r10,r10,4
   15e4c:	31c003cc 	andi	r7,r6,15
   15e50:	008000c4 	movi	r2,3
   15e54:	8287883a 	add	r3,r16,r10
   15e58:	2a95883a 	add	r10,r5,r10
   15e5c:	11c0282e 	bgeu	r2,r7,15f00 <memmove+0x184>
   15e60:	3c7fff04 	addi	r17,r7,-4
   15e64:	8808d0ba 	srli	r4,r17,2
   15e68:	1a400104 	addi	r9,r3,4
   15e6c:	180d883a 	mov	r6,r3
   15e70:	2105883a 	add	r2,r4,r4
   15e74:	1085883a 	add	r2,r2,r2
   15e78:	4893883a 	add	r9,r9,r2
   15e7c:	5005883a 	mov	r2,r10
   15e80:	12000017 	ldw	r8,0(r2)
   15e84:	31800104 	addi	r6,r6,4
   15e88:	10800104 	addi	r2,r2,4
   15e8c:	323fff15 	stw	r8,-4(r6)
   15e90:	327ffb1e 	bne	r6,r9,15e80 <memmove+0x104>
   15e94:	20800044 	addi	r2,r4,1
   15e98:	1085883a 	add	r2,r2,r2
   15e9c:	1085883a 	add	r2,r2,r2
   15ea0:	017fff04 	movi	r5,-4
   15ea4:	18a5883a 	add	r18,r3,r2
   15ea8:	50a7883a 	add	r19,r10,r2
   15eac:	00107940 	call	10794 <__mulsi3>
   15eb0:	144f883a 	add	r7,r2,r17
   15eb4:	980b883a 	mov	r5,r19
   15eb8:	9007883a 	mov	r3,r18
   15ebc:	383fc226 	beq	r7,zero,15dc8 <memmove+0x4c>
   15ec0:	19cf883a 	add	r7,r3,r7
   15ec4:	29800003 	ldbu	r6,0(r5)
   15ec8:	18c00044 	addi	r3,r3,1
   15ecc:	29400044 	addi	r5,r5,1
   15ed0:	19bfffc5 	stb	r6,-1(r3)
   15ed4:	19fffb1e 	bne	r3,r7,15ec4 <memmove+0x148>
   15ed8:	8005883a 	mov	r2,r16
   15edc:	dfc00417 	ldw	ra,16(sp)
   15ee0:	dcc00317 	ldw	r19,12(sp)
   15ee4:	dc800217 	ldw	r18,8(sp)
   15ee8:	dc400117 	ldw	r17,4(sp)
   15eec:	dc000017 	ldw	r16,0(sp)
   15ef0:	dec00504 	addi	sp,sp,20
   15ef4:	f800283a 	ret
   15ef8:	8007883a 	mov	r3,r16
   15efc:	003fef06 	br	15ebc <memmove+0x140>
   15f00:	500b883a 	mov	r5,r10
   15f04:	003fed06 	br	15ebc <memmove+0x140>

00015f08 <memset>:
   15f08:	00c000c4 	movi	r3,3
   15f0c:	2005883a 	mov	r2,r4
   15f10:	29403fcc 	andi	r5,r5,255
   15f14:	19802d2e 	bgeu	r3,r6,15fcc <memset+0xc4>
   15f18:	20c6703a 	and	r3,r4,r3
   15f1c:	18002e1e 	bne	r3,zero,15fd8 <memset+0xd0>
   15f20:	2806923a 	slli	r3,r5,8
   15f24:	010003c4 	movi	r4,15
   15f28:	3011883a 	mov	r8,r6
   15f2c:	1946b03a 	or	r3,r3,r5
   15f30:	180e943a 	slli	r7,r3,16
   15f34:	38ceb03a 	or	r7,r7,r3
   15f38:	1007883a 	mov	r3,r2
   15f3c:	21800f2e 	bgeu	r4,r6,15f7c <memset+0x74>
   15f40:	19c00015 	stw	r7,0(r3)
   15f44:	19c00115 	stw	r7,4(r3)
   15f48:	19c00215 	stw	r7,8(r3)
   15f4c:	19c00315 	stw	r7,12(r3)
   15f50:	423ffc04 	addi	r8,r8,-16
   15f54:	18c00404 	addi	r3,r3,16
   15f58:	223ff936 	bltu	r4,r8,15f40 <memset+0x38>
   15f5c:	30fffc04 	addi	r3,r6,-16
   15f60:	1806d13a 	srli	r3,r3,4
   15f64:	318003cc 	andi	r6,r6,15
   15f68:	010000c4 	movi	r4,3
   15f6c:	18c00044 	addi	r3,r3,1
   15f70:	1806913a 	slli	r3,r3,4
   15f74:	10c7883a 	add	r3,r2,r3
   15f78:	21800e2e 	bgeu	r4,r6,15fb4 <memset+0xac>
   15f7c:	1813883a 	mov	r9,r3
   15f80:	3011883a 	mov	r8,r6
   15f84:	010000c4 	movi	r4,3
   15f88:	49c00015 	stw	r7,0(r9)
   15f8c:	423fff04 	addi	r8,r8,-4
   15f90:	4a400104 	addi	r9,r9,4
   15f94:	223ffc36 	bltu	r4,r8,15f88 <memset+0x80>
   15f98:	313fff04 	addi	r4,r6,-4
   15f9c:	2008d0ba 	srli	r4,r4,2
   15fa0:	318000cc 	andi	r6,r6,3
   15fa4:	21000044 	addi	r4,r4,1
   15fa8:	2109883a 	add	r4,r4,r4
   15fac:	2109883a 	add	r4,r4,r4
   15fb0:	1907883a 	add	r3,r3,r4
   15fb4:	30000a26 	beq	r6,zero,15fe0 <memset+0xd8>
   15fb8:	198d883a 	add	r6,r3,r6
   15fbc:	19400005 	stb	r5,0(r3)
   15fc0:	18c00044 	addi	r3,r3,1
   15fc4:	19bffd1e 	bne	r3,r6,15fbc <memset+0xb4>
   15fc8:	f800283a 	ret
   15fcc:	2007883a 	mov	r3,r4
   15fd0:	303ff91e 	bne	r6,zero,15fb8 <memset+0xb0>
   15fd4:	00000206 	br	15fe0 <memset+0xd8>
   15fd8:	2007883a 	mov	r3,r4
   15fdc:	003ff606 	br	15fb8 <memset+0xb0>
   15fe0:	f800283a 	ret

00015fe4 <_Balloc>:
   15fe4:	20801317 	ldw	r2,76(r4)
   15fe8:	defffc04 	addi	sp,sp,-16
   15fec:	dc400115 	stw	r17,4(sp)
   15ff0:	dc000015 	stw	r16,0(sp)
   15ff4:	dfc00315 	stw	ra,12(sp)
   15ff8:	dc800215 	stw	r18,8(sp)
   15ffc:	2023883a 	mov	r17,r4
   16000:	2821883a 	mov	r16,r5
   16004:	10000f26 	beq	r2,zero,16044 <_Balloc+0x60>
   16008:	8407883a 	add	r3,r16,r16
   1600c:	18c7883a 	add	r3,r3,r3
   16010:	10c7883a 	add	r3,r2,r3
   16014:	18800017 	ldw	r2,0(r3)
   16018:	10001126 	beq	r2,zero,16060 <_Balloc+0x7c>
   1601c:	11000017 	ldw	r4,0(r2)
   16020:	19000015 	stw	r4,0(r3)
   16024:	10000415 	stw	zero,16(r2)
   16028:	10000315 	stw	zero,12(r2)
   1602c:	dfc00317 	ldw	ra,12(sp)
   16030:	dc800217 	ldw	r18,8(sp)
   16034:	dc400117 	ldw	r17,4(sp)
   16038:	dc000017 	ldw	r16,0(sp)
   1603c:	dec00404 	addi	sp,sp,16
   16040:	f800283a 	ret
   16044:	01400104 	movi	r5,4
   16048:	01800404 	movi	r6,16
   1604c:	00179480 	call	17948 <_calloc_r>
   16050:	88801315 	stw	r2,76(r17)
   16054:	103fec1e 	bne	r2,zero,16008 <_Balloc+0x24>
   16058:	0005883a 	mov	r2,zero
   1605c:	003ff306 	br	1602c <_Balloc+0x48>
   16060:	01400044 	movi	r5,1
   16064:	2c24983a 	sll	r18,r5,r16
   16068:	8809883a 	mov	r4,r17
   1606c:	91800144 	addi	r6,r18,5
   16070:	318d883a 	add	r6,r6,r6
   16074:	318d883a 	add	r6,r6,r6
   16078:	00179480 	call	17948 <_calloc_r>
   1607c:	103ff626 	beq	r2,zero,16058 <_Balloc+0x74>
   16080:	14000115 	stw	r16,4(r2)
   16084:	14800215 	stw	r18,8(r2)
   16088:	003fe606 	br	16024 <_Balloc+0x40>

0001608c <_Bfree>:
   1608c:	28000826 	beq	r5,zero,160b0 <_Bfree+0x24>
   16090:	28c00117 	ldw	r3,4(r5)
   16094:	20801317 	ldw	r2,76(r4)
   16098:	18c7883a 	add	r3,r3,r3
   1609c:	18c7883a 	add	r3,r3,r3
   160a0:	10c5883a 	add	r2,r2,r3
   160a4:	10c00017 	ldw	r3,0(r2)
   160a8:	28c00015 	stw	r3,0(r5)
   160ac:	11400015 	stw	r5,0(r2)
   160b0:	f800283a 	ret

000160b4 <__multadd>:
   160b4:	defff604 	addi	sp,sp,-40
   160b8:	dd400515 	stw	r21,20(sp)
   160bc:	2d400417 	ldw	r21,16(r5)
   160c0:	df000815 	stw	fp,32(sp)
   160c4:	ddc00715 	stw	r23,28(sp)
   160c8:	dd800615 	stw	r22,24(sp)
   160cc:	dd000415 	stw	r20,16(sp)
   160d0:	dc400115 	stw	r17,4(sp)
   160d4:	dc000015 	stw	r16,0(sp)
   160d8:	dfc00915 	stw	ra,36(sp)
   160dc:	dcc00315 	stw	r19,12(sp)
   160e0:	dc800215 	stw	r18,8(sp)
   160e4:	282d883a 	mov	r22,r5
   160e8:	202f883a 	mov	r23,r4
   160ec:	3029883a 	mov	r20,r6
   160f0:	3839883a 	mov	fp,r7
   160f4:	2c000504 	addi	r16,r5,20
   160f8:	0023883a 	mov	r17,zero
   160fc:	84c00017 	ldw	r19,0(r16)
   16100:	a00b883a 	mov	r5,r20
   16104:	8c400044 	addi	r17,r17,1
   16108:	993fffcc 	andi	r4,r19,65535
   1610c:	00107940 	call	10794 <__mulsi3>
   16110:	1725883a 	add	r18,r2,fp
   16114:	9808d43a 	srli	r4,r19,16
   16118:	9026d43a 	srli	r19,r18,16
   1611c:	a00b883a 	mov	r5,r20
   16120:	00107940 	call	10794 <__mulsi3>
   16124:	988f883a 	add	r7,r19,r2
   16128:	3804943a 	slli	r2,r7,16
   1612c:	94bfffcc 	andi	r18,r18,65535
   16130:	3838d43a 	srli	fp,r7,16
   16134:	14a5883a 	add	r18,r2,r18
   16138:	84800015 	stw	r18,0(r16)
   1613c:	84000104 	addi	r16,r16,4
   16140:	8d7fee16 	blt	r17,r21,160fc <__multadd+0x48>
   16144:	e0000926 	beq	fp,zero,1616c <__multadd+0xb8>
   16148:	b0800217 	ldw	r2,8(r22)
   1614c:	a880140e 	bge	r21,r2,161a0 <__multadd+0xec>
   16150:	a8800144 	addi	r2,r21,5
   16154:	1085883a 	add	r2,r2,r2
   16158:	1085883a 	add	r2,r2,r2
   1615c:	b085883a 	add	r2,r22,r2
   16160:	ad400044 	addi	r21,r21,1
   16164:	17000015 	stw	fp,0(r2)
   16168:	b5400415 	stw	r21,16(r22)
   1616c:	b005883a 	mov	r2,r22
   16170:	dfc00917 	ldw	ra,36(sp)
   16174:	df000817 	ldw	fp,32(sp)
   16178:	ddc00717 	ldw	r23,28(sp)
   1617c:	dd800617 	ldw	r22,24(sp)
   16180:	dd400517 	ldw	r21,20(sp)
   16184:	dd000417 	ldw	r20,16(sp)
   16188:	dcc00317 	ldw	r19,12(sp)
   1618c:	dc800217 	ldw	r18,8(sp)
   16190:	dc400117 	ldw	r17,4(sp)
   16194:	dc000017 	ldw	r16,0(sp)
   16198:	dec00a04 	addi	sp,sp,40
   1619c:	f800283a 	ret
   161a0:	b1400117 	ldw	r5,4(r22)
   161a4:	b809883a 	mov	r4,r23
   161a8:	29400044 	addi	r5,r5,1
   161ac:	0015fe40 	call	15fe4 <_Balloc>
   161b0:	b1800417 	ldw	r6,16(r22)
   161b4:	b1400304 	addi	r5,r22,12
   161b8:	11000304 	addi	r4,r2,12
   161bc:	31800084 	addi	r6,r6,2
   161c0:	318d883a 	add	r6,r6,r6
   161c4:	318d883a 	add	r6,r6,r6
   161c8:	1021883a 	mov	r16,r2
   161cc:	0015c3c0 	call	15c3c <memcpy>
   161d0:	b0c00117 	ldw	r3,4(r22)
   161d4:	b8801317 	ldw	r2,76(r23)
   161d8:	18c7883a 	add	r3,r3,r3
   161dc:	18c7883a 	add	r3,r3,r3
   161e0:	10c5883a 	add	r2,r2,r3
   161e4:	10c00017 	ldw	r3,0(r2)
   161e8:	b0c00015 	stw	r3,0(r22)
   161ec:	15800015 	stw	r22,0(r2)
   161f0:	802d883a 	mov	r22,r16
   161f4:	003fd606 	br	16150 <__multadd+0x9c>

000161f8 <__s2b>:
   161f8:	defff904 	addi	sp,sp,-28
   161fc:	dd000415 	stw	r20,16(sp)
   16200:	dc400115 	stw	r17,4(sp)
   16204:	2829883a 	mov	r20,r5
   16208:	2023883a 	mov	r17,r4
   1620c:	01400244 	movi	r5,9
   16210:	39000204 	addi	r4,r7,8
   16214:	dcc00315 	stw	r19,12(sp)
   16218:	dc800215 	stw	r18,8(sp)
   1621c:	dfc00615 	stw	ra,24(sp)
   16220:	dd400515 	stw	r21,20(sp)
   16224:	dc000015 	stw	r16,0(sp)
   16228:	3825883a 	mov	r18,r7
   1622c:	3027883a 	mov	r19,r6
   16230:	00106d80 	call	106d8 <__divsi3>
   16234:	00c00044 	movi	r3,1
   16238:	000b883a 	mov	r5,zero
   1623c:	1880030e 	bge	r3,r2,1624c <__s2b+0x54>
   16240:	18c7883a 	add	r3,r3,r3
   16244:	29400044 	addi	r5,r5,1
   16248:	18bffd16 	blt	r3,r2,16240 <__s2b+0x48>
   1624c:	8809883a 	mov	r4,r17
   16250:	0015fe40 	call	15fe4 <_Balloc>
   16254:	d8c00717 	ldw	r3,28(sp)
   16258:	10c00515 	stw	r3,20(r2)
   1625c:	00c00044 	movi	r3,1
   16260:	10c00415 	stw	r3,16(r2)
   16264:	00c00244 	movi	r3,9
   16268:	1cc0210e 	bge	r3,r19,162f0 <__s2b+0xf8>
   1626c:	a0eb883a 	add	r21,r20,r3
   16270:	a821883a 	mov	r16,r21
   16274:	a4e9883a 	add	r20,r20,r19
   16278:	81c00007 	ldb	r7,0(r16)
   1627c:	8809883a 	mov	r4,r17
   16280:	84000044 	addi	r16,r16,1
   16284:	100b883a 	mov	r5,r2
   16288:	01800284 	movi	r6,10
   1628c:	39fff404 	addi	r7,r7,-48
   16290:	00160b40 	call	160b4 <__multadd>
   16294:	853ff81e 	bne	r16,r20,16278 <__s2b+0x80>
   16298:	ace1883a 	add	r16,r21,r19
   1629c:	843ffe04 	addi	r16,r16,-8
   162a0:	9c800a0e 	bge	r19,r18,162cc <__s2b+0xd4>
   162a4:	94e5c83a 	sub	r18,r18,r19
   162a8:	84a5883a 	add	r18,r16,r18
   162ac:	81c00007 	ldb	r7,0(r16)
   162b0:	8809883a 	mov	r4,r17
   162b4:	84000044 	addi	r16,r16,1
   162b8:	100b883a 	mov	r5,r2
   162bc:	01800284 	movi	r6,10
   162c0:	39fff404 	addi	r7,r7,-48
   162c4:	00160b40 	call	160b4 <__multadd>
   162c8:	84bff81e 	bne	r16,r18,162ac <__s2b+0xb4>
   162cc:	dfc00617 	ldw	ra,24(sp)
   162d0:	dd400517 	ldw	r21,20(sp)
   162d4:	dd000417 	ldw	r20,16(sp)
   162d8:	dcc00317 	ldw	r19,12(sp)
   162dc:	dc800217 	ldw	r18,8(sp)
   162e0:	dc400117 	ldw	r17,4(sp)
   162e4:	dc000017 	ldw	r16,0(sp)
   162e8:	dec00704 	addi	sp,sp,28
   162ec:	f800283a 	ret
   162f0:	a4000284 	addi	r16,r20,10
   162f4:	1827883a 	mov	r19,r3
   162f8:	003fe906 	br	162a0 <__s2b+0xa8>

000162fc <__hi0bits>:
   162fc:	20bfffec 	andhi	r2,r4,65535
   16300:	1000141e 	bne	r2,zero,16354 <__hi0bits+0x58>
   16304:	2008943a 	slli	r4,r4,16
   16308:	00800404 	movi	r2,16
   1630c:	20ffc02c 	andhi	r3,r4,65280
   16310:	1800021e 	bne	r3,zero,1631c <__hi0bits+0x20>
   16314:	2008923a 	slli	r4,r4,8
   16318:	10800204 	addi	r2,r2,8
   1631c:	20fc002c 	andhi	r3,r4,61440
   16320:	1800021e 	bne	r3,zero,1632c <__hi0bits+0x30>
   16324:	2008913a 	slli	r4,r4,4
   16328:	10800104 	addi	r2,r2,4
   1632c:	20f0002c 	andhi	r3,r4,49152
   16330:	1800031e 	bne	r3,zero,16340 <__hi0bits+0x44>
   16334:	2109883a 	add	r4,r4,r4
   16338:	10800084 	addi	r2,r2,2
   1633c:	2109883a 	add	r4,r4,r4
   16340:	20000316 	blt	r4,zero,16350 <__hi0bits+0x54>
   16344:	2110002c 	andhi	r4,r4,16384
   16348:	2000041e 	bne	r4,zero,1635c <__hi0bits+0x60>
   1634c:	00800804 	movi	r2,32
   16350:	f800283a 	ret
   16354:	0005883a 	mov	r2,zero
   16358:	003fec06 	br	1630c <__hi0bits+0x10>
   1635c:	10800044 	addi	r2,r2,1
   16360:	f800283a 	ret

00016364 <__lo0bits>:
   16364:	20c00017 	ldw	r3,0(r4)
   16368:	188001cc 	andi	r2,r3,7
   1636c:	10000826 	beq	r2,zero,16390 <__lo0bits+0x2c>
   16370:	1880004c 	andi	r2,r3,1
   16374:	1000211e 	bne	r2,zero,163fc <__lo0bits+0x98>
   16378:	1880008c 	andi	r2,r3,2
   1637c:	1000211e 	bne	r2,zero,16404 <__lo0bits+0xa0>
   16380:	1806d0ba 	srli	r3,r3,2
   16384:	00800084 	movi	r2,2
   16388:	20c00015 	stw	r3,0(r4)
   1638c:	f800283a 	ret
   16390:	18bfffcc 	andi	r2,r3,65535
   16394:	10001326 	beq	r2,zero,163e4 <__lo0bits+0x80>
   16398:	0005883a 	mov	r2,zero
   1639c:	19403fcc 	andi	r5,r3,255
   163a0:	2800021e 	bne	r5,zero,163ac <__lo0bits+0x48>
   163a4:	1806d23a 	srli	r3,r3,8
   163a8:	10800204 	addi	r2,r2,8
   163ac:	194003cc 	andi	r5,r3,15
   163b0:	2800021e 	bne	r5,zero,163bc <__lo0bits+0x58>
   163b4:	1806d13a 	srli	r3,r3,4
   163b8:	10800104 	addi	r2,r2,4
   163bc:	194000cc 	andi	r5,r3,3
   163c0:	2800021e 	bne	r5,zero,163cc <__lo0bits+0x68>
   163c4:	1806d0ba 	srli	r3,r3,2
   163c8:	10800084 	addi	r2,r2,2
   163cc:	1940004c 	andi	r5,r3,1
   163d0:	2800081e 	bne	r5,zero,163f4 <__lo0bits+0x90>
   163d4:	1806d07a 	srli	r3,r3,1
   163d8:	1800051e 	bne	r3,zero,163f0 <__lo0bits+0x8c>
   163dc:	00800804 	movi	r2,32
   163e0:	f800283a 	ret
   163e4:	1806d43a 	srli	r3,r3,16
   163e8:	00800404 	movi	r2,16
   163ec:	003feb06 	br	1639c <__lo0bits+0x38>
   163f0:	10800044 	addi	r2,r2,1
   163f4:	20c00015 	stw	r3,0(r4)
   163f8:	f800283a 	ret
   163fc:	0005883a 	mov	r2,zero
   16400:	f800283a 	ret
   16404:	1806d07a 	srli	r3,r3,1
   16408:	00800044 	movi	r2,1
   1640c:	20c00015 	stw	r3,0(r4)
   16410:	f800283a 	ret

00016414 <__i2b>:
   16414:	defffd04 	addi	sp,sp,-12
   16418:	dc000015 	stw	r16,0(sp)
   1641c:	04000044 	movi	r16,1
   16420:	dc400115 	stw	r17,4(sp)
   16424:	2823883a 	mov	r17,r5
   16428:	800b883a 	mov	r5,r16
   1642c:	dfc00215 	stw	ra,8(sp)
   16430:	0015fe40 	call	15fe4 <_Balloc>
   16434:	14400515 	stw	r17,20(r2)
   16438:	14000415 	stw	r16,16(r2)
   1643c:	dfc00217 	ldw	ra,8(sp)
   16440:	dc400117 	ldw	r17,4(sp)
   16444:	dc000017 	ldw	r16,0(sp)
   16448:	dec00304 	addi	sp,sp,12
   1644c:	f800283a 	ret

00016450 <__multiply>:
   16450:	defff004 	addi	sp,sp,-64
   16454:	dc800815 	stw	r18,32(sp)
   16458:	dc400715 	stw	r17,28(sp)
   1645c:	34800417 	ldw	r18,16(r6)
   16460:	2c400417 	ldw	r17,16(r5)
   16464:	ddc00d15 	stw	r23,52(sp)
   16468:	dc000615 	stw	r16,24(sp)
   1646c:	dfc00f15 	stw	ra,60(sp)
   16470:	df000e15 	stw	fp,56(sp)
   16474:	dd800c15 	stw	r22,48(sp)
   16478:	dd400b15 	stw	r21,44(sp)
   1647c:	dd000a15 	stw	r20,40(sp)
   16480:	dcc00915 	stw	r19,36(sp)
   16484:	2821883a 	mov	r16,r5
   16488:	302f883a 	mov	r23,r6
   1648c:	8c80050e 	bge	r17,r18,164a4 <__multiply+0x54>
   16490:	8807883a 	mov	r3,r17
   16494:	3021883a 	mov	r16,r6
   16498:	9023883a 	mov	r17,r18
   1649c:	282f883a 	mov	r23,r5
   164a0:	1825883a 	mov	r18,r3
   164a4:	80800217 	ldw	r2,8(r16)
   164a8:	8c87883a 	add	r3,r17,r18
   164ac:	d8c00115 	stw	r3,4(sp)
   164b0:	81400117 	ldw	r5,4(r16)
   164b4:	10c0010e 	bge	r2,r3,164bc <__multiply+0x6c>
   164b8:	29400044 	addi	r5,r5,1
   164bc:	0015fe40 	call	15fe4 <_Balloc>
   164c0:	d8c00117 	ldw	r3,4(sp)
   164c4:	d8800515 	stw	r2,20(sp)
   164c8:	14c00504 	addi	r19,r2,20
   164cc:	1d400144 	addi	r21,r3,5
   164d0:	ad6b883a 	add	r21,r21,r21
   164d4:	ad6b883a 	add	r21,r21,r21
   164d8:	156b883a 	add	r21,r2,r21
   164dc:	dd400215 	stw	r21,8(sp)
   164e0:	9805883a 	mov	r2,r19
   164e4:	9d40042e 	bgeu	r19,r21,164f8 <__multiply+0xa8>
   164e8:	d8c00217 	ldw	r3,8(sp)
   164ec:	10000015 	stw	zero,0(r2)
   164f0:	10800104 	addi	r2,r2,4
   164f4:	10fffc36 	bltu	r2,r3,164e8 <__multiply+0x98>
   164f8:	94800144 	addi	r18,r18,5
   164fc:	94a5883a 	add	r18,r18,r18
   16500:	94ad883a 	add	r22,r18,r18
   16504:	8c400144 	addi	r17,r17,5
   16508:	8c63883a 	add	r17,r17,r17
   1650c:	bdad883a 	add	r22,r23,r22
   16510:	80c00504 	addi	r3,r16,20
   16514:	8c63883a 	add	r17,r17,r17
   16518:	bc800504 	addi	r18,r23,20
   1651c:	dd800315 	stw	r22,12(sp)
   16520:	d8c00415 	stw	r3,16(sp)
   16524:	dcc00015 	stw	r19,0(sp)
   16528:	8463883a 	add	r17,r16,r17
   1652c:	9580412e 	bgeu	r18,r22,16634 <__multiply+0x1e4>
   16530:	90800017 	ldw	r2,0(r18)
   16534:	173fffcc 	andi	fp,r2,65535
   16538:	e0001a26 	beq	fp,zero,165a4 <__multiply+0x154>
   1653c:	dd000017 	ldw	r20,0(sp)
   16540:	dd800417 	ldw	r22,16(sp)
   16544:	002b883a 	mov	r21,zero
   16548:	b4c00017 	ldw	r19,0(r22)
   1654c:	a4000017 	ldw	r16,0(r20)
   16550:	e00b883a 	mov	r5,fp
   16554:	993fffcc 	andi	r4,r19,65535
   16558:	00107940 	call	10794 <__mulsi3>
   1655c:	9808d43a 	srli	r4,r19,16
   16560:	817fffcc 	andi	r5,r16,65535
   16564:	1145883a 	add	r2,r2,r5
   16568:	e00b883a 	mov	r5,fp
   1656c:	1567883a 	add	r19,r2,r21
   16570:	8020d43a 	srli	r16,r16,16
   16574:	00107940 	call	10794 <__mulsi3>
   16578:	9808d43a 	srli	r4,r19,16
   1657c:	1405883a 	add	r2,r2,r16
   16580:	a4c0000d 	sth	r19,0(r20)
   16584:	110f883a 	add	r7,r2,r4
   16588:	a1c0008d 	sth	r7,2(r20)
   1658c:	b5800104 	addi	r22,r22,4
   16590:	382ad43a 	srli	r21,r7,16
   16594:	a5000104 	addi	r20,r20,4
   16598:	b47feb36 	bltu	r22,r17,16548 <__multiply+0xf8>
   1659c:	a5400015 	stw	r21,0(r20)
   165a0:	90800017 	ldw	r2,0(r18)
   165a4:	1038d43a 	srli	fp,r2,16
   165a8:	e0001c26 	beq	fp,zero,1661c <__multiply+0x1cc>
   165ac:	d8c00017 	ldw	r3,0(sp)
   165b0:	dd000417 	ldw	r20,16(sp)
   165b4:	002b883a 	mov	r21,zero
   165b8:	1d800017 	ldw	r22,0(r3)
   165bc:	182f883a 	mov	r23,r3
   165c0:	b021883a 	mov	r16,r22
   165c4:	a4c00017 	ldw	r19,0(r20)
   165c8:	8020d43a 	srli	r16,r16,16
   165cc:	e00b883a 	mov	r5,fp
   165d0:	993fffcc 	andi	r4,r19,65535
   165d4:	00107940 	call	10794 <__mulsi3>
   165d8:	1405883a 	add	r2,r2,r16
   165dc:	9808d43a 	srli	r4,r19,16
   165e0:	156b883a 	add	r21,r2,r21
   165e4:	bdc00104 	addi	r23,r23,4
   165e8:	bdbfff0d 	sth	r22,-4(r23)
   165ec:	bd7fff8d 	sth	r21,-2(r23)
   165f0:	bc000017 	ldw	r16,0(r23)
   165f4:	e00b883a 	mov	r5,fp
   165f8:	00107940 	call	10794 <__mulsi3>
   165fc:	a80ed43a 	srli	r7,r21,16
   16600:	813fffcc 	andi	r4,r16,65535
   16604:	2085883a 	add	r2,r4,r2
   16608:	11ed883a 	add	r22,r2,r7
   1660c:	a5000104 	addi	r20,r20,4
   16610:	b02ad43a 	srli	r21,r22,16
   16614:	a47feb36 	bltu	r20,r17,165c4 <__multiply+0x174>
   16618:	bd800015 	stw	r22,0(r23)
   1661c:	d8c00017 	ldw	r3,0(sp)
   16620:	94800104 	addi	r18,r18,4
   16624:	18c00104 	addi	r3,r3,4
   16628:	d8c00015 	stw	r3,0(sp)
   1662c:	d8c00317 	ldw	r3,12(sp)
   16630:	90ffbf36 	bltu	r18,r3,16530 <__multiply+0xe0>
   16634:	d8c00117 	ldw	r3,4(sp)
   16638:	00c00c0e 	bge	zero,r3,1666c <__multiply+0x21c>
   1663c:	d8c00217 	ldw	r3,8(sp)
   16640:	18bfff17 	ldw	r2,-4(r3)
   16644:	1d7fff04 	addi	r21,r3,-4
   16648:	10000326 	beq	r2,zero,16658 <__multiply+0x208>
   1664c:	00000706 	br	1666c <__multiply+0x21c>
   16650:	a8800017 	ldw	r2,0(r21)
   16654:	1000051e 	bne	r2,zero,1666c <__multiply+0x21c>
   16658:	d8c00117 	ldw	r3,4(sp)
   1665c:	ad7fff04 	addi	r21,r21,-4
   16660:	18ffffc4 	addi	r3,r3,-1
   16664:	d8c00115 	stw	r3,4(sp)
   16668:	183ff91e 	bne	r3,zero,16650 <__multiply+0x200>
   1666c:	d8800517 	ldw	r2,20(sp)
   16670:	d8c00117 	ldw	r3,4(sp)
   16674:	10c00415 	stw	r3,16(r2)
   16678:	dfc00f17 	ldw	ra,60(sp)
   1667c:	df000e17 	ldw	fp,56(sp)
   16680:	ddc00d17 	ldw	r23,52(sp)
   16684:	dd800c17 	ldw	r22,48(sp)
   16688:	dd400b17 	ldw	r21,44(sp)
   1668c:	dd000a17 	ldw	r20,40(sp)
   16690:	dcc00917 	ldw	r19,36(sp)
   16694:	dc800817 	ldw	r18,32(sp)
   16698:	dc400717 	ldw	r17,28(sp)
   1669c:	dc000617 	ldw	r16,24(sp)
   166a0:	dec01004 	addi	sp,sp,64
   166a4:	f800283a 	ret

000166a8 <__pow5mult>:
   166a8:	defffb04 	addi	sp,sp,-20
   166ac:	dcc00315 	stw	r19,12(sp)
   166b0:	dc800215 	stw	r18,8(sp)
   166b4:	dc000015 	stw	r16,0(sp)
   166b8:	dfc00415 	stw	ra,16(sp)
   166bc:	dc400115 	stw	r17,4(sp)
   166c0:	308000cc 	andi	r2,r6,3
   166c4:	3021883a 	mov	r16,r6
   166c8:	2027883a 	mov	r19,r4
   166cc:	2825883a 	mov	r18,r5
   166d0:	10002e1e 	bne	r2,zero,1678c <__pow5mult+0xe4>
   166d4:	8021d0ba 	srai	r16,r16,2
   166d8:	80001a26 	beq	r16,zero,16744 <__pow5mult+0x9c>
   166dc:	9c401217 	ldw	r17,72(r19)
   166e0:	8800061e 	bne	r17,zero,166fc <__pow5mult+0x54>
   166e4:	00003406 	br	167b8 <__pow5mult+0x110>
   166e8:	8021d07a 	srai	r16,r16,1
   166ec:	80001526 	beq	r16,zero,16744 <__pow5mult+0x9c>
   166f0:	88c00017 	ldw	r3,0(r17)
   166f4:	18001b26 	beq	r3,zero,16764 <__pow5mult+0xbc>
   166f8:	1823883a 	mov	r17,r3
   166fc:	80c0004c 	andi	r3,r16,1
   16700:	183ff926 	beq	r3,zero,166e8 <__pow5mult+0x40>
   16704:	900b883a 	mov	r5,r18
   16708:	880d883a 	mov	r6,r17
   1670c:	9809883a 	mov	r4,r19
   16710:	00164500 	call	16450 <__multiply>
   16714:	90001b26 	beq	r18,zero,16784 <__pow5mult+0xdc>
   16718:	91000117 	ldw	r4,4(r18)
   1671c:	98c01317 	ldw	r3,76(r19)
   16720:	8021d07a 	srai	r16,r16,1
   16724:	2109883a 	add	r4,r4,r4
   16728:	2109883a 	add	r4,r4,r4
   1672c:	1907883a 	add	r3,r3,r4
   16730:	19000017 	ldw	r4,0(r3)
   16734:	91000015 	stw	r4,0(r18)
   16738:	1c800015 	stw	r18,0(r3)
   1673c:	1025883a 	mov	r18,r2
   16740:	803feb1e 	bne	r16,zero,166f0 <__pow5mult+0x48>
   16744:	9005883a 	mov	r2,r18
   16748:	dfc00417 	ldw	ra,16(sp)
   1674c:	dcc00317 	ldw	r19,12(sp)
   16750:	dc800217 	ldw	r18,8(sp)
   16754:	dc400117 	ldw	r17,4(sp)
   16758:	dc000017 	ldw	r16,0(sp)
   1675c:	dec00504 	addi	sp,sp,20
   16760:	f800283a 	ret
   16764:	880b883a 	mov	r5,r17
   16768:	880d883a 	mov	r6,r17
   1676c:	9809883a 	mov	r4,r19
   16770:	00164500 	call	16450 <__multiply>
   16774:	88800015 	stw	r2,0(r17)
   16778:	10000015 	stw	zero,0(r2)
   1677c:	1023883a 	mov	r17,r2
   16780:	003fde06 	br	166fc <__pow5mult+0x54>
   16784:	1025883a 	mov	r18,r2
   16788:	003fd706 	br	166e8 <__pow5mult+0x40>
   1678c:	10bfffc4 	addi	r2,r2,-1
   16790:	1085883a 	add	r2,r2,r2
   16794:	00c000f4 	movhi	r3,3
   16798:	18e09104 	addi	r3,r3,-32188
   1679c:	1085883a 	add	r2,r2,r2
   167a0:	1885883a 	add	r2,r3,r2
   167a4:	11800017 	ldw	r6,0(r2)
   167a8:	000f883a 	mov	r7,zero
   167ac:	00160b40 	call	160b4 <__multadd>
   167b0:	1025883a 	mov	r18,r2
   167b4:	003fc706 	br	166d4 <__pow5mult+0x2c>
   167b8:	9809883a 	mov	r4,r19
   167bc:	01409c44 	movi	r5,625
   167c0:	00164140 	call	16414 <__i2b>
   167c4:	98801215 	stw	r2,72(r19)
   167c8:	1023883a 	mov	r17,r2
   167cc:	10000015 	stw	zero,0(r2)
   167d0:	003fca06 	br	166fc <__pow5mult+0x54>

000167d4 <__lshift>:
   167d4:	defff904 	addi	sp,sp,-28
   167d8:	dd400515 	stw	r21,20(sp)
   167dc:	dc400115 	stw	r17,4(sp)
   167e0:	2d400417 	ldw	r21,16(r5)
   167e4:	3023d17a 	srai	r17,r6,5
   167e8:	28800217 	ldw	r2,8(r5)
   167ec:	dd000415 	stw	r20,16(sp)
   167f0:	8d6b883a 	add	r21,r17,r21
   167f4:	dcc00315 	stw	r19,12(sp)
   167f8:	dc800215 	stw	r18,8(sp)
   167fc:	dc000015 	stw	r16,0(sp)
   16800:	dfc00615 	stw	ra,24(sp)
   16804:	ac000044 	addi	r16,r21,1
   16808:	2825883a 	mov	r18,r5
   1680c:	3029883a 	mov	r20,r6
   16810:	2027883a 	mov	r19,r4
   16814:	29400117 	ldw	r5,4(r5)
   16818:	1400030e 	bge	r2,r16,16828 <__lshift+0x54>
   1681c:	1085883a 	add	r2,r2,r2
   16820:	29400044 	addi	r5,r5,1
   16824:	143ffd16 	blt	r2,r16,1681c <__lshift+0x48>
   16828:	9809883a 	mov	r4,r19
   1682c:	0015fe40 	call	15fe4 <_Balloc>
   16830:	10c00504 	addi	r3,r2,20
   16834:	0440090e 	bge	zero,r17,1685c <__lshift+0x88>
   16838:	000f883a 	mov	r7,zero
   1683c:	18000015 	stw	zero,0(r3)
   16840:	39c00044 	addi	r7,r7,1
   16844:	18c00104 	addi	r3,r3,4
   16848:	3c7ffc1e 	bne	r7,r17,1683c <__lshift+0x68>
   1684c:	38c00144 	addi	r3,r7,5
   16850:	18c7883a 	add	r3,r3,r3
   16854:	18c7883a 	add	r3,r3,r3
   16858:	10c7883a 	add	r3,r2,r3
   1685c:	92000417 	ldw	r8,16(r18)
   16860:	a18007cc 	andi	r6,r20,31
   16864:	91c00504 	addi	r7,r18,20
   16868:	42000144 	addi	r8,r8,5
   1686c:	4211883a 	add	r8,r8,r8
   16870:	4211883a 	add	r8,r8,r8
   16874:	9211883a 	add	r8,r18,r8
   16878:	30002226 	beq	r6,zero,16904 <__lshift+0x130>
   1687c:	02800804 	movi	r10,32
   16880:	5195c83a 	sub	r10,r10,r6
   16884:	000b883a 	mov	r5,zero
   16888:	3a400017 	ldw	r9,0(r7)
   1688c:	18c00104 	addi	r3,r3,4
   16890:	39c00104 	addi	r7,r7,4
   16894:	4992983a 	sll	r9,r9,r6
   16898:	2a4ab03a 	or	r5,r5,r9
   1689c:	197fff15 	stw	r5,-4(r3)
   168a0:	397fff17 	ldw	r5,-4(r7)
   168a4:	2a8ad83a 	srl	r5,r5,r10
   168a8:	3a3ff736 	bltu	r7,r8,16888 <__lshift+0xb4>
   168ac:	19400015 	stw	r5,0(r3)
   168b0:	28000126 	beq	r5,zero,168b8 <__lshift+0xe4>
   168b4:	ac000084 	addi	r16,r21,2
   168b8:	91000117 	ldw	r4,4(r18)
   168bc:	98c01317 	ldw	r3,76(r19)
   168c0:	843fffc4 	addi	r16,r16,-1
   168c4:	2109883a 	add	r4,r4,r4
   168c8:	2109883a 	add	r4,r4,r4
   168cc:	1907883a 	add	r3,r3,r4
   168d0:	19000017 	ldw	r4,0(r3)
   168d4:	14000415 	stw	r16,16(r2)
   168d8:	91000015 	stw	r4,0(r18)
   168dc:	1c800015 	stw	r18,0(r3)
   168e0:	dfc00617 	ldw	ra,24(sp)
   168e4:	dd400517 	ldw	r21,20(sp)
   168e8:	dd000417 	ldw	r20,16(sp)
   168ec:	dcc00317 	ldw	r19,12(sp)
   168f0:	dc800217 	ldw	r18,8(sp)
   168f4:	dc400117 	ldw	r17,4(sp)
   168f8:	dc000017 	ldw	r16,0(sp)
   168fc:	dec00704 	addi	sp,sp,28
   16900:	f800283a 	ret
   16904:	39400017 	ldw	r5,0(r7)
   16908:	18c00104 	addi	r3,r3,4
   1690c:	39c00104 	addi	r7,r7,4
   16910:	197fff15 	stw	r5,-4(r3)
   16914:	3a3fe82e 	bgeu	r7,r8,168b8 <__lshift+0xe4>
   16918:	39400017 	ldw	r5,0(r7)
   1691c:	18c00104 	addi	r3,r3,4
   16920:	39c00104 	addi	r7,r7,4
   16924:	197fff15 	stw	r5,-4(r3)
   16928:	3a3ff636 	bltu	r7,r8,16904 <__lshift+0x130>
   1692c:	003fe206 	br	168b8 <__lshift+0xe4>

00016930 <__mcmp>:
   16930:	20800417 	ldw	r2,16(r4)
   16934:	28c00417 	ldw	r3,16(r5)
   16938:	10c5c83a 	sub	r2,r2,r3
   1693c:	10000f1e 	bne	r2,zero,1697c <__mcmp+0x4c>
   16940:	18c00144 	addi	r3,r3,5
   16944:	18c7883a 	add	r3,r3,r3
   16948:	18c7883a 	add	r3,r3,r3
   1694c:	21c00504 	addi	r7,r4,20
   16950:	28cb883a 	add	r5,r5,r3
   16954:	20c9883a 	add	r4,r4,r3
   16958:	213fff04 	addi	r4,r4,-4
   1695c:	297fff04 	addi	r5,r5,-4
   16960:	21800017 	ldw	r6,0(r4)
   16964:	28c00017 	ldw	r3,0(r5)
   16968:	30c0021e 	bne	r6,r3,16974 <__mcmp+0x44>
   1696c:	393ffa36 	bltu	r7,r4,16958 <__mcmp+0x28>
   16970:	f800283a 	ret
   16974:	30c00236 	bltu	r6,r3,16980 <__mcmp+0x50>
   16978:	00800044 	movi	r2,1
   1697c:	f800283a 	ret
   16980:	00bfffc4 	movi	r2,-1
   16984:	f800283a 	ret

00016988 <__mdiff>:
   16988:	defffb04 	addi	sp,sp,-20
   1698c:	dc000015 	stw	r16,0(sp)
   16990:	2821883a 	mov	r16,r5
   16994:	dc800215 	stw	r18,8(sp)
   16998:	300b883a 	mov	r5,r6
   1699c:	2025883a 	mov	r18,r4
   169a0:	8009883a 	mov	r4,r16
   169a4:	dc400115 	stw	r17,4(sp)
   169a8:	dfc00415 	stw	ra,16(sp)
   169ac:	dcc00315 	stw	r19,12(sp)
   169b0:	3023883a 	mov	r17,r6
   169b4:	00169300 	call	16930 <__mcmp>
   169b8:	10005026 	beq	r2,zero,16afc <__mdiff+0x174>
   169bc:	10004a16 	blt	r2,zero,16ae8 <__mdiff+0x160>
   169c0:	0027883a 	mov	r19,zero
   169c4:	81400117 	ldw	r5,4(r16)
   169c8:	9009883a 	mov	r4,r18
   169cc:	0015fe40 	call	15fe4 <_Balloc>
   169d0:	82400417 	ldw	r9,16(r16)
   169d4:	89800417 	ldw	r6,16(r17)
   169d8:	14c00315 	stw	r19,12(r2)
   169dc:	4b800144 	addi	r14,r9,5
   169e0:	31800144 	addi	r6,r6,5
   169e4:	739d883a 	add	r14,r14,r14
   169e8:	318d883a 	add	r6,r6,r6
   169ec:	739d883a 	add	r14,r14,r14
   169f0:	318d883a 	add	r6,r6,r6
   169f4:	81c00504 	addi	r7,r16,20
   169f8:	839d883a 	add	r14,r16,r14
   169fc:	8a000504 	addi	r8,r17,20
   16a00:	898d883a 	add	r6,r17,r6
   16a04:	10c00504 	addi	r3,r2,20
   16a08:	0009883a 	mov	r4,zero
   16a0c:	3b000017 	ldw	r12,0(r7)
   16a10:	42c00017 	ldw	r11,0(r8)
   16a14:	42000104 	addi	r8,r8,4
   16a18:	62bfffcc 	andi	r10,r12,65535
   16a1c:	5b7fffcc 	andi	r13,r11,65535
   16a20:	5109883a 	add	r4,r10,r4
   16a24:	2355c83a 	sub	r10,r4,r13
   16a28:	5816d43a 	srli	r11,r11,16
   16a2c:	6008d43a 	srli	r4,r12,16
   16a30:	501bd43a 	srai	r13,r10,16
   16a34:	1a80000d 	sth	r10,0(r3)
   16a38:	22c9c83a 	sub	r4,r4,r11
   16a3c:	2349883a 	add	r4,r4,r13
   16a40:	1900008d 	sth	r4,2(r3)
   16a44:	39c00104 	addi	r7,r7,4
   16a48:	2009d43a 	srai	r4,r4,16
   16a4c:	18c00104 	addi	r3,r3,4
   16a50:	41bfee36 	bltu	r8,r6,16a0c <__mdiff+0x84>
   16a54:	180b883a 	mov	r5,r3
   16a58:	3815883a 	mov	r10,r7
   16a5c:	3b80132e 	bgeu	r7,r14,16aac <__mdiff+0x124>
   16a60:	3a000017 	ldw	r8,0(r7)
   16a64:	18c00104 	addi	r3,r3,4
   16a68:	39c00104 	addi	r7,r7,4
   16a6c:	41bfffcc 	andi	r6,r8,65535
   16a70:	310d883a 	add	r6,r6,r4
   16a74:	3009d43a 	srai	r4,r6,16
   16a78:	4010d43a 	srli	r8,r8,16
   16a7c:	19bfff0d 	sth	r6,-4(r3)
   16a80:	2209883a 	add	r4,r4,r8
   16a84:	193fff8d 	sth	r4,-2(r3)
   16a88:	2009d43a 	srai	r4,r4,16
   16a8c:	3bbff436 	bltu	r7,r14,16a60 <__mdiff+0xd8>
   16a90:	0286303a 	nor	r3,zero,r10
   16a94:	1b87883a 	add	r3,r3,r14
   16a98:	1806d0ba 	srli	r3,r3,2
   16a9c:	18c00044 	addi	r3,r3,1
   16aa0:	18c7883a 	add	r3,r3,r3
   16aa4:	18c7883a 	add	r3,r3,r3
   16aa8:	28c7883a 	add	r3,r5,r3
   16aac:	193fff17 	ldw	r4,-4(r3)
   16ab0:	18ffff04 	addi	r3,r3,-4
   16ab4:	2000041e 	bne	r4,zero,16ac8 <__mdiff+0x140>
   16ab8:	18ffff04 	addi	r3,r3,-4
   16abc:	19000017 	ldw	r4,0(r3)
   16ac0:	4a7fffc4 	addi	r9,r9,-1
   16ac4:	203ffc26 	beq	r4,zero,16ab8 <__mdiff+0x130>
   16ac8:	12400415 	stw	r9,16(r2)
   16acc:	dfc00417 	ldw	ra,16(sp)
   16ad0:	dcc00317 	ldw	r19,12(sp)
   16ad4:	dc800217 	ldw	r18,8(sp)
   16ad8:	dc400117 	ldw	r17,4(sp)
   16adc:	dc000017 	ldw	r16,0(sp)
   16ae0:	dec00504 	addi	sp,sp,20
   16ae4:	f800283a 	ret
   16ae8:	8005883a 	mov	r2,r16
   16aec:	04c00044 	movi	r19,1
   16af0:	8821883a 	mov	r16,r17
   16af4:	1023883a 	mov	r17,r2
   16af8:	003fb206 	br	169c4 <__mdiff+0x3c>
   16afc:	9009883a 	mov	r4,r18
   16b00:	000b883a 	mov	r5,zero
   16b04:	0015fe40 	call	15fe4 <_Balloc>
   16b08:	00c00044 	movi	r3,1
   16b0c:	10c00415 	stw	r3,16(r2)
   16b10:	10000515 	stw	zero,20(r2)
   16b14:	dfc00417 	ldw	ra,16(sp)
   16b18:	dcc00317 	ldw	r19,12(sp)
   16b1c:	dc800217 	ldw	r18,8(sp)
   16b20:	dc400117 	ldw	r17,4(sp)
   16b24:	dc000017 	ldw	r16,0(sp)
   16b28:	dec00504 	addi	sp,sp,20
   16b2c:	f800283a 	ret

00016b30 <__ulp>:
   16b30:	295ffc2c 	andhi	r5,r5,32752
   16b34:	00bf3034 	movhi	r2,64704
   16b38:	2887883a 	add	r3,r5,r2
   16b3c:	00c0020e 	bge	zero,r3,16b48 <__ulp+0x18>
   16b40:	0005883a 	mov	r2,zero
   16b44:	f800283a 	ret
   16b48:	00c7c83a 	sub	r3,zero,r3
   16b4c:	1805d53a 	srai	r2,r3,20
   16b50:	00c004c4 	movi	r3,19
   16b54:	18800a0e 	bge	r3,r2,16b80 <__ulp+0x50>
   16b58:	01000c84 	movi	r4,50
   16b5c:	0007883a 	mov	r3,zero
   16b60:	20800516 	blt	r4,r2,16b78 <__ulp+0x48>
   16b64:	01000cc4 	movi	r4,51
   16b68:	2085c83a 	sub	r2,r4,r2
   16b6c:	01000044 	movi	r4,1
   16b70:	2084983a 	sll	r2,r4,r2
   16b74:	f800283a 	ret
   16b78:	00800044 	movi	r2,1
   16b7c:	f800283a 	ret
   16b80:	00c00234 	movhi	r3,8
   16b84:	1887d83a 	sra	r3,r3,r2
   16b88:	0005883a 	mov	r2,zero
   16b8c:	f800283a 	ret

00016b90 <__b2d>:
   16b90:	defffa04 	addi	sp,sp,-24
   16b94:	dc000015 	stw	r16,0(sp)
   16b98:	24000417 	ldw	r16,16(r4)
   16b9c:	dc400115 	stw	r17,4(sp)
   16ba0:	dcc00315 	stw	r19,12(sp)
   16ba4:	84000144 	addi	r16,r16,5
   16ba8:	8421883a 	add	r16,r16,r16
   16bac:	8421883a 	add	r16,r16,r16
   16bb0:	2421883a 	add	r16,r4,r16
   16bb4:	847fff17 	ldw	r17,-4(r16)
   16bb8:	24c00504 	addi	r19,r4,20
   16bbc:	dd000415 	stw	r20,16(sp)
   16bc0:	8809883a 	mov	r4,r17
   16bc4:	dc800215 	stw	r18,8(sp)
   16bc8:	2829883a 	mov	r20,r5
   16bcc:	dfc00515 	stw	ra,20(sp)
   16bd0:	00162fc0 	call	162fc <__hi0bits>
   16bd4:	00c00804 	movi	r3,32
   16bd8:	1887c83a 	sub	r3,r3,r2
   16bdc:	a0c00015 	stw	r3,0(r20)
   16be0:	00c00284 	movi	r3,10
   16be4:	84bfff04 	addi	r18,r16,-4
   16be8:	18801216 	blt	r3,r2,16c34 <__b2d+0xa4>
   16bec:	010002c4 	movi	r4,11
   16bf0:	2089c83a 	sub	r4,r4,r2
   16bf4:	8906d83a 	srl	r3,r17,r4
   16bf8:	18cffc34 	orhi	r3,r3,16368
   16bfc:	9c80322e 	bgeu	r19,r18,16cc8 <__b2d+0x138>
   16c00:	817ffe17 	ldw	r5,-8(r16)
   16c04:	2908d83a 	srl	r4,r5,r4
   16c08:	10800544 	addi	r2,r2,21
   16c0c:	88a2983a 	sll	r17,r17,r2
   16c10:	2444b03a 	or	r2,r4,r17
   16c14:	dfc00517 	ldw	ra,20(sp)
   16c18:	dd000417 	ldw	r20,16(sp)
   16c1c:	dcc00317 	ldw	r19,12(sp)
   16c20:	dc800217 	ldw	r18,8(sp)
   16c24:	dc400117 	ldw	r17,4(sp)
   16c28:	dc000017 	ldw	r16,0(sp)
   16c2c:	dec00604 	addi	sp,sp,24
   16c30:	f800283a 	ret
   16c34:	9c801636 	bltu	r19,r18,16c90 <__b2d+0x100>
   16c38:	113ffd44 	addi	r4,r2,-11
   16c3c:	000b883a 	mov	r5,zero
   16c40:	20001726 	beq	r4,zero,16ca0 <__b2d+0x110>
   16c44:	00c00ac4 	movi	r3,43
   16c48:	1885c83a 	sub	r2,r3,r2
   16c4c:	8906983a 	sll	r3,r17,r4
   16c50:	288cd83a 	srl	r6,r5,r2
   16c54:	18cffc34 	orhi	r3,r3,16368
   16c58:	1986b03a 	or	r3,r3,r6
   16c5c:	9c801c2e 	bgeu	r19,r18,16cd0 <__b2d+0x140>
   16c60:	91bfff17 	ldw	r6,-4(r18)
   16c64:	3084d83a 	srl	r2,r6,r2
   16c68:	2908983a 	sll	r4,r5,r4
   16c6c:	1104b03a 	or	r2,r2,r4
   16c70:	dfc00517 	ldw	ra,20(sp)
   16c74:	dd000417 	ldw	r20,16(sp)
   16c78:	dcc00317 	ldw	r19,12(sp)
   16c7c:	dc800217 	ldw	r18,8(sp)
   16c80:	dc400117 	ldw	r17,4(sp)
   16c84:	dc000017 	ldw	r16,0(sp)
   16c88:	dec00604 	addi	sp,sp,24
   16c8c:	f800283a 	ret
   16c90:	113ffd44 	addi	r4,r2,-11
   16c94:	84bffe04 	addi	r18,r16,-8
   16c98:	817ffe17 	ldw	r5,-8(r16)
   16c9c:	203fe91e 	bne	r4,zero,16c44 <__b2d+0xb4>
   16ca0:	88cffc34 	orhi	r3,r17,16368
   16ca4:	2805883a 	mov	r2,r5
   16ca8:	dfc00517 	ldw	ra,20(sp)
   16cac:	dd000417 	ldw	r20,16(sp)
   16cb0:	dcc00317 	ldw	r19,12(sp)
   16cb4:	dc800217 	ldw	r18,8(sp)
   16cb8:	dc400117 	ldw	r17,4(sp)
   16cbc:	dc000017 	ldw	r16,0(sp)
   16cc0:	dec00604 	addi	sp,sp,24
   16cc4:	f800283a 	ret
   16cc8:	0009883a 	mov	r4,zero
   16ccc:	003fce06 	br	16c08 <__b2d+0x78>
   16cd0:	0005883a 	mov	r2,zero
   16cd4:	003fe406 	br	16c68 <__b2d+0xd8>

00016cd8 <__d2b>:
   16cd8:	defff804 	addi	sp,sp,-32
   16cdc:	dc400315 	stw	r17,12(sp)
   16ce0:	3023883a 	mov	r17,r6
   16ce4:	dc800415 	stw	r18,16(sp)
   16ce8:	8824907a 	slli	r18,r17,1
   16cec:	dcc00515 	stw	r19,20(sp)
   16cf0:	2827883a 	mov	r19,r5
   16cf4:	9024d57a 	srli	r18,r18,21
   16cf8:	01400044 	movi	r5,1
   16cfc:	dd000615 	stw	r20,24(sp)
   16d00:	dc000215 	stw	r16,8(sp)
   16d04:	dfc00715 	stw	ra,28(sp)
   16d08:	3829883a 	mov	r20,r7
   16d0c:	0015fe40 	call	15fe4 <_Balloc>
   16d10:	1021883a 	mov	r16,r2
   16d14:	00800434 	movhi	r2,16
   16d18:	10bfffc4 	addi	r2,r2,-1
   16d1c:	88a2703a 	and	r17,r17,r2
   16d20:	90000126 	beq	r18,zero,16d28 <__d2b+0x50>
   16d24:	8c400434 	orhi	r17,r17,16
   16d28:	dc400015 	stw	r17,0(sp)
   16d2c:	98002226 	beq	r19,zero,16db8 <__d2b+0xe0>
   16d30:	d9000104 	addi	r4,sp,4
   16d34:	dcc00115 	stw	r19,4(sp)
   16d38:	00163640 	call	16364 <__lo0bits>
   16d3c:	d8c00017 	ldw	r3,0(sp)
   16d40:	10002d1e 	bne	r2,zero,16df8 <__d2b+0x120>
   16d44:	d9000117 	ldw	r4,4(sp)
   16d48:	81000515 	stw	r4,20(r16)
   16d4c:	1823003a 	cmpeq	r17,r3,zero
   16d50:	01000084 	movi	r4,2
   16d54:	2463c83a 	sub	r17,r4,r17
   16d58:	80c00615 	stw	r3,24(r16)
   16d5c:	84400415 	stw	r17,16(r16)
   16d60:	90001d1e 	bne	r18,zero,16dd8 <__d2b+0x100>
   16d64:	88c00104 	addi	r3,r17,4
   16d68:	18c7883a 	add	r3,r3,r3
   16d6c:	18c7883a 	add	r3,r3,r3
   16d70:	80c7883a 	add	r3,r16,r3
   16d74:	19000017 	ldw	r4,0(r3)
   16d78:	10bef384 	addi	r2,r2,-1074
   16d7c:	a0800015 	stw	r2,0(r20)
   16d80:	00162fc0 	call	162fc <__hi0bits>
   16d84:	8822917a 	slli	r17,r17,5
   16d88:	d8c00817 	ldw	r3,32(sp)
   16d8c:	8885c83a 	sub	r2,r17,r2
   16d90:	18800015 	stw	r2,0(r3)
   16d94:	8005883a 	mov	r2,r16
   16d98:	dfc00717 	ldw	ra,28(sp)
   16d9c:	dd000617 	ldw	r20,24(sp)
   16da0:	dcc00517 	ldw	r19,20(sp)
   16da4:	dc800417 	ldw	r18,16(sp)
   16da8:	dc400317 	ldw	r17,12(sp)
   16dac:	dc000217 	ldw	r16,8(sp)
   16db0:	dec00804 	addi	sp,sp,32
   16db4:	f800283a 	ret
   16db8:	d809883a 	mov	r4,sp
   16dbc:	00163640 	call	16364 <__lo0bits>
   16dc0:	d8c00017 	ldw	r3,0(sp)
   16dc4:	04400044 	movi	r17,1
   16dc8:	84400415 	stw	r17,16(r16)
   16dcc:	80c00515 	stw	r3,20(r16)
   16dd0:	10800804 	addi	r2,r2,32
   16dd4:	903fe326 	beq	r18,zero,16d64 <__d2b+0x8c>
   16dd8:	00c00d44 	movi	r3,53
   16ddc:	94bef344 	addi	r18,r18,-1075
   16de0:	90a5883a 	add	r18,r18,r2
   16de4:	1885c83a 	sub	r2,r3,r2
   16de8:	d8c00817 	ldw	r3,32(sp)
   16dec:	a4800015 	stw	r18,0(r20)
   16df0:	18800015 	stw	r2,0(r3)
   16df4:	003fe706 	br	16d94 <__d2b+0xbc>
   16df8:	01000804 	movi	r4,32
   16dfc:	2089c83a 	sub	r4,r4,r2
   16e00:	1908983a 	sll	r4,r3,r4
   16e04:	d9400117 	ldw	r5,4(sp)
   16e08:	1886d83a 	srl	r3,r3,r2
   16e0c:	2148b03a 	or	r4,r4,r5
   16e10:	81000515 	stw	r4,20(r16)
   16e14:	d8c00015 	stw	r3,0(sp)
   16e18:	003fcc06 	br	16d4c <__d2b+0x74>

00016e1c <__ratio>:
   16e1c:	defff904 	addi	sp,sp,-28
   16e20:	dc400315 	stw	r17,12(sp)
   16e24:	2823883a 	mov	r17,r5
   16e28:	d9400104 	addi	r5,sp,4
   16e2c:	dfc00615 	stw	ra,24(sp)
   16e30:	dcc00515 	stw	r19,20(sp)
   16e34:	dc800415 	stw	r18,16(sp)
   16e38:	2027883a 	mov	r19,r4
   16e3c:	dc000215 	stw	r16,8(sp)
   16e40:	0016b900 	call	16b90 <__b2d>
   16e44:	8809883a 	mov	r4,r17
   16e48:	d80b883a 	mov	r5,sp
   16e4c:	1025883a 	mov	r18,r2
   16e50:	1821883a 	mov	r16,r3
   16e54:	0016b900 	call	16b90 <__b2d>
   16e58:	99400417 	ldw	r5,16(r19)
   16e5c:	89000417 	ldw	r4,16(r17)
   16e60:	d9800117 	ldw	r6,4(sp)
   16e64:	2909c83a 	sub	r4,r5,r4
   16e68:	d9400017 	ldw	r5,0(sp)
   16e6c:	2008917a 	slli	r4,r4,5
   16e70:	314bc83a 	sub	r5,r6,r5
   16e74:	290b883a 	add	r5,r5,r4
   16e78:	01400e0e 	bge	zero,r5,16eb4 <__ratio+0x98>
   16e7c:	280a953a 	slli	r5,r5,20
   16e80:	2c21883a 	add	r16,r5,r16
   16e84:	9009883a 	mov	r4,r18
   16e88:	800b883a 	mov	r5,r16
   16e8c:	100d883a 	mov	r6,r2
   16e90:	180f883a 	mov	r7,r3
   16e94:	00190d00 	call	190d0 <__divdf3>
   16e98:	dfc00617 	ldw	ra,24(sp)
   16e9c:	dcc00517 	ldw	r19,20(sp)
   16ea0:	dc800417 	ldw	r18,16(sp)
   16ea4:	dc400317 	ldw	r17,12(sp)
   16ea8:	dc000217 	ldw	r16,8(sp)
   16eac:	dec00704 	addi	sp,sp,28
   16eb0:	f800283a 	ret
   16eb4:	280a953a 	slli	r5,r5,20
   16eb8:	1947c83a 	sub	r3,r3,r5
   16ebc:	003ff106 	br	16e84 <__ratio+0x68>

00016ec0 <_mprec_log10>:
   16ec0:	defffe04 	addi	sp,sp,-8
   16ec4:	dc000015 	stw	r16,0(sp)
   16ec8:	dfc00115 	stw	ra,4(sp)
   16ecc:	008005c4 	movi	r2,23
   16ed0:	2021883a 	mov	r16,r4
   16ed4:	11000d0e 	bge	r2,r4,16f0c <_mprec_log10+0x4c>
   16ed8:	0005883a 	mov	r2,zero
   16edc:	00cffc34 	movhi	r3,16368
   16ee0:	843fffc4 	addi	r16,r16,-1
   16ee4:	1009883a 	mov	r4,r2
   16ee8:	180b883a 	mov	r5,r3
   16eec:	000d883a 	mov	r6,zero
   16ef0:	01d00934 	movhi	r7,16420
   16ef4:	0018dec0 	call	18dec <__muldf3>
   16ef8:	803ff91e 	bne	r16,zero,16ee0 <_mprec_log10+0x20>
   16efc:	dfc00117 	ldw	ra,4(sp)
   16f00:	dc000017 	ldw	r16,0(sp)
   16f04:	dec00204 	addi	sp,sp,8
   16f08:	f800283a 	ret
   16f0c:	202090fa 	slli	r16,r4,3
   16f10:	008000f4 	movhi	r2,3
   16f14:	10a05f04 	addi	r2,r2,-32388
   16f18:	1421883a 	add	r16,r2,r16
   16f1c:	80800017 	ldw	r2,0(r16)
   16f20:	80c00117 	ldw	r3,4(r16)
   16f24:	dfc00117 	ldw	ra,4(sp)
   16f28:	dc000017 	ldw	r16,0(sp)
   16f2c:	dec00204 	addi	sp,sp,8
   16f30:	f800283a 	ret

00016f34 <__copybits>:
   16f34:	297fffc4 	addi	r5,r5,-1
   16f38:	31c00417 	ldw	r7,16(r6)
   16f3c:	2811d17a 	srai	r8,r5,5
   16f40:	30800504 	addi	r2,r6,20
   16f44:	39c00144 	addi	r7,r7,5
   16f48:	42000044 	addi	r8,r8,1
   16f4c:	39cf883a 	add	r7,r7,r7
   16f50:	4211883a 	add	r8,r8,r8
   16f54:	39cf883a 	add	r7,r7,r7
   16f58:	4211883a 	add	r8,r8,r8
   16f5c:	31cf883a 	add	r7,r6,r7
   16f60:	2211883a 	add	r8,r4,r8
   16f64:	11c00d2e 	bgeu	r2,r7,16f9c <__copybits+0x68>
   16f68:	2007883a 	mov	r3,r4
   16f6c:	11400017 	ldw	r5,0(r2)
   16f70:	18c00104 	addi	r3,r3,4
   16f74:	10800104 	addi	r2,r2,4
   16f78:	197fff15 	stw	r5,-4(r3)
   16f7c:	11fffb36 	bltu	r2,r7,16f6c <__copybits+0x38>
   16f80:	3985c83a 	sub	r2,r7,r6
   16f84:	10bffac4 	addi	r2,r2,-21
   16f88:	1004d0ba 	srli	r2,r2,2
   16f8c:	10800044 	addi	r2,r2,1
   16f90:	1085883a 	add	r2,r2,r2
   16f94:	1085883a 	add	r2,r2,r2
   16f98:	2089883a 	add	r4,r4,r2
   16f9c:	2200032e 	bgeu	r4,r8,16fac <__copybits+0x78>
   16fa0:	20000015 	stw	zero,0(r4)
   16fa4:	21000104 	addi	r4,r4,4
   16fa8:	223ffd36 	bltu	r4,r8,16fa0 <__copybits+0x6c>
   16fac:	f800283a 	ret

00016fb0 <__any_on>:
   16fb0:	21800417 	ldw	r6,16(r4)
   16fb4:	2805d17a 	srai	r2,r5,5
   16fb8:	20c00504 	addi	r3,r4,20
   16fbc:	30800f0e 	bge	r6,r2,16ffc <__any_on+0x4c>
   16fc0:	3005883a 	mov	r2,r6
   16fc4:	10800144 	addi	r2,r2,5
   16fc8:	1085883a 	add	r2,r2,r2
   16fcc:	1085883a 	add	r2,r2,r2
   16fd0:	2089883a 	add	r4,r4,r2
   16fd4:	1900152e 	bgeu	r3,r4,1702c <__any_on+0x7c>
   16fd8:	20bfff17 	ldw	r2,-4(r4)
   16fdc:	213fff04 	addi	r4,r4,-4
   16fe0:	1000041e 	bne	r2,zero,16ff4 <__any_on+0x44>
   16fe4:	1900112e 	bgeu	r3,r4,1702c <__any_on+0x7c>
   16fe8:	213fff04 	addi	r4,r4,-4
   16fec:	20800017 	ldw	r2,0(r4)
   16ff0:	103ffc26 	beq	r2,zero,16fe4 <__any_on+0x34>
   16ff4:	00800044 	movi	r2,1
   16ff8:	f800283a 	ret
   16ffc:	11bff10e 	bge	r2,r6,16fc4 <__any_on+0x14>
   17000:	294007cc 	andi	r5,r5,31
   17004:	283fef26 	beq	r5,zero,16fc4 <__any_on+0x14>
   17008:	11800144 	addi	r6,r2,5
   1700c:	318d883a 	add	r6,r6,r6
   17010:	318d883a 	add	r6,r6,r6
   17014:	218d883a 	add	r6,r4,r6
   17018:	31800017 	ldw	r6,0(r6)
   1701c:	314ed83a 	srl	r7,r6,r5
   17020:	394a983a 	sll	r5,r7,r5
   17024:	29bff31e 	bne	r5,r6,16ff4 <__any_on+0x44>
   17028:	003fe606 	br	16fc4 <__any_on+0x14>
   1702c:	0005883a 	mov	r2,zero
   17030:	f800283a 	ret

00017034 <_realloc_r>:
   17034:	defff504 	addi	sp,sp,-44
   17038:	dd400615 	stw	r21,24(sp)
   1703c:	dc800315 	stw	r18,12(sp)
   17040:	dc000115 	stw	r16,4(sp)
   17044:	dfc00a15 	stw	ra,40(sp)
   17048:	df000915 	stw	fp,36(sp)
   1704c:	ddc00815 	stw	r23,32(sp)
   17050:	dd800715 	stw	r22,28(sp)
   17054:	dd000515 	stw	r20,20(sp)
   17058:	dcc00415 	stw	r19,16(sp)
   1705c:	dc400215 	stw	r17,8(sp)
   17060:	2821883a 	mov	r16,r5
   17064:	202b883a 	mov	r21,r4
   17068:	3025883a 	mov	r18,r6
   1706c:	28009626 	beq	r5,zero,172c8 <_realloc_r+0x294>
   17070:	001a3240 	call	1a324 <__malloc_lock>
   17074:	80bfff17 	ldw	r2,-4(r16)
   17078:	04ffff04 	movi	r19,-4
   1707c:	90c002c4 	addi	r3,r18,11
   17080:	01000584 	movi	r4,22
   17084:	85bffe04 	addi	r22,r16,-8
   17088:	14e6703a 	and	r19,r2,r19
   1708c:	20c0372e 	bgeu	r4,r3,1716c <_realloc_r+0x138>
   17090:	047ffe04 	movi	r17,-8
   17094:	1c62703a 	and	r17,r3,r17
   17098:	8807883a 	mov	r3,r17
   1709c:	88005a16 	blt	r17,zero,17208 <_realloc_r+0x1d4>
   170a0:	8c805936 	bltu	r17,r18,17208 <_realloc_r+0x1d4>
   170a4:	98c0340e 	bge	r19,r3,17178 <_realloc_r+0x144>
   170a8:	070000f4 	movhi	fp,3
   170ac:	e721e904 	addi	fp,fp,-30812
   170b0:	e1400217 	ldw	r5,8(fp)
   170b4:	b4c9883a 	add	r4,r22,r19
   170b8:	29009026 	beq	r5,r4,172fc <_realloc_r+0x2c8>
   170bc:	21800117 	ldw	r6,4(r4)
   170c0:	01ffff84 	movi	r7,-2
   170c4:	31ce703a 	and	r7,r6,r7
   170c8:	21cf883a 	add	r7,r4,r7
   170cc:	39c00117 	ldw	r7,4(r7)
   170d0:	39c0004c 	andi	r7,r7,1
   170d4:	38004326 	beq	r7,zero,171e4 <_realloc_r+0x1b0>
   170d8:	000d883a 	mov	r6,zero
   170dc:	0009883a 	mov	r4,zero
   170e0:	1080004c 	andi	r2,r2,1
   170e4:	10005a1e 	bne	r2,zero,17250 <_realloc_r+0x21c>
   170e8:	85fffe17 	ldw	r23,-8(r16)
   170ec:	00bfff04 	movi	r2,-4
   170f0:	b5efc83a 	sub	r23,r22,r23
   170f4:	b9c00117 	ldw	r7,4(r23)
   170f8:	388e703a 	and	r7,r7,r2
   170fc:	3ccf883a 	add	r7,r7,r19
   17100:	20005226 	beq	r4,zero,1724c <_realloc_r+0x218>
   17104:	31e9883a 	add	r20,r6,r7
   17108:	2140c726 	beq	r4,r5,17428 <_realloc_r+0x3f4>
   1710c:	a0c04f16 	blt	r20,r3,1724c <_realloc_r+0x218>
   17110:	20800317 	ldw	r2,12(r4)
   17114:	20c00217 	ldw	r3,8(r4)
   17118:	99bfff04 	addi	r6,r19,-4
   1711c:	01000904 	movi	r4,36
   17120:	18800315 	stw	r2,12(r3)
   17124:	10c00215 	stw	r3,8(r2)
   17128:	b8c00217 	ldw	r3,8(r23)
   1712c:	b8800317 	ldw	r2,12(r23)
   17130:	bc800204 	addi	r18,r23,8
   17134:	18800315 	stw	r2,12(r3)
   17138:	10c00215 	stw	r3,8(r2)
   1713c:	2180ed36 	bltu	r4,r6,174f4 <_realloc_r+0x4c0>
   17140:	008004c4 	movi	r2,19
   17144:	11809b2e 	bgeu	r2,r6,173b4 <_realloc_r+0x380>
   17148:	80800017 	ldw	r2,0(r16)
   1714c:	b8800215 	stw	r2,8(r23)
   17150:	80800117 	ldw	r2,4(r16)
   17154:	b8800315 	stw	r2,12(r23)
   17158:	008006c4 	movi	r2,27
   1715c:	1180f936 	bltu	r2,r6,17544 <_realloc_r+0x510>
   17160:	b8800404 	addi	r2,r23,16
   17164:	80c00204 	addi	r3,r16,8
   17168:	00009406 	br	173bc <_realloc_r+0x388>
   1716c:	00c00404 	movi	r3,16
   17170:	1823883a 	mov	r17,r3
   17174:	003fca06 	br	170a0 <_realloc_r+0x6c>
   17178:	9829883a 	mov	r20,r19
   1717c:	a447c83a 	sub	r3,r20,r17
   17180:	010003c4 	movi	r4,15
   17184:	1080004c 	andi	r2,r2,1
   17188:	20c02336 	bltu	r4,r3,17218 <_realloc_r+0x1e4>
   1718c:	1504b03a 	or	r2,r2,r20
   17190:	b0800115 	stw	r2,4(r22)
   17194:	b52d883a 	add	r22,r22,r20
   17198:	b0800117 	ldw	r2,4(r22)
   1719c:	10800054 	ori	r2,r2,1
   171a0:	b0800115 	stw	r2,4(r22)
   171a4:	a809883a 	mov	r4,r21
   171a8:	001a3440 	call	1a344 <__malloc_unlock>
   171ac:	8025883a 	mov	r18,r16
   171b0:	9005883a 	mov	r2,r18
   171b4:	dfc00a17 	ldw	ra,40(sp)
   171b8:	df000917 	ldw	fp,36(sp)
   171bc:	ddc00817 	ldw	r23,32(sp)
   171c0:	dd800717 	ldw	r22,28(sp)
   171c4:	dd400617 	ldw	r21,24(sp)
   171c8:	dd000517 	ldw	r20,20(sp)
   171cc:	dcc00417 	ldw	r19,16(sp)
   171d0:	dc800317 	ldw	r18,12(sp)
   171d4:	dc400217 	ldw	r17,8(sp)
   171d8:	dc000117 	ldw	r16,4(sp)
   171dc:	dec00b04 	addi	sp,sp,44
   171e0:	f800283a 	ret
   171e4:	01ffff04 	movi	r7,-4
   171e8:	31cc703a 	and	r6,r6,r7
   171ec:	34e9883a 	add	r20,r6,r19
   171f0:	a0ffbb16 	blt	r20,r3,170e0 <_realloc_r+0xac>
   171f4:	20c00317 	ldw	r3,12(r4)
   171f8:	21000217 	ldw	r4,8(r4)
   171fc:	20c00315 	stw	r3,12(r4)
   17200:	19000215 	stw	r4,8(r3)
   17204:	003fdd06 	br	1717c <_realloc_r+0x148>
   17208:	00800304 	movi	r2,12
   1720c:	a8800015 	stw	r2,0(r21)
   17210:	0025883a 	mov	r18,zero
   17214:	003fe606 	br	171b0 <_realloc_r+0x17c>
   17218:	1444b03a 	or	r2,r2,r17
   1721c:	b0800115 	stw	r2,4(r22)
   17220:	b44b883a 	add	r5,r22,r17
   17224:	18800054 	ori	r2,r3,1
   17228:	28800115 	stw	r2,4(r5)
   1722c:	28c7883a 	add	r3,r5,r3
   17230:	18800117 	ldw	r2,4(r3)
   17234:	a809883a 	mov	r4,r21
   17238:	29400204 	addi	r5,r5,8
   1723c:	10800054 	ori	r2,r2,1
   17240:	18800115 	stw	r2,4(r3)
   17244:	00148280 	call	14828 <_free_r>
   17248:	003fd606 	br	171a4 <_realloc_r+0x170>
   1724c:	38c0330e 	bge	r7,r3,1731c <_realloc_r+0x2e8>
   17250:	900b883a 	mov	r5,r18
   17254:	a809883a 	mov	r4,r21
   17258:	00153c00 	call	153c0 <_malloc_r>
   1725c:	1025883a 	mov	r18,r2
   17260:	10001626 	beq	r2,zero,172bc <_realloc_r+0x288>
   17264:	80bfff17 	ldw	r2,-4(r16)
   17268:	00ffff84 	movi	r3,-2
   1726c:	913ffe04 	addi	r4,r18,-8
   17270:	10c6703a 	and	r3,r2,r3
   17274:	b0c7883a 	add	r3,r22,r3
   17278:	20c09926 	beq	r4,r3,174e0 <_realloc_r+0x4ac>
   1727c:	99bfff04 	addi	r6,r19,-4
   17280:	00800904 	movi	r2,36
   17284:	11806436 	bltu	r2,r6,17418 <_realloc_r+0x3e4>
   17288:	00c004c4 	movi	r3,19
   1728c:	19804036 	bltu	r3,r6,17390 <_realloc_r+0x35c>
   17290:	9005883a 	mov	r2,r18
   17294:	8007883a 	mov	r3,r16
   17298:	19000017 	ldw	r4,0(r3)
   1729c:	11000015 	stw	r4,0(r2)
   172a0:	19000117 	ldw	r4,4(r3)
   172a4:	11000115 	stw	r4,4(r2)
   172a8:	18c00217 	ldw	r3,8(r3)
   172ac:	10c00215 	stw	r3,8(r2)
   172b0:	a809883a 	mov	r4,r21
   172b4:	800b883a 	mov	r5,r16
   172b8:	00148280 	call	14828 <_free_r>
   172bc:	a809883a 	mov	r4,r21
   172c0:	001a3440 	call	1a344 <__malloc_unlock>
   172c4:	003fba06 	br	171b0 <_realloc_r+0x17c>
   172c8:	300b883a 	mov	r5,r6
   172cc:	dfc00a17 	ldw	ra,40(sp)
   172d0:	df000917 	ldw	fp,36(sp)
   172d4:	ddc00817 	ldw	r23,32(sp)
   172d8:	dd800717 	ldw	r22,28(sp)
   172dc:	dd400617 	ldw	r21,24(sp)
   172e0:	dd000517 	ldw	r20,20(sp)
   172e4:	dcc00417 	ldw	r19,16(sp)
   172e8:	dc800317 	ldw	r18,12(sp)
   172ec:	dc400217 	ldw	r17,8(sp)
   172f0:	dc000117 	ldw	r16,4(sp)
   172f4:	dec00b04 	addi	sp,sp,44
   172f8:	00153c01 	jmpi	153c0 <_malloc_r>
   172fc:	29800117 	ldw	r6,4(r5)
   17300:	013fff04 	movi	r4,-4
   17304:	89c00404 	addi	r7,r17,16
   17308:	310c703a 	and	r6,r6,r4
   1730c:	34c9883a 	add	r4,r6,r19
   17310:	21c0340e 	bge	r4,r7,173e4 <_realloc_r+0x3b0>
   17314:	2809883a 	mov	r4,r5
   17318:	003f7106 	br	170e0 <_realloc_r+0xac>
   1731c:	b8800317 	ldw	r2,12(r23)
   17320:	b8c00217 	ldw	r3,8(r23)
   17324:	99bfff04 	addi	r6,r19,-4
   17328:	01000904 	movi	r4,36
   1732c:	18800315 	stw	r2,12(r3)
   17330:	10c00215 	stw	r3,8(r2)
   17334:	bc800204 	addi	r18,r23,8
   17338:	21807836 	bltu	r4,r6,1751c <_realloc_r+0x4e8>
   1733c:	008004c4 	movi	r2,19
   17340:	1180732e 	bgeu	r2,r6,17510 <_realloc_r+0x4dc>
   17344:	80800017 	ldw	r2,0(r16)
   17348:	b8800215 	stw	r2,8(r23)
   1734c:	80800117 	ldw	r2,4(r16)
   17350:	b8800315 	stw	r2,12(r23)
   17354:	008006c4 	movi	r2,27
   17358:	11808936 	bltu	r2,r6,17580 <_realloc_r+0x54c>
   1735c:	b8800404 	addi	r2,r23,16
   17360:	80c00204 	addi	r3,r16,8
   17364:	19000017 	ldw	r4,0(r3)
   17368:	9021883a 	mov	r16,r18
   1736c:	3829883a 	mov	r20,r7
   17370:	11000015 	stw	r4,0(r2)
   17374:	19000117 	ldw	r4,4(r3)
   17378:	b82d883a 	mov	r22,r23
   1737c:	11000115 	stw	r4,4(r2)
   17380:	18c00217 	ldw	r3,8(r3)
   17384:	10c00215 	stw	r3,8(r2)
   17388:	b8800117 	ldw	r2,4(r23)
   1738c:	003f7b06 	br	1717c <_realloc_r+0x148>
   17390:	80c00017 	ldw	r3,0(r16)
   17394:	90c00015 	stw	r3,0(r18)
   17398:	80c00117 	ldw	r3,4(r16)
   1739c:	90c00115 	stw	r3,4(r18)
   173a0:	00c006c4 	movi	r3,27
   173a4:	19804636 	bltu	r3,r6,174c0 <_realloc_r+0x48c>
   173a8:	90800204 	addi	r2,r18,8
   173ac:	80c00204 	addi	r3,r16,8
   173b0:	003fb906 	br	17298 <_realloc_r+0x264>
   173b4:	9005883a 	mov	r2,r18
   173b8:	8007883a 	mov	r3,r16
   173bc:	19000017 	ldw	r4,0(r3)
   173c0:	9021883a 	mov	r16,r18
   173c4:	b82d883a 	mov	r22,r23
   173c8:	11000015 	stw	r4,0(r2)
   173cc:	19000117 	ldw	r4,4(r3)
   173d0:	11000115 	stw	r4,4(r2)
   173d4:	18c00217 	ldw	r3,8(r3)
   173d8:	10c00215 	stw	r3,8(r2)
   173dc:	b8800117 	ldw	r2,4(r23)
   173e0:	003f6606 	br	1717c <_realloc_r+0x148>
   173e4:	2445c83a 	sub	r2,r4,r17
   173e8:	b46d883a 	add	r22,r22,r17
   173ec:	10800054 	ori	r2,r2,1
   173f0:	b0800115 	stw	r2,4(r22)
   173f4:	80bfff17 	ldw	r2,-4(r16)
   173f8:	a809883a 	mov	r4,r21
   173fc:	e5800215 	stw	r22,8(fp)
   17400:	1080004c 	andi	r2,r2,1
   17404:	88a2b03a 	or	r17,r17,r2
   17408:	847fff15 	stw	r17,-4(r16)
   1740c:	001a3440 	call	1a344 <__malloc_unlock>
   17410:	8025883a 	mov	r18,r16
   17414:	003f6606 	br	171b0 <_realloc_r+0x17c>
   17418:	9009883a 	mov	r4,r18
   1741c:	800b883a 	mov	r5,r16
   17420:	0015d7c0 	call	15d7c <memmove>
   17424:	003fa206 	br	172b0 <_realloc_r+0x27c>
   17428:	88800404 	addi	r2,r17,16
   1742c:	a0bf8716 	blt	r20,r2,1724c <_realloc_r+0x218>
   17430:	b8800317 	ldw	r2,12(r23)
   17434:	b8c00217 	ldw	r3,8(r23)
   17438:	99bfff04 	addi	r6,r19,-4
   1743c:	01000904 	movi	r4,36
   17440:	18800315 	stw	r2,12(r3)
   17444:	10c00215 	stw	r3,8(r2)
   17448:	bc800204 	addi	r18,r23,8
   1744c:	21806536 	bltu	r4,r6,175e4 <_realloc_r+0x5b0>
   17450:	008004c4 	movi	r2,19
   17454:	1180592e 	bgeu	r2,r6,175bc <_realloc_r+0x588>
   17458:	80800017 	ldw	r2,0(r16)
   1745c:	b8800215 	stw	r2,8(r23)
   17460:	80800117 	ldw	r2,4(r16)
   17464:	b8800315 	stw	r2,12(r23)
   17468:	008006c4 	movi	r2,27
   1746c:	11806136 	bltu	r2,r6,175f4 <_realloc_r+0x5c0>
   17470:	b8800404 	addi	r2,r23,16
   17474:	80c00204 	addi	r3,r16,8
   17478:	19000017 	ldw	r4,0(r3)
   1747c:	11000015 	stw	r4,0(r2)
   17480:	19000117 	ldw	r4,4(r3)
   17484:	11000115 	stw	r4,4(r2)
   17488:	18c00217 	ldw	r3,8(r3)
   1748c:	10c00215 	stw	r3,8(r2)
   17490:	a447c83a 	sub	r3,r20,r17
   17494:	bc45883a 	add	r2,r23,r17
   17498:	18c00054 	ori	r3,r3,1
   1749c:	10c00115 	stw	r3,4(r2)
   174a0:	b8c00117 	ldw	r3,4(r23)
   174a4:	e0800215 	stw	r2,8(fp)
   174a8:	a809883a 	mov	r4,r21
   174ac:	1880004c 	andi	r2,r3,1
   174b0:	88a2b03a 	or	r17,r17,r2
   174b4:	bc400115 	stw	r17,4(r23)
   174b8:	001a3440 	call	1a344 <__malloc_unlock>
   174bc:	003f3c06 	br	171b0 <_realloc_r+0x17c>
   174c0:	80c00217 	ldw	r3,8(r16)
   174c4:	90c00215 	stw	r3,8(r18)
   174c8:	80c00317 	ldw	r3,12(r16)
   174cc:	90c00315 	stw	r3,12(r18)
   174d0:	30802426 	beq	r6,r2,17564 <_realloc_r+0x530>
   174d4:	90800404 	addi	r2,r18,16
   174d8:	80c00404 	addi	r3,r16,16
   174dc:	003f6e06 	br	17298 <_realloc_r+0x264>
   174e0:	953fff17 	ldw	r20,-4(r18)
   174e4:	00ffff04 	movi	r3,-4
   174e8:	a0e8703a 	and	r20,r20,r3
   174ec:	a4e9883a 	add	r20,r20,r19
   174f0:	003f2206 	br	1717c <_realloc_r+0x148>
   174f4:	800b883a 	mov	r5,r16
   174f8:	9009883a 	mov	r4,r18
   174fc:	0015d7c0 	call	15d7c <memmove>
   17500:	9021883a 	mov	r16,r18
   17504:	b8800117 	ldw	r2,4(r23)
   17508:	b82d883a 	mov	r22,r23
   1750c:	003f1b06 	br	1717c <_realloc_r+0x148>
   17510:	9005883a 	mov	r2,r18
   17514:	8007883a 	mov	r3,r16
   17518:	003f9206 	br	17364 <_realloc_r+0x330>
   1751c:	800b883a 	mov	r5,r16
   17520:	9009883a 	mov	r4,r18
   17524:	d9c00015 	stw	r7,0(sp)
   17528:	0015d7c0 	call	15d7c <memmove>
   1752c:	d9c00017 	ldw	r7,0(sp)
   17530:	9021883a 	mov	r16,r18
   17534:	b8800117 	ldw	r2,4(r23)
   17538:	3829883a 	mov	r20,r7
   1753c:	b82d883a 	mov	r22,r23
   17540:	003f0e06 	br	1717c <_realloc_r+0x148>
   17544:	80800217 	ldw	r2,8(r16)
   17548:	b8800415 	stw	r2,16(r23)
   1754c:	80800317 	ldw	r2,12(r16)
   17550:	b8800515 	stw	r2,20(r23)
   17554:	31001226 	beq	r6,r4,175a0 <_realloc_r+0x56c>
   17558:	b8800604 	addi	r2,r23,24
   1755c:	80c00404 	addi	r3,r16,16
   17560:	003f9606 	br	173bc <_realloc_r+0x388>
   17564:	81000417 	ldw	r4,16(r16)
   17568:	90800604 	addi	r2,r18,24
   1756c:	80c00604 	addi	r3,r16,24
   17570:	91000415 	stw	r4,16(r18)
   17574:	81000517 	ldw	r4,20(r16)
   17578:	91000515 	stw	r4,20(r18)
   1757c:	003f4606 	br	17298 <_realloc_r+0x264>
   17580:	80800217 	ldw	r2,8(r16)
   17584:	b8800415 	stw	r2,16(r23)
   17588:	80800317 	ldw	r2,12(r16)
   1758c:	b8800515 	stw	r2,20(r23)
   17590:	31000d26 	beq	r6,r4,175c8 <_realloc_r+0x594>
   17594:	b8800604 	addi	r2,r23,24
   17598:	80c00404 	addi	r3,r16,16
   1759c:	003f7106 	br	17364 <_realloc_r+0x330>
   175a0:	81000417 	ldw	r4,16(r16)
   175a4:	b8800804 	addi	r2,r23,32
   175a8:	80c00604 	addi	r3,r16,24
   175ac:	b9000615 	stw	r4,24(r23)
   175b0:	81000517 	ldw	r4,20(r16)
   175b4:	b9000715 	stw	r4,28(r23)
   175b8:	003f8006 	br	173bc <_realloc_r+0x388>
   175bc:	9005883a 	mov	r2,r18
   175c0:	8007883a 	mov	r3,r16
   175c4:	003fac06 	br	17478 <_realloc_r+0x444>
   175c8:	81000417 	ldw	r4,16(r16)
   175cc:	b8800804 	addi	r2,r23,32
   175d0:	80c00604 	addi	r3,r16,24
   175d4:	b9000615 	stw	r4,24(r23)
   175d8:	81000517 	ldw	r4,20(r16)
   175dc:	b9000715 	stw	r4,28(r23)
   175e0:	003f6006 	br	17364 <_realloc_r+0x330>
   175e4:	9009883a 	mov	r4,r18
   175e8:	800b883a 	mov	r5,r16
   175ec:	0015d7c0 	call	15d7c <memmove>
   175f0:	003fa706 	br	17490 <_realloc_r+0x45c>
   175f4:	80800217 	ldw	r2,8(r16)
   175f8:	b8800415 	stw	r2,16(r23)
   175fc:	80800317 	ldw	r2,12(r16)
   17600:	b8800515 	stw	r2,20(r23)
   17604:	31000326 	beq	r6,r4,17614 <_realloc_r+0x5e0>
   17608:	b8800604 	addi	r2,r23,24
   1760c:	80c00404 	addi	r3,r16,16
   17610:	003f9906 	br	17478 <_realloc_r+0x444>
   17614:	81000417 	ldw	r4,16(r16)
   17618:	b8800804 	addi	r2,r23,32
   1761c:	80c00604 	addi	r3,r16,24
   17620:	b9000615 	stw	r4,24(r23)
   17624:	81000517 	ldw	r4,20(r16)
   17628:	b9000715 	stw	r4,28(r23)
   1762c:	003f9206 	br	17478 <_realloc_r+0x444>

00017630 <__isinfd>:
   17630:	0105c83a 	sub	r2,zero,r4
   17634:	1108b03a 	or	r4,r2,r4
   17638:	2004d7fa 	srli	r2,r4,31
   1763c:	00e00034 	movhi	r3,32768
   17640:	18ffffc4 	addi	r3,r3,-1
   17644:	28ca703a 	and	r5,r5,r3
   17648:	1144b03a 	or	r2,r2,r5
   1764c:	00dffc34 	movhi	r3,32752
   17650:	1885c83a 	sub	r2,r3,r2
   17654:	0087c83a 	sub	r3,zero,r2
   17658:	1884b03a 	or	r2,r3,r2
   1765c:	1005d7fa 	srai	r2,r2,31
   17660:	10800044 	addi	r2,r2,1
   17664:	f800283a 	ret

00017668 <__isnand>:
   17668:	0105c83a 	sub	r2,zero,r4
   1766c:	1108b03a 	or	r4,r2,r4
   17670:	2004d7fa 	srli	r2,r4,31
   17674:	00e00034 	movhi	r3,32768
   17678:	18ffffc4 	addi	r3,r3,-1
   1767c:	28ca703a 	and	r5,r5,r3
   17680:	1144b03a 	or	r2,r2,r5
   17684:	00dffc34 	movhi	r3,32752
   17688:	1885c83a 	sub	r2,r3,r2
   1768c:	1004d7fa 	srli	r2,r2,31
   17690:	f800283a 	ret

00017694 <_sbrk_r>:
   17694:	defffd04 	addi	sp,sp,-12
   17698:	dc400115 	stw	r17,4(sp)
   1769c:	dc000015 	stw	r16,0(sp)
   176a0:	2023883a 	mov	r17,r4
   176a4:	040000f4 	movhi	r16,3
   176a8:	84278704 	addi	r16,r16,-25060
   176ac:	2809883a 	mov	r4,r5
   176b0:	dfc00215 	stw	ra,8(sp)
   176b4:	80000015 	stw	zero,0(r16)
   176b8:	001a5280 	call	1a528 <sbrk>
   176bc:	00ffffc4 	movi	r3,-1
   176c0:	10c00526 	beq	r2,r3,176d8 <_sbrk_r+0x44>
   176c4:	dfc00217 	ldw	ra,8(sp)
   176c8:	dc400117 	ldw	r17,4(sp)
   176cc:	dc000017 	ldw	r16,0(sp)
   176d0:	dec00304 	addi	sp,sp,12
   176d4:	f800283a 	ret
   176d8:	80c00017 	ldw	r3,0(r16)
   176dc:	183ff926 	beq	r3,zero,176c4 <_sbrk_r+0x30>
   176e0:	88c00015 	stw	r3,0(r17)
   176e4:	dfc00217 	ldw	ra,8(sp)
   176e8:	dc400117 	ldw	r17,4(sp)
   176ec:	dc000017 	ldw	r16,0(sp)
   176f0:	dec00304 	addi	sp,sp,12
   176f4:	f800283a 	ret

000176f8 <__sread>:
   176f8:	defffe04 	addi	sp,sp,-8
   176fc:	dc000015 	stw	r16,0(sp)
   17700:	2821883a 	mov	r16,r5
   17704:	2940038f 	ldh	r5,14(r5)
   17708:	dfc00115 	stw	ra,4(sp)
   1770c:	0017d000 	call	17d00 <_read_r>
   17710:	10000716 	blt	r2,zero,17730 <__sread+0x38>
   17714:	80c01417 	ldw	r3,80(r16)
   17718:	1887883a 	add	r3,r3,r2
   1771c:	80c01415 	stw	r3,80(r16)
   17720:	dfc00117 	ldw	ra,4(sp)
   17724:	dc000017 	ldw	r16,0(sp)
   17728:	dec00204 	addi	sp,sp,8
   1772c:	f800283a 	ret
   17730:	80c0030b 	ldhu	r3,12(r16)
   17734:	18fbffcc 	andi	r3,r3,61439
   17738:	80c0030d 	sth	r3,12(r16)
   1773c:	dfc00117 	ldw	ra,4(sp)
   17740:	dc000017 	ldw	r16,0(sp)
   17744:	dec00204 	addi	sp,sp,8
   17748:	f800283a 	ret

0001774c <__swrite>:
   1774c:	2880030b 	ldhu	r2,12(r5)
   17750:	defffb04 	addi	sp,sp,-20
   17754:	dcc00315 	stw	r19,12(sp)
   17758:	10c0400c 	andi	r3,r2,256
   1775c:	18ffffcc 	andi	r3,r3,65535
   17760:	18e0001c 	xori	r3,r3,32768
   17764:	dc800215 	stw	r18,8(sp)
   17768:	dc400115 	stw	r17,4(sp)
   1776c:	dc000015 	stw	r16,0(sp)
   17770:	dfc00415 	stw	ra,16(sp)
   17774:	18e00004 	addi	r3,r3,-32768
   17778:	2821883a 	mov	r16,r5
   1777c:	2027883a 	mov	r19,r4
   17780:	3025883a 	mov	r18,r6
   17784:	3823883a 	mov	r17,r7
   17788:	18000526 	beq	r3,zero,177a0 <__swrite+0x54>
   1778c:	2940038f 	ldh	r5,14(r5)
   17790:	000d883a 	mov	r6,zero
   17794:	01c00084 	movi	r7,2
   17798:	0017c940 	call	17c94 <_lseek_r>
   1779c:	8080030b 	ldhu	r2,12(r16)
   177a0:	8140038f 	ldh	r5,14(r16)
   177a4:	10bbffcc 	andi	r2,r2,61439
   177a8:	9809883a 	mov	r4,r19
   177ac:	900d883a 	mov	r6,r18
   177b0:	880f883a 	mov	r7,r17
   177b4:	8080030d 	sth	r2,12(r16)
   177b8:	dfc00417 	ldw	ra,16(sp)
   177bc:	dcc00317 	ldw	r19,12(sp)
   177c0:	dc800217 	ldw	r18,8(sp)
   177c4:	dc400117 	ldw	r17,4(sp)
   177c8:	dc000017 	ldw	r16,0(sp)
   177cc:	dec00504 	addi	sp,sp,20
   177d0:	00178dc1 	jmpi	178dc <_write_r>

000177d4 <__sseek>:
   177d4:	defffe04 	addi	sp,sp,-8
   177d8:	dc000015 	stw	r16,0(sp)
   177dc:	2821883a 	mov	r16,r5
   177e0:	2940038f 	ldh	r5,14(r5)
   177e4:	dfc00115 	stw	ra,4(sp)
   177e8:	0017c940 	call	17c94 <_lseek_r>
   177ec:	00ffffc4 	movi	r3,-1
   177f0:	10c00826 	beq	r2,r3,17814 <__sseek+0x40>
   177f4:	80c0030b 	ldhu	r3,12(r16)
   177f8:	80801415 	stw	r2,80(r16)
   177fc:	18c40014 	ori	r3,r3,4096
   17800:	80c0030d 	sth	r3,12(r16)
   17804:	dfc00117 	ldw	ra,4(sp)
   17808:	dc000017 	ldw	r16,0(sp)
   1780c:	dec00204 	addi	sp,sp,8
   17810:	f800283a 	ret
   17814:	80c0030b 	ldhu	r3,12(r16)
   17818:	18fbffcc 	andi	r3,r3,61439
   1781c:	80c0030d 	sth	r3,12(r16)
   17820:	dfc00117 	ldw	ra,4(sp)
   17824:	dc000017 	ldw	r16,0(sp)
   17828:	dec00204 	addi	sp,sp,8
   1782c:	f800283a 	ret

00017830 <__sclose>:
   17830:	2940038f 	ldh	r5,14(r5)
   17834:	0017a141 	jmpi	17a14 <_close_r>

00017838 <strcmp>:
   17838:	2904b03a 	or	r2,r5,r4
   1783c:	108000cc 	andi	r2,r2,3
   17840:	1000171e 	bne	r2,zero,178a0 <strcmp+0x68>
   17844:	20800017 	ldw	r2,0(r4)
   17848:	28c00017 	ldw	r3,0(r5)
   1784c:	10c0141e 	bne	r2,r3,178a0 <strcmp+0x68>
   17850:	027fbff4 	movhi	r9,65279
   17854:	4a7fbfc4 	addi	r9,r9,-257
   17858:	1247883a 	add	r3,r2,r9
   1785c:	0084303a 	nor	r2,zero,r2
   17860:	1884703a 	and	r2,r3,r2
   17864:	02202074 	movhi	r8,32897
   17868:	42202004 	addi	r8,r8,-32640
   1786c:	1204703a 	and	r2,r2,r8
   17870:	10000226 	beq	r2,zero,1787c <strcmp+0x44>
   17874:	00001706 	br	178d4 <strcmp+0x9c>
   17878:	3000161e 	bne	r6,zero,178d4 <strcmp+0x9c>
   1787c:	21000104 	addi	r4,r4,4
   17880:	20800017 	ldw	r2,0(r4)
   17884:	29400104 	addi	r5,r5,4
   17888:	28c00017 	ldw	r3,0(r5)
   1788c:	124f883a 	add	r7,r2,r9
   17890:	008c303a 	nor	r6,zero,r2
   17894:	398c703a 	and	r6,r7,r6
   17898:	320c703a 	and	r6,r6,r8
   1789c:	10fff626 	beq	r2,r3,17878 <strcmp+0x40>
   178a0:	20800007 	ldb	r2,0(r4)
   178a4:	1000051e 	bne	r2,zero,178bc <strcmp+0x84>
   178a8:	00000606 	br	178c4 <strcmp+0x8c>
   178ac:	21000044 	addi	r4,r4,1
   178b0:	20800007 	ldb	r2,0(r4)
   178b4:	29400044 	addi	r5,r5,1
   178b8:	10000226 	beq	r2,zero,178c4 <strcmp+0x8c>
   178bc:	28c00007 	ldb	r3,0(r5)
   178c0:	10fffa26 	beq	r2,r3,178ac <strcmp+0x74>
   178c4:	20c00003 	ldbu	r3,0(r4)
   178c8:	28800003 	ldbu	r2,0(r5)
   178cc:	1885c83a 	sub	r2,r3,r2
   178d0:	f800283a 	ret
   178d4:	0005883a 	mov	r2,zero
   178d8:	f800283a 	ret

000178dc <_write_r>:
   178dc:	defffd04 	addi	sp,sp,-12
   178e0:	dc400115 	stw	r17,4(sp)
   178e4:	dc000015 	stw	r16,0(sp)
   178e8:	2023883a 	mov	r17,r4
   178ec:	040000f4 	movhi	r16,3
   178f0:	84278704 	addi	r16,r16,-25060
   178f4:	2809883a 	mov	r4,r5
   178f8:	300b883a 	mov	r5,r6
   178fc:	380d883a 	mov	r6,r7
   17900:	dfc00215 	stw	ra,8(sp)
   17904:	80000015 	stw	zero,0(r16)
   17908:	001a6280 	call	1a628 <write>
   1790c:	00ffffc4 	movi	r3,-1
   17910:	10c00526 	beq	r2,r3,17928 <_write_r+0x4c>
   17914:	dfc00217 	ldw	ra,8(sp)
   17918:	dc400117 	ldw	r17,4(sp)
   1791c:	dc000017 	ldw	r16,0(sp)
   17920:	dec00304 	addi	sp,sp,12
   17924:	f800283a 	ret
   17928:	80c00017 	ldw	r3,0(r16)
   1792c:	183ff926 	beq	r3,zero,17914 <_write_r+0x38>
   17930:	88c00015 	stw	r3,0(r17)
   17934:	dfc00217 	ldw	ra,8(sp)
   17938:	dc400117 	ldw	r17,4(sp)
   1793c:	dc000017 	ldw	r16,0(sp)
   17940:	dec00304 	addi	sp,sp,12
   17944:	f800283a 	ret

00017948 <_calloc_r>:
   17948:	defffe04 	addi	sp,sp,-8
   1794c:	dc000015 	stw	r16,0(sp)
   17950:	2021883a 	mov	r16,r4
   17954:	3009883a 	mov	r4,r6
   17958:	dfc00115 	stw	ra,4(sp)
   1795c:	00107940 	call	10794 <__mulsi3>
   17960:	8009883a 	mov	r4,r16
   17964:	100b883a 	mov	r5,r2
   17968:	00153c00 	call	153c0 <_malloc_r>
   1796c:	1021883a 	mov	r16,r2
   17970:	10000c26 	beq	r2,zero,179a4 <_calloc_r+0x5c>
   17974:	11bfff17 	ldw	r6,-4(r2)
   17978:	00ffff04 	movi	r3,-4
   1797c:	00800904 	movi	r2,36
   17980:	30cc703a 	and	r6,r6,r3
   17984:	30cd883a 	add	r6,r6,r3
   17988:	11801436 	bltu	r2,r6,179dc <_calloc_r+0x94>
   1798c:	00c004c4 	movi	r3,19
   17990:	19800936 	bltu	r3,r6,179b8 <_calloc_r+0x70>
   17994:	8005883a 	mov	r2,r16
   17998:	10000015 	stw	zero,0(r2)
   1799c:	10000115 	stw	zero,4(r2)
   179a0:	10000215 	stw	zero,8(r2)
   179a4:	8005883a 	mov	r2,r16
   179a8:	dfc00117 	ldw	ra,4(sp)
   179ac:	dc000017 	ldw	r16,0(sp)
   179b0:	dec00204 	addi	sp,sp,8
   179b4:	f800283a 	ret
   179b8:	80000015 	stw	zero,0(r16)
   179bc:	80000115 	stw	zero,4(r16)
   179c0:	00c006c4 	movi	r3,27
   179c4:	19800d2e 	bgeu	r3,r6,179fc <_calloc_r+0xb4>
   179c8:	80000215 	stw	zero,8(r16)
   179cc:	80000315 	stw	zero,12(r16)
   179d0:	30800c26 	beq	r6,r2,17a04 <_calloc_r+0xbc>
   179d4:	80800404 	addi	r2,r16,16
   179d8:	003fef06 	br	17998 <_calloc_r+0x50>
   179dc:	8009883a 	mov	r4,r16
   179e0:	000b883a 	mov	r5,zero
   179e4:	0015f080 	call	15f08 <memset>
   179e8:	8005883a 	mov	r2,r16
   179ec:	dfc00117 	ldw	ra,4(sp)
   179f0:	dc000017 	ldw	r16,0(sp)
   179f4:	dec00204 	addi	sp,sp,8
   179f8:	f800283a 	ret
   179fc:	80800204 	addi	r2,r16,8
   17a00:	003fe506 	br	17998 <_calloc_r+0x50>
   17a04:	80000415 	stw	zero,16(r16)
   17a08:	80000515 	stw	zero,20(r16)
   17a0c:	80800604 	addi	r2,r16,24
   17a10:	003fe106 	br	17998 <_calloc_r+0x50>

00017a14 <_close_r>:
   17a14:	defffd04 	addi	sp,sp,-12
   17a18:	dc400115 	stw	r17,4(sp)
   17a1c:	dc000015 	stw	r16,0(sp)
   17a20:	2023883a 	mov	r17,r4
   17a24:	040000f4 	movhi	r16,3
   17a28:	84278704 	addi	r16,r16,-25060
   17a2c:	2809883a 	mov	r4,r5
   17a30:	dfc00215 	stw	ra,8(sp)
   17a34:	80000015 	stw	zero,0(r16)
   17a38:	0019db00 	call	19db0 <close>
   17a3c:	00ffffc4 	movi	r3,-1
   17a40:	10c00526 	beq	r2,r3,17a58 <_close_r+0x44>
   17a44:	dfc00217 	ldw	ra,8(sp)
   17a48:	dc400117 	ldw	r17,4(sp)
   17a4c:	dc000017 	ldw	r16,0(sp)
   17a50:	dec00304 	addi	sp,sp,12
   17a54:	f800283a 	ret
   17a58:	80c00017 	ldw	r3,0(r16)
   17a5c:	183ff926 	beq	r3,zero,17a44 <_close_r+0x30>
   17a60:	88c00015 	stw	r3,0(r17)
   17a64:	dfc00217 	ldw	ra,8(sp)
   17a68:	dc400117 	ldw	r17,4(sp)
   17a6c:	dc000017 	ldw	r16,0(sp)
   17a70:	dec00304 	addi	sp,sp,12
   17a74:	f800283a 	ret

00017a78 <_fclose_r>:
   17a78:	defffc04 	addi	sp,sp,-16
   17a7c:	dc400115 	stw	r17,4(sp)
   17a80:	dc000015 	stw	r16,0(sp)
   17a84:	dfc00315 	stw	ra,12(sp)
   17a88:	dc800215 	stw	r18,8(sp)
   17a8c:	2821883a 	mov	r16,r5
   17a90:	2023883a 	mov	r17,r4
   17a94:	28003426 	beq	r5,zero,17b68 <_fclose_r+0xf0>
   17a98:	00146ac0 	call	146ac <__sfp_lock_acquire>
   17a9c:	88000226 	beq	r17,zero,17aa8 <_fclose_r+0x30>
   17aa0:	88800e17 	ldw	r2,56(r17)
   17aa4:	10003826 	beq	r2,zero,17b88 <_fclose_r+0x110>
   17aa8:	8080030f 	ldh	r2,12(r16)
   17aac:	10002526 	beq	r2,zero,17b44 <_fclose_r+0xcc>
   17ab0:	8809883a 	mov	r4,r17
   17ab4:	800b883a 	mov	r5,r16
   17ab8:	00141e80 	call	141e8 <_fflush_r>
   17abc:	1025883a 	mov	r18,r2
   17ac0:	80800b17 	ldw	r2,44(r16)
   17ac4:	10000426 	beq	r2,zero,17ad8 <_fclose_r+0x60>
   17ac8:	81400717 	ldw	r5,28(r16)
   17acc:	8809883a 	mov	r4,r17
   17ad0:	103ee83a 	callr	r2
   17ad4:	10003516 	blt	r2,zero,17bac <_fclose_r+0x134>
   17ad8:	8080030b 	ldhu	r2,12(r16)
   17adc:	1080200c 	andi	r2,r2,128
   17ae0:	10bfffcc 	andi	r2,r2,65535
   17ae4:	10a0001c 	xori	r2,r2,32768
   17ae8:	10a00004 	addi	r2,r2,-32768
   17aec:	10002b1e 	bne	r2,zero,17b9c <_fclose_r+0x124>
   17af0:	81400c17 	ldw	r5,48(r16)
   17af4:	28000526 	beq	r5,zero,17b0c <_fclose_r+0x94>
   17af8:	80801004 	addi	r2,r16,64
   17afc:	28800226 	beq	r5,r2,17b08 <_fclose_r+0x90>
   17b00:	8809883a 	mov	r4,r17
   17b04:	00148280 	call	14828 <_free_r>
   17b08:	80000c15 	stw	zero,48(r16)
   17b0c:	81401117 	ldw	r5,68(r16)
   17b10:	28000326 	beq	r5,zero,17b20 <_fclose_r+0xa8>
   17b14:	8809883a 	mov	r4,r17
   17b18:	00148280 	call	14828 <_free_r>
   17b1c:	80001115 	stw	zero,68(r16)
   17b20:	8000030d 	sth	zero,12(r16)
   17b24:	00146b00 	call	146b0 <__sfp_lock_release>
   17b28:	9005883a 	mov	r2,r18
   17b2c:	dfc00317 	ldw	ra,12(sp)
   17b30:	dc800217 	ldw	r18,8(sp)
   17b34:	dc400117 	ldw	r17,4(sp)
   17b38:	dc000017 	ldw	r16,0(sp)
   17b3c:	dec00404 	addi	sp,sp,16
   17b40:	f800283a 	ret
   17b44:	00146b00 	call	146b0 <__sfp_lock_release>
   17b48:	0025883a 	mov	r18,zero
   17b4c:	9005883a 	mov	r2,r18
   17b50:	dfc00317 	ldw	ra,12(sp)
   17b54:	dc800217 	ldw	r18,8(sp)
   17b58:	dc400117 	ldw	r17,4(sp)
   17b5c:	dc000017 	ldw	r16,0(sp)
   17b60:	dec00404 	addi	sp,sp,16
   17b64:	f800283a 	ret
   17b68:	0025883a 	mov	r18,zero
   17b6c:	9005883a 	mov	r2,r18
   17b70:	dfc00317 	ldw	ra,12(sp)
   17b74:	dc800217 	ldw	r18,8(sp)
   17b78:	dc400117 	ldw	r17,4(sp)
   17b7c:	dc000017 	ldw	r16,0(sp)
   17b80:	dec00404 	addi	sp,sp,16
   17b84:	f800283a 	ret
   17b88:	8809883a 	mov	r4,r17
   17b8c:	00144a40 	call	144a4 <__sinit>
   17b90:	8080030f 	ldh	r2,12(r16)
   17b94:	103fc61e 	bne	r2,zero,17ab0 <_fclose_r+0x38>
   17b98:	003fea06 	br	17b44 <_fclose_r+0xcc>
   17b9c:	81400417 	ldw	r5,16(r16)
   17ba0:	8809883a 	mov	r4,r17
   17ba4:	00148280 	call	14828 <_free_r>
   17ba8:	003fd106 	br	17af0 <_fclose_r+0x78>
   17bac:	04bfffc4 	movi	r18,-1
   17bb0:	003fc906 	br	17ad8 <_fclose_r+0x60>

00017bb4 <fclose>:
   17bb4:	008000f4 	movhi	r2,3
   17bb8:	10a76e04 	addi	r2,r2,-25160
   17bbc:	200b883a 	mov	r5,r4
   17bc0:	11000017 	ldw	r4,0(r2)
   17bc4:	0017a781 	jmpi	17a78 <_fclose_r>

00017bc8 <_fstat_r>:
   17bc8:	defffd04 	addi	sp,sp,-12
   17bcc:	dc400115 	stw	r17,4(sp)
   17bd0:	dc000015 	stw	r16,0(sp)
   17bd4:	2023883a 	mov	r17,r4
   17bd8:	040000f4 	movhi	r16,3
   17bdc:	84278704 	addi	r16,r16,-25060
   17be0:	2809883a 	mov	r4,r5
   17be4:	300b883a 	mov	r5,r6
   17be8:	dfc00215 	stw	ra,8(sp)
   17bec:	80000015 	stw	zero,0(r16)
   17bf0:	0019ef80 	call	19ef8 <fstat>
   17bf4:	00ffffc4 	movi	r3,-1
   17bf8:	10c00526 	beq	r2,r3,17c10 <_fstat_r+0x48>
   17bfc:	dfc00217 	ldw	ra,8(sp)
   17c00:	dc400117 	ldw	r17,4(sp)
   17c04:	dc000017 	ldw	r16,0(sp)
   17c08:	dec00304 	addi	sp,sp,12
   17c0c:	f800283a 	ret
   17c10:	80c00017 	ldw	r3,0(r16)
   17c14:	183ff926 	beq	r3,zero,17bfc <_fstat_r+0x34>
   17c18:	88c00015 	stw	r3,0(r17)
   17c1c:	dfc00217 	ldw	ra,8(sp)
   17c20:	dc400117 	ldw	r17,4(sp)
   17c24:	dc000017 	ldw	r16,0(sp)
   17c28:	dec00304 	addi	sp,sp,12
   17c2c:	f800283a 	ret

00017c30 <_isatty_r>:
   17c30:	defffd04 	addi	sp,sp,-12
   17c34:	dc400115 	stw	r17,4(sp)
   17c38:	dc000015 	stw	r16,0(sp)
   17c3c:	2023883a 	mov	r17,r4
   17c40:	040000f4 	movhi	r16,3
   17c44:	84278704 	addi	r16,r16,-25060
   17c48:	2809883a 	mov	r4,r5
   17c4c:	dfc00215 	stw	ra,8(sp)
   17c50:	80000015 	stw	zero,0(r16)
   17c54:	0019ff80 	call	19ff8 <isatty>
   17c58:	00ffffc4 	movi	r3,-1
   17c5c:	10c00526 	beq	r2,r3,17c74 <_isatty_r+0x44>
   17c60:	dfc00217 	ldw	ra,8(sp)
   17c64:	dc400117 	ldw	r17,4(sp)
   17c68:	dc000017 	ldw	r16,0(sp)
   17c6c:	dec00304 	addi	sp,sp,12
   17c70:	f800283a 	ret
   17c74:	80c00017 	ldw	r3,0(r16)
   17c78:	183ff926 	beq	r3,zero,17c60 <_isatty_r+0x30>
   17c7c:	88c00015 	stw	r3,0(r17)
   17c80:	dfc00217 	ldw	ra,8(sp)
   17c84:	dc400117 	ldw	r17,4(sp)
   17c88:	dc000017 	ldw	r16,0(sp)
   17c8c:	dec00304 	addi	sp,sp,12
   17c90:	f800283a 	ret

00017c94 <_lseek_r>:
   17c94:	defffd04 	addi	sp,sp,-12
   17c98:	dc400115 	stw	r17,4(sp)
   17c9c:	dc000015 	stw	r16,0(sp)
   17ca0:	2023883a 	mov	r17,r4
   17ca4:	040000f4 	movhi	r16,3
   17ca8:	84278704 	addi	r16,r16,-25060
   17cac:	2809883a 	mov	r4,r5
   17cb0:	300b883a 	mov	r5,r6
   17cb4:	380d883a 	mov	r6,r7
   17cb8:	dfc00215 	stw	ra,8(sp)
   17cbc:	80000015 	stw	zero,0(r16)
   17cc0:	001a1d80 	call	1a1d8 <lseek>
   17cc4:	00ffffc4 	movi	r3,-1
   17cc8:	10c00526 	beq	r2,r3,17ce0 <_lseek_r+0x4c>
   17ccc:	dfc00217 	ldw	ra,8(sp)
   17cd0:	dc400117 	ldw	r17,4(sp)
   17cd4:	dc000017 	ldw	r16,0(sp)
   17cd8:	dec00304 	addi	sp,sp,12
   17cdc:	f800283a 	ret
   17ce0:	80c00017 	ldw	r3,0(r16)
   17ce4:	183ff926 	beq	r3,zero,17ccc <_lseek_r+0x38>
   17ce8:	88c00015 	stw	r3,0(r17)
   17cec:	dfc00217 	ldw	ra,8(sp)
   17cf0:	dc400117 	ldw	r17,4(sp)
   17cf4:	dc000017 	ldw	r16,0(sp)
   17cf8:	dec00304 	addi	sp,sp,12
   17cfc:	f800283a 	ret

00017d00 <_read_r>:
   17d00:	defffd04 	addi	sp,sp,-12
   17d04:	dc400115 	stw	r17,4(sp)
   17d08:	dc000015 	stw	r16,0(sp)
   17d0c:	2023883a 	mov	r17,r4
   17d10:	040000f4 	movhi	r16,3
   17d14:	84278704 	addi	r16,r16,-25060
   17d18:	2809883a 	mov	r4,r5
   17d1c:	300b883a 	mov	r5,r6
   17d20:	380d883a 	mov	r6,r7
   17d24:	dfc00215 	stw	ra,8(sp)
   17d28:	80000015 	stw	zero,0(r16)
   17d2c:	001a3b40 	call	1a3b4 <read>
   17d30:	00ffffc4 	movi	r3,-1
   17d34:	10c00526 	beq	r2,r3,17d4c <_read_r+0x4c>
   17d38:	dfc00217 	ldw	ra,8(sp)
   17d3c:	dc400117 	ldw	r17,4(sp)
   17d40:	dc000017 	ldw	r16,0(sp)
   17d44:	dec00304 	addi	sp,sp,12
   17d48:	f800283a 	ret
   17d4c:	80c00017 	ldw	r3,0(r16)
   17d50:	183ff926 	beq	r3,zero,17d38 <_read_r+0x38>
   17d54:	88c00015 	stw	r3,0(r17)
   17d58:	dfc00217 	ldw	ra,8(sp)
   17d5c:	dc400117 	ldw	r17,4(sp)
   17d60:	dc000017 	ldw	r16,0(sp)
   17d64:	dec00304 	addi	sp,sp,12
   17d68:	f800283a 	ret

00017d6c <__udivdi3>:
   17d6c:	defff504 	addi	sp,sp,-44
   17d70:	dd000515 	stw	r20,20(sp)
   17d74:	dcc00415 	stw	r19,16(sp)
   17d78:	dc800315 	stw	r18,12(sp)
   17d7c:	dc400215 	stw	r17,8(sp)
   17d80:	dc000115 	stw	r16,4(sp)
   17d84:	dfc00a15 	stw	ra,40(sp)
   17d88:	df000915 	stw	fp,36(sp)
   17d8c:	ddc00815 	stw	r23,32(sp)
   17d90:	dd800715 	stw	r22,28(sp)
   17d94:	dd400615 	stw	r21,24(sp)
   17d98:	2025883a 	mov	r18,r4
   17d9c:	2823883a 	mov	r17,r5
   17da0:	3021883a 	mov	r16,r6
   17da4:	2027883a 	mov	r19,r4
   17da8:	2829883a 	mov	r20,r5
   17dac:	3800451e 	bne	r7,zero,17ec4 <__udivdi3+0x158>
   17db0:	2980652e 	bgeu	r5,r6,17f48 <__udivdi3+0x1dc>
   17db4:	00bfffd4 	movui	r2,65535
   17db8:	1180b436 	bltu	r2,r6,1808c <__udivdi3+0x320>
   17dbc:	00803fc4 	movi	r2,255
   17dc0:	11816636 	bltu	r2,r6,1835c <__udivdi3+0x5f0>
   17dc4:	0005883a 	mov	r2,zero
   17dc8:	0007883a 	mov	r3,zero
   17dcc:	3084d83a 	srl	r2,r6,r2
   17dd0:	010000f4 	movhi	r4,3
   17dd4:	21209904 	addi	r4,r4,-32156
   17dd8:	2085883a 	add	r2,r4,r2
   17ddc:	10800003 	ldbu	r2,0(r2)
   17de0:	10c7883a 	add	r3,r2,r3
   17de4:	00800804 	movi	r2,32
   17de8:	10c5c83a 	sub	r2,r2,r3
   17dec:	10000526 	beq	r2,zero,17e04 <__udivdi3+0x98>
   17df0:	88a2983a 	sll	r17,r17,r2
   17df4:	90c6d83a 	srl	r3,r18,r3
   17df8:	30a0983a 	sll	r16,r6,r2
   17dfc:	90a6983a 	sll	r19,r18,r2
   17e00:	88e8b03a 	or	r20,r17,r3
   17e04:	8022d43a 	srli	r17,r16,16
   17e08:	a009883a 	mov	r4,r20
   17e0c:	857fffcc 	andi	r21,r16,65535
   17e10:	880b883a 	mov	r5,r17
   17e14:	001078c0 	call	1078c <__umodsi3>
   17e18:	a009883a 	mov	r4,r20
   17e1c:	880b883a 	mov	r5,r17
   17e20:	102d883a 	mov	r22,r2
   17e24:	00107840 	call	10784 <__udivsi3>
   17e28:	1009883a 	mov	r4,r2
   17e2c:	a80b883a 	mov	r5,r21
   17e30:	1025883a 	mov	r18,r2
   17e34:	00107940 	call	10794 <__mulsi3>
   17e38:	1009883a 	mov	r4,r2
   17e3c:	b006943a 	slli	r3,r22,16
   17e40:	9804d43a 	srli	r2,r19,16
   17e44:	1886b03a 	or	r3,r3,r2
   17e48:	1900052e 	bgeu	r3,r4,17e60 <__udivdi3+0xf4>
   17e4c:	1c07883a 	add	r3,r3,r16
   17e50:	90bfffc4 	addi	r2,r18,-1
   17e54:	1c000136 	bltu	r3,r16,17e5c <__udivdi3+0xf0>
   17e58:	19015536 	bltu	r3,r4,183b0 <__udivdi3+0x644>
   17e5c:	1025883a 	mov	r18,r2
   17e60:	1929c83a 	sub	r20,r3,r4
   17e64:	880b883a 	mov	r5,r17
   17e68:	a009883a 	mov	r4,r20
   17e6c:	001078c0 	call	1078c <__umodsi3>
   17e70:	102d883a 	mov	r22,r2
   17e74:	880b883a 	mov	r5,r17
   17e78:	a009883a 	mov	r4,r20
   17e7c:	b02c943a 	slli	r22,r22,16
   17e80:	00107840 	call	10784 <__udivsi3>
   17e84:	1009883a 	mov	r4,r2
   17e88:	a80b883a 	mov	r5,r21
   17e8c:	9cffffcc 	andi	r19,r19,65535
   17e90:	1023883a 	mov	r17,r2
   17e94:	b4e6b03a 	or	r19,r22,r19
   17e98:	00107940 	call	10794 <__mulsi3>
   17e9c:	9880052e 	bgeu	r19,r2,17eb4 <__udivdi3+0x148>
   17ea0:	9c27883a 	add	r19,r19,r16
   17ea4:	88ffffc4 	addi	r3,r17,-1
   17ea8:	9c011436 	bltu	r19,r16,182fc <__udivdi3+0x590>
   17eac:	9881132e 	bgeu	r19,r2,182fc <__udivdi3+0x590>
   17eb0:	8c7fff84 	addi	r17,r17,-2
   17eb4:	9004943a 	slli	r2,r18,16
   17eb8:	0007883a 	mov	r3,zero
   17ebc:	8884b03a 	or	r2,r17,r2
   17ec0:	00001506 	br	17f18 <__udivdi3+0x1ac>
   17ec4:	29c06a36 	bltu	r5,r7,18070 <__udivdi3+0x304>
   17ec8:	00bfffd4 	movui	r2,65535
   17ecc:	11c06a2e 	bgeu	r2,r7,18078 <__udivdi3+0x30c>
   17ed0:	00804034 	movhi	r2,256
   17ed4:	10bfffc4 	addi	r2,r2,-1
   17ed8:	11c11436 	bltu	r2,r7,1832c <__udivdi3+0x5c0>
   17edc:	00c00404 	movi	r3,16
   17ee0:	180b883a 	mov	r5,r3
   17ee4:	38c6d83a 	srl	r3,r7,r3
   17ee8:	010000f4 	movhi	r4,3
   17eec:	21209904 	addi	r4,r4,-32156
   17ef0:	04000804 	movi	r16,32
   17ef4:	20c7883a 	add	r3,r4,r3
   17ef8:	18800003 	ldbu	r2,0(r3)
   17efc:	1145883a 	add	r2,r2,r5
   17f00:	80a1c83a 	sub	r16,r16,r2
   17f04:	80006e1e 	bne	r16,zero,180c0 <__udivdi3+0x354>
   17f08:	0007883a 	mov	r3,zero
   17f0c:	3c406a36 	bltu	r7,r17,180b8 <__udivdi3+0x34c>
   17f10:	9180692e 	bgeu	r18,r6,180b8 <__udivdi3+0x34c>
   17f14:	0005883a 	mov	r2,zero
   17f18:	dfc00a17 	ldw	ra,40(sp)
   17f1c:	df000917 	ldw	fp,36(sp)
   17f20:	ddc00817 	ldw	r23,32(sp)
   17f24:	dd800717 	ldw	r22,28(sp)
   17f28:	dd400617 	ldw	r21,24(sp)
   17f2c:	dd000517 	ldw	r20,20(sp)
   17f30:	dcc00417 	ldw	r19,16(sp)
   17f34:	dc800317 	ldw	r18,12(sp)
   17f38:	dc400217 	ldw	r17,8(sp)
   17f3c:	dc000117 	ldw	r16,4(sp)
   17f40:	dec00b04 	addi	sp,sp,44
   17f44:	f800283a 	ret
   17f48:	3000041e 	bne	r6,zero,17f5c <__udivdi3+0x1f0>
   17f4c:	01000044 	movi	r4,1
   17f50:	000b883a 	mov	r5,zero
   17f54:	00107840 	call	10784 <__udivsi3>
   17f58:	1021883a 	mov	r16,r2
   17f5c:	00bfffd4 	movui	r2,65535
   17f60:	1400502e 	bgeu	r2,r16,180a4 <__udivdi3+0x338>
   17f64:	00804034 	movhi	r2,256
   17f68:	10bfffc4 	addi	r2,r2,-1
   17f6c:	1400f536 	bltu	r2,r16,18344 <__udivdi3+0x5d8>
   17f70:	00800404 	movi	r2,16
   17f74:	1007883a 	mov	r3,r2
   17f78:	8084d83a 	srl	r2,r16,r2
   17f7c:	010000f4 	movhi	r4,3
   17f80:	21209904 	addi	r4,r4,-32156
   17f84:	2085883a 	add	r2,r4,r2
   17f88:	10800003 	ldbu	r2,0(r2)
   17f8c:	10c7883a 	add	r3,r2,r3
   17f90:	00800804 	movi	r2,32
   17f94:	10c5c83a 	sub	r2,r2,r3
   17f98:	1000a01e 	bne	r2,zero,1821c <__udivdi3+0x4b0>
   17f9c:	8028d43a 	srli	r20,r16,16
   17fa0:	8c23c83a 	sub	r17,r17,r16
   17fa4:	857fffcc 	andi	r21,r16,65535
   17fa8:	00c00044 	movi	r3,1
   17fac:	8809883a 	mov	r4,r17
   17fb0:	a00b883a 	mov	r5,r20
   17fb4:	d8c00015 	stw	r3,0(sp)
   17fb8:	001078c0 	call	1078c <__umodsi3>
   17fbc:	8809883a 	mov	r4,r17
   17fc0:	a00b883a 	mov	r5,r20
   17fc4:	102d883a 	mov	r22,r2
   17fc8:	00107840 	call	10784 <__udivsi3>
   17fcc:	1009883a 	mov	r4,r2
   17fd0:	a80b883a 	mov	r5,r21
   17fd4:	1025883a 	mov	r18,r2
   17fd8:	00107940 	call	10794 <__mulsi3>
   17fdc:	1009883a 	mov	r4,r2
   17fe0:	b00c943a 	slli	r6,r22,16
   17fe4:	9804d43a 	srli	r2,r19,16
   17fe8:	d8c00017 	ldw	r3,0(sp)
   17fec:	308cb03a 	or	r6,r6,r2
   17ff0:	3100052e 	bgeu	r6,r4,18008 <__udivdi3+0x29c>
   17ff4:	340d883a 	add	r6,r6,r16
   17ff8:	90bfffc4 	addi	r2,r18,-1
   17ffc:	34000136 	bltu	r6,r16,18004 <__udivdi3+0x298>
   18000:	3100e836 	bltu	r6,r4,183a4 <__udivdi3+0x638>
   18004:	1025883a 	mov	r18,r2
   18008:	3123c83a 	sub	r17,r6,r4
   1800c:	8809883a 	mov	r4,r17
   18010:	a00b883a 	mov	r5,r20
   18014:	d8c00015 	stw	r3,0(sp)
   18018:	001078c0 	call	1078c <__umodsi3>
   1801c:	102d883a 	mov	r22,r2
   18020:	8809883a 	mov	r4,r17
   18024:	a00b883a 	mov	r5,r20
   18028:	b02c943a 	slli	r22,r22,16
   1802c:	00107840 	call	10784 <__udivsi3>
   18030:	1009883a 	mov	r4,r2
   18034:	a80b883a 	mov	r5,r21
   18038:	9cffffcc 	andi	r19,r19,65535
   1803c:	1023883a 	mov	r17,r2
   18040:	b4e6b03a 	or	r19,r22,r19
   18044:	00107940 	call	10794 <__mulsi3>
   18048:	d8c00017 	ldw	r3,0(sp)
   1804c:	9880052e 	bgeu	r19,r2,18064 <__udivdi3+0x2f8>
   18050:	9c27883a 	add	r19,r19,r16
   18054:	893fffc4 	addi	r4,r17,-1
   18058:	9c00aa36 	bltu	r19,r16,18304 <__udivdi3+0x598>
   1805c:	9880a92e 	bgeu	r19,r2,18304 <__udivdi3+0x598>
   18060:	8c7fff84 	addi	r17,r17,-2
   18064:	9004943a 	slli	r2,r18,16
   18068:	8884b03a 	or	r2,r17,r2
   1806c:	003faa06 	br	17f18 <__udivdi3+0x1ac>
   18070:	0007883a 	mov	r3,zero
   18074:	003fa706 	br	17f14 <__udivdi3+0x1a8>
   18078:	00803fc4 	movi	r2,255
   1807c:	11c0ae36 	bltu	r2,r7,18338 <__udivdi3+0x5cc>
   18080:	0007883a 	mov	r3,zero
   18084:	000b883a 	mov	r5,zero
   18088:	003f9606 	br	17ee4 <__udivdi3+0x178>
   1808c:	00804034 	movhi	r2,256
   18090:	10bfffc4 	addi	r2,r2,-1
   18094:	1180ae36 	bltu	r2,r6,18350 <__udivdi3+0x5e4>
   18098:	00800404 	movi	r2,16
   1809c:	1007883a 	mov	r3,r2
   180a0:	003f4a06 	br	17dcc <__udivdi3+0x60>
   180a4:	00803fc4 	movi	r2,255
   180a8:	1400af36 	bltu	r2,r16,18368 <__udivdi3+0x5fc>
   180ac:	0005883a 	mov	r2,zero
   180b0:	0007883a 	mov	r3,zero
   180b4:	003fb006 	br	17f78 <__udivdi3+0x20c>
   180b8:	00800044 	movi	r2,1
   180bc:	003f9606 	br	17f18 <__udivdi3+0x1ac>
   180c0:	3c0e983a 	sll	r7,r7,r16
   180c4:	3086d83a 	srl	r3,r6,r2
   180c8:	88aed83a 	srl	r23,r17,r2
   180cc:	9084d83a 	srl	r2,r18,r2
   180d0:	38e6b03a 	or	r19,r7,r3
   180d4:	9828d43a 	srli	r20,r19,16
   180d8:	8c22983a 	sll	r17,r17,r16
   180dc:	b809883a 	mov	r4,r23
   180e0:	a00b883a 	mov	r5,r20
   180e4:	342a983a 	sll	r21,r6,r16
   180e8:	88a2b03a 	or	r17,r17,r2
   180ec:	001078c0 	call	1078c <__umodsi3>
   180f0:	b809883a 	mov	r4,r23
   180f4:	a00b883a 	mov	r5,r20
   180f8:	1039883a 	mov	fp,r2
   180fc:	9dbfffcc 	andi	r22,r19,65535
   18100:	00107840 	call	10784 <__udivsi3>
   18104:	1009883a 	mov	r4,r2
   18108:	b00b883a 	mov	r5,r22
   1810c:	102f883a 	mov	r23,r2
   18110:	00107940 	call	10794 <__mulsi3>
   18114:	1009883a 	mov	r4,r2
   18118:	e00e943a 	slli	r7,fp,16
   1811c:	8804d43a 	srli	r2,r17,16
   18120:	388eb03a 	or	r7,r7,r2
   18124:	3900042e 	bgeu	r7,r4,18138 <__udivdi3+0x3cc>
   18128:	3ccf883a 	add	r7,r7,r19
   1812c:	b8bfffc4 	addi	r2,r23,-1
   18130:	3cc0942e 	bgeu	r7,r19,18384 <__udivdi3+0x618>
   18134:	102f883a 	mov	r23,r2
   18138:	3939c83a 	sub	fp,r7,r4
   1813c:	a00b883a 	mov	r5,r20
   18140:	e009883a 	mov	r4,fp
   18144:	001078c0 	call	1078c <__umodsi3>
   18148:	a00b883a 	mov	r5,r20
   1814c:	e009883a 	mov	r4,fp
   18150:	d8800015 	stw	r2,0(sp)
   18154:	00107840 	call	10784 <__udivsi3>
   18158:	1009883a 	mov	r4,r2
   1815c:	b00b883a 	mov	r5,r22
   18160:	1029883a 	mov	r20,r2
   18164:	00107940 	call	10794 <__mulsi3>
   18168:	d8c00017 	ldw	r3,0(sp)
   1816c:	8c7fffcc 	andi	r17,r17,65535
   18170:	1806943a 	slli	r3,r3,16
   18174:	1c46b03a 	or	r3,r3,r17
   18178:	1880042e 	bgeu	r3,r2,1818c <__udivdi3+0x420>
   1817c:	1cc7883a 	add	r3,r3,r19
   18180:	a13fffc4 	addi	r4,r20,-1
   18184:	1cc07b2e 	bgeu	r3,r19,18374 <__udivdi3+0x608>
   18188:	2029883a 	mov	r20,r4
   1818c:	b82e943a 	slli	r23,r23,16
   18190:	a822d43a 	srli	r17,r21,16
   18194:	ad7fffcc 	andi	r21,r21,65535
   18198:	a5e8b03a 	or	r20,r20,r23
   1819c:	a5bfffcc 	andi	r22,r20,65535
   181a0:	b009883a 	mov	r4,r22
   181a4:	a80b883a 	mov	r5,r21
   181a8:	18afc83a 	sub	r23,r3,r2
   181ac:	a026d43a 	srli	r19,r20,16
   181b0:	00107940 	call	10794 <__mulsi3>
   181b4:	b009883a 	mov	r4,r22
   181b8:	880b883a 	mov	r5,r17
   181bc:	1039883a 	mov	fp,r2
   181c0:	00107940 	call	10794 <__mulsi3>
   181c4:	a80b883a 	mov	r5,r21
   181c8:	9809883a 	mov	r4,r19
   181cc:	102d883a 	mov	r22,r2
   181d0:	00107940 	call	10794 <__mulsi3>
   181d4:	9809883a 	mov	r4,r19
   181d8:	880b883a 	mov	r5,r17
   181dc:	102b883a 	mov	r21,r2
   181e0:	00107940 	call	10794 <__mulsi3>
   181e4:	100b883a 	mov	r5,r2
   181e8:	e004d43a 	srli	r2,fp,16
   181ec:	ad89883a 	add	r4,r21,r22
   181f0:	2089883a 	add	r4,r4,r2
   181f4:	2540022e 	bgeu	r4,r21,18200 <__udivdi3+0x494>
   181f8:	00800074 	movhi	r2,1
   181fc:	288b883a 	add	r5,r5,r2
   18200:	2004d43a 	srli	r2,r4,16
   18204:	288b883a 	add	r5,r5,r2
   18208:	b9404536 	bltu	r23,r5,18320 <__udivdi3+0x5b4>
   1820c:	b9403f26 	beq	r23,r5,1830c <__udivdi3+0x5a0>
   18210:	a005883a 	mov	r2,r20
   18214:	0007883a 	mov	r3,zero
   18218:	003f3f06 	br	17f18 <__udivdi3+0x1ac>
   1821c:	80a0983a 	sll	r16,r16,r2
   18220:	88eed83a 	srl	r23,r17,r3
   18224:	90c6d83a 	srl	r3,r18,r3
   18228:	8028d43a 	srli	r20,r16,16
   1822c:	88a2983a 	sll	r17,r17,r2
   18230:	b809883a 	mov	r4,r23
   18234:	a00b883a 	mov	r5,r20
   18238:	88ecb03a 	or	r22,r17,r3
   1823c:	90a6983a 	sll	r19,r18,r2
   18240:	001078c0 	call	1078c <__umodsi3>
   18244:	b809883a 	mov	r4,r23
   18248:	a00b883a 	mov	r5,r20
   1824c:	1023883a 	mov	r17,r2
   18250:	857fffcc 	andi	r21,r16,65535
   18254:	00107840 	call	10784 <__udivsi3>
   18258:	1009883a 	mov	r4,r2
   1825c:	a80b883a 	mov	r5,r21
   18260:	102f883a 	mov	r23,r2
   18264:	00107940 	call	10794 <__mulsi3>
   18268:	1009883a 	mov	r4,r2
   1826c:	880a943a 	slli	r5,r17,16
   18270:	b004d43a 	srli	r2,r22,16
   18274:	288ab03a 	or	r5,r5,r2
   18278:	2900062e 	bgeu	r5,r4,18294 <__udivdi3+0x528>
   1827c:	2c0b883a 	add	r5,r5,r16
   18280:	b8bfffc4 	addi	r2,r23,-1
   18284:	2c004536 	bltu	r5,r16,1839c <__udivdi3+0x630>
   18288:	2900442e 	bgeu	r5,r4,1839c <__udivdi3+0x630>
   1828c:	bdffff84 	addi	r23,r23,-2
   18290:	2c0b883a 	add	r5,r5,r16
   18294:	2925c83a 	sub	r18,r5,r4
   18298:	9009883a 	mov	r4,r18
   1829c:	a00b883a 	mov	r5,r20
   182a0:	001078c0 	call	1078c <__umodsi3>
   182a4:	1023883a 	mov	r17,r2
   182a8:	9009883a 	mov	r4,r18
   182ac:	a00b883a 	mov	r5,r20
   182b0:	8822943a 	slli	r17,r17,16
   182b4:	00107840 	call	10784 <__udivsi3>
   182b8:	1009883a 	mov	r4,r2
   182bc:	a80b883a 	mov	r5,r21
   182c0:	b5bfffcc 	andi	r22,r22,65535
   182c4:	1025883a 	mov	r18,r2
   182c8:	8da2b03a 	or	r17,r17,r22
   182cc:	00107940 	call	10794 <__mulsi3>
   182d0:	8880062e 	bgeu	r17,r2,182ec <__udivdi3+0x580>
   182d4:	8c23883a 	add	r17,r17,r16
   182d8:	90ffffc4 	addi	r3,r18,-1
   182dc:	8c002d36 	bltu	r17,r16,18394 <__udivdi3+0x628>
   182e0:	88802c2e 	bgeu	r17,r2,18394 <__udivdi3+0x628>
   182e4:	94bfff84 	addi	r18,r18,-2
   182e8:	8c23883a 	add	r17,r17,r16
   182ec:	b806943a 	slli	r3,r23,16
   182f0:	88a3c83a 	sub	r17,r17,r2
   182f4:	90c6b03a 	or	r3,r18,r3
   182f8:	003f2c06 	br	17fac <__udivdi3+0x240>
   182fc:	1823883a 	mov	r17,r3
   18300:	003eec06 	br	17eb4 <__udivdi3+0x148>
   18304:	2023883a 	mov	r17,r4
   18308:	003f5606 	br	18064 <__udivdi3+0x2f8>
   1830c:	2008943a 	slli	r4,r4,16
   18310:	9420983a 	sll	r16,r18,r16
   18314:	e73fffcc 	andi	fp,fp,65535
   18318:	2709883a 	add	r4,r4,fp
   1831c:	813fbc2e 	bgeu	r16,r4,18210 <__udivdi3+0x4a4>
   18320:	a0bfffc4 	addi	r2,r20,-1
   18324:	0007883a 	mov	r3,zero
   18328:	003efb06 	br	17f18 <__udivdi3+0x1ac>
   1832c:	00c00604 	movi	r3,24
   18330:	180b883a 	mov	r5,r3
   18334:	003eeb06 	br	17ee4 <__udivdi3+0x178>
   18338:	00c00204 	movi	r3,8
   1833c:	180b883a 	mov	r5,r3
   18340:	003ee806 	br	17ee4 <__udivdi3+0x178>
   18344:	00800604 	movi	r2,24
   18348:	1007883a 	mov	r3,r2
   1834c:	003f0a06 	br	17f78 <__udivdi3+0x20c>
   18350:	00800604 	movi	r2,24
   18354:	1007883a 	mov	r3,r2
   18358:	003e9c06 	br	17dcc <__udivdi3+0x60>
   1835c:	00800204 	movi	r2,8
   18360:	1007883a 	mov	r3,r2
   18364:	003e9906 	br	17dcc <__udivdi3+0x60>
   18368:	00800204 	movi	r2,8
   1836c:	1007883a 	mov	r3,r2
   18370:	003f0106 	br	17f78 <__udivdi3+0x20c>
   18374:	18bf842e 	bgeu	r3,r2,18188 <__udivdi3+0x41c>
   18378:	a53fff84 	addi	r20,r20,-2
   1837c:	1cc7883a 	add	r3,r3,r19
   18380:	003f8206 	br	1818c <__udivdi3+0x420>
   18384:	393f6b2e 	bgeu	r7,r4,18134 <__udivdi3+0x3c8>
   18388:	bdffff84 	addi	r23,r23,-2
   1838c:	3ccf883a 	add	r7,r7,r19
   18390:	003f6906 	br	18138 <__udivdi3+0x3cc>
   18394:	1825883a 	mov	r18,r3
   18398:	003fd406 	br	182ec <__udivdi3+0x580>
   1839c:	102f883a 	mov	r23,r2
   183a0:	003fbc06 	br	18294 <__udivdi3+0x528>
   183a4:	94bfff84 	addi	r18,r18,-2
   183a8:	340d883a 	add	r6,r6,r16
   183ac:	003f1606 	br	18008 <__udivdi3+0x29c>
   183b0:	94bfff84 	addi	r18,r18,-2
   183b4:	1c07883a 	add	r3,r3,r16
   183b8:	003ea906 	br	17e60 <__udivdi3+0xf4>

000183bc <__umoddi3>:
   183bc:	defff304 	addi	sp,sp,-52
   183c0:	dd000715 	stw	r20,28(sp)
   183c4:	dcc00615 	stw	r19,24(sp)
   183c8:	dc800515 	stw	r18,20(sp)
   183cc:	dc400415 	stw	r17,16(sp)
   183d0:	dc000315 	stw	r16,12(sp)
   183d4:	dfc00c15 	stw	ra,48(sp)
   183d8:	df000b15 	stw	fp,44(sp)
   183dc:	ddc00a15 	stw	r23,40(sp)
   183e0:	dd800915 	stw	r22,36(sp)
   183e4:	dd400815 	stw	r21,32(sp)
   183e8:	2025883a 	mov	r18,r4
   183ec:	2823883a 	mov	r17,r5
   183f0:	3021883a 	mov	r16,r6
   183f4:	2027883a 	mov	r19,r4
   183f8:	2829883a 	mov	r20,r5
   183fc:	38003a1e 	bne	r7,zero,184e8 <__umoddi3+0x12c>
   18400:	2980522e 	bgeu	r5,r6,1854c <__umoddi3+0x190>
   18404:	00bfffd4 	movui	r2,65535
   18408:	1180a436 	bltu	r2,r6,1869c <__umoddi3+0x2e0>
   1840c:	00803fc4 	movi	r2,255
   18410:	11816036 	bltu	r2,r6,18994 <__umoddi3+0x5d8>
   18414:	0005883a 	mov	r2,zero
   18418:	0009883a 	mov	r4,zero
   1841c:	3084d83a 	srl	r2,r6,r2
   18420:	00c000f4 	movhi	r3,3
   18424:	18e09904 	addi	r3,r3,-32156
   18428:	05400804 	movi	r21,32
   1842c:	1885883a 	add	r2,r3,r2
   18430:	10800003 	ldbu	r2,0(r2)
   18434:	1109883a 	add	r4,r2,r4
   18438:	a92bc83a 	sub	r21,r21,r4
   1843c:	a8010e26 	beq	r21,zero,18878 <__umoddi3+0x4bc>
   18440:	8d62983a 	sll	r17,r17,r21
   18444:	9108d83a 	srl	r4,r18,r4
   18448:	3560983a 	sll	r16,r6,r21
   1844c:	9566983a 	sll	r19,r18,r21
   18450:	8928b03a 	or	r20,r17,r4
   18454:	8022d43a 	srli	r17,r16,16
   18458:	a009883a 	mov	r4,r20
   1845c:	84bfffcc 	andi	r18,r16,65535
   18460:	880b883a 	mov	r5,r17
   18464:	001078c0 	call	1078c <__umodsi3>
   18468:	a009883a 	mov	r4,r20
   1846c:	880b883a 	mov	r5,r17
   18470:	102d883a 	mov	r22,r2
   18474:	00107840 	call	10784 <__udivsi3>
   18478:	1009883a 	mov	r4,r2
   1847c:	900b883a 	mov	r5,r18
   18480:	00107940 	call	10794 <__mulsi3>
   18484:	1009883a 	mov	r4,r2
   18488:	b006943a 	slli	r3,r22,16
   1848c:	9804d43a 	srli	r2,r19,16
   18490:	1886b03a 	or	r3,r3,r2
   18494:	1900042e 	bgeu	r3,r4,184a8 <__umoddi3+0xec>
   18498:	1c07883a 	add	r3,r3,r16
   1849c:	1c000236 	bltu	r3,r16,184a8 <__umoddi3+0xec>
   184a0:	1900012e 	bgeu	r3,r4,184a8 <__umoddi3+0xec>
   184a4:	1c07883a 	add	r3,r3,r16
   184a8:	1929c83a 	sub	r20,r3,r4
   184ac:	a009883a 	mov	r4,r20
   184b0:	880b883a 	mov	r5,r17
   184b4:	001078c0 	call	1078c <__umodsi3>
   184b8:	102d883a 	mov	r22,r2
   184bc:	a009883a 	mov	r4,r20
   184c0:	880b883a 	mov	r5,r17
   184c4:	b02c943a 	slli	r22,r22,16
   184c8:	00107840 	call	10784 <__udivsi3>
   184cc:	1009883a 	mov	r4,r2
   184d0:	900b883a 	mov	r5,r18
   184d4:	9cffffcc 	andi	r19,r19,65535
   184d8:	00107940 	call	10794 <__mulsi3>
   184dc:	b4e6b03a 	or	r19,r22,r19
   184e0:	9880572e 	bgeu	r19,r2,18640 <__umoddi3+0x284>
   184e4:	00005206 	br	18630 <__umoddi3+0x274>
   184e8:	29c05936 	bltu	r5,r7,18650 <__umoddi3+0x294>
   184ec:	00bfffd4 	movui	r2,65535
   184f0:	11c0652e 	bgeu	r2,r7,18688 <__umoddi3+0x2cc>
   184f4:	00804034 	movhi	r2,256
   184f8:	10bfffc4 	addi	r2,r2,-1
   184fc:	11c11936 	bltu	r2,r7,18964 <__umoddi3+0x5a8>
   18500:	00c00404 	movi	r3,16
   18504:	1827883a 	mov	r19,r3
   18508:	38c6d83a 	srl	r3,r7,r3
   1850c:	010000f4 	movhi	r4,3
   18510:	21209904 	addi	r4,r4,-32156
   18514:	04000804 	movi	r16,32
   18518:	20c7883a 	add	r3,r4,r3
   1851c:	18800003 	ldbu	r2,0(r3)
   18520:	14e7883a 	add	r19,r2,r19
   18524:	84e1c83a 	sub	r16,r16,r19
   18528:	8000671e 	bne	r16,zero,186c8 <__umoddi3+0x30c>
   1852c:	3c400136 	bltu	r7,r17,18534 <__umoddi3+0x178>
   18530:	91812536 	bltu	r18,r6,189c8 <__umoddi3+0x60c>
   18534:	9185c83a 	sub	r2,r18,r6
   18538:	89e3c83a 	sub	r17,r17,r7
   1853c:	90a5803a 	cmpltu	r18,r18,r2
   18540:	8ca9c83a 	sub	r20,r17,r18
   18544:	a007883a 	mov	r3,r20
   18548:	00004306 	br	18658 <__umoddi3+0x29c>
   1854c:	3000041e 	bne	r6,zero,18560 <__umoddi3+0x1a4>
   18550:	01000044 	movi	r4,1
   18554:	000b883a 	mov	r5,zero
   18558:	00107840 	call	10784 <__udivsi3>
   1855c:	1021883a 	mov	r16,r2
   18560:	00bfffd4 	movui	r2,65535
   18564:	1400532e 	bgeu	r2,r16,186b4 <__umoddi3+0x2f8>
   18568:	00804034 	movhi	r2,256
   1856c:	10bfffc4 	addi	r2,r2,-1
   18570:	14010536 	bltu	r2,r16,18988 <__umoddi3+0x5cc>
   18574:	00800404 	movi	r2,16
   18578:	1007883a 	mov	r3,r2
   1857c:	8084d83a 	srl	r2,r16,r2
   18580:	010000f4 	movhi	r4,3
   18584:	21209904 	addi	r4,r4,-32156
   18588:	05400804 	movi	r21,32
   1858c:	2085883a 	add	r2,r4,r2
   18590:	10800003 	ldbu	r2,0(r2)
   18594:	10c7883a 	add	r3,r2,r3
   18598:	a8ebc83a 	sub	r21,r21,r3
   1859c:	a800b81e 	bne	r21,zero,18880 <__umoddi3+0x4c4>
   185a0:	8028d43a 	srli	r20,r16,16
   185a4:	8c23c83a 	sub	r17,r17,r16
   185a8:	85bfffcc 	andi	r22,r16,65535
   185ac:	8809883a 	mov	r4,r17
   185b0:	a00b883a 	mov	r5,r20
   185b4:	001078c0 	call	1078c <__umodsi3>
   185b8:	8809883a 	mov	r4,r17
   185bc:	a00b883a 	mov	r5,r20
   185c0:	1025883a 	mov	r18,r2
   185c4:	00107840 	call	10784 <__udivsi3>
   185c8:	1009883a 	mov	r4,r2
   185cc:	b00b883a 	mov	r5,r22
   185d0:	00107940 	call	10794 <__mulsi3>
   185d4:	1009883a 	mov	r4,r2
   185d8:	9006943a 	slli	r3,r18,16
   185dc:	9804d43a 	srli	r2,r19,16
   185e0:	1886b03a 	or	r3,r3,r2
   185e4:	1900032e 	bgeu	r3,r4,185f4 <__umoddi3+0x238>
   185e8:	1c07883a 	add	r3,r3,r16
   185ec:	1c000136 	bltu	r3,r16,185f4 <__umoddi3+0x238>
   185f0:	1900f336 	bltu	r3,r4,189c0 <__umoddi3+0x604>
   185f4:	1923c83a 	sub	r17,r3,r4
   185f8:	8809883a 	mov	r4,r17
   185fc:	a00b883a 	mov	r5,r20
   18600:	001078c0 	call	1078c <__umodsi3>
   18604:	102f883a 	mov	r23,r2
   18608:	8809883a 	mov	r4,r17
   1860c:	a00b883a 	mov	r5,r20
   18610:	b82e943a 	slli	r23,r23,16
   18614:	00107840 	call	10784 <__udivsi3>
   18618:	1009883a 	mov	r4,r2
   1861c:	b00b883a 	mov	r5,r22
   18620:	9cffffcc 	andi	r19,r19,65535
   18624:	00107940 	call	10794 <__mulsi3>
   18628:	bce6b03a 	or	r19,r23,r19
   1862c:	9880042e 	bgeu	r19,r2,18640 <__umoddi3+0x284>
   18630:	9c27883a 	add	r19,r19,r16
   18634:	9c000236 	bltu	r19,r16,18640 <__umoddi3+0x284>
   18638:	9880012e 	bgeu	r19,r2,18640 <__umoddi3+0x284>
   1863c:	9c27883a 	add	r19,r19,r16
   18640:	9885c83a 	sub	r2,r19,r2
   18644:	1544d83a 	srl	r2,r2,r21
   18648:	0007883a 	mov	r3,zero
   1864c:	00000206 	br	18658 <__umoddi3+0x29c>
   18650:	2005883a 	mov	r2,r4
   18654:	2807883a 	mov	r3,r5
   18658:	dfc00c17 	ldw	ra,48(sp)
   1865c:	df000b17 	ldw	fp,44(sp)
   18660:	ddc00a17 	ldw	r23,40(sp)
   18664:	dd800917 	ldw	r22,36(sp)
   18668:	dd400817 	ldw	r21,32(sp)
   1866c:	dd000717 	ldw	r20,28(sp)
   18670:	dcc00617 	ldw	r19,24(sp)
   18674:	dc800517 	ldw	r18,20(sp)
   18678:	dc400417 	ldw	r17,16(sp)
   1867c:	dc000317 	ldw	r16,12(sp)
   18680:	dec00d04 	addi	sp,sp,52
   18684:	f800283a 	ret
   18688:	00803fc4 	movi	r2,255
   1868c:	11c0b236 	bltu	r2,r7,18958 <__umoddi3+0x59c>
   18690:	0007883a 	mov	r3,zero
   18694:	0027883a 	mov	r19,zero
   18698:	003f9b06 	br	18508 <__umoddi3+0x14c>
   1869c:	00804034 	movhi	r2,256
   186a0:	10bfffc4 	addi	r2,r2,-1
   186a4:	1180b236 	bltu	r2,r6,18970 <__umoddi3+0x5b4>
   186a8:	00800404 	movi	r2,16
   186ac:	1009883a 	mov	r4,r2
   186b0:	003f5a06 	br	1841c <__umoddi3+0x60>
   186b4:	00803fc4 	movi	r2,255
   186b8:	1400b036 	bltu	r2,r16,1897c <__umoddi3+0x5c0>
   186bc:	0005883a 	mov	r2,zero
   186c0:	0007883a 	mov	r3,zero
   186c4:	003fad06 	br	1857c <__umoddi3+0x1c0>
   186c8:	34c4d83a 	srl	r2,r6,r19
   186cc:	3c0e983a 	sll	r7,r7,r16
   186d0:	8cf8d83a 	srl	fp,r17,r19
   186d4:	8c22983a 	sll	r17,r17,r16
   186d8:	38a8b03a 	or	r20,r7,r2
   186dc:	a02ad43a 	srli	r21,r20,16
   186e0:	94c4d83a 	srl	r2,r18,r19
   186e4:	e009883a 	mov	r4,fp
   186e8:	a80b883a 	mov	r5,r21
   186ec:	342c983a 	sll	r22,r6,r16
   186f0:	88a2b03a 	or	r17,r17,r2
   186f4:	001078c0 	call	1078c <__umodsi3>
   186f8:	e009883a 	mov	r4,fp
   186fc:	a80b883a 	mov	r5,r21
   18700:	a5ffffcc 	andi	r23,r20,65535
   18704:	d8800215 	stw	r2,8(sp)
   18708:	00107840 	call	10784 <__udivsi3>
   1870c:	1009883a 	mov	r4,r2
   18710:	b80b883a 	mov	r5,r23
   18714:	1039883a 	mov	fp,r2
   18718:	00107940 	call	10794 <__mulsi3>
   1871c:	d8c00217 	ldw	r3,8(sp)
   18720:	1009883a 	mov	r4,r2
   18724:	8804d43a 	srli	r2,r17,16
   18728:	1806943a 	slli	r3,r3,16
   1872c:	9424983a 	sll	r18,r18,r16
   18730:	1886b03a 	or	r3,r3,r2
   18734:	1900042e 	bgeu	r3,r4,18748 <__umoddi3+0x38c>
   18738:	1d07883a 	add	r3,r3,r20
   1873c:	e0bfffc4 	addi	r2,fp,-1
   18740:	1d009b2e 	bgeu	r3,r20,189b0 <__umoddi3+0x5f4>
   18744:	1039883a 	mov	fp,r2
   18748:	1907c83a 	sub	r3,r3,r4
   1874c:	1809883a 	mov	r4,r3
   18750:	a80b883a 	mov	r5,r21
   18754:	d8c00215 	stw	r3,8(sp)
   18758:	001078c0 	call	1078c <__umodsi3>
   1875c:	d8c00217 	ldw	r3,8(sp)
   18760:	a80b883a 	mov	r5,r21
   18764:	d8800015 	stw	r2,0(sp)
   18768:	1809883a 	mov	r4,r3
   1876c:	00107840 	call	10784 <__udivsi3>
   18770:	1009883a 	mov	r4,r2
   18774:	b80b883a 	mov	r5,r23
   18778:	102b883a 	mov	r21,r2
   1877c:	00107940 	call	10794 <__mulsi3>
   18780:	d9c00017 	ldw	r7,0(sp)
   18784:	8c7fffcc 	andi	r17,r17,65535
   18788:	380e943a 	slli	r7,r7,16
   1878c:	3c4eb03a 	or	r7,r7,r17
   18790:	3880042e 	bgeu	r7,r2,187a4 <__umoddi3+0x3e8>
   18794:	3d0f883a 	add	r7,r7,r20
   18798:	a8ffffc4 	addi	r3,r21,-1
   1879c:	3d00802e 	bgeu	r7,r20,189a0 <__umoddi3+0x5e4>
   187a0:	182b883a 	mov	r21,r3
   187a4:	e038943a 	slli	fp,fp,16
   187a8:	b010d43a 	srli	r8,r22,16
   187ac:	b1bfffcc 	andi	r6,r22,65535
   187b0:	af2ab03a 	or	r21,r21,fp
   187b4:	a82ed43a 	srli	r23,r21,16
   187b8:	ad7fffcc 	andi	r21,r21,65535
   187bc:	300b883a 	mov	r5,r6
   187c0:	a809883a 	mov	r4,r21
   187c4:	38a3c83a 	sub	r17,r7,r2
   187c8:	d9800115 	stw	r6,4(sp)
   187cc:	da000015 	stw	r8,0(sp)
   187d0:	00107940 	call	10794 <__mulsi3>
   187d4:	da000017 	ldw	r8,0(sp)
   187d8:	a809883a 	mov	r4,r21
   187dc:	1039883a 	mov	fp,r2
   187e0:	400b883a 	mov	r5,r8
   187e4:	da000215 	stw	r8,8(sp)
   187e8:	00107940 	call	10794 <__mulsi3>
   187ec:	d9800117 	ldw	r6,4(sp)
   187f0:	b809883a 	mov	r4,r23
   187f4:	d8800015 	stw	r2,0(sp)
   187f8:	300b883a 	mov	r5,r6
   187fc:	00107940 	call	10794 <__mulsi3>
   18800:	d8c00217 	ldw	r3,8(sp)
   18804:	b809883a 	mov	r4,r23
   18808:	102b883a 	mov	r21,r2
   1880c:	180b883a 	mov	r5,r3
   18810:	00107940 	call	10794 <__mulsi3>
   18814:	d9c00017 	ldw	r7,0(sp)
   18818:	1007883a 	mov	r3,r2
   1881c:	e004d43a 	srli	r2,fp,16
   18820:	a9c9883a 	add	r4,r21,r7
   18824:	2089883a 	add	r4,r4,r2
   18828:	2540022e 	bgeu	r4,r21,18834 <__umoddi3+0x478>
   1882c:	00800074 	movhi	r2,1
   18830:	1887883a 	add	r3,r3,r2
   18834:	2004d43a 	srli	r2,r4,16
   18838:	2008943a 	slli	r4,r4,16
   1883c:	e73fffcc 	andi	fp,fp,65535
   18840:	1887883a 	add	r3,r3,r2
   18844:	2709883a 	add	r4,r4,fp
   18848:	88c03d36 	bltu	r17,r3,18940 <__umoddi3+0x584>
   1884c:	88c06126 	beq	r17,r3,189d4 <__umoddi3+0x618>
   18850:	88c7c83a 	sub	r3,r17,r3
   18854:	202d883a 	mov	r22,r4
   18858:	95adc83a 	sub	r22,r18,r22
   1885c:	95a5803a 	cmpltu	r18,r18,r22
   18860:	1c87c83a 	sub	r3,r3,r18
   18864:	1cc4983a 	sll	r2,r3,r19
   18868:	b42cd83a 	srl	r22,r22,r16
   1886c:	1c06d83a 	srl	r3,r3,r16
   18870:	1584b03a 	or	r2,r2,r22
   18874:	003f7806 	br	18658 <__umoddi3+0x29c>
   18878:	002b883a 	mov	r21,zero
   1887c:	003ef506 	br	18454 <__umoddi3+0x98>
   18880:	8560983a 	sll	r16,r16,r21
   18884:	88e6d83a 	srl	r19,r17,r3
   18888:	90c6d83a 	srl	r3,r18,r3
   1888c:	8028d43a 	srli	r20,r16,16
   18890:	8d62983a 	sll	r17,r17,r21
   18894:	9809883a 	mov	r4,r19
   18898:	a00b883a 	mov	r5,r20
   1889c:	88eeb03a 	or	r23,r17,r3
   188a0:	001078c0 	call	1078c <__umodsi3>
   188a4:	9809883a 	mov	r4,r19
   188a8:	a00b883a 	mov	r5,r20
   188ac:	1023883a 	mov	r17,r2
   188b0:	85bfffcc 	andi	r22,r16,65535
   188b4:	00107840 	call	10784 <__udivsi3>
   188b8:	1009883a 	mov	r4,r2
   188bc:	b00b883a 	mov	r5,r22
   188c0:	00107940 	call	10794 <__mulsi3>
   188c4:	1007883a 	mov	r3,r2
   188c8:	8808943a 	slli	r4,r17,16
   188cc:	b804d43a 	srli	r2,r23,16
   188d0:	9566983a 	sll	r19,r18,r21
   188d4:	2088b03a 	or	r4,r4,r2
   188d8:	20c0042e 	bgeu	r4,r3,188ec <__umoddi3+0x530>
   188dc:	2409883a 	add	r4,r4,r16
   188e0:	24000236 	bltu	r4,r16,188ec <__umoddi3+0x530>
   188e4:	20c0012e 	bgeu	r4,r3,188ec <__umoddi3+0x530>
   188e8:	2409883a 	add	r4,r4,r16
   188ec:	20e5c83a 	sub	r18,r4,r3
   188f0:	9009883a 	mov	r4,r18
   188f4:	a00b883a 	mov	r5,r20
   188f8:	001078c0 	call	1078c <__umodsi3>
   188fc:	1023883a 	mov	r17,r2
   18900:	9009883a 	mov	r4,r18
   18904:	a00b883a 	mov	r5,r20
   18908:	8822943a 	slli	r17,r17,16
   1890c:	00107840 	call	10784 <__udivsi3>
   18910:	1009883a 	mov	r4,r2
   18914:	b00b883a 	mov	r5,r22
   18918:	bdffffcc 	andi	r23,r23,65535
   1891c:	00107940 	call	10794 <__mulsi3>
   18920:	8de2b03a 	or	r17,r17,r23
   18924:	8880042e 	bgeu	r17,r2,18938 <__umoddi3+0x57c>
   18928:	8c23883a 	add	r17,r17,r16
   1892c:	8c000236 	bltu	r17,r16,18938 <__umoddi3+0x57c>
   18930:	8880012e 	bgeu	r17,r2,18938 <__umoddi3+0x57c>
   18934:	8c23883a 	add	r17,r17,r16
   18938:	88a3c83a 	sub	r17,r17,r2
   1893c:	003f1b06 	br	185ac <__umoddi3+0x1f0>
   18940:	25adc83a 	sub	r22,r4,r22
   18944:	1d07c83a 	sub	r3,r3,r20
   18948:	2589803a 	cmpltu	r4,r4,r22
   1894c:	1907c83a 	sub	r3,r3,r4
   18950:	88c7c83a 	sub	r3,r17,r3
   18954:	003fc006 	br	18858 <__umoddi3+0x49c>
   18958:	00c00204 	movi	r3,8
   1895c:	1827883a 	mov	r19,r3
   18960:	003ee906 	br	18508 <__umoddi3+0x14c>
   18964:	00c00604 	movi	r3,24
   18968:	1827883a 	mov	r19,r3
   1896c:	003ee606 	br	18508 <__umoddi3+0x14c>
   18970:	00800604 	movi	r2,24
   18974:	1009883a 	mov	r4,r2
   18978:	003ea806 	br	1841c <__umoddi3+0x60>
   1897c:	00800204 	movi	r2,8
   18980:	1007883a 	mov	r3,r2
   18984:	003efd06 	br	1857c <__umoddi3+0x1c0>
   18988:	00800604 	movi	r2,24
   1898c:	1007883a 	mov	r3,r2
   18990:	003efa06 	br	1857c <__umoddi3+0x1c0>
   18994:	00800204 	movi	r2,8
   18998:	1009883a 	mov	r4,r2
   1899c:	003e9f06 	br	1841c <__umoddi3+0x60>
   189a0:	38bf7f2e 	bgeu	r7,r2,187a0 <__umoddi3+0x3e4>
   189a4:	ad7fff84 	addi	r21,r21,-2
   189a8:	3d0f883a 	add	r7,r7,r20
   189ac:	003f7d06 	br	187a4 <__umoddi3+0x3e8>
   189b0:	193f642e 	bgeu	r3,r4,18744 <__umoddi3+0x388>
   189b4:	e73fff84 	addi	fp,fp,-2
   189b8:	1d07883a 	add	r3,r3,r20
   189bc:	003f6206 	br	18748 <__umoddi3+0x38c>
   189c0:	1c07883a 	add	r3,r3,r16
   189c4:	003f0b06 	br	185f4 <__umoddi3+0x238>
   189c8:	9005883a 	mov	r2,r18
   189cc:	a007883a 	mov	r3,r20
   189d0:	003f2106 	br	18658 <__umoddi3+0x29c>
   189d4:	913fda36 	bltu	r18,r4,18940 <__umoddi3+0x584>
   189d8:	202d883a 	mov	r22,r4
   189dc:	0007883a 	mov	r3,zero
   189e0:	003f9d06 	br	18858 <__umoddi3+0x49c>

000189e4 <_fpadd_parts>:
   189e4:	2005883a 	mov	r2,r4
   189e8:	21000017 	ldw	r4,0(r4)
   189ec:	01c00044 	movi	r7,1
   189f0:	3900622e 	bgeu	r7,r4,18b7c <_fpadd_parts+0x198>
   189f4:	28c00017 	ldw	r3,0(r5)
   189f8:	38c05f2e 	bgeu	r7,r3,18b78 <_fpadd_parts+0x194>
   189fc:	01c00104 	movi	r7,4
   18a00:	21c0c626 	beq	r4,r7,18d1c <_fpadd_parts+0x338>
   18a04:	19c05c26 	beq	r3,r7,18b78 <_fpadd_parts+0x194>
   18a08:	01c00084 	movi	r7,2
   18a0c:	19c06b26 	beq	r3,r7,18bbc <_fpadd_parts+0x1d8>
   18a10:	21c05926 	beq	r4,r7,18b78 <_fpadd_parts+0x194>
   18a14:	11c00217 	ldw	r7,8(r2)
   18a18:	2ac00217 	ldw	r11,8(r5)
   18a1c:	13000317 	ldw	r12,12(r2)
   18a20:	13400417 	ldw	r13,16(r2)
   18a24:	3ac9c83a 	sub	r4,r7,r11
   18a28:	2a000317 	ldw	r8,12(r5)
   18a2c:	2a400417 	ldw	r9,16(r5)
   18a30:	2015883a 	mov	r10,r4
   18a34:	20007516 	blt	r4,zero,18c0c <_fpadd_parts+0x228>
   18a38:	00c00fc4 	movi	r3,63
   18a3c:	1a805016 	blt	r3,r10,18b80 <_fpadd_parts+0x19c>
   18a40:	0100870e 	bge	zero,r4,18c60 <_fpadd_parts+0x27c>
   18a44:	50fff804 	addi	r3,r10,-32
   18a48:	18009916 	blt	r3,zero,18cb0 <_fpadd_parts+0x2cc>
   18a4c:	48d6d83a 	srl	r11,r9,r3
   18a50:	001d883a 	mov	r14,zero
   18a54:	18009e16 	blt	r3,zero,18cd0 <_fpadd_parts+0x2ec>
   18a58:	01000044 	movi	r4,1
   18a5c:	20c6983a 	sll	r3,r4,r3
   18a60:	0015883a 	mov	r10,zero
   18a64:	513fffc4 	addi	r4,r10,-1
   18a68:	2295403a 	cmpgeu	r10,r4,r10
   18a6c:	1a87c83a 	sub	r3,r3,r10
   18a70:	1a52703a 	and	r9,r3,r9
   18a74:	2210703a 	and	r8,r4,r8
   18a78:	4250b03a 	or	r8,r8,r9
   18a7c:	4010c03a 	cmpne	r8,r8,zero
   18a80:	42d0b03a 	or	r8,r8,r11
   18a84:	7013883a 	mov	r9,r14
   18a88:	11000117 	ldw	r4,4(r2)
   18a8c:	28800117 	ldw	r2,4(r5)
   18a90:	20804126 	beq	r4,r2,18b98 <_fpadd_parts+0x1b4>
   18a94:	20006326 	beq	r4,zero,18c24 <_fpadd_parts+0x240>
   18a98:	4305c83a 	sub	r2,r8,r12
   18a9c:	4091803a 	cmpltu	r8,r8,r2
   18aa0:	4b47c83a 	sub	r3,r9,r13
   18aa4:	1a07c83a 	sub	r3,r3,r8
   18aa8:	18006316 	blt	r3,zero,18c38 <_fpadd_parts+0x254>
   18aac:	30000115 	stw	zero,4(r6)
   18ab0:	31c00215 	stw	r7,8(r6)
   18ab4:	30800315 	stw	r2,12(r6)
   18ab8:	30c00415 	stw	r3,16(r6)
   18abc:	11ffffc4 	addi	r7,r2,-1
   18ac0:	388b403a 	cmpgeu	r5,r7,r2
   18ac4:	194bc83a 	sub	r5,r3,r5
   18ac8:	01040034 	movhi	r4,4096
   18acc:	213fffc4 	addi	r4,r4,-1
   18ad0:	21401736 	bltu	r4,r5,18b30 <_fpadd_parts+0x14c>
   18ad4:	29008226 	beq	r5,r4,18ce0 <_fpadd_parts+0x2fc>
   18ad8:	31400217 	ldw	r5,8(r6)
   18adc:	02840034 	movhi	r10,4096
   18ae0:	52bfffc4 	addi	r10,r10,-1
   18ae4:	033fff84 	movi	r12,-2
   18ae8:	297fffc4 	addi	r5,r5,-1
   18aec:	00000106 	br	18af4 <_fpadd_parts+0x110>
   18af0:	3a804a26 	beq	r7,r10,18c1c <_fpadd_parts+0x238>
   18af4:	1089883a 	add	r4,r2,r2
   18af8:	2091803a 	cmpltu	r8,r4,r2
   18afc:	18c7883a 	add	r3,r3,r3
   18b00:	227fffc4 	addi	r9,r4,-1
   18b04:	40d1883a 	add	r8,r8,r3
   18b08:	490f403a 	cmpgeu	r7,r9,r4
   18b0c:	41cfc83a 	sub	r7,r8,r7
   18b10:	2817883a 	mov	r11,r5
   18b14:	2005883a 	mov	r2,r4
   18b18:	4007883a 	mov	r3,r8
   18b1c:	297fffc4 	addi	r5,r5,-1
   18b20:	51fff32e 	bgeu	r10,r7,18af0 <_fpadd_parts+0x10c>
   18b24:	31000315 	stw	r4,12(r6)
   18b28:	32000415 	stw	r8,16(r6)
   18b2c:	32c00215 	stw	r11,8(r6)
   18b30:	010000c4 	movi	r4,3
   18b34:	31000015 	stw	r4,0(r6)
   18b38:	01080034 	movhi	r4,8192
   18b3c:	213fffc4 	addi	r4,r4,-1
   18b40:	20c00b2e 	bgeu	r4,r3,18b70 <_fpadd_parts+0x18c>
   18b44:	180e97fa 	slli	r7,r3,31
   18b48:	1008d07a 	srli	r4,r2,1
   18b4c:	31400217 	ldw	r5,8(r6)
   18b50:	1806d07a 	srli	r3,r3,1
   18b54:	1080004c 	andi	r2,r2,1
   18b58:	3908b03a 	or	r4,r7,r4
   18b5c:	1108b03a 	or	r4,r2,r4
   18b60:	29400044 	addi	r5,r5,1
   18b64:	31000315 	stw	r4,12(r6)
   18b68:	30c00415 	stw	r3,16(r6)
   18b6c:	31400215 	stw	r5,8(r6)
   18b70:	3005883a 	mov	r2,r6
   18b74:	f800283a 	ret
   18b78:	2805883a 	mov	r2,r5
   18b7c:	f800283a 	ret
   18b80:	59c01e0e 	bge	r11,r7,18bfc <_fpadd_parts+0x218>
   18b84:	11000117 	ldw	r4,4(r2)
   18b88:	28800117 	ldw	r2,4(r5)
   18b8c:	0011883a 	mov	r8,zero
   18b90:	0013883a 	mov	r9,zero
   18b94:	20bfbf1e 	bne	r4,r2,18a94 <_fpadd_parts+0xb0>
   18b98:	4305883a 	add	r2,r8,r12
   18b9c:	1207803a 	cmpltu	r3,r2,r8
   18ba0:	4b53883a 	add	r9,r9,r13
   18ba4:	1a47883a 	add	r3,r3,r9
   18ba8:	31000115 	stw	r4,4(r6)
   18bac:	31c00215 	stw	r7,8(r6)
   18bb0:	30800315 	stw	r2,12(r6)
   18bb4:	30c00415 	stw	r3,16(r6)
   18bb8:	003fdd06 	br	18b30 <_fpadd_parts+0x14c>
   18bbc:	20ffef1e 	bne	r4,r3,18b7c <_fpadd_parts+0x198>
   18bc0:	31000015 	stw	r4,0(r6)
   18bc4:	10c00117 	ldw	r3,4(r2)
   18bc8:	30c00115 	stw	r3,4(r6)
   18bcc:	10c00217 	ldw	r3,8(r2)
   18bd0:	11000117 	ldw	r4,4(r2)
   18bd4:	29400117 	ldw	r5,4(r5)
   18bd8:	30c00215 	stw	r3,8(r6)
   18bdc:	10c00317 	ldw	r3,12(r2)
   18be0:	2908703a 	and	r4,r5,r4
   18be4:	30c00315 	stw	r3,12(r6)
   18be8:	10c00417 	ldw	r3,16(r2)
   18bec:	31000115 	stw	r4,4(r6)
   18bf0:	3005883a 	mov	r2,r6
   18bf4:	30c00415 	stw	r3,16(r6)
   18bf8:	f800283a 	ret
   18bfc:	580f883a 	mov	r7,r11
   18c00:	0019883a 	mov	r12,zero
   18c04:	001b883a 	mov	r13,zero
   18c08:	003f9f06 	br	18a88 <_fpadd_parts+0xa4>
   18c0c:	0115c83a 	sub	r10,zero,r4
   18c10:	00c00fc4 	movi	r3,63
   18c14:	1abfda16 	blt	r3,r10,18b80 <_fpadd_parts+0x19c>
   18c18:	003f8906 	br	18a40 <_fpadd_parts+0x5c>
   18c1c:	627fb52e 	bgeu	r12,r9,18af4 <_fpadd_parts+0x110>
   18c20:	003fc006 	br	18b24 <_fpadd_parts+0x140>
   18c24:	6205c83a 	sub	r2,r12,r8
   18c28:	6099803a 	cmpltu	r12,r12,r2
   18c2c:	6a47c83a 	sub	r3,r13,r9
   18c30:	1b07c83a 	sub	r3,r3,r12
   18c34:	183f9d0e 	bge	r3,zero,18aac <_fpadd_parts+0xc8>
   18c38:	0085c83a 	sub	r2,zero,r2
   18c3c:	1008c03a 	cmpne	r4,r2,zero
   18c40:	00c7c83a 	sub	r3,zero,r3
   18c44:	1907c83a 	sub	r3,r3,r4
   18c48:	01000044 	movi	r4,1
   18c4c:	31000115 	stw	r4,4(r6)
   18c50:	31c00215 	stw	r7,8(r6)
   18c54:	30800315 	stw	r2,12(r6)
   18c58:	30c00415 	stw	r3,16(r6)
   18c5c:	003f9706 	br	18abc <_fpadd_parts+0xd8>
   18c60:	203f8926 	beq	r4,zero,18a88 <_fpadd_parts+0xa4>
   18c64:	50fff804 	addi	r3,r10,-32
   18c68:	3a8f883a 	add	r7,r7,r10
   18c6c:	18002316 	blt	r3,zero,18cfc <_fpadd_parts+0x318>
   18c70:	68d6d83a 	srl	r11,r13,r3
   18c74:	001d883a 	mov	r14,zero
   18c78:	18001c16 	blt	r3,zero,18cec <_fpadd_parts+0x308>
   18c7c:	01000044 	movi	r4,1
   18c80:	20c6983a 	sll	r3,r4,r3
   18c84:	0015883a 	mov	r10,zero
   18c88:	513fffc4 	addi	r4,r10,-1
   18c8c:	2295403a 	cmpgeu	r10,r4,r10
   18c90:	1a87c83a 	sub	r3,r3,r10
   18c94:	1b5a703a 	and	r13,r3,r13
   18c98:	2318703a 	and	r12,r4,r12
   18c9c:	6358b03a 	or	r12,r12,r13
   18ca0:	6018c03a 	cmpne	r12,r12,zero
   18ca4:	62d8b03a 	or	r12,r12,r11
   18ca8:	701b883a 	mov	r13,r14
   18cac:	003f7606 	br	18a88 <_fpadd_parts+0xa4>
   18cb0:	4808907a 	slli	r4,r9,1
   18cb4:	02c007c4 	movi	r11,31
   18cb8:	5a97c83a 	sub	r11,r11,r10
   18cbc:	22c8983a 	sll	r4,r4,r11
   18cc0:	4296d83a 	srl	r11,r8,r10
   18cc4:	4a9cd83a 	srl	r14,r9,r10
   18cc8:	22d6b03a 	or	r11,r4,r11
   18ccc:	003f6106 	br	18a54 <_fpadd_parts+0x70>
   18cd0:	00c00044 	movi	r3,1
   18cd4:	1a94983a 	sll	r10,r3,r10
   18cd8:	0007883a 	mov	r3,zero
   18cdc:	003f6106 	br	18a64 <_fpadd_parts+0x80>
   18ce0:	013fff84 	movi	r4,-2
   18ce4:	21ff7c2e 	bgeu	r4,r7,18ad8 <_fpadd_parts+0xf4>
   18ce8:	003f9106 	br	18b30 <_fpadd_parts+0x14c>
   18cec:	00c00044 	movi	r3,1
   18cf0:	1a94983a 	sll	r10,r3,r10
   18cf4:	0007883a 	mov	r3,zero
   18cf8:	003fe306 	br	18c88 <_fpadd_parts+0x2a4>
   18cfc:	6816907a 	slli	r11,r13,1
   18d00:	010007c4 	movi	r4,31
   18d04:	2289c83a 	sub	r4,r4,r10
   18d08:	5908983a 	sll	r4,r11,r4
   18d0c:	6296d83a 	srl	r11,r12,r10
   18d10:	6a9cd83a 	srl	r14,r13,r10
   18d14:	22d6b03a 	or	r11,r4,r11
   18d18:	003fd706 	br	18c78 <_fpadd_parts+0x294>
   18d1c:	193f971e 	bne	r3,r4,18b7c <_fpadd_parts+0x198>
   18d20:	11000117 	ldw	r4,4(r2)
   18d24:	28c00117 	ldw	r3,4(r5)
   18d28:	20ff9426 	beq	r4,r3,18b7c <_fpadd_parts+0x198>
   18d2c:	008000f4 	movhi	r2,3
   18d30:	10a09404 	addi	r2,r2,-32176
   18d34:	f800283a 	ret

00018d38 <__adddf3>:
   18d38:	deffec04 	addi	sp,sp,-80
   18d3c:	d9001115 	stw	r4,68(sp)
   18d40:	d9401215 	stw	r5,72(sp)
   18d44:	d9001104 	addi	r4,sp,68
   18d48:	d9400a04 	addi	r5,sp,40
   18d4c:	dfc01315 	stw	ra,76(sp)
   18d50:	d9c01015 	stw	r7,64(sp)
   18d54:	d9800f15 	stw	r6,60(sp)
   18d58:	0019b040 	call	19b04 <__unpack_d>
   18d5c:	d9000f04 	addi	r4,sp,60
   18d60:	d9400504 	addi	r5,sp,20
   18d64:	0019b040 	call	19b04 <__unpack_d>
   18d68:	d9000a04 	addi	r4,sp,40
   18d6c:	d9400504 	addi	r5,sp,20
   18d70:	d80d883a 	mov	r6,sp
   18d74:	00189e40 	call	189e4 <_fpadd_parts>
   18d78:	1009883a 	mov	r4,r2
   18d7c:	00198e00 	call	198e0 <__pack_d>
   18d80:	dfc01317 	ldw	ra,76(sp)
   18d84:	dec01404 	addi	sp,sp,80
   18d88:	f800283a 	ret

00018d8c <__subdf3>:
   18d8c:	deffec04 	addi	sp,sp,-80
   18d90:	d9001115 	stw	r4,68(sp)
   18d94:	d9401215 	stw	r5,72(sp)
   18d98:	d9001104 	addi	r4,sp,68
   18d9c:	d9400a04 	addi	r5,sp,40
   18da0:	dfc01315 	stw	ra,76(sp)
   18da4:	d9c01015 	stw	r7,64(sp)
   18da8:	d9800f15 	stw	r6,60(sp)
   18dac:	0019b040 	call	19b04 <__unpack_d>
   18db0:	d9000f04 	addi	r4,sp,60
   18db4:	d9400504 	addi	r5,sp,20
   18db8:	0019b040 	call	19b04 <__unpack_d>
   18dbc:	d8800617 	ldw	r2,24(sp)
   18dc0:	d9000a04 	addi	r4,sp,40
   18dc4:	d9400504 	addi	r5,sp,20
   18dc8:	d80d883a 	mov	r6,sp
   18dcc:	1080005c 	xori	r2,r2,1
   18dd0:	d8800615 	stw	r2,24(sp)
   18dd4:	00189e40 	call	189e4 <_fpadd_parts>
   18dd8:	1009883a 	mov	r4,r2
   18ddc:	00198e00 	call	198e0 <__pack_d>
   18de0:	dfc01317 	ldw	ra,76(sp)
   18de4:	dec01404 	addi	sp,sp,80
   18de8:	f800283a 	ret

00018dec <__muldf3>:
   18dec:	deffe404 	addi	sp,sp,-112
   18df0:	d9001115 	stw	r4,68(sp)
   18df4:	d9401215 	stw	r5,72(sp)
   18df8:	d9001104 	addi	r4,sp,68
   18dfc:	d9400a04 	addi	r5,sp,40
   18e00:	dfc01b15 	stw	ra,108(sp)
   18e04:	d9800f15 	stw	r6,60(sp)
   18e08:	d9c01015 	stw	r7,64(sp)
   18e0c:	ddc01a15 	stw	r23,104(sp)
   18e10:	dd801915 	stw	r22,100(sp)
   18e14:	dd401815 	stw	r21,96(sp)
   18e18:	dd001715 	stw	r20,92(sp)
   18e1c:	dcc01615 	stw	r19,88(sp)
   18e20:	dc801515 	stw	r18,84(sp)
   18e24:	dc401415 	stw	r17,80(sp)
   18e28:	dc001315 	stw	r16,76(sp)
   18e2c:	0019b040 	call	19b04 <__unpack_d>
   18e30:	d9000f04 	addi	r4,sp,60
   18e34:	d9400504 	addi	r5,sp,20
   18e38:	0019b040 	call	19b04 <__unpack_d>
   18e3c:	d8c00a17 	ldw	r3,40(sp)
   18e40:	00800044 	movi	r2,1
   18e44:	10c01136 	bltu	r2,r3,18e8c <__muldf3+0xa0>
   18e48:	d8c00b17 	ldw	r3,44(sp)
   18e4c:	d8800617 	ldw	r2,24(sp)
   18e50:	d9000a04 	addi	r4,sp,40
   18e54:	1884c03a 	cmpne	r2,r3,r2
   18e58:	d8800b15 	stw	r2,44(sp)
   18e5c:	00198e00 	call	198e0 <__pack_d>
   18e60:	dfc01b17 	ldw	ra,108(sp)
   18e64:	ddc01a17 	ldw	r23,104(sp)
   18e68:	dd801917 	ldw	r22,100(sp)
   18e6c:	dd401817 	ldw	r21,96(sp)
   18e70:	dd001717 	ldw	r20,92(sp)
   18e74:	dcc01617 	ldw	r19,88(sp)
   18e78:	dc801517 	ldw	r18,84(sp)
   18e7c:	dc401417 	ldw	r17,80(sp)
   18e80:	dc001317 	ldw	r16,76(sp)
   18e84:	dec01c04 	addi	sp,sp,112
   18e88:	f800283a 	ret
   18e8c:	d9000517 	ldw	r4,20(sp)
   18e90:	11000636 	bltu	r2,r4,18eac <__muldf3+0xc0>
   18e94:	d8800617 	ldw	r2,24(sp)
   18e98:	d8c00b17 	ldw	r3,44(sp)
   18e9c:	d9000504 	addi	r4,sp,20
   18ea0:	1884c03a 	cmpne	r2,r3,r2
   18ea4:	d8800615 	stw	r2,24(sp)
   18ea8:	003fec06 	br	18e5c <__muldf3+0x70>
   18eac:	00800104 	movi	r2,4
   18eb0:	1880051e 	bne	r3,r2,18ec8 <__muldf3+0xdc>
   18eb4:	00800084 	movi	r2,2
   18eb8:	20bfe31e 	bne	r4,r2,18e48 <__muldf3+0x5c>
   18ebc:	010000f4 	movhi	r4,3
   18ec0:	21209404 	addi	r4,r4,-32176
   18ec4:	003fe506 	br	18e5c <__muldf3+0x70>
   18ec8:	2080031e 	bne	r4,r2,18ed8 <__muldf3+0xec>
   18ecc:	00800084 	movi	r2,2
   18ed0:	18bffa26 	beq	r3,r2,18ebc <__muldf3+0xd0>
   18ed4:	003fef06 	br	18e94 <__muldf3+0xa8>
   18ed8:	00800084 	movi	r2,2
   18edc:	18bfda26 	beq	r3,r2,18e48 <__muldf3+0x5c>
   18ee0:	20bfec26 	beq	r4,r2,18e94 <__muldf3+0xa8>
   18ee4:	dc000d17 	ldw	r16,52(sp)
   18ee8:	dd000817 	ldw	r20,32(sp)
   18eec:	dc800917 	ldw	r18,36(sp)
   18ef0:	8009883a 	mov	r4,r16
   18ef4:	000b883a 	mov	r5,zero
   18ef8:	a00d883a 	mov	r6,r20
   18efc:	000f883a 	mov	r7,zero
   18f00:	00197240 	call	19724 <__muldi3>
   18f04:	dc400e17 	ldw	r17,56(sp)
   18f08:	9009883a 	mov	r4,r18
   18f0c:	800d883a 	mov	r6,r16
   18f10:	000b883a 	mov	r5,zero
   18f14:	000f883a 	mov	r7,zero
   18f18:	102f883a 	mov	r23,r2
   18f1c:	1827883a 	mov	r19,r3
   18f20:	00197240 	call	19724 <__muldi3>
   18f24:	900d883a 	mov	r6,r18
   18f28:	8809883a 	mov	r4,r17
   18f2c:	000b883a 	mov	r5,zero
   18f30:	000f883a 	mov	r7,zero
   18f34:	102b883a 	mov	r21,r2
   18f38:	1821883a 	mov	r16,r3
   18f3c:	00197240 	call	19724 <__muldi3>
   18f40:	8809883a 	mov	r4,r17
   18f44:	000b883a 	mov	r5,zero
   18f48:	a00d883a 	mov	r6,r20
   18f4c:	000f883a 	mov	r7,zero
   18f50:	102d883a 	mov	r22,r2
   18f54:	1825883a 	mov	r18,r3
   18f58:	00197240 	call	19724 <__muldi3>
   18f5c:	154b883a 	add	r5,r2,r21
   18f60:	2889803a 	cmpltu	r4,r5,r2
   18f64:	1c07883a 	add	r3,r3,r16
   18f68:	20c9883a 	add	r4,r4,r3
   18f6c:	24004b36 	bltu	r4,r16,1909c <__muldf3+0x2b0>
   18f70:	8100011e 	bne	r16,r4,18f78 <__muldf3+0x18c>
   18f74:	2d404936 	bltu	r5,r21,1909c <__muldf3+0x2b0>
   18f78:	0011883a 	mov	r8,zero
   18f7c:	0007883a 	mov	r3,zero
   18f80:	2ccb883a 	add	r5,r5,r19
   18f84:	b80d883a 	mov	r6,r23
   18f88:	2cc0012e 	bgeu	r5,r19,18f90 <__muldf3+0x1a4>
   18f8c:	02000044 	movi	r8,1
   18f90:	258f883a 	add	r7,r4,r22
   18f94:	3909803a 	cmpltu	r4,r7,r4
   18f98:	da400c17 	ldw	r9,48(sp)
   18f9c:	2489883a 	add	r4,r4,r18
   18fa0:	d8800717 	ldw	r2,28(sp)
   18fa4:	20c9883a 	add	r4,r4,r3
   18fa8:	da800b17 	ldw	r10,44(sp)
   18fac:	d8c00617 	ldw	r3,24(sp)
   18fb0:	3a11883a 	add	r8,r7,r8
   18fb4:	4885883a 	add	r2,r9,r2
   18fb8:	50c6c03a 	cmpne	r3,r10,r3
   18fbc:	41cf803a 	cmpltu	r7,r8,r7
   18fc0:	12400104 	addi	r9,r2,4
   18fc4:	d8c00115 	stw	r3,4(sp)
   18fc8:	3909883a 	add	r4,r7,r4
   18fcc:	da400215 	stw	r9,8(sp)
   18fd0:	03480034 	movhi	r13,8192
   18fd4:	6b7fffc4 	addi	r13,r13,-1
   18fd8:	4007883a 	mov	r3,r8
   18fdc:	6900102e 	bgeu	r13,r4,19020 <__muldf3+0x234>
   18fe0:	10800144 	addi	r2,r2,5
   18fe4:	180ed07a 	srli	r7,r3,1
   18fe8:	18c0004c 	andi	r3,r3,1
   18fec:	201097fa 	slli	r8,r4,31
   18ff0:	281697fa 	slli	r11,r5,31
   18ff4:	2008d07a 	srli	r4,r4,1
   18ff8:	3014d07a 	srli	r10,r6,1
   18ffc:	2812d07a 	srli	r9,r5,1
   19000:	1019883a 	mov	r12,r2
   19004:	18000226 	beq	r3,zero,19010 <__muldf3+0x224>
   19008:	5a8cb03a 	or	r6,r11,r10
   1900c:	49600034 	orhi	r5,r9,32768
   19010:	41c6b03a 	or	r3,r8,r7
   19014:	10800044 	addi	r2,r2,1
   19018:	693ff236 	bltu	r13,r4,18fe4 <__muldf3+0x1f8>
   1901c:	db000215 	stw	r12,8(sp)
   19020:	03440034 	movhi	r13,4096
   19024:	6b7fffc4 	addi	r13,r13,-1
   19028:	69001336 	bltu	r13,r4,19078 <__muldf3+0x28c>
   1902c:	d8800217 	ldw	r2,8(sp)
   19030:	10bfffc4 	addi	r2,r2,-1
   19034:	18d3883a 	add	r9,r3,r3
   19038:	48c7803a 	cmpltu	r3,r9,r3
   1903c:	2109883a 	add	r4,r4,r4
   19040:	190f883a 	add	r7,r3,r4
   19044:	3191883a 	add	r8,r6,r6
   19048:	4197803a 	cmpltu	r11,r8,r6
   1904c:	2955883a 	add	r10,r5,r5
   19050:	1019883a 	mov	r12,r2
   19054:	4807883a 	mov	r3,r9
   19058:	3809883a 	mov	r4,r7
   1905c:	2800010e 	bge	r5,zero,19064 <__muldf3+0x278>
   19060:	48c00054 	ori	r3,r9,1
   19064:	400d883a 	mov	r6,r8
   19068:	5a8b883a 	add	r5,r11,r10
   1906c:	10bfffc4 	addi	r2,r2,-1
   19070:	69fff02e 	bgeu	r13,r7,19034 <__muldf3+0x248>
   19074:	db000215 	stw	r12,8(sp)
   19078:	18803fcc 	andi	r2,r3,255
   1907c:	01c02004 	movi	r7,128
   19080:	11c00926 	beq	r2,r7,190a8 <__muldf3+0x2bc>
   19084:	008000c4 	movi	r2,3
   19088:	d9000415 	stw	r4,16(sp)
   1908c:	d8c00315 	stw	r3,12(sp)
   19090:	d8800015 	stw	r2,0(sp)
   19094:	d809883a 	mov	r4,sp
   19098:	003f7006 	br	18e5c <__muldf3+0x70>
   1909c:	0011883a 	mov	r8,zero
   190a0:	00c00044 	movi	r3,1
   190a4:	003fb606 	br	18f80 <__muldf3+0x194>
   190a8:	19c0400c 	andi	r7,r3,256
   190ac:	383ff51e 	bne	r7,zero,19084 <__muldf3+0x298>
   190b0:	314ab03a 	or	r5,r6,r5
   190b4:	283ff326 	beq	r5,zero,19084 <__muldf3+0x298>
   190b8:	1885883a 	add	r2,r3,r2
   190bc:	10cb803a 	cmpltu	r5,r2,r3
   190c0:	00ffc004 	movi	r3,-256
   190c4:	10c6703a 	and	r3,r2,r3
   190c8:	2909883a 	add	r4,r5,r4
   190cc:	003fed06 	br	19084 <__muldf3+0x298>

000190d0 <__divdf3>:
   190d0:	defff104 	addi	sp,sp,-60
   190d4:	d9000c15 	stw	r4,48(sp)
   190d8:	d9400d15 	stw	r5,52(sp)
   190dc:	d9000c04 	addi	r4,sp,48
   190e0:	d9400504 	addi	r5,sp,20
   190e4:	dfc00e15 	stw	ra,56(sp)
   190e8:	d9800a15 	stw	r6,40(sp)
   190ec:	d9c00b15 	stw	r7,44(sp)
   190f0:	0019b040 	call	19b04 <__unpack_d>
   190f4:	d9000a04 	addi	r4,sp,40
   190f8:	d80b883a 	mov	r5,sp
   190fc:	0019b040 	call	19b04 <__unpack_d>
   19100:	d8c00517 	ldw	r3,20(sp)
   19104:	00800044 	movi	r2,1
   19108:	10c00536 	bltu	r2,r3,19120 <__divdf3+0x50>
   1910c:	d9000504 	addi	r4,sp,20
   19110:	00198e00 	call	198e0 <__pack_d>
   19114:	dfc00e17 	ldw	ra,56(sp)
   19118:	dec00f04 	addi	sp,sp,60
   1911c:	f800283a 	ret
   19120:	d9000017 	ldw	r4,0(sp)
   19124:	11000536 	bltu	r2,r4,1913c <__divdf3+0x6c>
   19128:	d809883a 	mov	r4,sp
   1912c:	00198e00 	call	198e0 <__pack_d>
   19130:	dfc00e17 	ldw	ra,56(sp)
   19134:	dec00f04 	addi	sp,sp,60
   19138:	f800283a 	ret
   1913c:	d9800617 	ldw	r6,24(sp)
   19140:	d9400117 	ldw	r5,4(sp)
   19144:	00800104 	movi	r2,4
   19148:	314af03a 	xor	r5,r6,r5
   1914c:	d9400615 	stw	r5,24(sp)
   19150:	18800226 	beq	r3,r2,1915c <__divdf3+0x8c>
   19154:	01400084 	movi	r5,2
   19158:	1940041e 	bne	r3,r5,1916c <__divdf3+0x9c>
   1915c:	193feb1e 	bne	r3,r4,1910c <__divdf3+0x3c>
   19160:	010000f4 	movhi	r4,3
   19164:	21209404 	addi	r4,r4,-32176
   19168:	003fe906 	br	19110 <__divdf3+0x40>
   1916c:	20803326 	beq	r4,r2,1923c <__divdf3+0x16c>
   19170:	21403726 	beq	r4,r5,19250 <__divdf3+0x180>
   19174:	d8800217 	ldw	r2,8(sp)
   19178:	d9000717 	ldw	r4,28(sp)
   1917c:	d8c00917 	ldw	r3,36(sp)
   19180:	da000417 	ldw	r8,16(sp)
   19184:	2089c83a 	sub	r4,r4,r2
   19188:	d9000715 	stw	r4,28(sp)
   1918c:	d8800817 	ldw	r2,32(sp)
   19190:	dbc00317 	ldw	r15,12(sp)
   19194:	1a000236 	bltu	r3,r8,191a0 <__divdf3+0xd0>
   19198:	40c0081e 	bne	r8,r3,191bc <__divdf3+0xec>
   1919c:	13c0072e 	bgeu	r2,r15,191bc <__divdf3+0xec>
   191a0:	108b883a 	add	r5,r2,r2
   191a4:	288d803a 	cmpltu	r6,r5,r2
   191a8:	18c7883a 	add	r3,r3,r3
   191ac:	213fffc4 	addi	r4,r4,-1
   191b0:	2805883a 	mov	r2,r5
   191b4:	30c7883a 	add	r3,r6,r3
   191b8:	d9000715 	stw	r4,28(sp)
   191bc:	01400f44 	movi	r5,61
   191c0:	000f883a 	mov	r7,zero
   191c4:	01040034 	movhi	r4,4096
   191c8:	0019883a 	mov	r12,zero
   191cc:	001b883a 	mov	r13,zero
   191d0:	201697fa 	slli	r11,r4,31
   191d4:	3814d07a 	srli	r10,r7,1
   191d8:	297fffc4 	addi	r5,r5,-1
   191dc:	1a000936 	bltu	r3,r8,19204 <__divdf3+0x134>
   191e0:	13cdc83a 	sub	r6,r2,r15
   191e4:	1193803a 	cmpltu	r9,r2,r6
   191e8:	1a1dc83a 	sub	r14,r3,r8
   191ec:	40c0011e 	bne	r8,r3,191f4 <__divdf3+0x124>
   191f0:	13c00436 	bltu	r2,r15,19204 <__divdf3+0x134>
   191f4:	3005883a 	mov	r2,r6
   191f8:	7247c83a 	sub	r3,r14,r9
   191fc:	61d8b03a 	or	r12,r12,r7
   19200:	691ab03a 	or	r13,r13,r4
   19204:	108d883a 	add	r6,r2,r2
   19208:	3093803a 	cmpltu	r9,r6,r2
   1920c:	18c7883a 	add	r3,r3,r3
   19210:	5a8eb03a 	or	r7,r11,r10
   19214:	2008d07a 	srli	r4,r4,1
   19218:	3005883a 	mov	r2,r6
   1921c:	48c7883a 	add	r3,r9,r3
   19220:	283feb1e 	bne	r5,zero,191d0 <__divdf3+0x100>
   19224:	61003fcc 	andi	r4,r12,255
   19228:	01402004 	movi	r5,128
   1922c:	21400b26 	beq	r4,r5,1925c <__divdf3+0x18c>
   19230:	db000815 	stw	r12,32(sp)
   19234:	db400915 	stw	r13,36(sp)
   19238:	003fb406 	br	1910c <__divdf3+0x3c>
   1923c:	d8000815 	stw	zero,32(sp)
   19240:	d8000915 	stw	zero,36(sp)
   19244:	d8000715 	stw	zero,28(sp)
   19248:	d9000504 	addi	r4,sp,20
   1924c:	003fb006 	br	19110 <__divdf3+0x40>
   19250:	d8800515 	stw	r2,20(sp)
   19254:	d9000504 	addi	r4,sp,20
   19258:	003fad06 	br	19110 <__divdf3+0x40>
   1925c:	6140400c 	andi	r5,r12,256
   19260:	283ff31e 	bne	r5,zero,19230 <__divdf3+0x160>
   19264:	30c4b03a 	or	r2,r6,r3
   19268:	103ff126 	beq	r2,zero,19230 <__divdf3+0x160>
   1926c:	6109883a 	add	r4,r12,r4
   19270:	2305803a 	cmpltu	r2,r4,r12
   19274:	033fc004 	movi	r12,-256
   19278:	2318703a 	and	r12,r4,r12
   1927c:	135b883a 	add	r13,r2,r13
   19280:	003feb06 	br	19230 <__divdf3+0x160>

00019284 <__eqdf2>:
   19284:	defff104 	addi	sp,sp,-60
   19288:	d9000c15 	stw	r4,48(sp)
   1928c:	d9400d15 	stw	r5,52(sp)
   19290:	d9000c04 	addi	r4,sp,48
   19294:	d9400504 	addi	r5,sp,20
   19298:	dfc00e15 	stw	ra,56(sp)
   1929c:	d9800a15 	stw	r6,40(sp)
   192a0:	d9c00b15 	stw	r7,44(sp)
   192a4:	0019b040 	call	19b04 <__unpack_d>
   192a8:	d9000a04 	addi	r4,sp,40
   192ac:	d80b883a 	mov	r5,sp
   192b0:	0019b040 	call	19b04 <__unpack_d>
   192b4:	d8c00517 	ldw	r3,20(sp)
   192b8:	00800044 	movi	r2,1
   192bc:	10c0052e 	bgeu	r2,r3,192d4 <__eqdf2+0x50>
   192c0:	d8c00017 	ldw	r3,0(sp)
   192c4:	10c0032e 	bgeu	r2,r3,192d4 <__eqdf2+0x50>
   192c8:	d9000504 	addi	r4,sp,20
   192cc:	d80b883a 	mov	r5,sp
   192d0:	0019c080 	call	19c08 <__fpcmp_parts_d>
   192d4:	dfc00e17 	ldw	ra,56(sp)
   192d8:	dec00f04 	addi	sp,sp,60
   192dc:	f800283a 	ret

000192e0 <__nedf2>:
   192e0:	defff104 	addi	sp,sp,-60
   192e4:	d9000c15 	stw	r4,48(sp)
   192e8:	d9400d15 	stw	r5,52(sp)
   192ec:	d9000c04 	addi	r4,sp,48
   192f0:	d9400504 	addi	r5,sp,20
   192f4:	dfc00e15 	stw	ra,56(sp)
   192f8:	d9800a15 	stw	r6,40(sp)
   192fc:	d9c00b15 	stw	r7,44(sp)
   19300:	0019b040 	call	19b04 <__unpack_d>
   19304:	d9000a04 	addi	r4,sp,40
   19308:	d80b883a 	mov	r5,sp
   1930c:	0019b040 	call	19b04 <__unpack_d>
   19310:	d8c00517 	ldw	r3,20(sp)
   19314:	00800044 	movi	r2,1
   19318:	10c0052e 	bgeu	r2,r3,19330 <__nedf2+0x50>
   1931c:	d8c00017 	ldw	r3,0(sp)
   19320:	10c0032e 	bgeu	r2,r3,19330 <__nedf2+0x50>
   19324:	d9000504 	addi	r4,sp,20
   19328:	d80b883a 	mov	r5,sp
   1932c:	0019c080 	call	19c08 <__fpcmp_parts_d>
   19330:	dfc00e17 	ldw	ra,56(sp)
   19334:	dec00f04 	addi	sp,sp,60
   19338:	f800283a 	ret

0001933c <__gtdf2>:
   1933c:	defff104 	addi	sp,sp,-60
   19340:	d9000c15 	stw	r4,48(sp)
   19344:	d9400d15 	stw	r5,52(sp)
   19348:	d9000c04 	addi	r4,sp,48
   1934c:	d9400504 	addi	r5,sp,20
   19350:	dfc00e15 	stw	ra,56(sp)
   19354:	d9800a15 	stw	r6,40(sp)
   19358:	d9c00b15 	stw	r7,44(sp)
   1935c:	0019b040 	call	19b04 <__unpack_d>
   19360:	d9000a04 	addi	r4,sp,40
   19364:	d80b883a 	mov	r5,sp
   19368:	0019b040 	call	19b04 <__unpack_d>
   1936c:	d8c00517 	ldw	r3,20(sp)
   19370:	00800044 	movi	r2,1
   19374:	10c0082e 	bgeu	r2,r3,19398 <__gtdf2+0x5c>
   19378:	d8c00017 	ldw	r3,0(sp)
   1937c:	10c0062e 	bgeu	r2,r3,19398 <__gtdf2+0x5c>
   19380:	d9000504 	addi	r4,sp,20
   19384:	d80b883a 	mov	r5,sp
   19388:	0019c080 	call	19c08 <__fpcmp_parts_d>
   1938c:	dfc00e17 	ldw	ra,56(sp)
   19390:	dec00f04 	addi	sp,sp,60
   19394:	f800283a 	ret
   19398:	00bfffc4 	movi	r2,-1
   1939c:	003ffb06 	br	1938c <__gtdf2+0x50>

000193a0 <__gedf2>:
   193a0:	defff104 	addi	sp,sp,-60
   193a4:	d9000c15 	stw	r4,48(sp)
   193a8:	d9400d15 	stw	r5,52(sp)
   193ac:	d9000c04 	addi	r4,sp,48
   193b0:	d9400504 	addi	r5,sp,20
   193b4:	dfc00e15 	stw	ra,56(sp)
   193b8:	d9800a15 	stw	r6,40(sp)
   193bc:	d9c00b15 	stw	r7,44(sp)
   193c0:	0019b040 	call	19b04 <__unpack_d>
   193c4:	d9000a04 	addi	r4,sp,40
   193c8:	d80b883a 	mov	r5,sp
   193cc:	0019b040 	call	19b04 <__unpack_d>
   193d0:	d8c00517 	ldw	r3,20(sp)
   193d4:	00800044 	movi	r2,1
   193d8:	10c0082e 	bgeu	r2,r3,193fc <__gedf2+0x5c>
   193dc:	d8c00017 	ldw	r3,0(sp)
   193e0:	10c0062e 	bgeu	r2,r3,193fc <__gedf2+0x5c>
   193e4:	d9000504 	addi	r4,sp,20
   193e8:	d80b883a 	mov	r5,sp
   193ec:	0019c080 	call	19c08 <__fpcmp_parts_d>
   193f0:	dfc00e17 	ldw	ra,56(sp)
   193f4:	dec00f04 	addi	sp,sp,60
   193f8:	f800283a 	ret
   193fc:	00bfffc4 	movi	r2,-1
   19400:	003ffb06 	br	193f0 <__gedf2+0x50>

00019404 <__ltdf2>:
   19404:	defff104 	addi	sp,sp,-60
   19408:	d9000c15 	stw	r4,48(sp)
   1940c:	d9400d15 	stw	r5,52(sp)
   19410:	d9000c04 	addi	r4,sp,48
   19414:	d9400504 	addi	r5,sp,20
   19418:	dfc00e15 	stw	ra,56(sp)
   1941c:	d9800a15 	stw	r6,40(sp)
   19420:	d9c00b15 	stw	r7,44(sp)
   19424:	0019b040 	call	19b04 <__unpack_d>
   19428:	d9000a04 	addi	r4,sp,40
   1942c:	d80b883a 	mov	r5,sp
   19430:	0019b040 	call	19b04 <__unpack_d>
   19434:	d8c00517 	ldw	r3,20(sp)
   19438:	00800044 	movi	r2,1
   1943c:	10c0052e 	bgeu	r2,r3,19454 <__ltdf2+0x50>
   19440:	d8c00017 	ldw	r3,0(sp)
   19444:	10c0032e 	bgeu	r2,r3,19454 <__ltdf2+0x50>
   19448:	d9000504 	addi	r4,sp,20
   1944c:	d80b883a 	mov	r5,sp
   19450:	0019c080 	call	19c08 <__fpcmp_parts_d>
   19454:	dfc00e17 	ldw	ra,56(sp)
   19458:	dec00f04 	addi	sp,sp,60
   1945c:	f800283a 	ret

00019460 <__floatsidf>:
   19460:	2004d7fa 	srli	r2,r4,31
   19464:	defff904 	addi	sp,sp,-28
   19468:	00c000c4 	movi	r3,3
   1946c:	dfc00615 	stw	ra,24(sp)
   19470:	dc000515 	stw	r16,20(sp)
   19474:	d8c00015 	stw	r3,0(sp)
   19478:	d8800115 	stw	r2,4(sp)
   1947c:	2000081e 	bne	r4,zero,194a0 <__floatsidf+0x40>
   19480:	00800084 	movi	r2,2
   19484:	d8800015 	stw	r2,0(sp)
   19488:	d809883a 	mov	r4,sp
   1948c:	00198e00 	call	198e0 <__pack_d>
   19490:	dfc00617 	ldw	ra,24(sp)
   19494:	dc000517 	ldw	r16,20(sp)
   19498:	dec00704 	addi	sp,sp,28
   1949c:	f800283a 	ret
   194a0:	00c00f04 	movi	r3,60
   194a4:	d8c00215 	stw	r3,8(sp)
   194a8:	10000f1e 	bne	r2,zero,194e8 <__floatsidf+0x88>
   194ac:	2021883a 	mov	r16,r4
   194b0:	8009883a 	mov	r4,r16
   194b4:	00198340 	call	19834 <__clzsi2>
   194b8:	11000744 	addi	r4,r2,29
   194bc:	0100110e 	bge	zero,r4,19504 <__floatsidf+0xa4>
   194c0:	10ffff44 	addi	r3,r2,-3
   194c4:	18001216 	blt	r3,zero,19510 <__floatsidf+0xb0>
   194c8:	80c6983a 	sll	r3,r16,r3
   194cc:	0009883a 	mov	r4,zero
   194d0:	014007c4 	movi	r5,31
   194d4:	2885c83a 	sub	r2,r5,r2
   194d8:	d9000315 	stw	r4,12(sp)
   194dc:	d8c00415 	stw	r3,16(sp)
   194e0:	d8800215 	stw	r2,8(sp)
   194e4:	003fe806 	br	19488 <__floatsidf+0x28>
   194e8:	00a00034 	movhi	r2,32768
   194ec:	20800e26 	beq	r4,r2,19528 <__floatsidf+0xc8>
   194f0:	0121c83a 	sub	r16,zero,r4
   194f4:	8009883a 	mov	r4,r16
   194f8:	00198340 	call	19834 <__clzsi2>
   194fc:	11000744 	addi	r4,r2,29
   19500:	013fef16 	blt	zero,r4,194c0 <__floatsidf+0x60>
   19504:	dc000315 	stw	r16,12(sp)
   19508:	d8000415 	stw	zero,16(sp)
   1950c:	003fde06 	br	19488 <__floatsidf+0x28>
   19510:	800ad07a 	srli	r5,r16,1
   19514:	00c007c4 	movi	r3,31
   19518:	1907c83a 	sub	r3,r3,r4
   1951c:	28c6d83a 	srl	r3,r5,r3
   19520:	8108983a 	sll	r4,r16,r4
   19524:	003fea06 	br	194d0 <__floatsidf+0x70>
   19528:	0005883a 	mov	r2,zero
   1952c:	00f07834 	movhi	r3,49632
   19530:	003fd706 	br	19490 <__floatsidf+0x30>

00019534 <__fixdfsi>:
   19534:	defff804 	addi	sp,sp,-32
   19538:	d9000515 	stw	r4,20(sp)
   1953c:	d9400615 	stw	r5,24(sp)
   19540:	d9000504 	addi	r4,sp,20
   19544:	d80b883a 	mov	r5,sp
   19548:	dfc00715 	stw	ra,28(sp)
   1954c:	0019b040 	call	19b04 <__unpack_d>
   19550:	d8800017 	ldw	r2,0(sp)
   19554:	00c00084 	movi	r3,2
   19558:	10c01c26 	beq	r2,r3,195cc <__fixdfsi+0x98>
   1955c:	00c00044 	movi	r3,1
   19560:	18801a2e 	bgeu	r3,r2,195cc <__fixdfsi+0x98>
   19564:	00c00104 	movi	r3,4
   19568:	10c01126 	beq	r2,r3,195b0 <__fixdfsi+0x7c>
   1956c:	d8800217 	ldw	r2,8(sp)
   19570:	10001616 	blt	r2,zero,195cc <__fixdfsi+0x98>
   19574:	00c00784 	movi	r3,30
   19578:	18800d16 	blt	r3,r2,195b0 <__fixdfsi+0x7c>
   1957c:	00c00f04 	movi	r3,60
   19580:	1885c83a 	sub	r2,r3,r2
   19584:	10fff804 	addi	r3,r2,-32
   19588:	d9400317 	ldw	r5,12(sp)
   1958c:	d9000417 	ldw	r4,16(sp)
   19590:	18001616 	blt	r3,zero,195ec <__fixdfsi+0xb8>
   19594:	20c4d83a 	srl	r2,r4,r3
   19598:	d8c00117 	ldw	r3,4(sp)
   1959c:	18000126 	beq	r3,zero,195a4 <__fixdfsi+0x70>
   195a0:	0085c83a 	sub	r2,zero,r2
   195a4:	dfc00717 	ldw	ra,28(sp)
   195a8:	dec00804 	addi	sp,sp,32
   195ac:	f800283a 	ret
   195b0:	d8800117 	ldw	r2,4(sp)
   195b4:	1000091e 	bne	r2,zero,195dc <__fixdfsi+0xa8>
   195b8:	00a00034 	movhi	r2,32768
   195bc:	10bfffc4 	addi	r2,r2,-1
   195c0:	dfc00717 	ldw	ra,28(sp)
   195c4:	dec00804 	addi	sp,sp,32
   195c8:	f800283a 	ret
   195cc:	0005883a 	mov	r2,zero
   195d0:	dfc00717 	ldw	ra,28(sp)
   195d4:	dec00804 	addi	sp,sp,32
   195d8:	f800283a 	ret
   195dc:	00a00034 	movhi	r2,32768
   195e0:	dfc00717 	ldw	ra,28(sp)
   195e4:	dec00804 	addi	sp,sp,32
   195e8:	f800283a 	ret
   195ec:	2008907a 	slli	r4,r4,1
   195f0:	018007c4 	movi	r6,31
   195f4:	308dc83a 	sub	r6,r6,r2
   195f8:	2188983a 	sll	r4,r4,r6
   195fc:	2884d83a 	srl	r2,r5,r2
   19600:	2084b03a 	or	r2,r4,r2
   19604:	003fe406 	br	19598 <__fixdfsi+0x64>

00019608 <__floatunsidf>:
   19608:	defff904 	addi	sp,sp,-28
   1960c:	dc000515 	stw	r16,20(sp)
   19610:	dfc00615 	stw	ra,24(sp)
   19614:	d8000115 	stw	zero,4(sp)
   19618:	2021883a 	mov	r16,r4
   1961c:	20001726 	beq	r4,zero,1967c <__floatunsidf+0x74>
   19620:	008000c4 	movi	r2,3
   19624:	d8800015 	stw	r2,0(sp)
   19628:	00800f04 	movi	r2,60
   1962c:	d8800215 	stw	r2,8(sp)
   19630:	00198340 	call	19834 <__clzsi2>
   19634:	10c00744 	addi	r3,r2,29
   19638:	18001816 	blt	r3,zero,1969c <__floatunsidf+0x94>
   1963c:	18002d26 	beq	r3,zero,196f4 <__floatunsidf+0xec>
   19640:	113fff44 	addi	r4,r2,-3
   19644:	20002e16 	blt	r4,zero,19700 <__floatunsidf+0xf8>
   19648:	8108983a 	sll	r4,r16,r4
   1964c:	0021883a 	mov	r16,zero
   19650:	014007c4 	movi	r5,31
   19654:	2885c83a 	sub	r2,r5,r2
   19658:	dc000315 	stw	r16,12(sp)
   1965c:	d9000415 	stw	r4,16(sp)
   19660:	d8800215 	stw	r2,8(sp)
   19664:	d809883a 	mov	r4,sp
   19668:	00198e00 	call	198e0 <__pack_d>
   1966c:	dfc00617 	ldw	ra,24(sp)
   19670:	dc000517 	ldw	r16,20(sp)
   19674:	dec00704 	addi	sp,sp,28
   19678:	f800283a 	ret
   1967c:	00800084 	movi	r2,2
   19680:	d809883a 	mov	r4,sp
   19684:	d8800015 	stw	r2,0(sp)
   19688:	00198e00 	call	198e0 <__pack_d>
   1968c:	dfc00617 	ldw	ra,24(sp)
   19690:	dc000517 	ldw	r16,20(sp)
   19694:	dec00704 	addi	sp,sp,28
   19698:	f800283a 	ret
   1969c:	00c7c83a 	sub	r3,zero,r3
   196a0:	193ff804 	addi	r4,r3,-32
   196a4:	20001c16 	blt	r4,zero,19718 <__floatunsidf+0x110>
   196a8:	000b883a 	mov	r5,zero
   196ac:	2009d7fa 	srai	r4,r4,31
   196b0:	80c6d83a 	srl	r3,r16,r3
   196b4:	297fffc4 	addi	r5,r5,-1
   196b8:	2c20703a 	and	r16,r5,r16
   196bc:	8020c03a 	cmpne	r16,r16,zero
   196c0:	1906703a 	and	r3,r3,r4
   196c4:	010007c4 	movi	r4,31
   196c8:	80c6b03a 	or	r3,r16,r3
   196cc:	2085c83a 	sub	r2,r4,r2
   196d0:	d809883a 	mov	r4,sp
   196d4:	d8c00315 	stw	r3,12(sp)
   196d8:	d8000415 	stw	zero,16(sp)
   196dc:	d8800215 	stw	r2,8(sp)
   196e0:	00198e00 	call	198e0 <__pack_d>
   196e4:	dfc00617 	ldw	ra,24(sp)
   196e8:	dc000517 	ldw	r16,20(sp)
   196ec:	dec00704 	addi	sp,sp,28
   196f0:	f800283a 	ret
   196f4:	dc000315 	stw	r16,12(sp)
   196f8:	d8000415 	stw	zero,16(sp)
   196fc:	003fd906 	br	19664 <__floatunsidf+0x5c>
   19700:	800ad07a 	srli	r5,r16,1
   19704:	010007c4 	movi	r4,31
   19708:	20c9c83a 	sub	r4,r4,r3
   1970c:	2908d83a 	srl	r4,r5,r4
   19710:	80e0983a 	sll	r16,r16,r3
   19714:	003fce06 	br	19650 <__floatunsidf+0x48>
   19718:	01400044 	movi	r5,1
   1971c:	28ca983a 	sll	r5,r5,r3
   19720:	003fe206 	br	196ac <__floatunsidf+0xa4>

00019724 <__muldi3>:
   19724:	defff604 	addi	sp,sp,-40
   19728:	dd400515 	stw	r21,20(sp)
   1972c:	dd000415 	stw	r20,16(sp)
   19730:	257fffcc 	andi	r21,r4,65535
   19734:	353fffcc 	andi	r20,r6,65535
   19738:	dcc00315 	stw	r19,12(sp)
   1973c:	3026d43a 	srli	r19,r6,16
   19740:	dd800615 	stw	r22,24(sp)
   19744:	dc800215 	stw	r18,8(sp)
   19748:	dc400115 	stw	r17,4(sp)
   1974c:	2024d43a 	srli	r18,r4,16
   19750:	2023883a 	mov	r17,r4
   19754:	282d883a 	mov	r22,r5
   19758:	a009883a 	mov	r4,r20
   1975c:	a80b883a 	mov	r5,r21
   19760:	dfc00915 	stw	ra,36(sp)
   19764:	df000815 	stw	fp,32(sp)
   19768:	ddc00715 	stw	r23,28(sp)
   1976c:	3839883a 	mov	fp,r7
   19770:	dc000015 	stw	r16,0(sp)
   19774:	3021883a 	mov	r16,r6
   19778:	00107940 	call	10794 <__mulsi3>
   1977c:	a80b883a 	mov	r5,r21
   19780:	9809883a 	mov	r4,r19
   19784:	102f883a 	mov	r23,r2
   19788:	00107940 	call	10794 <__mulsi3>
   1978c:	a009883a 	mov	r4,r20
   19790:	900b883a 	mov	r5,r18
   19794:	102b883a 	mov	r21,r2
   19798:	00107940 	call	10794 <__mulsi3>
   1979c:	9809883a 	mov	r4,r19
   197a0:	900b883a 	mov	r5,r18
   197a4:	1029883a 	mov	r20,r2
   197a8:	00107940 	call	10794 <__mulsi3>
   197ac:	1007883a 	mov	r3,r2
   197b0:	b804d43a 	srli	r2,r23,16
   197b4:	a549883a 	add	r4,r20,r21
   197b8:	2089883a 	add	r4,r4,r2
   197bc:	2500022e 	bgeu	r4,r20,197c8 <__muldi3+0xa4>
   197c0:	00800074 	movhi	r2,1
   197c4:	1887883a 	add	r3,r3,r2
   197c8:	200cd43a 	srli	r6,r4,16
   197cc:	2004943a 	slli	r2,r4,16
   197d0:	e00b883a 	mov	r5,fp
   197d4:	8809883a 	mov	r4,r17
   197d8:	bdffffcc 	andi	r23,r23,65535
   197dc:	19a3883a 	add	r17,r3,r6
   197e0:	15ef883a 	add	r23,r2,r23
   197e4:	00107940 	call	10794 <__mulsi3>
   197e8:	8009883a 	mov	r4,r16
   197ec:	b00b883a 	mov	r5,r22
   197f0:	1025883a 	mov	r18,r2
   197f4:	00107940 	call	10794 <__mulsi3>
   197f8:	9085883a 	add	r2,r18,r2
   197fc:	1447883a 	add	r3,r2,r17
   19800:	b805883a 	mov	r2,r23
   19804:	dfc00917 	ldw	ra,36(sp)
   19808:	df000817 	ldw	fp,32(sp)
   1980c:	ddc00717 	ldw	r23,28(sp)
   19810:	dd800617 	ldw	r22,24(sp)
   19814:	dd400517 	ldw	r21,20(sp)
   19818:	dd000417 	ldw	r20,16(sp)
   1981c:	dcc00317 	ldw	r19,12(sp)
   19820:	dc800217 	ldw	r18,8(sp)
   19824:	dc400117 	ldw	r17,4(sp)
   19828:	dc000017 	ldw	r16,0(sp)
   1982c:	dec00a04 	addi	sp,sp,40
   19830:	f800283a 	ret

00019834 <__clzsi2>:
   19834:	00bfffd4 	movui	r2,65535
   19838:	11000b36 	bltu	r2,r4,19868 <__clzsi2+0x34>
   1983c:	00803fc4 	movi	r2,255
   19840:	11001e2e 	bgeu	r2,r4,198bc <__clzsi2+0x88>
   19844:	00c00204 	movi	r3,8
   19848:	20c8d83a 	srl	r4,r4,r3
   1984c:	00c000f4 	movhi	r3,3
   19850:	18e09904 	addi	r3,r3,-32156
   19854:	00800604 	movi	r2,24
   19858:	1909883a 	add	r4,r3,r4
   1985c:	20c00003 	ldbu	r3,0(r4)
   19860:	10c5c83a 	sub	r2,r2,r3
   19864:	f800283a 	ret
   19868:	00804034 	movhi	r2,256
   1986c:	10bfffc4 	addi	r2,r2,-1
   19870:	11000936 	bltu	r2,r4,19898 <__clzsi2+0x64>
   19874:	00800404 	movi	r2,16
   19878:	1007883a 	mov	r3,r2
   1987c:	20c8d83a 	srl	r4,r4,r3
   19880:	00c000f4 	movhi	r3,3
   19884:	18e09904 	addi	r3,r3,-32156
   19888:	1909883a 	add	r4,r3,r4
   1988c:	20c00003 	ldbu	r3,0(r4)
   19890:	10c5c83a 	sub	r2,r2,r3
   19894:	f800283a 	ret
   19898:	00c00604 	movi	r3,24
   1989c:	20c8d83a 	srl	r4,r4,r3
   198a0:	00c000f4 	movhi	r3,3
   198a4:	18e09904 	addi	r3,r3,-32156
   198a8:	00800204 	movi	r2,8
   198ac:	1909883a 	add	r4,r3,r4
   198b0:	20c00003 	ldbu	r3,0(r4)
   198b4:	10c5c83a 	sub	r2,r2,r3
   198b8:	f800283a 	ret
   198bc:	0007883a 	mov	r3,zero
   198c0:	20c8d83a 	srl	r4,r4,r3
   198c4:	00c000f4 	movhi	r3,3
   198c8:	18e09904 	addi	r3,r3,-32156
   198cc:	00800804 	movi	r2,32
   198d0:	1909883a 	add	r4,r3,r4
   198d4:	20c00003 	ldbu	r3,0(r4)
   198d8:	10c5c83a 	sub	r2,r2,r3
   198dc:	f800283a 	ret

000198e0 <__pack_d>:
   198e0:	20800017 	ldw	r2,0(r4)
   198e4:	defff804 	addi	sp,sp,-32
   198e8:	dcc00315 	stw	r19,12(sp)
   198ec:	dc800215 	stw	r18,8(sp)
   198f0:	dfc00715 	stw	ra,28(sp)
   198f4:	dd800615 	stw	r22,24(sp)
   198f8:	dd400515 	stw	r21,20(sp)
   198fc:	dd000415 	stw	r20,16(sp)
   19900:	dc400115 	stw	r17,4(sp)
   19904:	dc000015 	stw	r16,0(sp)
   19908:	04800044 	movi	r18,1
   1990c:	24400317 	ldw	r17,12(r4)
   19910:	24000417 	ldw	r16,16(r4)
   19914:	24c00117 	ldw	r19,4(r4)
   19918:	9080422e 	bgeu	r18,r2,19a24 <__pack_d+0x144>
   1991c:	00c00104 	movi	r3,4
   19920:	10c03c26 	beq	r2,r3,19a14 <__pack_d+0x134>
   19924:	00c00084 	movi	r3,2
   19928:	10c01926 	beq	r2,r3,19990 <__pack_d+0xb0>
   1992c:	8c04b03a 	or	r2,r17,r16
   19930:	10001726 	beq	r2,zero,19990 <__pack_d+0xb0>
   19934:	21000217 	ldw	r4,8(r4)
   19938:	00bf0084 	movi	r2,-1022
   1993c:	20804016 	blt	r4,r2,19a40 <__pack_d+0x160>
   19940:	0080ffc4 	movi	r2,1023
   19944:	11003316 	blt	r2,r4,19a14 <__pack_d+0x134>
   19948:	88803fcc 	andi	r2,r17,255
   1994c:	00c02004 	movi	r3,128
   19950:	10c02926 	beq	r2,r3,199f8 <__pack_d+0x118>
   19954:	88801fc4 	addi	r2,r17,127
   19958:	1463803a 	cmpltu	r17,r2,r17
   1995c:	8c21883a 	add	r16,r17,r16
   19960:	1023883a 	mov	r17,r2
   19964:	00880034 	movhi	r2,8192
   19968:	10bfffc4 	addi	r2,r2,-1
   1996c:	14001c36 	bltu	r2,r16,199e0 <__pack_d+0x100>
   19970:	2100ffc4 	addi	r4,r4,1023
   19974:	8006963a 	slli	r3,r16,24
   19978:	8804d23a 	srli	r2,r17,8
   1997c:	8020913a 	slli	r16,r16,4
   19980:	2101ffcc 	andi	r4,r4,2047
   19984:	1884b03a 	or	r2,r3,r2
   19988:	8020d33a 	srli	r16,r16,12
   1998c:	00000306 	br	1999c <__pack_d+0xbc>
   19990:	0009883a 	mov	r4,zero
   19994:	0005883a 	mov	r2,zero
   19998:	0021883a 	mov	r16,zero
   1999c:	2008953a 	slli	r4,r4,20
   199a0:	982697fa 	slli	r19,r19,31
   199a4:	00c00434 	movhi	r3,16
   199a8:	18ffffc4 	addi	r3,r3,-1
   199ac:	80e0703a 	and	r16,r16,r3
   199b0:	8106b03a 	or	r3,r16,r4
   199b4:	1cc6b03a 	or	r3,r3,r19
   199b8:	dfc00717 	ldw	ra,28(sp)
   199bc:	dd800617 	ldw	r22,24(sp)
   199c0:	dd400517 	ldw	r21,20(sp)
   199c4:	dd000417 	ldw	r20,16(sp)
   199c8:	dcc00317 	ldw	r19,12(sp)
   199cc:	dc800217 	ldw	r18,8(sp)
   199d0:	dc400117 	ldw	r17,4(sp)
   199d4:	dc000017 	ldw	r16,0(sp)
   199d8:	dec00804 	addi	sp,sp,32
   199dc:	f800283a 	ret
   199e0:	800697fa 	slli	r3,r16,31
   199e4:	8804d07a 	srli	r2,r17,1
   199e8:	21010004 	addi	r4,r4,1024
   199ec:	8020d07a 	srli	r16,r16,1
   199f0:	18a2b03a 	or	r17,r3,r2
   199f4:	003fdf06 	br	19974 <__pack_d+0x94>
   199f8:	88c0400c 	andi	r3,r17,256
   199fc:	183fd926 	beq	r3,zero,19964 <__pack_d+0x84>
   19a00:	8885883a 	add	r2,r17,r2
   19a04:	1463803a 	cmpltu	r17,r2,r17
   19a08:	8c21883a 	add	r16,r17,r16
   19a0c:	1023883a 	mov	r17,r2
   19a10:	003fd406 	br	19964 <__pack_d+0x84>
   19a14:	0101ffc4 	movi	r4,2047
   19a18:	0005883a 	mov	r2,zero
   19a1c:	0021883a 	mov	r16,zero
   19a20:	003fde06 	br	1999c <__pack_d+0xbc>
   19a24:	84000234 	orhi	r16,r16,8
   19a28:	00c00434 	movhi	r3,16
   19a2c:	18ffffc4 	addi	r3,r3,-1
   19a30:	8805883a 	mov	r2,r17
   19a34:	80e0703a 	and	r16,r16,r3
   19a38:	0101ffc4 	movi	r4,2047
   19a3c:	003fd706 	br	1999c <__pack_d+0xbc>
   19a40:	1129c83a 	sub	r20,r2,r4
   19a44:	00800e04 	movi	r2,56
   19a48:	15002716 	blt	r2,r20,19ae8 <__pack_d+0x208>
   19a4c:	800b883a 	mov	r5,r16
   19a50:	a00d883a 	mov	r6,r20
   19a54:	8809883a 	mov	r4,r17
   19a58:	0019cd80 	call	19cd8 <__lshrdi3>
   19a5c:	9009883a 	mov	r4,r18
   19a60:	000b883a 	mov	r5,zero
   19a64:	a00d883a 	mov	r6,r20
   19a68:	102d883a 	mov	r22,r2
   19a6c:	182b883a 	mov	r21,r3
   19a70:	0019d1c0 	call	19d1c <__ashldi3>
   19a74:	1009003a 	cmpeq	r4,r2,zero
   19a78:	1907c83a 	sub	r3,r3,r4
   19a7c:	10bfffc4 	addi	r2,r2,-1
   19a80:	1c20703a 	and	r16,r3,r16
   19a84:	1444703a 	and	r2,r2,r17
   19a88:	1404b03a 	or	r2,r2,r16
   19a8c:	1004c03a 	cmpne	r2,r2,zero
   19a90:	1584b03a 	or	r2,r2,r22
   19a94:	11003fcc 	andi	r4,r2,255
   19a98:	01402004 	movi	r5,128
   19a9c:	a807883a 	mov	r3,r21
   19aa0:	2140131e 	bne	r4,r5,19af0 <__pack_d+0x210>
   19aa4:	1140400c 	andi	r5,r2,256
   19aa8:	28000426 	beq	r5,zero,19abc <__pack_d+0x1dc>
   19aac:	1109883a 	add	r4,r2,r4
   19ab0:	2085803a 	cmpltu	r2,r4,r2
   19ab4:	1547883a 	add	r3,r2,r21
   19ab8:	2005883a 	mov	r2,r4
   19abc:	1808963a 	slli	r4,r3,24
   19ac0:	1004d23a 	srli	r2,r2,8
   19ac4:	1820913a 	slli	r16,r3,4
   19ac8:	01440034 	movhi	r5,4096
   19acc:	297fffc4 	addi	r5,r5,-1
   19ad0:	2084b03a 	or	r2,r4,r2
   19ad4:	8020d33a 	srli	r16,r16,12
   19ad8:	01000044 	movi	r4,1
   19adc:	28ffaf36 	bltu	r5,r3,1999c <__pack_d+0xbc>
   19ae0:	0009883a 	mov	r4,zero
   19ae4:	003fad06 	br	1999c <__pack_d+0xbc>
   19ae8:	0005883a 	mov	r2,zero
   19aec:	0007883a 	mov	r3,zero
   19af0:	11001fc4 	addi	r4,r2,127
   19af4:	2085803a 	cmpltu	r2,r4,r2
   19af8:	10c7883a 	add	r3,r2,r3
   19afc:	2005883a 	mov	r2,r4
   19b00:	003fee06 	br	19abc <__pack_d+0x1dc>

00019b04 <__unpack_d>:
   19b04:	21800117 	ldw	r6,4(r4)
   19b08:	20c00017 	ldw	r3,0(r4)
   19b0c:	3004d7fa 	srli	r2,r6,31
   19b10:	3008d53a 	srli	r4,r6,20
   19b14:	28800115 	stw	r2,4(r5)
   19b18:	2101ffcc 	andi	r4,r4,2047
   19b1c:	00800434 	movhi	r2,16
   19b20:	10bfffc4 	addi	r2,r2,-1
   19b24:	3084703a 	and	r2,r6,r2
   19b28:	20001a1e 	bne	r4,zero,19b94 <__unpack_d+0x90>
   19b2c:	1888b03a 	or	r4,r3,r2
   19b30:	20002626 	beq	r4,zero,19bcc <__unpack_d+0xc8>
   19b34:	1808d63a 	srli	r4,r3,24
   19b38:	1004923a 	slli	r2,r2,8
   19b3c:	01bf0084 	movi	r6,-1022
   19b40:	29800215 	stw	r6,8(r5)
   19b44:	2084b03a 	or	r2,r4,r2
   19b48:	010000c4 	movi	r4,3
   19b4c:	29000015 	stw	r4,0(r5)
   19b50:	02040034 	movhi	r8,4096
   19b54:	423fffc4 	addi	r8,r8,-1
   19b58:	1806923a 	slli	r3,r3,8
   19b5c:	40801836 	bltu	r8,r2,19bc0 <__unpack_d+0xbc>
   19b60:	013f0044 	movi	r4,-1023
   19b64:	18cd883a 	add	r6,r3,r3
   19b68:	30c7803a 	cmpltu	r3,r6,r3
   19b6c:	1085883a 	add	r2,r2,r2
   19b70:	1885883a 	add	r2,r3,r2
   19b74:	200f883a 	mov	r7,r4
   19b78:	3007883a 	mov	r3,r6
   19b7c:	213fffc4 	addi	r4,r4,-1
   19b80:	40bff82e 	bgeu	r8,r2,19b64 <__unpack_d+0x60>
   19b84:	29c00215 	stw	r7,8(r5)
   19b88:	28c00315 	stw	r3,12(r5)
   19b8c:	28800415 	stw	r2,16(r5)
   19b90:	f800283a 	ret
   19b94:	01c1ffc4 	movi	r7,2047
   19b98:	21c00f26 	beq	r4,r7,19bd8 <__unpack_d+0xd4>
   19b9c:	180cd63a 	srli	r6,r3,24
   19ba0:	1004923a 	slli	r2,r2,8
   19ba4:	213f0044 	addi	r4,r4,-1023
   19ba8:	1806923a 	slli	r3,r3,8
   19bac:	3084b03a 	or	r2,r6,r2
   19bb0:	29000215 	stw	r4,8(r5)
   19bb4:	010000c4 	movi	r4,3
   19bb8:	10840034 	orhi	r2,r2,4096
   19bbc:	29000015 	stw	r4,0(r5)
   19bc0:	28c00315 	stw	r3,12(r5)
   19bc4:	28800415 	stw	r2,16(r5)
   19bc8:	f800283a 	ret
   19bcc:	00800084 	movi	r2,2
   19bd0:	28800015 	stw	r2,0(r5)
   19bd4:	f800283a 	ret
   19bd8:	1888b03a 	or	r4,r3,r2
   19bdc:	20000526 	beq	r4,zero,19bf4 <__unpack_d+0xf0>
   19be0:	3180022c 	andhi	r6,r6,8
   19be4:	30000626 	beq	r6,zero,19c00 <__unpack_d+0xfc>
   19be8:	01000044 	movi	r4,1
   19bec:	29000015 	stw	r4,0(r5)
   19bf0:	003ff306 	br	19bc0 <__unpack_d+0xbc>
   19bf4:	00800104 	movi	r2,4
   19bf8:	28800015 	stw	r2,0(r5)
   19bfc:	f800283a 	ret
   19c00:	28000015 	stw	zero,0(r5)
   19c04:	003fee06 	br	19bc0 <__unpack_d+0xbc>

00019c08 <__fpcmp_parts_d>:
   19c08:	20c00017 	ldw	r3,0(r4)
   19c0c:	00800044 	movi	r2,1
   19c10:	10c0142e 	bgeu	r2,r3,19c64 <__fpcmp_parts_d+0x5c>
   19c14:	29800017 	ldw	r6,0(r5)
   19c18:	1180122e 	bgeu	r2,r6,19c64 <__fpcmp_parts_d+0x5c>
   19c1c:	01c00104 	movi	r7,4
   19c20:	19c02826 	beq	r3,r7,19cc4 <__fpcmp_parts_d+0xbc>
   19c24:	31c00926 	beq	r6,r7,19c4c <__fpcmp_parts_d+0x44>
   19c28:	01c00084 	movi	r7,2
   19c2c:	19c00626 	beq	r3,r7,19c48 <__fpcmp_parts_d+0x40>
   19c30:	31c00a26 	beq	r6,r7,19c5c <__fpcmp_parts_d+0x54>
   19c34:	20c00117 	ldw	r3,4(r4)
   19c38:	29800117 	ldw	r6,4(r5)
   19c3c:	19800b26 	beq	r3,r6,19c6c <__fpcmp_parts_d+0x64>
   19c40:	1800041e 	bne	r3,zero,19c54 <__fpcmp_parts_d+0x4c>
   19c44:	f800283a 	ret
   19c48:	30c01a26 	beq	r6,r3,19cb4 <__fpcmp_parts_d+0xac>
   19c4c:	28800117 	ldw	r2,4(r5)
   19c50:	1000041e 	bne	r2,zero,19c64 <__fpcmp_parts_d+0x5c>
   19c54:	00bfffc4 	movi	r2,-1
   19c58:	f800283a 	ret
   19c5c:	20800117 	ldw	r2,4(r4)
   19c60:	103ffc1e 	bne	r2,zero,19c54 <__fpcmp_parts_d+0x4c>
   19c64:	00800044 	movi	r2,1
   19c68:	f800283a 	ret
   19c6c:	21c00217 	ldw	r7,8(r4)
   19c70:	29800217 	ldw	r6,8(r5)
   19c74:	31c0020e 	bge	r6,r7,19c80 <__fpcmp_parts_d+0x78>
   19c78:	183ff61e 	bne	r3,zero,19c54 <__fpcmp_parts_d+0x4c>
   19c7c:	f800283a 	ret
   19c80:	39800a16 	blt	r7,r6,19cac <__fpcmp_parts_d+0xa4>
   19c84:	20800417 	ldw	r2,16(r4)
   19c88:	29800417 	ldw	r6,16(r5)
   19c8c:	21c00317 	ldw	r7,12(r4)
   19c90:	29000317 	ldw	r4,12(r5)
   19c94:	30800936 	bltu	r6,r2,19cbc <__fpcmp_parts_d+0xb4>
   19c98:	1180011e 	bne	r2,r6,19ca0 <__fpcmp_parts_d+0x98>
   19c9c:	21c00736 	bltu	r4,r7,19cbc <__fpcmp_parts_d+0xb4>
   19ca0:	11800236 	bltu	r2,r6,19cac <__fpcmp_parts_d+0xa4>
   19ca4:	3080031e 	bne	r6,r2,19cb4 <__fpcmp_parts_d+0xac>
   19ca8:	3900022e 	bgeu	r7,r4,19cb4 <__fpcmp_parts_d+0xac>
   19cac:	183fe926 	beq	r3,zero,19c54 <__fpcmp_parts_d+0x4c>
   19cb0:	003fec06 	br	19c64 <__fpcmp_parts_d+0x5c>
   19cb4:	0005883a 	mov	r2,zero
   19cb8:	f800283a 	ret
   19cbc:	183fe926 	beq	r3,zero,19c64 <__fpcmp_parts_d+0x5c>
   19cc0:	003fe406 	br	19c54 <__fpcmp_parts_d+0x4c>
   19cc4:	30ffe51e 	bne	r6,r3,19c5c <__fpcmp_parts_d+0x54>
   19cc8:	28c00117 	ldw	r3,4(r5)
   19ccc:	20800117 	ldw	r2,4(r4)
   19cd0:	1885c83a 	sub	r2,r3,r2
   19cd4:	f800283a 	ret

00019cd8 <__lshrdi3>:
   19cd8:	2005883a 	mov	r2,r4
   19cdc:	2807883a 	mov	r3,r5
   19ce0:	30000826 	beq	r6,zero,19d04 <__lshrdi3+0x2c>
   19ce4:	01000804 	movi	r4,32
   19ce8:	2189c83a 	sub	r4,r4,r6
   19cec:	0100060e 	bge	zero,r4,19d08 <__lshrdi3+0x30>
   19cf0:	1184d83a 	srl	r2,r2,r6
   19cf4:	2908983a 	sll	r4,r5,r4
   19cf8:	298cd83a 	srl	r6,r5,r6
   19cfc:	2084b03a 	or	r2,r4,r2
   19d00:	3007883a 	mov	r3,r6
   19d04:	f800283a 	ret
   19d08:	0105c83a 	sub	r2,zero,r4
   19d0c:	000d883a 	mov	r6,zero
   19d10:	2884d83a 	srl	r2,r5,r2
   19d14:	3007883a 	mov	r3,r6
   19d18:	003ffa06 	br	19d04 <__lshrdi3+0x2c>

00019d1c <__ashldi3>:
   19d1c:	2005883a 	mov	r2,r4
   19d20:	2807883a 	mov	r3,r5
   19d24:	30000826 	beq	r6,zero,19d48 <__ashldi3+0x2c>
   19d28:	01000804 	movi	r4,32
   19d2c:	2189c83a 	sub	r4,r4,r6
   19d30:	0100060e 	bge	zero,r4,19d4c <__ashldi3+0x30>
   19d34:	1108d83a 	srl	r4,r2,r4
   19d38:	2986983a 	sll	r3,r5,r6
   19d3c:	118c983a 	sll	r6,r2,r6
   19d40:	20c6b03a 	or	r3,r4,r3
   19d44:	3005883a 	mov	r2,r6
   19d48:	f800283a 	ret
   19d4c:	0107c83a 	sub	r3,zero,r4
   19d50:	000d883a 	mov	r6,zero
   19d54:	10c6983a 	sll	r3,r2,r3
   19d58:	3005883a 	mov	r2,r6
   19d5c:	003ffa06 	br	19d48 <__ashldi3+0x2c>

00019d60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19d60:	defffe04 	addi	sp,sp,-8
   19d64:	dfc00115 	stw	ra,4(sp)
   19d68:	df000015 	stw	fp,0(sp)
   19d6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19d70:	008000f4 	movhi	r2,3
   19d74:	10a77704 	addi	r2,r2,-25124
   19d78:	10800017 	ldw	r2,0(r2)
   19d7c:	10000526 	beq	r2,zero,19d94 <alt_get_errno+0x34>
   19d80:	008000f4 	movhi	r2,3
   19d84:	10a77704 	addi	r2,r2,-25124
   19d88:	10800017 	ldw	r2,0(r2)
   19d8c:	103ee83a 	callr	r2
   19d90:	00000206 	br	19d9c <alt_get_errno+0x3c>
   19d94:	008000f4 	movhi	r2,3
   19d98:	10a78704 	addi	r2,r2,-25060
}
   19d9c:	e037883a 	mov	sp,fp
   19da0:	dfc00117 	ldw	ra,4(sp)
   19da4:	df000017 	ldw	fp,0(sp)
   19da8:	dec00204 	addi	sp,sp,8
   19dac:	f800283a 	ret

00019db0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19db0:	defffb04 	addi	sp,sp,-20
   19db4:	dfc00415 	stw	ra,16(sp)
   19db8:	df000315 	stw	fp,12(sp)
   19dbc:	df000304 	addi	fp,sp,12
   19dc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19dc4:	e0bfff17 	ldw	r2,-4(fp)
   19dc8:	10000716 	blt	r2,zero,19de8 <close+0x38>
   19dcc:	e13fff17 	ldw	r4,-4(fp)
   19dd0:	01400304 	movi	r5,12
   19dd4:	00107940 	call	10794 <__mulsi3>
   19dd8:	00c000f4 	movhi	r3,3
   19ddc:	18e2f504 	addi	r3,r3,-29740
   19de0:	10c5883a 	add	r2,r2,r3
   19de4:	00000106 	br	19dec <close+0x3c>
   19de8:	0005883a 	mov	r2,zero
   19dec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   19df0:	e0bffd17 	ldw	r2,-12(fp)
   19df4:	10001826 	beq	r2,zero,19e58 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19df8:	e0bffd17 	ldw	r2,-12(fp)
   19dfc:	10800017 	ldw	r2,0(r2)
   19e00:	10800417 	ldw	r2,16(r2)
   19e04:	10000626 	beq	r2,zero,19e20 <close+0x70>
   19e08:	e0bffd17 	ldw	r2,-12(fp)
   19e0c:	10800017 	ldw	r2,0(r2)
   19e10:	10800417 	ldw	r2,16(r2)
   19e14:	e13ffd17 	ldw	r4,-12(fp)
   19e18:	103ee83a 	callr	r2
   19e1c:	00000106 	br	19e24 <close+0x74>
   19e20:	0005883a 	mov	r2,zero
   19e24:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19e28:	e13fff17 	ldw	r4,-4(fp)
   19e2c:	001a4a80 	call	1a4a8 <alt_release_fd>
    if (rval < 0)
   19e30:	e0bffe17 	ldw	r2,-8(fp)
   19e34:	1000060e 	bge	r2,zero,19e50 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   19e38:	0019d600 	call	19d60 <alt_get_errno>
   19e3c:	e0fffe17 	ldw	r3,-8(fp)
   19e40:	00c7c83a 	sub	r3,zero,r3
   19e44:	10c00015 	stw	r3,0(r2)
      return -1;
   19e48:	00bfffc4 	movi	r2,-1
   19e4c:	00000606 	br	19e68 <close+0xb8>
    }
    return 0;
   19e50:	0005883a 	mov	r2,zero
   19e54:	00000406 	br	19e68 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19e58:	0019d600 	call	19d60 <alt_get_errno>
   19e5c:	00c01444 	movi	r3,81
   19e60:	10c00015 	stw	r3,0(r2)
    return -1;
   19e64:	00bfffc4 	movi	r2,-1
  }
}
   19e68:	e037883a 	mov	sp,fp
   19e6c:	dfc00117 	ldw	ra,4(sp)
   19e70:	df000017 	ldw	fp,0(sp)
   19e74:	dec00204 	addi	sp,sp,8
   19e78:	f800283a 	ret

00019e7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19e7c:	defffc04 	addi	sp,sp,-16
   19e80:	df000315 	stw	fp,12(sp)
   19e84:	df000304 	addi	fp,sp,12
   19e88:	e13ffd15 	stw	r4,-12(fp)
   19e8c:	e17ffe15 	stw	r5,-8(fp)
   19e90:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19e94:	e0bfff17 	ldw	r2,-4(fp)
}
   19e98:	e037883a 	mov	sp,fp
   19e9c:	df000017 	ldw	fp,0(sp)
   19ea0:	dec00104 	addi	sp,sp,4
   19ea4:	f800283a 	ret

00019ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19ea8:	defffe04 	addi	sp,sp,-8
   19eac:	dfc00115 	stw	ra,4(sp)
   19eb0:	df000015 	stw	fp,0(sp)
   19eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19eb8:	008000f4 	movhi	r2,3
   19ebc:	10a77704 	addi	r2,r2,-25124
   19ec0:	10800017 	ldw	r2,0(r2)
   19ec4:	10000526 	beq	r2,zero,19edc <alt_get_errno+0x34>
   19ec8:	008000f4 	movhi	r2,3
   19ecc:	10a77704 	addi	r2,r2,-25124
   19ed0:	10800017 	ldw	r2,0(r2)
   19ed4:	103ee83a 	callr	r2
   19ed8:	00000206 	br	19ee4 <alt_get_errno+0x3c>
   19edc:	008000f4 	movhi	r2,3
   19ee0:	10a78704 	addi	r2,r2,-25060
}
   19ee4:	e037883a 	mov	sp,fp
   19ee8:	dfc00117 	ldw	ra,4(sp)
   19eec:	df000017 	ldw	fp,0(sp)
   19ef0:	dec00204 	addi	sp,sp,8
   19ef4:	f800283a 	ret

00019ef8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19ef8:	defffb04 	addi	sp,sp,-20
   19efc:	dfc00415 	stw	ra,16(sp)
   19f00:	df000315 	stw	fp,12(sp)
   19f04:	df000304 	addi	fp,sp,12
   19f08:	e13ffe15 	stw	r4,-8(fp)
   19f0c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19f10:	e0bffe17 	ldw	r2,-8(fp)
   19f14:	10000716 	blt	r2,zero,19f34 <fstat+0x3c>
   19f18:	e13ffe17 	ldw	r4,-8(fp)
   19f1c:	01400304 	movi	r5,12
   19f20:	00107940 	call	10794 <__mulsi3>
   19f24:	00c000f4 	movhi	r3,3
   19f28:	18e2f504 	addi	r3,r3,-29740
   19f2c:	10c5883a 	add	r2,r2,r3
   19f30:	00000106 	br	19f38 <fstat+0x40>
   19f34:	0005883a 	mov	r2,zero
   19f38:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   19f3c:	e0bffd17 	ldw	r2,-12(fp)
   19f40:	10001026 	beq	r2,zero,19f84 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   19f44:	e0bffd17 	ldw	r2,-12(fp)
   19f48:	10800017 	ldw	r2,0(r2)
   19f4c:	10800817 	ldw	r2,32(r2)
   19f50:	10000726 	beq	r2,zero,19f70 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   19f54:	e0bffd17 	ldw	r2,-12(fp)
   19f58:	10800017 	ldw	r2,0(r2)
   19f5c:	10800817 	ldw	r2,32(r2)
   19f60:	e13ffd17 	ldw	r4,-12(fp)
   19f64:	e17fff17 	ldw	r5,-4(fp)
   19f68:	103ee83a 	callr	r2
   19f6c:	00000906 	br	19f94 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19f70:	e0bfff17 	ldw	r2,-4(fp)
   19f74:	00c80004 	movi	r3,8192
   19f78:	10c00115 	stw	r3,4(r2)
      return 0;
   19f7c:	0005883a 	mov	r2,zero
   19f80:	00000406 	br	19f94 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19f84:	0019ea80 	call	19ea8 <alt_get_errno>
   19f88:	00c01444 	movi	r3,81
   19f8c:	10c00015 	stw	r3,0(r2)
    return -1;
   19f90:	00bfffc4 	movi	r2,-1
  }
}
   19f94:	e037883a 	mov	sp,fp
   19f98:	dfc00117 	ldw	ra,4(sp)
   19f9c:	df000017 	ldw	fp,0(sp)
   19fa0:	dec00204 	addi	sp,sp,8
   19fa4:	f800283a 	ret

00019fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19fa8:	defffe04 	addi	sp,sp,-8
   19fac:	dfc00115 	stw	ra,4(sp)
   19fb0:	df000015 	stw	fp,0(sp)
   19fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19fb8:	008000f4 	movhi	r2,3
   19fbc:	10a77704 	addi	r2,r2,-25124
   19fc0:	10800017 	ldw	r2,0(r2)
   19fc4:	10000526 	beq	r2,zero,19fdc <alt_get_errno+0x34>
   19fc8:	008000f4 	movhi	r2,3
   19fcc:	10a77704 	addi	r2,r2,-25124
   19fd0:	10800017 	ldw	r2,0(r2)
   19fd4:	103ee83a 	callr	r2
   19fd8:	00000206 	br	19fe4 <alt_get_errno+0x3c>
   19fdc:	008000f4 	movhi	r2,3
   19fe0:	10a78704 	addi	r2,r2,-25060
}
   19fe4:	e037883a 	mov	sp,fp
   19fe8:	dfc00117 	ldw	ra,4(sp)
   19fec:	df000017 	ldw	fp,0(sp)
   19ff0:	dec00204 	addi	sp,sp,8
   19ff4:	f800283a 	ret

00019ff8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   19ff8:	deffed04 	addi	sp,sp,-76
   19ffc:	dfc01215 	stw	ra,72(sp)
   1a000:	df001115 	stw	fp,68(sp)
   1a004:	df001104 	addi	fp,sp,68
   1a008:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a00c:	e0bfff17 	ldw	r2,-4(fp)
   1a010:	10000716 	blt	r2,zero,1a030 <isatty+0x38>
   1a014:	e13fff17 	ldw	r4,-4(fp)
   1a018:	01400304 	movi	r5,12
   1a01c:	00107940 	call	10794 <__mulsi3>
   1a020:	00c000f4 	movhi	r3,3
   1a024:	18e2f504 	addi	r3,r3,-29740
   1a028:	10c5883a 	add	r2,r2,r3
   1a02c:	00000106 	br	1a034 <isatty+0x3c>
   1a030:	0005883a 	mov	r2,zero
   1a034:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1a038:	e0bfef17 	ldw	r2,-68(fp)
   1a03c:	10000e26 	beq	r2,zero,1a078 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a040:	e0bfef17 	ldw	r2,-68(fp)
   1a044:	10800017 	ldw	r2,0(r2)
   1a048:	10800817 	ldw	r2,32(r2)
   1a04c:	1000021e 	bne	r2,zero,1a058 <isatty+0x60>
    {
      return 1;
   1a050:	00800044 	movi	r2,1
   1a054:	00000c06 	br	1a088 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a058:	e0bff004 	addi	r2,fp,-64
   1a05c:	e13fff17 	ldw	r4,-4(fp)
   1a060:	100b883a 	mov	r5,r2
   1a064:	0019ef80 	call	19ef8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a068:	e0bff117 	ldw	r2,-60(fp)
   1a06c:	10880020 	cmpeqi	r2,r2,8192
   1a070:	10803fcc 	andi	r2,r2,255
   1a074:	00000406 	br	1a088 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a078:	0019fa80 	call	19fa8 <alt_get_errno>
   1a07c:	00c01444 	movi	r3,81
   1a080:	10c00015 	stw	r3,0(r2)
    return 0;
   1a084:	0005883a 	mov	r2,zero
  }
}
   1a088:	e037883a 	mov	sp,fp
   1a08c:	dfc00117 	ldw	ra,4(sp)
   1a090:	df000017 	ldw	fp,0(sp)
   1a094:	dec00204 	addi	sp,sp,8
   1a098:	f800283a 	ret

0001a09c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1a09c:	defffc04 	addi	sp,sp,-16
   1a0a0:	df000315 	stw	fp,12(sp)
   1a0a4:	df000304 	addi	fp,sp,12
   1a0a8:	e13ffd15 	stw	r4,-12(fp)
   1a0ac:	e17ffe15 	stw	r5,-8(fp)
   1a0b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1a0b4:	e0fffe17 	ldw	r3,-8(fp)
   1a0b8:	e0bffd17 	ldw	r2,-12(fp)
   1a0bc:	18800e26 	beq	r3,r2,1a0f8 <alt_load_section+0x5c>
  {
    while( to != end )
   1a0c0:	00000a06 	br	1a0ec <alt_load_section+0x50>
    {
      *to++ = *from++;
   1a0c4:	e0bffd17 	ldw	r2,-12(fp)
   1a0c8:	10c00017 	ldw	r3,0(r2)
   1a0cc:	e0bffe17 	ldw	r2,-8(fp)
   1a0d0:	10c00015 	stw	r3,0(r2)
   1a0d4:	e0bffe17 	ldw	r2,-8(fp)
   1a0d8:	10800104 	addi	r2,r2,4
   1a0dc:	e0bffe15 	stw	r2,-8(fp)
   1a0e0:	e0bffd17 	ldw	r2,-12(fp)
   1a0e4:	10800104 	addi	r2,r2,4
   1a0e8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1a0ec:	e0fffe17 	ldw	r3,-8(fp)
   1a0f0:	e0bfff17 	ldw	r2,-4(fp)
   1a0f4:	18bff31e 	bne	r3,r2,1a0c4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1a0f8:	e037883a 	mov	sp,fp
   1a0fc:	df000017 	ldw	fp,0(sp)
   1a100:	dec00104 	addi	sp,sp,4
   1a104:	f800283a 	ret

0001a108 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1a108:	defffe04 	addi	sp,sp,-8
   1a10c:	dfc00115 	stw	ra,4(sp)
   1a110:	df000015 	stw	fp,0(sp)
   1a114:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1a118:	010000b4 	movhi	r4,2
   1a11c:	2131cb04 	addi	r4,r4,-14548
   1a120:	014000f4 	movhi	r5,3
   1a124:	2960e604 	addi	r5,r5,-31848
   1a128:	018000f4 	movhi	r6,3
   1a12c:	31a77c04 	addi	r6,r6,-25104
   1a130:	001a09c0 	call	1a09c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a134:	01000074 	movhi	r4,1
   1a138:	21000804 	addi	r4,r4,32
   1a13c:	01400074 	movhi	r5,1
   1a140:	29400804 	addi	r5,r5,32
   1a144:	01800074 	movhi	r6,1
   1a148:	31806e04 	addi	r6,r6,440
   1a14c:	001a09c0 	call	1a09c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a150:	010000f4 	movhi	r4,3
   1a154:	21200004 	addi	r4,r4,-32768
   1a158:	014000f4 	movhi	r5,3
   1a15c:	29600004 	addi	r5,r5,-32768
   1a160:	018000f4 	movhi	r6,3
   1a164:	31a0e604 	addi	r6,r6,-31848
   1a168:	001a09c0 	call	1a09c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a16c:	001b5ec0 	call	1b5ec <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a170:	001b7b00 	call	1b7b0 <alt_icache_flush_all>
}
   1a174:	e037883a 	mov	sp,fp
   1a178:	dfc00117 	ldw	ra,4(sp)
   1a17c:	df000017 	ldw	fp,0(sp)
   1a180:	dec00204 	addi	sp,sp,8
   1a184:	f800283a 	ret

0001a188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a188:	defffe04 	addi	sp,sp,-8
   1a18c:	dfc00115 	stw	ra,4(sp)
   1a190:	df000015 	stw	fp,0(sp)
   1a194:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a198:	008000f4 	movhi	r2,3
   1a19c:	10a77704 	addi	r2,r2,-25124
   1a1a0:	10800017 	ldw	r2,0(r2)
   1a1a4:	10000526 	beq	r2,zero,1a1bc <alt_get_errno+0x34>
   1a1a8:	008000f4 	movhi	r2,3
   1a1ac:	10a77704 	addi	r2,r2,-25124
   1a1b0:	10800017 	ldw	r2,0(r2)
   1a1b4:	103ee83a 	callr	r2
   1a1b8:	00000206 	br	1a1c4 <alt_get_errno+0x3c>
   1a1bc:	008000f4 	movhi	r2,3
   1a1c0:	10a78704 	addi	r2,r2,-25060
}
   1a1c4:	e037883a 	mov	sp,fp
   1a1c8:	dfc00117 	ldw	ra,4(sp)
   1a1cc:	df000017 	ldw	fp,0(sp)
   1a1d0:	dec00204 	addi	sp,sp,8
   1a1d4:	f800283a 	ret

0001a1d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a1d8:	defff904 	addi	sp,sp,-28
   1a1dc:	dfc00615 	stw	ra,24(sp)
   1a1e0:	df000515 	stw	fp,20(sp)
   1a1e4:	df000504 	addi	fp,sp,20
   1a1e8:	e13ffd15 	stw	r4,-12(fp)
   1a1ec:	e17ffe15 	stw	r5,-8(fp)
   1a1f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a1f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a1f8:	e0bffd17 	ldw	r2,-12(fp)
   1a1fc:	10000716 	blt	r2,zero,1a21c <lseek+0x44>
   1a200:	e13ffd17 	ldw	r4,-12(fp)
   1a204:	01400304 	movi	r5,12
   1a208:	00107940 	call	10794 <__mulsi3>
   1a20c:	00c000f4 	movhi	r3,3
   1a210:	18e2f504 	addi	r3,r3,-29740
   1a214:	10c5883a 	add	r2,r2,r3
   1a218:	00000106 	br	1a220 <lseek+0x48>
   1a21c:	0005883a 	mov	r2,zero
   1a220:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1a224:	e0bffc17 	ldw	r2,-16(fp)
   1a228:	10001026 	beq	r2,zero,1a26c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a22c:	e0bffc17 	ldw	r2,-16(fp)
   1a230:	10800017 	ldw	r2,0(r2)
   1a234:	10800717 	ldw	r2,28(r2)
   1a238:	10000926 	beq	r2,zero,1a260 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a23c:	e0bffc17 	ldw	r2,-16(fp)
   1a240:	10800017 	ldw	r2,0(r2)
   1a244:	10800717 	ldw	r2,28(r2)
   1a248:	e13ffc17 	ldw	r4,-16(fp)
   1a24c:	e17ffe17 	ldw	r5,-8(fp)
   1a250:	e1bfff17 	ldw	r6,-4(fp)
   1a254:	103ee83a 	callr	r2
   1a258:	e0bffb15 	stw	r2,-20(fp)
   1a25c:	00000506 	br	1a274 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a260:	00bfde84 	movi	r2,-134
   1a264:	e0bffb15 	stw	r2,-20(fp)
   1a268:	00000206 	br	1a274 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a26c:	00bfebc4 	movi	r2,-81
   1a270:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1a274:	e0bffb17 	ldw	r2,-20(fp)
   1a278:	1000060e 	bge	r2,zero,1a294 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1a27c:	001a1880 	call	1a188 <alt_get_errno>
   1a280:	e0fffb17 	ldw	r3,-20(fp)
   1a284:	00c7c83a 	sub	r3,zero,r3
   1a288:	10c00015 	stw	r3,0(r2)
    rc = -1;
   1a28c:	00bfffc4 	movi	r2,-1
   1a290:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1a294:	e0bffb17 	ldw	r2,-20(fp)
}
   1a298:	e037883a 	mov	sp,fp
   1a29c:	dfc00117 	ldw	ra,4(sp)
   1a2a0:	df000017 	ldw	fp,0(sp)
   1a2a4:	dec00204 	addi	sp,sp,8
   1a2a8:	f800283a 	ret

0001a2ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a2ac:	defffd04 	addi	sp,sp,-12
   1a2b0:	dfc00215 	stw	ra,8(sp)
   1a2b4:	df000115 	stw	fp,4(sp)
   1a2b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a2bc:	0009883a 	mov	r4,zero
   1a2c0:	001a7500 	call	1a750 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1a2c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a2c8:	001a7840 	call	1a784 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a2cc:	010000f4 	movhi	r4,3
   1a2d0:	2120dc04 	addi	r4,r4,-31888
   1a2d4:	014000f4 	movhi	r5,3
   1a2d8:	2960dc04 	addi	r5,r5,-31888
   1a2dc:	018000f4 	movhi	r6,3
   1a2e0:	31a0dc04 	addi	r6,r6,-31888
   1a2e4:	001bb880 	call	1bb88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a2e8:	001b6f80 	call	1b6f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a2ec:	010000b4 	movhi	r4,2
   1a2f0:	212dd504 	addi	r4,r4,-18604
   1a2f4:	001c3580 	call	1c358 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a2f8:	d1201b17 	ldw	r4,-32660(gp)
   1a2fc:	d0e01c17 	ldw	r3,-32656(gp)
   1a300:	d0a01d17 	ldw	r2,-32652(gp)
   1a304:	180b883a 	mov	r5,r3
   1a308:	100d883a 	mov	r6,r2
   1a30c:	00105200 	call	10520 <main>
   1a310:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a314:	01000044 	movi	r4,1
   1a318:	0019db00 	call	19db0 <close>
  exit (result);
   1a31c:	e13fff17 	ldw	r4,-4(fp)
   1a320:	001c36c0 	call	1c36c <exit>

0001a324 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a324:	defffe04 	addi	sp,sp,-8
   1a328:	df000115 	stw	fp,4(sp)
   1a32c:	df000104 	addi	fp,sp,4
   1a330:	e13fff15 	stw	r4,-4(fp)
}
   1a334:	e037883a 	mov	sp,fp
   1a338:	df000017 	ldw	fp,0(sp)
   1a33c:	dec00104 	addi	sp,sp,4
   1a340:	f800283a 	ret

0001a344 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a344:	defffe04 	addi	sp,sp,-8
   1a348:	df000115 	stw	fp,4(sp)
   1a34c:	df000104 	addi	fp,sp,4
   1a350:	e13fff15 	stw	r4,-4(fp)
}
   1a354:	e037883a 	mov	sp,fp
   1a358:	df000017 	ldw	fp,0(sp)
   1a35c:	dec00104 	addi	sp,sp,4
   1a360:	f800283a 	ret

0001a364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a364:	defffe04 	addi	sp,sp,-8
   1a368:	dfc00115 	stw	ra,4(sp)
   1a36c:	df000015 	stw	fp,0(sp)
   1a370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a374:	008000f4 	movhi	r2,3
   1a378:	10a77704 	addi	r2,r2,-25124
   1a37c:	10800017 	ldw	r2,0(r2)
   1a380:	10000526 	beq	r2,zero,1a398 <alt_get_errno+0x34>
   1a384:	008000f4 	movhi	r2,3
   1a388:	10a77704 	addi	r2,r2,-25124
   1a38c:	10800017 	ldw	r2,0(r2)
   1a390:	103ee83a 	callr	r2
   1a394:	00000206 	br	1a3a0 <alt_get_errno+0x3c>
   1a398:	008000f4 	movhi	r2,3
   1a39c:	10a78704 	addi	r2,r2,-25060
}
   1a3a0:	e037883a 	mov	sp,fp
   1a3a4:	dfc00117 	ldw	ra,4(sp)
   1a3a8:	df000017 	ldw	fp,0(sp)
   1a3ac:	dec00204 	addi	sp,sp,8
   1a3b0:	f800283a 	ret

0001a3b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a3b4:	defff904 	addi	sp,sp,-28
   1a3b8:	dfc00615 	stw	ra,24(sp)
   1a3bc:	df000515 	stw	fp,20(sp)
   1a3c0:	df000504 	addi	fp,sp,20
   1a3c4:	e13ffd15 	stw	r4,-12(fp)
   1a3c8:	e17ffe15 	stw	r5,-8(fp)
   1a3cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a3d0:	e0bffd17 	ldw	r2,-12(fp)
   1a3d4:	10000716 	blt	r2,zero,1a3f4 <read+0x40>
   1a3d8:	e13ffd17 	ldw	r4,-12(fp)
   1a3dc:	01400304 	movi	r5,12
   1a3e0:	00107940 	call	10794 <__mulsi3>
   1a3e4:	00c000f4 	movhi	r3,3
   1a3e8:	18e2f504 	addi	r3,r3,-29740
   1a3ec:	10c5883a 	add	r2,r2,r3
   1a3f0:	00000106 	br	1a3f8 <read+0x44>
   1a3f4:	0005883a 	mov	r2,zero
   1a3f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a3fc:	e0bffb17 	ldw	r2,-20(fp)
   1a400:	10002026 	beq	r2,zero,1a484 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a404:	e0bffb17 	ldw	r2,-20(fp)
   1a408:	10800217 	ldw	r2,8(r2)
   1a40c:	108000cc 	andi	r2,r2,3
   1a410:	10800060 	cmpeqi	r2,r2,1
   1a414:	1000171e 	bne	r2,zero,1a474 <read+0xc0>
        (fd->dev->read))
   1a418:	e0bffb17 	ldw	r2,-20(fp)
   1a41c:	10800017 	ldw	r2,0(r2)
   1a420:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a424:	10001326 	beq	r2,zero,1a474 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a428:	e0bffb17 	ldw	r2,-20(fp)
   1a42c:	10800017 	ldw	r2,0(r2)
   1a430:	10c00517 	ldw	r3,20(r2)
   1a434:	e0bfff17 	ldw	r2,-4(fp)
   1a438:	e13ffb17 	ldw	r4,-20(fp)
   1a43c:	e17ffe17 	ldw	r5,-8(fp)
   1a440:	100d883a 	mov	r6,r2
   1a444:	183ee83a 	callr	r3
   1a448:	e0bffc15 	stw	r2,-16(fp)
   1a44c:	e0bffc17 	ldw	r2,-16(fp)
   1a450:	1000060e 	bge	r2,zero,1a46c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1a454:	001a3640 	call	1a364 <alt_get_errno>
   1a458:	e0fffc17 	ldw	r3,-16(fp)
   1a45c:	00c7c83a 	sub	r3,zero,r3
   1a460:	10c00015 	stw	r3,0(r2)
          return -1;
   1a464:	00bfffc4 	movi	r2,-1
   1a468:	00000a06 	br	1a494 <read+0xe0>
        }
        return rval;
   1a46c:	e0bffc17 	ldw	r2,-16(fp)
   1a470:	00000806 	br	1a494 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a474:	001a3640 	call	1a364 <alt_get_errno>
   1a478:	00c00344 	movi	r3,13
   1a47c:	10c00015 	stw	r3,0(r2)
   1a480:	00000306 	br	1a490 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a484:	001a3640 	call	1a364 <alt_get_errno>
   1a488:	00c01444 	movi	r3,81
   1a48c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a490:	00bfffc4 	movi	r2,-1
}
   1a494:	e037883a 	mov	sp,fp
   1a498:	dfc00117 	ldw	ra,4(sp)
   1a49c:	df000017 	ldw	fp,0(sp)
   1a4a0:	dec00204 	addi	sp,sp,8
   1a4a4:	f800283a 	ret

0001a4a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a4a8:	defffc04 	addi	sp,sp,-16
   1a4ac:	dfc00315 	stw	ra,12(sp)
   1a4b0:	df000215 	stw	fp,8(sp)
   1a4b4:	dc000115 	stw	r16,4(sp)
   1a4b8:	df000104 	addi	fp,sp,4
   1a4bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a4c0:	e0bfff17 	ldw	r2,-4(fp)
   1a4c4:	108000d0 	cmplti	r2,r2,3
   1a4c8:	1000111e 	bne	r2,zero,1a510 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a4cc:	040000f4 	movhi	r16,3
   1a4d0:	8422f504 	addi	r16,r16,-29740
   1a4d4:	e0bfff17 	ldw	r2,-4(fp)
   1a4d8:	1009883a 	mov	r4,r2
   1a4dc:	01400304 	movi	r5,12
   1a4e0:	00107940 	call	10794 <__mulsi3>
   1a4e4:	8085883a 	add	r2,r16,r2
   1a4e8:	10800204 	addi	r2,r2,8
   1a4ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a4f0:	040000f4 	movhi	r16,3
   1a4f4:	8422f504 	addi	r16,r16,-29740
   1a4f8:	e0bfff17 	ldw	r2,-4(fp)
   1a4fc:	1009883a 	mov	r4,r2
   1a500:	01400304 	movi	r5,12
   1a504:	00107940 	call	10794 <__mulsi3>
   1a508:	8085883a 	add	r2,r16,r2
   1a50c:	10000015 	stw	zero,0(r2)
  }
}
   1a510:	e037883a 	mov	sp,fp
   1a514:	dfc00217 	ldw	ra,8(sp)
   1a518:	df000117 	ldw	fp,4(sp)
   1a51c:	dc000017 	ldw	r16,0(sp)
   1a520:	dec00304 	addi	sp,sp,12
   1a524:	f800283a 	ret

0001a528 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a528:	defff904 	addi	sp,sp,-28
   1a52c:	df000615 	stw	fp,24(sp)
   1a530:	df000604 	addi	fp,sp,24
   1a534:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a538:	0005303a 	rdctl	r2,status
   1a53c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a540:	e0fffc17 	ldw	r3,-16(fp)
   1a544:	00bfff84 	movi	r2,-2
   1a548:	1884703a 	and	r2,r3,r2
   1a54c:	1001703a 	wrctl	status,r2
  
  return context;
   1a550:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a554:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a558:	d0a00b17 	ldw	r2,-32724(gp)
   1a55c:	10c000c4 	addi	r3,r2,3
   1a560:	00bfff04 	movi	r2,-4
   1a564:	1884703a 	and	r2,r3,r2
   1a568:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a56c:	d0e00b17 	ldw	r3,-32724(gp)
   1a570:	e0bfff17 	ldw	r2,-4(fp)
   1a574:	1885883a 	add	r2,r3,r2
   1a578:	00c000f4 	movhi	r3,3
   1a57c:	18c00004 	addi	r3,r3,0
   1a580:	1880062e 	bgeu	r3,r2,1a59c <sbrk+0x74>
   1a584:	e0bffa17 	ldw	r2,-24(fp)
   1a588:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a58c:	e0bffd17 	ldw	r2,-12(fp)
   1a590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a594:	00bfffc4 	movi	r2,-1
   1a598:	00000b06 	br	1a5c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1a59c:	d0a00b17 	ldw	r2,-32724(gp)
   1a5a0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1a5a4:	d0e00b17 	ldw	r3,-32724(gp)
   1a5a8:	e0bfff17 	ldw	r2,-4(fp)
   1a5ac:	1885883a 	add	r2,r3,r2
   1a5b0:	d0a00b15 	stw	r2,-32724(gp)
   1a5b4:	e0bffa17 	ldw	r2,-24(fp)
   1a5b8:	e0bffe15 	stw	r2,-8(fp)
   1a5bc:	e0bffe17 	ldw	r2,-8(fp)
   1a5c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a5c4:	e0bffb17 	ldw	r2,-20(fp)
} 
   1a5c8:	e037883a 	mov	sp,fp
   1a5cc:	df000017 	ldw	fp,0(sp)
   1a5d0:	dec00104 	addi	sp,sp,4
   1a5d4:	f800283a 	ret

0001a5d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a5d8:	defffe04 	addi	sp,sp,-8
   1a5dc:	dfc00115 	stw	ra,4(sp)
   1a5e0:	df000015 	stw	fp,0(sp)
   1a5e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a5e8:	008000f4 	movhi	r2,3
   1a5ec:	10a77704 	addi	r2,r2,-25124
   1a5f0:	10800017 	ldw	r2,0(r2)
   1a5f4:	10000526 	beq	r2,zero,1a60c <alt_get_errno+0x34>
   1a5f8:	008000f4 	movhi	r2,3
   1a5fc:	10a77704 	addi	r2,r2,-25124
   1a600:	10800017 	ldw	r2,0(r2)
   1a604:	103ee83a 	callr	r2
   1a608:	00000206 	br	1a614 <alt_get_errno+0x3c>
   1a60c:	008000f4 	movhi	r2,3
   1a610:	10a78704 	addi	r2,r2,-25060
}
   1a614:	e037883a 	mov	sp,fp
   1a618:	dfc00117 	ldw	ra,4(sp)
   1a61c:	df000017 	ldw	fp,0(sp)
   1a620:	dec00204 	addi	sp,sp,8
   1a624:	f800283a 	ret

0001a628 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a628:	defff904 	addi	sp,sp,-28
   1a62c:	dfc00615 	stw	ra,24(sp)
   1a630:	df000515 	stw	fp,20(sp)
   1a634:	df000504 	addi	fp,sp,20
   1a638:	e13ffd15 	stw	r4,-12(fp)
   1a63c:	e17ffe15 	stw	r5,-8(fp)
   1a640:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a644:	e0bffd17 	ldw	r2,-12(fp)
   1a648:	10000716 	blt	r2,zero,1a668 <write+0x40>
   1a64c:	e13ffd17 	ldw	r4,-12(fp)
   1a650:	01400304 	movi	r5,12
   1a654:	00107940 	call	10794 <__mulsi3>
   1a658:	00c000f4 	movhi	r3,3
   1a65c:	18e2f504 	addi	r3,r3,-29740
   1a660:	10c5883a 	add	r2,r2,r3
   1a664:	00000106 	br	1a66c <write+0x44>
   1a668:	0005883a 	mov	r2,zero
   1a66c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a670:	e0bffb17 	ldw	r2,-20(fp)
   1a674:	10001f26 	beq	r2,zero,1a6f4 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a678:	e0bffb17 	ldw	r2,-20(fp)
   1a67c:	10800217 	ldw	r2,8(r2)
   1a680:	108000cc 	andi	r2,r2,3
   1a684:	10001726 	beq	r2,zero,1a6e4 <write+0xbc>
   1a688:	e0bffb17 	ldw	r2,-20(fp)
   1a68c:	10800017 	ldw	r2,0(r2)
   1a690:	10800617 	ldw	r2,24(r2)
   1a694:	10001326 	beq	r2,zero,1a6e4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a698:	e0bffb17 	ldw	r2,-20(fp)
   1a69c:	10800017 	ldw	r2,0(r2)
   1a6a0:	10c00617 	ldw	r3,24(r2)
   1a6a4:	e0bfff17 	ldw	r2,-4(fp)
   1a6a8:	e13ffb17 	ldw	r4,-20(fp)
   1a6ac:	e17ffe17 	ldw	r5,-8(fp)
   1a6b0:	100d883a 	mov	r6,r2
   1a6b4:	183ee83a 	callr	r3
   1a6b8:	e0bffc15 	stw	r2,-16(fp)
   1a6bc:	e0bffc17 	ldw	r2,-16(fp)
   1a6c0:	1000060e 	bge	r2,zero,1a6dc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1a6c4:	001a5d80 	call	1a5d8 <alt_get_errno>
   1a6c8:	e0fffc17 	ldw	r3,-16(fp)
   1a6cc:	00c7c83a 	sub	r3,zero,r3
   1a6d0:	10c00015 	stw	r3,0(r2)
        return -1;
   1a6d4:	00bfffc4 	movi	r2,-1
   1a6d8:	00000a06 	br	1a704 <write+0xdc>
      }
      return rval;
   1a6dc:	e0bffc17 	ldw	r2,-16(fp)
   1a6e0:	00000806 	br	1a704 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a6e4:	001a5d80 	call	1a5d8 <alt_get_errno>
   1a6e8:	00c00344 	movi	r3,13
   1a6ec:	10c00015 	stw	r3,0(r2)
   1a6f0:	00000306 	br	1a700 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a6f4:	001a5d80 	call	1a5d8 <alt_get_errno>
   1a6f8:	00c01444 	movi	r3,81
   1a6fc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a700:	00bfffc4 	movi	r2,-1
}
   1a704:	e037883a 	mov	sp,fp
   1a708:	dfc00117 	ldw	ra,4(sp)
   1a70c:	df000017 	ldw	fp,0(sp)
   1a710:	dec00204 	addi	sp,sp,8
   1a714:	f800283a 	ret

0001a718 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a718:	defffd04 	addi	sp,sp,-12
   1a71c:	dfc00215 	stw	ra,8(sp)
   1a720:	df000115 	stw	fp,4(sp)
   1a724:	df000104 	addi	fp,sp,4
   1a728:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a72c:	e13fff17 	ldw	r4,-4(fp)
   1a730:	014000f4 	movhi	r5,3
   1a734:	29677404 	addi	r5,r5,-25136
   1a738:	001b6580 	call	1b658 <alt_dev_llist_insert>
}
   1a73c:	e037883a 	mov	sp,fp
   1a740:	dfc00117 	ldw	ra,4(sp)
   1a744:	df000017 	ldw	fp,0(sp)
   1a748:	dec00204 	addi	sp,sp,8
   1a74c:	f800283a 	ret

0001a750 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a750:	defffd04 	addi	sp,sp,-12
   1a754:	dfc00215 	stw	ra,8(sp)
   1a758:	df000115 	stw	fp,4(sp)
   1a75c:	df000104 	addi	fp,sp,4
   1a760:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_1, cpu_1);
   1a764:	001c0340 	call	1c034 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a768:	00800044 	movi	r2,1
   1a76c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a770:	e037883a 	mov	sp,fp
   1a774:	dfc00117 	ldw	ra,4(sp)
   1a778:	df000017 	ldw	fp,0(sp)
   1a77c:	dec00204 	addi	sp,sp,8
   1a780:	f800283a 	ret

0001a784 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a784:	defffe04 	addi	sp,sp,-8
   1a788:	dfc00115 	stw	ra,4(sp)
   1a78c:	df000015 	stw	fp,0(sp)
   1a790:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHSCALE_TIMER_1, highscale_timer_1);
   1a794:	008000f4 	movhi	r2,3
   1a798:	10a78b04 	addi	r2,r2,-25044
   1a79c:	00c00134 	movhi	r3,4
   1a7a0:	18c41004 	addi	r3,r3,4160
   1a7a4:	10c00015 	stw	r3,0(r2)
   1a7a8:	008000f4 	movhi	r2,3
   1a7ac:	10a78c04 	addi	r2,r2,-25040
   1a7b0:	00c0bef4 	movhi	r3,763
   1a7b4:	18fc2004 	addi	r3,r3,-3968
   1a7b8:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   1a7bc:	01000134 	movhi	r4,4
   1a7c0:	21040804 	addi	r4,r4,4128
   1a7c4:	000b883a 	mov	r5,zero
   1a7c8:	01800044 	movi	r6,1
   1a7cc:	01c0fa04 	movi	r7,1000
   1a7d0:	001b2e40 	call	1b2e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   1a7d4:	010000f4 	movhi	r4,3
   1a7d8:	21235f04 	addi	r4,r4,-29316
   1a7dc:	000b883a 	mov	r5,zero
   1a7e0:	01800404 	movi	r6,16
   1a7e4:	001a9700 	call	1a970 <altera_avalon_jtag_uart_init>
   1a7e8:	010000f4 	movhi	r4,3
   1a7ec:	21235504 	addi	r4,r4,-29356
   1a7f0:	001a7180 	call	1a718 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
   1a7f4:	0001883a 	nop
}
   1a7f8:	e037883a 	mov	sp,fp
   1a7fc:	dfc00117 	ldw	ra,4(sp)
   1a800:	df000017 	ldw	fp,0(sp)
   1a804:	dec00204 	addi	sp,sp,8
   1a808:	f800283a 	ret

0001a80c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a80c:	defffa04 	addi	sp,sp,-24
   1a810:	dfc00515 	stw	ra,20(sp)
   1a814:	df000415 	stw	fp,16(sp)
   1a818:	df000404 	addi	fp,sp,16
   1a81c:	e13ffd15 	stw	r4,-12(fp)
   1a820:	e17ffe15 	stw	r5,-8(fp)
   1a824:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a828:	e0bffd17 	ldw	r2,-12(fp)
   1a82c:	10800017 	ldw	r2,0(r2)
   1a830:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a834:	e0bffc17 	ldw	r2,-16(fp)
   1a838:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1a83c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a840:	10800217 	ldw	r2,8(r2)
   1a844:	1809883a 	mov	r4,r3
   1a848:	e17ffe17 	ldw	r5,-8(fp)
   1a84c:	e1bfff17 	ldw	r6,-4(fp)
   1a850:	100f883a 	mov	r7,r2
   1a854:	001ae340 	call	1ae34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a858:	e037883a 	mov	sp,fp
   1a85c:	dfc00117 	ldw	ra,4(sp)
   1a860:	df000017 	ldw	fp,0(sp)
   1a864:	dec00204 	addi	sp,sp,8
   1a868:	f800283a 	ret

0001a86c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a86c:	defffa04 	addi	sp,sp,-24
   1a870:	dfc00515 	stw	ra,20(sp)
   1a874:	df000415 	stw	fp,16(sp)
   1a878:	df000404 	addi	fp,sp,16
   1a87c:	e13ffd15 	stw	r4,-12(fp)
   1a880:	e17ffe15 	stw	r5,-8(fp)
   1a884:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a888:	e0bffd17 	ldw	r2,-12(fp)
   1a88c:	10800017 	ldw	r2,0(r2)
   1a890:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a894:	e0bffc17 	ldw	r2,-16(fp)
   1a898:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1a89c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a8a0:	10800217 	ldw	r2,8(r2)
   1a8a4:	1809883a 	mov	r4,r3
   1a8a8:	e17ffe17 	ldw	r5,-8(fp)
   1a8ac:	e1bfff17 	ldw	r6,-4(fp)
   1a8b0:	100f883a 	mov	r7,r2
   1a8b4:	001b04c0 	call	1b04c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1a8b8:	e037883a 	mov	sp,fp
   1a8bc:	dfc00117 	ldw	ra,4(sp)
   1a8c0:	df000017 	ldw	fp,0(sp)
   1a8c4:	dec00204 	addi	sp,sp,8
   1a8c8:	f800283a 	ret

0001a8cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1a8cc:	defffc04 	addi	sp,sp,-16
   1a8d0:	dfc00315 	stw	ra,12(sp)
   1a8d4:	df000215 	stw	fp,8(sp)
   1a8d8:	df000204 	addi	fp,sp,8
   1a8dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a8e0:	e0bfff17 	ldw	r2,-4(fp)
   1a8e4:	10800017 	ldw	r2,0(r2)
   1a8e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1a8ec:	e0bffe17 	ldw	r2,-8(fp)
   1a8f0:	10c00a04 	addi	r3,r2,40
   1a8f4:	e0bfff17 	ldw	r2,-4(fp)
   1a8f8:	10800217 	ldw	r2,8(r2)
   1a8fc:	1809883a 	mov	r4,r3
   1a900:	100b883a 	mov	r5,r2
   1a904:	001acd80 	call	1acd8 <altera_avalon_jtag_uart_close>
}
   1a908:	e037883a 	mov	sp,fp
   1a90c:	dfc00117 	ldw	ra,4(sp)
   1a910:	df000017 	ldw	fp,0(sp)
   1a914:	dec00204 	addi	sp,sp,8
   1a918:	f800283a 	ret

0001a91c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1a91c:	defffa04 	addi	sp,sp,-24
   1a920:	dfc00515 	stw	ra,20(sp)
   1a924:	df000415 	stw	fp,16(sp)
   1a928:	df000404 	addi	fp,sp,16
   1a92c:	e13ffd15 	stw	r4,-12(fp)
   1a930:	e17ffe15 	stw	r5,-8(fp)
   1a934:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1a938:	e0bffd17 	ldw	r2,-12(fp)
   1a93c:	10800017 	ldw	r2,0(r2)
   1a940:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1a944:	e0bffc17 	ldw	r2,-16(fp)
   1a948:	10800a04 	addi	r2,r2,40
   1a94c:	1009883a 	mov	r4,r2
   1a950:	e17ffe17 	ldw	r5,-8(fp)
   1a954:	e1bfff17 	ldw	r6,-4(fp)
   1a958:	001ad400 	call	1ad40 <altera_avalon_jtag_uart_ioctl>
}
   1a95c:	e037883a 	mov	sp,fp
   1a960:	dfc00117 	ldw	ra,4(sp)
   1a964:	df000017 	ldw	fp,0(sp)
   1a968:	dec00204 	addi	sp,sp,8
   1a96c:	f800283a 	ret

0001a970 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1a970:	defffa04 	addi	sp,sp,-24
   1a974:	dfc00515 	stw	ra,20(sp)
   1a978:	df000415 	stw	fp,16(sp)
   1a97c:	df000404 	addi	fp,sp,16
   1a980:	e13ffd15 	stw	r4,-12(fp)
   1a984:	e17ffe15 	stw	r5,-8(fp)
   1a988:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a98c:	e0bffd17 	ldw	r2,-12(fp)
   1a990:	00c00044 	movi	r3,1
   1a994:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1a998:	e0bffd17 	ldw	r2,-12(fp)
   1a99c:	10800017 	ldw	r2,0(r2)
   1a9a0:	10800104 	addi	r2,r2,4
   1a9a4:	e0fffd17 	ldw	r3,-12(fp)
   1a9a8:	18c00817 	ldw	r3,32(r3)
   1a9ac:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1a9b0:	e0fffe17 	ldw	r3,-8(fp)
   1a9b4:	e0bfff17 	ldw	r2,-4(fp)
   1a9b8:	d8000015 	stw	zero,0(sp)
   1a9bc:	1809883a 	mov	r4,r3
   1a9c0:	100b883a 	mov	r5,r2
   1a9c4:	018000b4 	movhi	r6,2
   1a9c8:	31aa8c04 	addi	r6,r6,-21968
   1a9cc:	e1fffd17 	ldw	r7,-12(fp)
   1a9d0:	001b7e00 	call	1b7e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1a9d4:	e0bffd17 	ldw	r2,-12(fp)
   1a9d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1a9dc:	e0bffd17 	ldw	r2,-12(fp)
   1a9e0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a9e4:	008000f4 	movhi	r2,3
   1a9e8:	10a78e04 	addi	r2,r2,-25032
   1a9ec:	10800017 	ldw	r2,0(r2)
   1a9f0:	1809883a 	mov	r4,r3
   1a9f4:	100b883a 	mov	r5,r2
   1a9f8:	018000b4 	movhi	r6,2
   1a9fc:	31ab0d04 	addi	r6,r6,-21452
   1aa00:	e1fffd17 	ldw	r7,-12(fp)
   1aa04:	001b4ac0 	call	1b4ac <alt_alarm_start>
   1aa08:	1000040e 	bge	r2,zero,1aa1c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1aa0c:	e0bffd17 	ldw	r2,-12(fp)
   1aa10:	00e00034 	movhi	r3,32768
   1aa14:	18ffffc4 	addi	r3,r3,-1
   1aa18:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1aa1c:	e037883a 	mov	sp,fp
   1aa20:	dfc00117 	ldw	ra,4(sp)
   1aa24:	df000017 	ldw	fp,0(sp)
   1aa28:	dec00204 	addi	sp,sp,8
   1aa2c:	f800283a 	ret

0001aa30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1aa30:	defff804 	addi	sp,sp,-32
   1aa34:	df000715 	stw	fp,28(sp)
   1aa38:	df000704 	addi	fp,sp,28
   1aa3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1aa40:	e0bfff17 	ldw	r2,-4(fp)
   1aa44:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1aa48:	e0bffb17 	ldw	r2,-20(fp)
   1aa4c:	10800017 	ldw	r2,0(r2)
   1aa50:	e0bffc15 	stw	r2,-16(fp)
   1aa54:	00000106 	br	1aa5c <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   1aa58:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1aa5c:	e0bffc17 	ldw	r2,-16(fp)
   1aa60:	10800104 	addi	r2,r2,4
   1aa64:	10800037 	ldwio	r2,0(r2)
   1aa68:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1aa6c:	e0bffd17 	ldw	r2,-12(fp)
   1aa70:	1080c00c 	andi	r2,r2,768
   1aa74:	10006a26 	beq	r2,zero,1ac20 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1aa78:	e0bffd17 	ldw	r2,-12(fp)
   1aa7c:	1080400c 	andi	r2,r2,256
   1aa80:	10003326 	beq	r2,zero,1ab50 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1aa84:	00800074 	movhi	r2,1
   1aa88:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1aa8c:	e0bffb17 	ldw	r2,-20(fp)
   1aa90:	10800a17 	ldw	r2,40(r2)
   1aa94:	10800044 	addi	r2,r2,1
   1aa98:	1081ffcc 	andi	r2,r2,2047
   1aa9c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1aaa0:	e0bffb17 	ldw	r2,-20(fp)
   1aaa4:	10c00b17 	ldw	r3,44(r2)
   1aaa8:	e0bffe17 	ldw	r2,-8(fp)
   1aaac:	18801426 	beq	r3,r2,1ab00 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1aab0:	e0bffc17 	ldw	r2,-16(fp)
   1aab4:	10800037 	ldwio	r2,0(r2)
   1aab8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1aabc:	e0bff917 	ldw	r2,-28(fp)
   1aac0:	10a0000c 	andi	r2,r2,32768
   1aac4:	10001026 	beq	r2,zero,1ab08 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1aac8:	e0bffb17 	ldw	r2,-20(fp)
   1aacc:	10800a17 	ldw	r2,40(r2)
   1aad0:	e0fff917 	ldw	r3,-28(fp)
   1aad4:	e13ffb17 	ldw	r4,-20(fp)
   1aad8:	2085883a 	add	r2,r4,r2
   1aadc:	10800e04 	addi	r2,r2,56
   1aae0:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1aae4:	e0bffb17 	ldw	r2,-20(fp)
   1aae8:	10800a17 	ldw	r2,40(r2)
   1aaec:	10800044 	addi	r2,r2,1
   1aaf0:	10c1ffcc 	andi	r3,r2,2047
   1aaf4:	e0bffb17 	ldw	r2,-20(fp)
   1aaf8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1aafc:	003fe306 	br	1aa8c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1ab00:	0001883a 	nop
   1ab04:	00000106 	br	1ab0c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1ab08:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1ab0c:	e0bff917 	ldw	r2,-28(fp)
   1ab10:	10bfffec 	andhi	r2,r2,65535
   1ab14:	10000e26 	beq	r2,zero,1ab50 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ab18:	e0bffb17 	ldw	r2,-20(fp)
   1ab1c:	10c00817 	ldw	r3,32(r2)
   1ab20:	00bfff84 	movi	r2,-2
   1ab24:	1886703a 	and	r3,r3,r2
   1ab28:	e0bffb17 	ldw	r2,-20(fp)
   1ab2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1ab30:	e0bffc17 	ldw	r2,-16(fp)
   1ab34:	10800104 	addi	r2,r2,4
   1ab38:	e0fffb17 	ldw	r3,-20(fp)
   1ab3c:	18c00817 	ldw	r3,32(r3)
   1ab40:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ab44:	e0bffc17 	ldw	r2,-16(fp)
   1ab48:	10800104 	addi	r2,r2,4
   1ab4c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1ab50:	e0bffd17 	ldw	r2,-12(fp)
   1ab54:	1080800c 	andi	r2,r2,512
   1ab58:	103fbf26 	beq	r2,zero,1aa58 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1ab5c:	e0bffd17 	ldw	r2,-12(fp)
   1ab60:	1004d43a 	srli	r2,r2,16
   1ab64:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1ab68:	00001406 	br	1abbc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1ab6c:	e0bffc17 	ldw	r2,-16(fp)
   1ab70:	e0fffb17 	ldw	r3,-20(fp)
   1ab74:	18c00d17 	ldw	r3,52(r3)
   1ab78:	e13ffb17 	ldw	r4,-20(fp)
   1ab7c:	20c7883a 	add	r3,r4,r3
   1ab80:	18c20e04 	addi	r3,r3,2104
   1ab84:	18c00003 	ldbu	r3,0(r3)
   1ab88:	18c03fcc 	andi	r3,r3,255
   1ab8c:	18c0201c 	xori	r3,r3,128
   1ab90:	18ffe004 	addi	r3,r3,-128
   1ab94:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ab98:	e0bffb17 	ldw	r2,-20(fp)
   1ab9c:	10800d17 	ldw	r2,52(r2)
   1aba0:	10800044 	addi	r2,r2,1
   1aba4:	10c1ffcc 	andi	r3,r2,2047
   1aba8:	e0bffb17 	ldw	r2,-20(fp)
   1abac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1abb0:	e0bffa17 	ldw	r2,-24(fp)
   1abb4:	10bfffc4 	addi	r2,r2,-1
   1abb8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1abbc:	e0bffa17 	ldw	r2,-24(fp)
   1abc0:	10000526 	beq	r2,zero,1abd8 <altera_avalon_jtag_uart_irq+0x1a8>
   1abc4:	e0bffb17 	ldw	r2,-20(fp)
   1abc8:	10c00d17 	ldw	r3,52(r2)
   1abcc:	e0bffb17 	ldw	r2,-20(fp)
   1abd0:	10800c17 	ldw	r2,48(r2)
   1abd4:	18bfe51e 	bne	r3,r2,1ab6c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1abd8:	e0bffa17 	ldw	r2,-24(fp)
   1abdc:	103f9e26 	beq	r2,zero,1aa58 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1abe0:	e0bffb17 	ldw	r2,-20(fp)
   1abe4:	10c00817 	ldw	r3,32(r2)
   1abe8:	00bfff44 	movi	r2,-3
   1abec:	1886703a 	and	r3,r3,r2
   1abf0:	e0bffb17 	ldw	r2,-20(fp)
   1abf4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1abf8:	e0bffb17 	ldw	r2,-20(fp)
   1abfc:	10800017 	ldw	r2,0(r2)
   1ac00:	10800104 	addi	r2,r2,4
   1ac04:	e0fffb17 	ldw	r3,-20(fp)
   1ac08:	18c00817 	ldw	r3,32(r3)
   1ac0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ac10:	e0bffc17 	ldw	r2,-16(fp)
   1ac14:	10800104 	addi	r2,r2,4
   1ac18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1ac1c:	003f8e06 	br	1aa58 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1ac20:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1ac24:	e037883a 	mov	sp,fp
   1ac28:	df000017 	ldw	fp,0(sp)
   1ac2c:	dec00104 	addi	sp,sp,4
   1ac30:	f800283a 	ret

0001ac34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1ac34:	defffc04 	addi	sp,sp,-16
   1ac38:	df000315 	stw	fp,12(sp)
   1ac3c:	df000304 	addi	fp,sp,12
   1ac40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1ac44:	e0bfff17 	ldw	r2,-4(fp)
   1ac48:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1ac4c:	e0bffd17 	ldw	r2,-12(fp)
   1ac50:	10800017 	ldw	r2,0(r2)
   1ac54:	10800104 	addi	r2,r2,4
   1ac58:	10800037 	ldwio	r2,0(r2)
   1ac5c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1ac60:	e0bffe17 	ldw	r2,-8(fp)
   1ac64:	1081000c 	andi	r2,r2,1024
   1ac68:	10000a26 	beq	r2,zero,1ac94 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1ac6c:	e0bffd17 	ldw	r2,-12(fp)
   1ac70:	10800017 	ldw	r2,0(r2)
   1ac74:	10800104 	addi	r2,r2,4
   1ac78:	e0fffd17 	ldw	r3,-12(fp)
   1ac7c:	18c00817 	ldw	r3,32(r3)
   1ac80:	18c10014 	ori	r3,r3,1024
   1ac84:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1ac88:	e0bffd17 	ldw	r2,-12(fp)
   1ac8c:	10000915 	stw	zero,36(r2)
   1ac90:	00000a06 	br	1acbc <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1ac94:	e0bffd17 	ldw	r2,-12(fp)
   1ac98:	10800917 	ldw	r2,36(r2)
   1ac9c:	00e00034 	movhi	r3,32768
   1aca0:	18ffff04 	addi	r3,r3,-4
   1aca4:	18800536 	bltu	r3,r2,1acbc <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   1aca8:	e0bffd17 	ldw	r2,-12(fp)
   1acac:	10800917 	ldw	r2,36(r2)
   1acb0:	10c00044 	addi	r3,r2,1
   1acb4:	e0bffd17 	ldw	r2,-12(fp)
   1acb8:	10c00915 	stw	r3,36(r2)
   1acbc:	008000f4 	movhi	r2,3
   1acc0:	10a78e04 	addi	r2,r2,-25032
   1acc4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1acc8:	e037883a 	mov	sp,fp
   1accc:	df000017 	ldw	fp,0(sp)
   1acd0:	dec00104 	addi	sp,sp,4
   1acd4:	f800283a 	ret

0001acd8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1acd8:	defffd04 	addi	sp,sp,-12
   1acdc:	df000215 	stw	fp,8(sp)
   1ace0:	df000204 	addi	fp,sp,8
   1ace4:	e13ffe15 	stw	r4,-8(fp)
   1ace8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1acec:	00000506 	br	1ad04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1acf0:	e0bfff17 	ldw	r2,-4(fp)
   1acf4:	1090000c 	andi	r2,r2,16384
   1acf8:	10000226 	beq	r2,zero,1ad04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1acfc:	00bffd44 	movi	r2,-11
   1ad00:	00000b06 	br	1ad30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ad04:	e0bffe17 	ldw	r2,-8(fp)
   1ad08:	10c00d17 	ldw	r3,52(r2)
   1ad0c:	e0bffe17 	ldw	r2,-8(fp)
   1ad10:	10800c17 	ldw	r2,48(r2)
   1ad14:	18800526 	beq	r3,r2,1ad2c <altera_avalon_jtag_uart_close+0x54>
   1ad18:	e0bffe17 	ldw	r2,-8(fp)
   1ad1c:	10c00917 	ldw	r3,36(r2)
   1ad20:	e0bffe17 	ldw	r2,-8(fp)
   1ad24:	10800117 	ldw	r2,4(r2)
   1ad28:	18bff136 	bltu	r3,r2,1acf0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1ad2c:	0005883a 	mov	r2,zero
}
   1ad30:	e037883a 	mov	sp,fp
   1ad34:	df000017 	ldw	fp,0(sp)
   1ad38:	dec00104 	addi	sp,sp,4
   1ad3c:	f800283a 	ret

0001ad40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1ad40:	defffa04 	addi	sp,sp,-24
   1ad44:	df000515 	stw	fp,20(sp)
   1ad48:	df000504 	addi	fp,sp,20
   1ad4c:	e13ffd15 	stw	r4,-12(fp)
   1ad50:	e17ffe15 	stw	r5,-8(fp)
   1ad54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1ad58:	00bff9c4 	movi	r2,-25
   1ad5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1ad60:	e0bffe17 	ldw	r2,-8(fp)
   1ad64:	10da8060 	cmpeqi	r3,r2,27137
   1ad68:	1800031e 	bne	r3,zero,1ad78 <altera_avalon_jtag_uart_ioctl+0x38>
   1ad6c:	109a80a0 	cmpeqi	r2,r2,27138
   1ad70:	1000181e 	bne	r2,zero,1add4 <altera_avalon_jtag_uart_ioctl+0x94>
   1ad74:	00002606 	br	1ae10 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1ad78:	e0bffd17 	ldw	r2,-12(fp)
   1ad7c:	10c00117 	ldw	r3,4(r2)
   1ad80:	00a00034 	movhi	r2,32768
   1ad84:	10bfffc4 	addi	r2,r2,-1
   1ad88:	18802226 	beq	r3,r2,1ae14 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   1ad8c:	e0bfff17 	ldw	r2,-4(fp)
   1ad90:	10800017 	ldw	r2,0(r2)
   1ad94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1ad98:	e0bffc17 	ldw	r2,-16(fp)
   1ad9c:	10800090 	cmplti	r2,r2,2
   1ada0:	1000061e 	bne	r2,zero,1adbc <altera_avalon_jtag_uart_ioctl+0x7c>
   1ada4:	e0fffc17 	ldw	r3,-16(fp)
   1ada8:	00a00034 	movhi	r2,32768
   1adac:	10bfffc4 	addi	r2,r2,-1
   1adb0:	18800226 	beq	r3,r2,1adbc <altera_avalon_jtag_uart_ioctl+0x7c>
   1adb4:	e0bffc17 	ldw	r2,-16(fp)
   1adb8:	00000206 	br	1adc4 <altera_avalon_jtag_uart_ioctl+0x84>
   1adbc:	00a00034 	movhi	r2,32768
   1adc0:	10bfff84 	addi	r2,r2,-2
   1adc4:	e0fffd17 	ldw	r3,-12(fp)
   1adc8:	18800115 	stw	r2,4(r3)
      rc = 0;
   1adcc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1add0:	00001006 	br	1ae14 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1add4:	e0bffd17 	ldw	r2,-12(fp)
   1add8:	10c00117 	ldw	r3,4(r2)
   1addc:	00a00034 	movhi	r2,32768
   1ade0:	10bfffc4 	addi	r2,r2,-1
   1ade4:	18800d26 	beq	r3,r2,1ae1c <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1ade8:	e0bffd17 	ldw	r2,-12(fp)
   1adec:	10c00917 	ldw	r3,36(r2)
   1adf0:	e0bffd17 	ldw	r2,-12(fp)
   1adf4:	10800117 	ldw	r2,4(r2)
   1adf8:	1885803a 	cmpltu	r2,r3,r2
   1adfc:	10c03fcc 	andi	r3,r2,255
   1ae00:	e0bfff17 	ldw	r2,-4(fp)
   1ae04:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1ae08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1ae0c:	00000306 	br	1ae1c <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   1ae10:	00000306 	br	1ae20 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1ae14:	0001883a 	nop
   1ae18:	00000106 	br	1ae20 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1ae1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1ae20:	e0bffb17 	ldw	r2,-20(fp)
}
   1ae24:	e037883a 	mov	sp,fp
   1ae28:	df000017 	ldw	fp,0(sp)
   1ae2c:	dec00104 	addi	sp,sp,4
   1ae30:	f800283a 	ret

0001ae34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1ae34:	defff304 	addi	sp,sp,-52
   1ae38:	dfc00c15 	stw	ra,48(sp)
   1ae3c:	df000b15 	stw	fp,44(sp)
   1ae40:	df000b04 	addi	fp,sp,44
   1ae44:	e13ffc15 	stw	r4,-16(fp)
   1ae48:	e17ffd15 	stw	r5,-12(fp)
   1ae4c:	e1bffe15 	stw	r6,-8(fp)
   1ae50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1ae54:	e0bffd17 	ldw	r2,-12(fp)
   1ae58:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1ae5c:	00004706 	br	1af7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1ae60:	e0bffc17 	ldw	r2,-16(fp)
   1ae64:	10800a17 	ldw	r2,40(r2)
   1ae68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1ae6c:	e0bffc17 	ldw	r2,-16(fp)
   1ae70:	10800b17 	ldw	r2,44(r2)
   1ae74:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1ae78:	e0fff717 	ldw	r3,-36(fp)
   1ae7c:	e0bff817 	ldw	r2,-32(fp)
   1ae80:	18800536 	bltu	r3,r2,1ae98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1ae84:	e0fff717 	ldw	r3,-36(fp)
   1ae88:	e0bff817 	ldw	r2,-32(fp)
   1ae8c:	1885c83a 	sub	r2,r3,r2
   1ae90:	e0bff615 	stw	r2,-40(fp)
   1ae94:	00000406 	br	1aea8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1ae98:	00c20004 	movi	r3,2048
   1ae9c:	e0bff817 	ldw	r2,-32(fp)
   1aea0:	1885c83a 	sub	r2,r3,r2
   1aea4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1aea8:	e0bff617 	ldw	r2,-40(fp)
   1aeac:	10001e26 	beq	r2,zero,1af28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1aeb0:	e0fffe17 	ldw	r3,-8(fp)
   1aeb4:	e0bff617 	ldw	r2,-40(fp)
   1aeb8:	1880022e 	bgeu	r3,r2,1aec4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1aebc:	e0bffe17 	ldw	r2,-8(fp)
   1aec0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1aec4:	e0bff817 	ldw	r2,-32(fp)
   1aec8:	10800e04 	addi	r2,r2,56
   1aecc:	e0fffc17 	ldw	r3,-16(fp)
   1aed0:	1885883a 	add	r2,r3,r2
   1aed4:	e13ff517 	ldw	r4,-44(fp)
   1aed8:	100b883a 	mov	r5,r2
   1aedc:	e1bff617 	ldw	r6,-40(fp)
   1aee0:	0015c3c0 	call	15c3c <memcpy>
      ptr   += n;
   1aee4:	e0fff517 	ldw	r3,-44(fp)
   1aee8:	e0bff617 	ldw	r2,-40(fp)
   1aeec:	1885883a 	add	r2,r3,r2
   1aef0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1aef4:	e0fffe17 	ldw	r3,-8(fp)
   1aef8:	e0bff617 	ldw	r2,-40(fp)
   1aefc:	1885c83a 	sub	r2,r3,r2
   1af00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1af04:	e0fff817 	ldw	r3,-32(fp)
   1af08:	e0bff617 	ldw	r2,-40(fp)
   1af0c:	1885883a 	add	r2,r3,r2
   1af10:	10c1ffcc 	andi	r3,r2,2047
   1af14:	e0bffc17 	ldw	r2,-16(fp)
   1af18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1af1c:	e0bffe17 	ldw	r2,-8(fp)
   1af20:	00bfcf16 	blt	zero,r2,1ae60 <altera_avalon_jtag_uart_read+0x2c>
   1af24:	00000106 	br	1af2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1af28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1af2c:	e0fff517 	ldw	r3,-44(fp)
   1af30:	e0bffd17 	ldw	r2,-12(fp)
   1af34:	1880141e 	bne	r3,r2,1af88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1af38:	e0bfff17 	ldw	r2,-4(fp)
   1af3c:	1090000c 	andi	r2,r2,16384
   1af40:	1000131e 	bne	r2,zero,1af90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1af44:	0001883a 	nop
   1af48:	e0bffc17 	ldw	r2,-16(fp)
   1af4c:	10c00a17 	ldw	r3,40(r2)
   1af50:	e0bff717 	ldw	r2,-36(fp)
   1af54:	1880051e 	bne	r3,r2,1af6c <altera_avalon_jtag_uart_read+0x138>
   1af58:	e0bffc17 	ldw	r2,-16(fp)
   1af5c:	10c00917 	ldw	r3,36(r2)
   1af60:	e0bffc17 	ldw	r2,-16(fp)
   1af64:	10800117 	ldw	r2,4(r2)
   1af68:	18bff736 	bltu	r3,r2,1af48 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1af6c:	e0bffc17 	ldw	r2,-16(fp)
   1af70:	10c00a17 	ldw	r3,40(r2)
   1af74:	e0bff717 	ldw	r2,-36(fp)
   1af78:	18800726 	beq	r3,r2,1af98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1af7c:	e0bffe17 	ldw	r2,-8(fp)
   1af80:	00bfb716 	blt	zero,r2,1ae60 <altera_avalon_jtag_uart_read+0x2c>
   1af84:	00000506 	br	1af9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1af88:	0001883a 	nop
   1af8c:	00000306 	br	1af9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1af90:	0001883a 	nop
   1af94:	00000106 	br	1af9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1af98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1af9c:	e0fff517 	ldw	r3,-44(fp)
   1afa0:	e0bffd17 	ldw	r2,-12(fp)
   1afa4:	18801726 	beq	r3,r2,1b004 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1afa8:	0005303a 	rdctl	r2,status
   1afac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1afb0:	e0fffa17 	ldw	r3,-24(fp)
   1afb4:	00bfff84 	movi	r2,-2
   1afb8:	1884703a 	and	r2,r3,r2
   1afbc:	1001703a 	wrctl	status,r2
  
  return context;
   1afc0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1afc4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1afc8:	e0bffc17 	ldw	r2,-16(fp)
   1afcc:	10800817 	ldw	r2,32(r2)
   1afd0:	10c00054 	ori	r3,r2,1
   1afd4:	e0bffc17 	ldw	r2,-16(fp)
   1afd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1afdc:	e0bffc17 	ldw	r2,-16(fp)
   1afe0:	10800017 	ldw	r2,0(r2)
   1afe4:	10800104 	addi	r2,r2,4
   1afe8:	e0fffc17 	ldw	r3,-16(fp)
   1afec:	18c00817 	ldw	r3,32(r3)
   1aff0:	10c00035 	stwio	r3,0(r2)
   1aff4:	e0bff917 	ldw	r2,-28(fp)
   1aff8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1affc:	e0bffb17 	ldw	r2,-20(fp)
   1b000:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b004:	e0fff517 	ldw	r3,-44(fp)
   1b008:	e0bffd17 	ldw	r2,-12(fp)
   1b00c:	18800426 	beq	r3,r2,1b020 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   1b010:	e0fff517 	ldw	r3,-44(fp)
   1b014:	e0bffd17 	ldw	r2,-12(fp)
   1b018:	1885c83a 	sub	r2,r3,r2
   1b01c:	00000606 	br	1b038 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   1b020:	e0bfff17 	ldw	r2,-4(fp)
   1b024:	1090000c 	andi	r2,r2,16384
   1b028:	10000226 	beq	r2,zero,1b034 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   1b02c:	00bffd44 	movi	r2,-11
   1b030:	00000106 	br	1b038 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   1b034:	00bffec4 	movi	r2,-5
}
   1b038:	e037883a 	mov	sp,fp
   1b03c:	dfc00117 	ldw	ra,4(sp)
   1b040:	df000017 	ldw	fp,0(sp)
   1b044:	dec00204 	addi	sp,sp,8
   1b048:	f800283a 	ret

0001b04c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b04c:	defff304 	addi	sp,sp,-52
   1b050:	dfc00c15 	stw	ra,48(sp)
   1b054:	df000b15 	stw	fp,44(sp)
   1b058:	df000b04 	addi	fp,sp,44
   1b05c:	e13ffc15 	stw	r4,-16(fp)
   1b060:	e17ffd15 	stw	r5,-12(fp)
   1b064:	e1bffe15 	stw	r6,-8(fp)
   1b068:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b06c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b070:	e0bffd17 	ldw	r2,-12(fp)
   1b074:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b078:	00003706 	br	1b158 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b07c:	e0bffc17 	ldw	r2,-16(fp)
   1b080:	10800c17 	ldw	r2,48(r2)
   1b084:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1b088:	e0bffc17 	ldw	r2,-16(fp)
   1b08c:	10800d17 	ldw	r2,52(r2)
   1b090:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1b094:	e0fff817 	ldw	r3,-32(fp)
   1b098:	e0bff517 	ldw	r2,-44(fp)
   1b09c:	1880062e 	bgeu	r3,r2,1b0b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1b0a0:	e0fff517 	ldw	r3,-44(fp)
   1b0a4:	e0bff817 	ldw	r2,-32(fp)
   1b0a8:	1885c83a 	sub	r2,r3,r2
   1b0ac:	10bfffc4 	addi	r2,r2,-1
   1b0b0:	e0bff615 	stw	r2,-40(fp)
   1b0b4:	00000b06 	br	1b0e4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1b0b8:	e0bff517 	ldw	r2,-44(fp)
   1b0bc:	10000526 	beq	r2,zero,1b0d4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b0c0:	00c20004 	movi	r3,2048
   1b0c4:	e0bff817 	ldw	r2,-32(fp)
   1b0c8:	1885c83a 	sub	r2,r3,r2
   1b0cc:	e0bff615 	stw	r2,-40(fp)
   1b0d0:	00000406 	br	1b0e4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b0d4:	00c1ffc4 	movi	r3,2047
   1b0d8:	e0bff817 	ldw	r2,-32(fp)
   1b0dc:	1885c83a 	sub	r2,r3,r2
   1b0e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1b0e4:	e0bff617 	ldw	r2,-40(fp)
   1b0e8:	10001e26 	beq	r2,zero,1b164 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1b0ec:	e0fffe17 	ldw	r3,-8(fp)
   1b0f0:	e0bff617 	ldw	r2,-40(fp)
   1b0f4:	1880022e 	bgeu	r3,r2,1b100 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1b0f8:	e0bffe17 	ldw	r2,-8(fp)
   1b0fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b100:	e0bff817 	ldw	r2,-32(fp)
   1b104:	10820e04 	addi	r2,r2,2104
   1b108:	e0fffc17 	ldw	r3,-16(fp)
   1b10c:	1885883a 	add	r2,r3,r2
   1b110:	1009883a 	mov	r4,r2
   1b114:	e17ffd17 	ldw	r5,-12(fp)
   1b118:	e1bff617 	ldw	r6,-40(fp)
   1b11c:	0015c3c0 	call	15c3c <memcpy>
      ptr   += n;
   1b120:	e0fffd17 	ldw	r3,-12(fp)
   1b124:	e0bff617 	ldw	r2,-40(fp)
   1b128:	1885883a 	add	r2,r3,r2
   1b12c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1b130:	e0fffe17 	ldw	r3,-8(fp)
   1b134:	e0bff617 	ldw	r2,-40(fp)
   1b138:	1885c83a 	sub	r2,r3,r2
   1b13c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b140:	e0fff817 	ldw	r3,-32(fp)
   1b144:	e0bff617 	ldw	r2,-40(fp)
   1b148:	1885883a 	add	r2,r3,r2
   1b14c:	10c1ffcc 	andi	r3,r2,2047
   1b150:	e0bffc17 	ldw	r2,-16(fp)
   1b154:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b158:	e0bffe17 	ldw	r2,-8(fp)
   1b15c:	00bfc716 	blt	zero,r2,1b07c <altera_avalon_jtag_uart_write+0x30>
   1b160:	00000106 	br	1b168 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1b164:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b168:	0005303a 	rdctl	r2,status
   1b16c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b170:	e0fffa17 	ldw	r3,-24(fp)
   1b174:	00bfff84 	movi	r2,-2
   1b178:	1884703a 	and	r2,r3,r2
   1b17c:	1001703a 	wrctl	status,r2
  
  return context;
   1b180:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b184:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b188:	e0bffc17 	ldw	r2,-16(fp)
   1b18c:	10800817 	ldw	r2,32(r2)
   1b190:	10c00094 	ori	r3,r2,2
   1b194:	e0bffc17 	ldw	r2,-16(fp)
   1b198:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b19c:	e0bffc17 	ldw	r2,-16(fp)
   1b1a0:	10800017 	ldw	r2,0(r2)
   1b1a4:	10800104 	addi	r2,r2,4
   1b1a8:	e0fffc17 	ldw	r3,-16(fp)
   1b1ac:	18c00817 	ldw	r3,32(r3)
   1b1b0:	10c00035 	stwio	r3,0(r2)
   1b1b4:	e0bff917 	ldw	r2,-28(fp)
   1b1b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b1bc:	e0bffb17 	ldw	r2,-20(fp)
   1b1c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b1c4:	e0bffe17 	ldw	r2,-8(fp)
   1b1c8:	0080110e 	bge	zero,r2,1b210 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1b1cc:	e0bfff17 	ldw	r2,-4(fp)
   1b1d0:	1090000c 	andi	r2,r2,16384
   1b1d4:	1000111e 	bne	r2,zero,1b21c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b1d8:	0001883a 	nop
   1b1dc:	e0bffc17 	ldw	r2,-16(fp)
   1b1e0:	10c00d17 	ldw	r3,52(r2)
   1b1e4:	e0bff517 	ldw	r2,-44(fp)
   1b1e8:	1880051e 	bne	r3,r2,1b200 <altera_avalon_jtag_uart_write+0x1b4>
   1b1ec:	e0bffc17 	ldw	r2,-16(fp)
   1b1f0:	10c00917 	ldw	r3,36(r2)
   1b1f4:	e0bffc17 	ldw	r2,-16(fp)
   1b1f8:	10800117 	ldw	r2,4(r2)
   1b1fc:	18bff736 	bltu	r3,r2,1b1dc <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1b200:	e0bffc17 	ldw	r2,-16(fp)
   1b204:	10c00d17 	ldw	r3,52(r2)
   1b208:	e0bff517 	ldw	r2,-44(fp)
   1b20c:	18800526 	beq	r3,r2,1b224 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1b210:	e0bffe17 	ldw	r2,-8(fp)
   1b214:	00bfd016 	blt	zero,r2,1b158 <altera_avalon_jtag_uart_write+0x10c>
   1b218:	00000306 	br	1b228 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1b21c:	0001883a 	nop
   1b220:	00000106 	br	1b228 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   1b224:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1b228:	e0fffd17 	ldw	r3,-12(fp)
   1b22c:	e0bff717 	ldw	r2,-36(fp)
   1b230:	18800426 	beq	r3,r2,1b244 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1b234:	e0fffd17 	ldw	r3,-12(fp)
   1b238:	e0bff717 	ldw	r2,-36(fp)
   1b23c:	1885c83a 	sub	r2,r3,r2
   1b240:	00000606 	br	1b25c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1b244:	e0bfff17 	ldw	r2,-4(fp)
   1b248:	1090000c 	andi	r2,r2,16384
   1b24c:	10000226 	beq	r2,zero,1b258 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1b250:	00bffd44 	movi	r2,-11
   1b254:	00000106 	br	1b25c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1b258:	00bffec4 	movi	r2,-5
}
   1b25c:	e037883a 	mov	sp,fp
   1b260:	dfc00117 	ldw	ra,4(sp)
   1b264:	df000017 	ldw	fp,0(sp)
   1b268:	dec00204 	addi	sp,sp,8
   1b26c:	f800283a 	ret

0001b270 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b270:	defffa04 	addi	sp,sp,-24
   1b274:	dfc00515 	stw	ra,20(sp)
   1b278:	df000415 	stw	fp,16(sp)
   1b27c:	df000404 	addi	fp,sp,16
   1b280:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b284:	0007883a 	mov	r3,zero
   1b288:	e0bfff17 	ldw	r2,-4(fp)
   1b28c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b290:	e0bfff17 	ldw	r2,-4(fp)
   1b294:	10800104 	addi	r2,r2,4
   1b298:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b29c:	0005303a 	rdctl	r2,status
   1b2a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b2a4:	e0fffd17 	ldw	r3,-12(fp)
   1b2a8:	00bfff84 	movi	r2,-2
   1b2ac:	1884703a 	and	r2,r3,r2
   1b2b0:	1001703a 	wrctl	status,r2
  
  return context;
   1b2b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b2b8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1b2bc:	001bf300 	call	1bf30 <alt_tick>
   1b2c0:	e0bffc17 	ldw	r2,-16(fp)
   1b2c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b2c8:	e0bffe17 	ldw	r2,-8(fp)
   1b2cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b2d0:	e037883a 	mov	sp,fp
   1b2d4:	dfc00117 	ldw	ra,4(sp)
   1b2d8:	df000017 	ldw	fp,0(sp)
   1b2dc:	dec00204 	addi	sp,sp,8
   1b2e0:	f800283a 	ret

0001b2e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b2e4:	defff804 	addi	sp,sp,-32
   1b2e8:	dfc00715 	stw	ra,28(sp)
   1b2ec:	df000615 	stw	fp,24(sp)
   1b2f0:	df000604 	addi	fp,sp,24
   1b2f4:	e13ffc15 	stw	r4,-16(fp)
   1b2f8:	e17ffd15 	stw	r5,-12(fp)
   1b2fc:	e1bffe15 	stw	r6,-8(fp)
   1b300:	e1ffff15 	stw	r7,-4(fp)
   1b304:	e0bfff17 	ldw	r2,-4(fp)
   1b308:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b30c:	008000f4 	movhi	r2,3
   1b310:	10a78e04 	addi	r2,r2,-25032
   1b314:	10800017 	ldw	r2,0(r2)
   1b318:	1000041e 	bne	r2,zero,1b32c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1b31c:	008000f4 	movhi	r2,3
   1b320:	10a78e04 	addi	r2,r2,-25032
   1b324:	e0fffb17 	ldw	r3,-20(fp)
   1b328:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b32c:	e0bffc17 	ldw	r2,-16(fp)
   1b330:	10800104 	addi	r2,r2,4
   1b334:	00c001c4 	movi	r3,7
   1b338:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1b33c:	d8000015 	stw	zero,0(sp)
   1b340:	e13ffd17 	ldw	r4,-12(fp)
   1b344:	e17ffe17 	ldw	r5,-8(fp)
   1b348:	018000b4 	movhi	r6,2
   1b34c:	31ac9c04 	addi	r6,r6,-19856
   1b350:	e1fffc17 	ldw	r7,-16(fp)
   1b354:	001b7e00 	call	1b7e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1b358:	e037883a 	mov	sp,fp
   1b35c:	dfc00117 	ldw	ra,4(sp)
   1b360:	df000017 	ldw	fp,0(sp)
   1b364:	dec00204 	addi	sp,sp,8
   1b368:	f800283a 	ret

0001b36c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1b36c:	defffe04 	addi	sp,sp,-8
   1b370:	df000115 	stw	fp,4(sp)
   1b374:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   1b378:	008000f4 	movhi	r2,3
   1b37c:	10a78b04 	addi	r2,r2,-25044
   1b380:	10800017 	ldw	r2,0(r2)
   1b384:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   1b388:	008000f4 	movhi	r2,3
   1b38c:	10a78c04 	addi	r2,r2,-25040
   1b390:	10800017 	ldw	r2,0(r2)
   1b394:	1000021e 	bne	r2,zero,1b3a0 <alt_timestamp_start+0x34>
  {
    return -1;
   1b398:	00bfffc4 	movi	r2,-1
   1b39c:	00001106 	br	1b3e4 <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1b3a0:	e0bfff17 	ldw	r2,-4(fp)
   1b3a4:	10800104 	addi	r2,r2,4
   1b3a8:	00c00204 	movi	r3,8
   1b3ac:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1b3b0:	e0bfff17 	ldw	r2,-4(fp)
   1b3b4:	10800204 	addi	r2,r2,8
   1b3b8:	00ffffd4 	movui	r3,65535
   1b3bc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1b3c0:	e0bfff17 	ldw	r2,-4(fp)
   1b3c4:	10800304 	addi	r2,r2,12
   1b3c8:	00ffffd4 	movui	r3,65535
   1b3cc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1b3d0:	e0bfff17 	ldw	r2,-4(fp)
   1b3d4:	10800104 	addi	r2,r2,4
   1b3d8:	00c00104 	movi	r3,4
   1b3dc:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   1b3e0:	0005883a 	mov	r2,zero
}
   1b3e4:	e037883a 	mov	sp,fp
   1b3e8:	df000017 	ldw	fp,0(sp)
   1b3ec:	dec00104 	addi	sp,sp,4
   1b3f0:	f800283a 	ret

0001b3f4 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1b3f4:	defffc04 	addi	sp,sp,-16
   1b3f8:	df000315 	stw	fp,12(sp)
   1b3fc:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   1b400:	008000f4 	movhi	r2,3
   1b404:	10a78b04 	addi	r2,r2,-25044
   1b408:	10800017 	ldw	r2,0(r2)
   1b40c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1b410:	008000f4 	movhi	r2,3
   1b414:	10a78c04 	addi	r2,r2,-25040
   1b418:	10800017 	ldw	r2,0(r2)
   1b41c:	1000021e 	bne	r2,zero,1b428 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   1b420:	00bfffc4 	movi	r2,-1
   1b424:	00001306 	br	1b474 <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1b428:	e0bffd17 	ldw	r2,-12(fp)
   1b42c:	10800404 	addi	r2,r2,16
   1b430:	0007883a 	mov	r3,zero
   1b434:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1b438:	e0bffd17 	ldw	r2,-12(fp)
   1b43c:	10800404 	addi	r2,r2,16
   1b440:	10800037 	ldwio	r2,0(r2)
   1b444:	10bfffcc 	andi	r2,r2,65535
   1b448:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   1b44c:	e0bffd17 	ldw	r2,-12(fp)
   1b450:	10800504 	addi	r2,r2,20
   1b454:	10800037 	ldwio	r2,0(r2)
   1b458:	10bfffcc 	andi	r2,r2,65535
   1b45c:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1b460:	e0bfff17 	ldw	r2,-4(fp)
   1b464:	1006943a 	slli	r3,r2,16
   1b468:	e0bffe17 	ldw	r2,-8(fp)
   1b46c:	1884b03a 	or	r2,r3,r2
   1b470:	0084303a 	nor	r2,zero,r2
    }  
  }
}
   1b474:	e037883a 	mov	sp,fp
   1b478:	df000017 	ldw	fp,0(sp)
   1b47c:	dec00104 	addi	sp,sp,4
   1b480:	f800283a 	ret

0001b484 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1b484:	deffff04 	addi	sp,sp,-4
   1b488:	df000015 	stw	fp,0(sp)
   1b48c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1b490:	008000f4 	movhi	r2,3
   1b494:	10a78c04 	addi	r2,r2,-25040
   1b498:	10800017 	ldw	r2,0(r2)
}
   1b49c:	e037883a 	mov	sp,fp
   1b4a0:	df000017 	ldw	fp,0(sp)
   1b4a4:	dec00104 	addi	sp,sp,4
   1b4a8:	f800283a 	ret

0001b4ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b4ac:	defff504 	addi	sp,sp,-44
   1b4b0:	df000a15 	stw	fp,40(sp)
   1b4b4:	df000a04 	addi	fp,sp,40
   1b4b8:	e13ffc15 	stw	r4,-16(fp)
   1b4bc:	e17ffd15 	stw	r5,-12(fp)
   1b4c0:	e1bffe15 	stw	r6,-8(fp)
   1b4c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b4c8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b4cc:	008000f4 	movhi	r2,3
   1b4d0:	10a78e04 	addi	r2,r2,-25032
   1b4d4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b4d8:	10003f26 	beq	r2,zero,1b5d8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1b4dc:	e0bffc17 	ldw	r2,-16(fp)
   1b4e0:	10003b26 	beq	r2,zero,1b5d0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1b4e4:	e0bffc17 	ldw	r2,-16(fp)
   1b4e8:	e0fffe17 	ldw	r3,-8(fp)
   1b4ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b4f0:	e0bffc17 	ldw	r2,-16(fp)
   1b4f4:	e0ffff17 	ldw	r3,-4(fp)
   1b4f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b4fc:	0005303a 	rdctl	r2,status
   1b500:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b504:	e0fff817 	ldw	r3,-32(fp)
   1b508:	00bfff84 	movi	r2,-2
   1b50c:	1884703a 	and	r2,r3,r2
   1b510:	1001703a 	wrctl	status,r2
  
  return context;
   1b514:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b518:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b51c:	008000f4 	movhi	r2,3
   1b520:	10a78f04 	addi	r2,r2,-25028
   1b524:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b528:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b52c:	e0fffd17 	ldw	r3,-12(fp)
   1b530:	e0bff617 	ldw	r2,-40(fp)
   1b534:	1885883a 	add	r2,r3,r2
   1b538:	10c00044 	addi	r3,r2,1
   1b53c:	e0bffc17 	ldw	r2,-16(fp)
   1b540:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b544:	e0bffc17 	ldw	r2,-16(fp)
   1b548:	10c00217 	ldw	r3,8(r2)
   1b54c:	e0bff617 	ldw	r2,-40(fp)
   1b550:	1880042e 	bgeu	r3,r2,1b564 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1b554:	e0bffc17 	ldw	r2,-16(fp)
   1b558:	00c00044 	movi	r3,1
   1b55c:	10c00405 	stb	r3,16(r2)
   1b560:	00000206 	br	1b56c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1b564:	e0bffc17 	ldw	r2,-16(fp)
   1b568:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b56c:	e0bffc17 	ldw	r2,-16(fp)
   1b570:	00c000f4 	movhi	r3,3
   1b574:	18e77a04 	addi	r3,r3,-25112
   1b578:	e0fff915 	stw	r3,-28(fp)
   1b57c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b580:	e0bffa17 	ldw	r2,-24(fp)
   1b584:	e0fff917 	ldw	r3,-28(fp)
   1b588:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b58c:	e0bff917 	ldw	r2,-28(fp)
   1b590:	10c00017 	ldw	r3,0(r2)
   1b594:	e0bffa17 	ldw	r2,-24(fp)
   1b598:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b59c:	e0bff917 	ldw	r2,-28(fp)
   1b5a0:	10800017 	ldw	r2,0(r2)
   1b5a4:	e0fffa17 	ldw	r3,-24(fp)
   1b5a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b5ac:	e0bff917 	ldw	r2,-28(fp)
   1b5b0:	e0fffa17 	ldw	r3,-24(fp)
   1b5b4:	10c00015 	stw	r3,0(r2)
   1b5b8:	e0bff717 	ldw	r2,-36(fp)
   1b5bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b5c0:	e0bffb17 	ldw	r2,-20(fp)
   1b5c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b5c8:	0005883a 	mov	r2,zero
   1b5cc:	00000306 	br	1b5dc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1b5d0:	00bffa84 	movi	r2,-22
   1b5d4:	00000106 	br	1b5dc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1b5d8:	00bfde84 	movi	r2,-134
  }
}
   1b5dc:	e037883a 	mov	sp,fp
   1b5e0:	df000017 	ldw	fp,0(sp)
   1b5e4:	dec00104 	addi	sp,sp,4
   1b5e8:	f800283a 	ret

0001b5ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b5ec:	deffff04 	addi	sp,sp,-4
   1b5f0:	df000015 	stw	fp,0(sp)
   1b5f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b5f8:	e037883a 	mov	sp,fp
   1b5fc:	df000017 	ldw	fp,0(sp)
   1b600:	dec00104 	addi	sp,sp,4
   1b604:	f800283a 	ret

0001b608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b608:	defffe04 	addi	sp,sp,-8
   1b60c:	dfc00115 	stw	ra,4(sp)
   1b610:	df000015 	stw	fp,0(sp)
   1b614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b618:	008000f4 	movhi	r2,3
   1b61c:	10a77704 	addi	r2,r2,-25124
   1b620:	10800017 	ldw	r2,0(r2)
   1b624:	10000526 	beq	r2,zero,1b63c <alt_get_errno+0x34>
   1b628:	008000f4 	movhi	r2,3
   1b62c:	10a77704 	addi	r2,r2,-25124
   1b630:	10800017 	ldw	r2,0(r2)
   1b634:	103ee83a 	callr	r2
   1b638:	00000206 	br	1b644 <alt_get_errno+0x3c>
   1b63c:	008000f4 	movhi	r2,3
   1b640:	10a78704 	addi	r2,r2,-25060
}
   1b644:	e037883a 	mov	sp,fp
   1b648:	dfc00117 	ldw	ra,4(sp)
   1b64c:	df000017 	ldw	fp,0(sp)
   1b650:	dec00204 	addi	sp,sp,8
   1b654:	f800283a 	ret

0001b658 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b658:	defffa04 	addi	sp,sp,-24
   1b65c:	dfc00515 	stw	ra,20(sp)
   1b660:	df000415 	stw	fp,16(sp)
   1b664:	df000404 	addi	fp,sp,16
   1b668:	e13ffe15 	stw	r4,-8(fp)
   1b66c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b670:	e0bffe17 	ldw	r2,-8(fp)
   1b674:	10000326 	beq	r2,zero,1b684 <alt_dev_llist_insert+0x2c>
   1b678:	e0bffe17 	ldw	r2,-8(fp)
   1b67c:	10800217 	ldw	r2,8(r2)
   1b680:	1000051e 	bne	r2,zero,1b698 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   1b684:	001b6080 	call	1b608 <alt_get_errno>
   1b688:	00c00584 	movi	r3,22
   1b68c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1b690:	00bffa84 	movi	r2,-22
   1b694:	00001306 	br	1b6e4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b698:	e0bffe17 	ldw	r2,-8(fp)
   1b69c:	e0ffff17 	ldw	r3,-4(fp)
   1b6a0:	e0fffc15 	stw	r3,-16(fp)
   1b6a4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b6a8:	e0bffd17 	ldw	r2,-12(fp)
   1b6ac:	e0fffc17 	ldw	r3,-16(fp)
   1b6b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b6b4:	e0bffc17 	ldw	r2,-16(fp)
   1b6b8:	10c00017 	ldw	r3,0(r2)
   1b6bc:	e0bffd17 	ldw	r2,-12(fp)
   1b6c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b6c4:	e0bffc17 	ldw	r2,-16(fp)
   1b6c8:	10800017 	ldw	r2,0(r2)
   1b6cc:	e0fffd17 	ldw	r3,-12(fp)
   1b6d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b6d4:	e0bffc17 	ldw	r2,-16(fp)
   1b6d8:	e0fffd17 	ldw	r3,-12(fp)
   1b6dc:	10c00015 	stw	r3,0(r2)

  return 0;  
   1b6e0:	0005883a 	mov	r2,zero
}
   1b6e4:	e037883a 	mov	sp,fp
   1b6e8:	dfc00117 	ldw	ra,4(sp)
   1b6ec:	df000017 	ldw	fp,0(sp)
   1b6f0:	dec00204 	addi	sp,sp,8
   1b6f4:	f800283a 	ret

0001b6f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b6f8:	defffd04 	addi	sp,sp,-12
   1b6fc:	dfc00215 	stw	ra,8(sp)
   1b700:	df000115 	stw	fp,4(sp)
   1b704:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b708:	008000b4 	movhi	r2,2
   1b70c:	10b1ca04 	addi	r2,r2,-14552
   1b710:	e0bfff15 	stw	r2,-4(fp)
   1b714:	00000606 	br	1b730 <_do_ctors+0x38>
        (*ctor) (); 
   1b718:	e0bfff17 	ldw	r2,-4(fp)
   1b71c:	10800017 	ldw	r2,0(r2)
   1b720:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b724:	e0bfff17 	ldw	r2,-4(fp)
   1b728:	10bfff04 	addi	r2,r2,-4
   1b72c:	e0bfff15 	stw	r2,-4(fp)
   1b730:	e0ffff17 	ldw	r3,-4(fp)
   1b734:	008000b4 	movhi	r2,2
   1b738:	10b1cb04 	addi	r2,r2,-14548
   1b73c:	18bff62e 	bgeu	r3,r2,1b718 <_do_ctors+0x20>
        (*ctor) (); 
}
   1b740:	e037883a 	mov	sp,fp
   1b744:	dfc00117 	ldw	ra,4(sp)
   1b748:	df000017 	ldw	fp,0(sp)
   1b74c:	dec00204 	addi	sp,sp,8
   1b750:	f800283a 	ret

0001b754 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b754:	defffd04 	addi	sp,sp,-12
   1b758:	dfc00215 	stw	ra,8(sp)
   1b75c:	df000115 	stw	fp,4(sp)
   1b760:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b764:	008000b4 	movhi	r2,2
   1b768:	10b1ca04 	addi	r2,r2,-14552
   1b76c:	e0bfff15 	stw	r2,-4(fp)
   1b770:	00000606 	br	1b78c <_do_dtors+0x38>
        (*dtor) (); 
   1b774:	e0bfff17 	ldw	r2,-4(fp)
   1b778:	10800017 	ldw	r2,0(r2)
   1b77c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b780:	e0bfff17 	ldw	r2,-4(fp)
   1b784:	10bfff04 	addi	r2,r2,-4
   1b788:	e0bfff15 	stw	r2,-4(fp)
   1b78c:	e0ffff17 	ldw	r3,-4(fp)
   1b790:	008000b4 	movhi	r2,2
   1b794:	10b1cb04 	addi	r2,r2,-14548
   1b798:	18bff62e 	bgeu	r3,r2,1b774 <_do_dtors+0x20>
        (*dtor) (); 
}
   1b79c:	e037883a 	mov	sp,fp
   1b7a0:	dfc00117 	ldw	ra,4(sp)
   1b7a4:	df000017 	ldw	fp,0(sp)
   1b7a8:	dec00204 	addi	sp,sp,8
   1b7ac:	f800283a 	ret

0001b7b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b7b0:	defffe04 	addi	sp,sp,-8
   1b7b4:	dfc00115 	stw	ra,4(sp)
   1b7b8:	df000015 	stw	fp,0(sp)
   1b7bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1b7c0:	0009883a 	mov	r4,zero
   1b7c4:	01440004 	movi	r5,4096
   1b7c8:	001c2cc0 	call	1c2cc <alt_icache_flush>
#endif
}
   1b7cc:	e037883a 	mov	sp,fp
   1b7d0:	dfc00117 	ldw	ra,4(sp)
   1b7d4:	df000017 	ldw	fp,0(sp)
   1b7d8:	dec00204 	addi	sp,sp,8
   1b7dc:	f800283a 	ret

0001b7e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b7e0:	defff904 	addi	sp,sp,-28
   1b7e4:	dfc00615 	stw	ra,24(sp)
   1b7e8:	df000515 	stw	fp,20(sp)
   1b7ec:	df000504 	addi	fp,sp,20
   1b7f0:	e13ffc15 	stw	r4,-16(fp)
   1b7f4:	e17ffd15 	stw	r5,-12(fp)
   1b7f8:	e1bffe15 	stw	r6,-8(fp)
   1b7fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1b800:	e0800217 	ldw	r2,8(fp)
   1b804:	d8800015 	stw	r2,0(sp)
   1b808:	e13ffc17 	ldw	r4,-16(fp)
   1b80c:	e17ffd17 	ldw	r5,-12(fp)
   1b810:	e1bffe17 	ldw	r6,-8(fp)
   1b814:	e1ffff17 	ldw	r7,-4(fp)
   1b818:	001b9b80 	call	1b9b8 <alt_iic_isr_register>
}  
   1b81c:	e037883a 	mov	sp,fp
   1b820:	dfc00117 	ldw	ra,4(sp)
   1b824:	df000017 	ldw	fp,0(sp)
   1b828:	dec00204 	addi	sp,sp,8
   1b82c:	f800283a 	ret

0001b830 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1b830:	defff904 	addi	sp,sp,-28
   1b834:	df000615 	stw	fp,24(sp)
   1b838:	df000604 	addi	fp,sp,24
   1b83c:	e13ffe15 	stw	r4,-8(fp)
   1b840:	e17fff15 	stw	r5,-4(fp)
   1b844:	e0bfff17 	ldw	r2,-4(fp)
   1b848:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b84c:	0005303a 	rdctl	r2,status
   1b850:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b854:	e0fffb17 	ldw	r3,-20(fp)
   1b858:	00bfff84 	movi	r2,-2
   1b85c:	1884703a 	and	r2,r3,r2
   1b860:	1001703a 	wrctl	status,r2
  
  return context;
   1b864:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b868:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1b86c:	e0bffa17 	ldw	r2,-24(fp)
   1b870:	00c00044 	movi	r3,1
   1b874:	1884983a 	sll	r2,r3,r2
   1b878:	1007883a 	mov	r3,r2
   1b87c:	008000f4 	movhi	r2,3
   1b880:	10a78d04 	addi	r2,r2,-25036
   1b884:	10800017 	ldw	r2,0(r2)
   1b888:	1886b03a 	or	r3,r3,r2
   1b88c:	008000f4 	movhi	r2,3
   1b890:	10a78d04 	addi	r2,r2,-25036
   1b894:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b898:	008000f4 	movhi	r2,3
   1b89c:	10a78d04 	addi	r2,r2,-25036
   1b8a0:	10800017 	ldw	r2,0(r2)
   1b8a4:	100170fa 	wrctl	ienable,r2
   1b8a8:	e0bffc17 	ldw	r2,-16(fp)
   1b8ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b8b0:	e0bffd17 	ldw	r2,-12(fp)
   1b8b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b8b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1b8bc:	e037883a 	mov	sp,fp
   1b8c0:	df000017 	ldw	fp,0(sp)
   1b8c4:	dec00104 	addi	sp,sp,4
   1b8c8:	f800283a 	ret

0001b8cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1b8cc:	defff904 	addi	sp,sp,-28
   1b8d0:	df000615 	stw	fp,24(sp)
   1b8d4:	df000604 	addi	fp,sp,24
   1b8d8:	e13ffe15 	stw	r4,-8(fp)
   1b8dc:	e17fff15 	stw	r5,-4(fp)
   1b8e0:	e0bfff17 	ldw	r2,-4(fp)
   1b8e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b8e8:	0005303a 	rdctl	r2,status
   1b8ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b8f0:	e0fffb17 	ldw	r3,-20(fp)
   1b8f4:	00bfff84 	movi	r2,-2
   1b8f8:	1884703a 	and	r2,r3,r2
   1b8fc:	1001703a 	wrctl	status,r2
  
  return context;
   1b900:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b904:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1b908:	e0bffa17 	ldw	r2,-24(fp)
   1b90c:	00c00044 	movi	r3,1
   1b910:	1884983a 	sll	r2,r3,r2
   1b914:	0084303a 	nor	r2,zero,r2
   1b918:	1007883a 	mov	r3,r2
   1b91c:	008000f4 	movhi	r2,3
   1b920:	10a78d04 	addi	r2,r2,-25036
   1b924:	10800017 	ldw	r2,0(r2)
   1b928:	1886703a 	and	r3,r3,r2
   1b92c:	008000f4 	movhi	r2,3
   1b930:	10a78d04 	addi	r2,r2,-25036
   1b934:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b938:	008000f4 	movhi	r2,3
   1b93c:	10a78d04 	addi	r2,r2,-25036
   1b940:	10800017 	ldw	r2,0(r2)
   1b944:	100170fa 	wrctl	ienable,r2
   1b948:	e0bffc17 	ldw	r2,-16(fp)
   1b94c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b950:	e0bffd17 	ldw	r2,-12(fp)
   1b954:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b958:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1b95c:	e037883a 	mov	sp,fp
   1b960:	df000017 	ldw	fp,0(sp)
   1b964:	dec00104 	addi	sp,sp,4
   1b968:	f800283a 	ret

0001b96c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1b96c:	defffc04 	addi	sp,sp,-16
   1b970:	df000315 	stw	fp,12(sp)
   1b974:	df000304 	addi	fp,sp,12
   1b978:	e13ffe15 	stw	r4,-8(fp)
   1b97c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1b980:	000530fa 	rdctl	r2,ienable
   1b984:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1b988:	e0bfff17 	ldw	r2,-4(fp)
   1b98c:	00c00044 	movi	r3,1
   1b990:	1884983a 	sll	r2,r3,r2
   1b994:	1007883a 	mov	r3,r2
   1b998:	e0bffd17 	ldw	r2,-12(fp)
   1b99c:	1884703a 	and	r2,r3,r2
   1b9a0:	1004c03a 	cmpne	r2,r2,zero
   1b9a4:	10803fcc 	andi	r2,r2,255
}
   1b9a8:	e037883a 	mov	sp,fp
   1b9ac:	df000017 	ldw	fp,0(sp)
   1b9b0:	dec00104 	addi	sp,sp,4
   1b9b4:	f800283a 	ret

0001b9b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b9b8:	defff504 	addi	sp,sp,-44
   1b9bc:	dfc00a15 	stw	ra,40(sp)
   1b9c0:	df000915 	stw	fp,36(sp)
   1b9c4:	df000904 	addi	fp,sp,36
   1b9c8:	e13ffc15 	stw	r4,-16(fp)
   1b9cc:	e17ffd15 	stw	r5,-12(fp)
   1b9d0:	e1bffe15 	stw	r6,-8(fp)
   1b9d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1b9d8:	00bffa84 	movi	r2,-22
   1b9dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1b9e0:	e0bffd17 	ldw	r2,-12(fp)
   1b9e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b9e8:	e0bff817 	ldw	r2,-32(fp)
   1b9ec:	10800808 	cmpgei	r2,r2,32
   1b9f0:	1000271e 	bne	r2,zero,1ba90 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b9f4:	0005303a 	rdctl	r2,status
   1b9f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b9fc:	e0fffa17 	ldw	r3,-24(fp)
   1ba00:	00bfff84 	movi	r2,-2
   1ba04:	1884703a 	and	r2,r3,r2
   1ba08:	1001703a 	wrctl	status,r2
  
  return context;
   1ba0c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1ba10:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1ba14:	00c000f4 	movhi	r3,3
   1ba18:	18e79a04 	addi	r3,r3,-24984
   1ba1c:	e0bff817 	ldw	r2,-32(fp)
   1ba20:	100490fa 	slli	r2,r2,3
   1ba24:	1885883a 	add	r2,r3,r2
   1ba28:	e0fffe17 	ldw	r3,-8(fp)
   1ba2c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1ba30:	00c000f4 	movhi	r3,3
   1ba34:	18e79a04 	addi	r3,r3,-24984
   1ba38:	e0bff817 	ldw	r2,-32(fp)
   1ba3c:	100490fa 	slli	r2,r2,3
   1ba40:	1885883a 	add	r2,r3,r2
   1ba44:	10800104 	addi	r2,r2,4
   1ba48:	e0ffff17 	ldw	r3,-4(fp)
   1ba4c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1ba50:	e0bffe17 	ldw	r2,-8(fp)
   1ba54:	10000526 	beq	r2,zero,1ba6c <alt_iic_isr_register+0xb4>
   1ba58:	e0bff817 	ldw	r2,-32(fp)
   1ba5c:	e13ffc17 	ldw	r4,-16(fp)
   1ba60:	100b883a 	mov	r5,r2
   1ba64:	001b8300 	call	1b830 <alt_ic_irq_enable>
   1ba68:	00000406 	br	1ba7c <alt_iic_isr_register+0xc4>
   1ba6c:	e0bff817 	ldw	r2,-32(fp)
   1ba70:	e13ffc17 	ldw	r4,-16(fp)
   1ba74:	100b883a 	mov	r5,r2
   1ba78:	001b8cc0 	call	1b8cc <alt_ic_irq_disable>
   1ba7c:	e0bff715 	stw	r2,-36(fp)
   1ba80:	e0bff917 	ldw	r2,-28(fp)
   1ba84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba88:	e0bffb17 	ldw	r2,-20(fp)
   1ba8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1ba90:	e0bff717 	ldw	r2,-36(fp)
}
   1ba94:	e037883a 	mov	sp,fp
   1ba98:	dfc00117 	ldw	ra,4(sp)
   1ba9c:	df000017 	ldw	fp,0(sp)
   1baa0:	dec00204 	addi	sp,sp,8
   1baa4:	f800283a 	ret

0001baa8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1baa8:	defff804 	addi	sp,sp,-32
   1baac:	dfc00715 	stw	ra,28(sp)
   1bab0:	df000615 	stw	fp,24(sp)
   1bab4:	dc000515 	stw	r16,20(sp)
   1bab8:	df000504 	addi	fp,sp,20
   1babc:	e13ffc15 	stw	r4,-16(fp)
   1bac0:	e17ffd15 	stw	r5,-12(fp)
   1bac4:	e1bffe15 	stw	r6,-8(fp)
   1bac8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1bacc:	e13ffd17 	ldw	r4,-12(fp)
   1bad0:	e17ffe17 	ldw	r5,-8(fp)
   1bad4:	e1bfff17 	ldw	r6,-4(fp)
   1bad8:	001bd400 	call	1bd40 <open>
   1badc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1bae0:	e0bffb17 	ldw	r2,-20(fp)
   1bae4:	10002216 	blt	r2,zero,1bb70 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1bae8:	040000f4 	movhi	r16,3
   1baec:	8422f504 	addi	r16,r16,-29740
   1baf0:	e0bffb17 	ldw	r2,-20(fp)
   1baf4:	1009883a 	mov	r4,r2
   1baf8:	01400304 	movi	r5,12
   1bafc:	00107940 	call	10794 <__mulsi3>
   1bb00:	8085883a 	add	r2,r16,r2
   1bb04:	10c00017 	ldw	r3,0(r2)
   1bb08:	e0bffc17 	ldw	r2,-16(fp)
   1bb0c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1bb10:	040000f4 	movhi	r16,3
   1bb14:	8422f504 	addi	r16,r16,-29740
   1bb18:	e0bffb17 	ldw	r2,-20(fp)
   1bb1c:	1009883a 	mov	r4,r2
   1bb20:	01400304 	movi	r5,12
   1bb24:	00107940 	call	10794 <__mulsi3>
   1bb28:	8085883a 	add	r2,r16,r2
   1bb2c:	10800104 	addi	r2,r2,4
   1bb30:	10c00017 	ldw	r3,0(r2)
   1bb34:	e0bffc17 	ldw	r2,-16(fp)
   1bb38:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1bb3c:	040000f4 	movhi	r16,3
   1bb40:	8422f504 	addi	r16,r16,-29740
   1bb44:	e0bffb17 	ldw	r2,-20(fp)
   1bb48:	1009883a 	mov	r4,r2
   1bb4c:	01400304 	movi	r5,12
   1bb50:	00107940 	call	10794 <__mulsi3>
   1bb54:	8085883a 	add	r2,r16,r2
   1bb58:	10800204 	addi	r2,r2,8
   1bb5c:	10c00017 	ldw	r3,0(r2)
   1bb60:	e0bffc17 	ldw	r2,-16(fp)
   1bb64:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1bb68:	e13ffb17 	ldw	r4,-20(fp)
   1bb6c:	001a4a80 	call	1a4a8 <alt_release_fd>
  }
} 
   1bb70:	e037883a 	mov	sp,fp
   1bb74:	dfc00217 	ldw	ra,8(sp)
   1bb78:	df000117 	ldw	fp,4(sp)
   1bb7c:	dc000017 	ldw	r16,0(sp)
   1bb80:	dec00304 	addi	sp,sp,12
   1bb84:	f800283a 	ret

0001bb88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1bb88:	defffb04 	addi	sp,sp,-20
   1bb8c:	dfc00415 	stw	ra,16(sp)
   1bb90:	df000315 	stw	fp,12(sp)
   1bb94:	df000304 	addi	fp,sp,12
   1bb98:	e13ffd15 	stw	r4,-12(fp)
   1bb9c:	e17ffe15 	stw	r5,-8(fp)
   1bba0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1bba4:	010000f4 	movhi	r4,3
   1bba8:	2122f804 	addi	r4,r4,-29728
   1bbac:	e17ffd17 	ldw	r5,-12(fp)
   1bbb0:	01800044 	movi	r6,1
   1bbb4:	01c07fc4 	movi	r7,511
   1bbb8:	001baa80 	call	1baa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1bbbc:	010000f4 	movhi	r4,3
   1bbc0:	2122f504 	addi	r4,r4,-29740
   1bbc4:	e17ffe17 	ldw	r5,-8(fp)
   1bbc8:	000d883a 	mov	r6,zero
   1bbcc:	01c07fc4 	movi	r7,511
   1bbd0:	001baa80 	call	1baa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1bbd4:	010000f4 	movhi	r4,3
   1bbd8:	2122fb04 	addi	r4,r4,-29716
   1bbdc:	e17fff17 	ldw	r5,-4(fp)
   1bbe0:	01800044 	movi	r6,1
   1bbe4:	01c07fc4 	movi	r7,511
   1bbe8:	001baa80 	call	1baa8 <alt_open_fd>
}  
   1bbec:	e037883a 	mov	sp,fp
   1bbf0:	dfc00117 	ldw	ra,4(sp)
   1bbf4:	df000017 	ldw	fp,0(sp)
   1bbf8:	dec00204 	addi	sp,sp,8
   1bbfc:	f800283a 	ret

0001bc00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bc00:	defffe04 	addi	sp,sp,-8
   1bc04:	dfc00115 	stw	ra,4(sp)
   1bc08:	df000015 	stw	fp,0(sp)
   1bc0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1bc10:	008000f4 	movhi	r2,3
   1bc14:	10a77704 	addi	r2,r2,-25124
   1bc18:	10800017 	ldw	r2,0(r2)
   1bc1c:	10000526 	beq	r2,zero,1bc34 <alt_get_errno+0x34>
   1bc20:	008000f4 	movhi	r2,3
   1bc24:	10a77704 	addi	r2,r2,-25124
   1bc28:	10800017 	ldw	r2,0(r2)
   1bc2c:	103ee83a 	callr	r2
   1bc30:	00000206 	br	1bc3c <alt_get_errno+0x3c>
   1bc34:	008000f4 	movhi	r2,3
   1bc38:	10a78704 	addi	r2,r2,-25060
}
   1bc3c:	e037883a 	mov	sp,fp
   1bc40:	dfc00117 	ldw	ra,4(sp)
   1bc44:	df000017 	ldw	fp,0(sp)
   1bc48:	dec00204 	addi	sp,sp,8
   1bc4c:	f800283a 	ret

0001bc50 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1bc50:	defffb04 	addi	sp,sp,-20
   1bc54:	dfc00415 	stw	ra,16(sp)
   1bc58:	df000315 	stw	fp,12(sp)
   1bc5c:	dc000215 	stw	r16,8(sp)
   1bc60:	df000204 	addi	fp,sp,8
   1bc64:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1bc68:	e0bfff17 	ldw	r2,-4(fp)
   1bc6c:	10800217 	ldw	r2,8(r2)
   1bc70:	10d00034 	orhi	r3,r2,16384
   1bc74:	e0bfff17 	ldw	r2,-4(fp)
   1bc78:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1bc7c:	e03ffe15 	stw	zero,-8(fp)
   1bc80:	00002206 	br	1bd0c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1bc84:	040000f4 	movhi	r16,3
   1bc88:	8422f504 	addi	r16,r16,-29740
   1bc8c:	e0bffe17 	ldw	r2,-8(fp)
   1bc90:	1009883a 	mov	r4,r2
   1bc94:	01400304 	movi	r5,12
   1bc98:	00107940 	call	10794 <__mulsi3>
   1bc9c:	8085883a 	add	r2,r16,r2
   1bca0:	10c00017 	ldw	r3,0(r2)
   1bca4:	e0bfff17 	ldw	r2,-4(fp)
   1bca8:	10800017 	ldw	r2,0(r2)
   1bcac:	1880141e 	bne	r3,r2,1bd00 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1bcb0:	040000f4 	movhi	r16,3
   1bcb4:	8422f504 	addi	r16,r16,-29740
   1bcb8:	e0bffe17 	ldw	r2,-8(fp)
   1bcbc:	1009883a 	mov	r4,r2
   1bcc0:	01400304 	movi	r5,12
   1bcc4:	00107940 	call	10794 <__mulsi3>
   1bcc8:	8085883a 	add	r2,r16,r2
   1bccc:	10800204 	addi	r2,r2,8
   1bcd0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1bcd4:	10000a0e 	bge	r2,zero,1bd00 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1bcd8:	e13ffe17 	ldw	r4,-8(fp)
   1bcdc:	01400304 	movi	r5,12
   1bce0:	00107940 	call	10794 <__mulsi3>
   1bce4:	00c000f4 	movhi	r3,3
   1bce8:	18e2f504 	addi	r3,r3,-29740
   1bcec:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1bcf0:	e0bfff17 	ldw	r2,-4(fp)
   1bcf4:	18800226 	beq	r3,r2,1bd00 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1bcf8:	00bffcc4 	movi	r2,-13
   1bcfc:	00000a06 	br	1bd28 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1bd00:	e0bffe17 	ldw	r2,-8(fp)
   1bd04:	10800044 	addi	r2,r2,1
   1bd08:	e0bffe15 	stw	r2,-8(fp)
   1bd0c:	008000f4 	movhi	r2,3
   1bd10:	10a77604 	addi	r2,r2,-25128
   1bd14:	10800017 	ldw	r2,0(r2)
   1bd18:	1007883a 	mov	r3,r2
   1bd1c:	e0bffe17 	ldw	r2,-8(fp)
   1bd20:	18bfd82e 	bgeu	r3,r2,1bc84 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1bd24:	0005883a 	mov	r2,zero
}
   1bd28:	e037883a 	mov	sp,fp
   1bd2c:	dfc00217 	ldw	ra,8(sp)
   1bd30:	df000117 	ldw	fp,4(sp)
   1bd34:	dc000017 	ldw	r16,0(sp)
   1bd38:	dec00304 	addi	sp,sp,12
   1bd3c:	f800283a 	ret

0001bd40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1bd40:	defff604 	addi	sp,sp,-40
   1bd44:	dfc00915 	stw	ra,36(sp)
   1bd48:	df000815 	stw	fp,32(sp)
   1bd4c:	df000804 	addi	fp,sp,32
   1bd50:	e13ffd15 	stw	r4,-12(fp)
   1bd54:	e17ffe15 	stw	r5,-8(fp)
   1bd58:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1bd5c:	00bfffc4 	movi	r2,-1
   1bd60:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1bd64:	00bffb44 	movi	r2,-19
   1bd68:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1bd6c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1bd70:	e13ffd17 	ldw	r4,-12(fp)
   1bd74:	014000f4 	movhi	r5,3
   1bd78:	29677404 	addi	r5,r5,-25136
   1bd7c:	001c0540 	call	1c054 <alt_find_dev>
   1bd80:	e0bff815 	stw	r2,-32(fp)
   1bd84:	e0bff817 	ldw	r2,-32(fp)
   1bd88:	1000051e 	bne	r2,zero,1bda0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1bd8c:	e13ffd17 	ldw	r4,-12(fp)
   1bd90:	001c0e40 	call	1c0e4 <alt_find_file>
   1bd94:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1bd98:	00800044 	movi	r2,1
   1bd9c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1bda0:	e0bff817 	ldw	r2,-32(fp)
   1bda4:	10002a26 	beq	r2,zero,1be50 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1bda8:	e13ff817 	ldw	r4,-32(fp)
   1bdac:	001c1f80 	call	1c1f8 <alt_get_fd>
   1bdb0:	e0bff915 	stw	r2,-28(fp)
   1bdb4:	e0bff917 	ldw	r2,-28(fp)
   1bdb8:	1000030e 	bge	r2,zero,1bdc8 <open+0x88>
    {
      status = index;
   1bdbc:	e0bff917 	ldw	r2,-28(fp)
   1bdc0:	e0bffa15 	stw	r2,-24(fp)
   1bdc4:	00002406 	br	1be58 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1bdc8:	e13ff917 	ldw	r4,-28(fp)
   1bdcc:	01400304 	movi	r5,12
   1bdd0:	00107940 	call	10794 <__mulsi3>
   1bdd4:	00c000f4 	movhi	r3,3
   1bdd8:	18e2f504 	addi	r3,r3,-29740
   1bddc:	10c5883a 	add	r2,r2,r3
   1bde0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1bde4:	e0fffe17 	ldw	r3,-8(fp)
   1bde8:	00900034 	movhi	r2,16384
   1bdec:	10bfffc4 	addi	r2,r2,-1
   1bdf0:	1886703a 	and	r3,r3,r2
   1bdf4:	e0bffc17 	ldw	r2,-16(fp)
   1bdf8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1bdfc:	e0bffb17 	ldw	r2,-20(fp)
   1be00:	1000051e 	bne	r2,zero,1be18 <open+0xd8>
   1be04:	e13ffc17 	ldw	r4,-16(fp)
   1be08:	001bc500 	call	1bc50 <alt_file_locked>
   1be0c:	e0bffa15 	stw	r2,-24(fp)
   1be10:	e0bffa17 	ldw	r2,-24(fp)
   1be14:	10001016 	blt	r2,zero,1be58 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1be18:	e0bff817 	ldw	r2,-32(fp)
   1be1c:	10800317 	ldw	r2,12(r2)
   1be20:	10000826 	beq	r2,zero,1be44 <open+0x104>
   1be24:	e0bff817 	ldw	r2,-32(fp)
   1be28:	10800317 	ldw	r2,12(r2)
   1be2c:	e13ffc17 	ldw	r4,-16(fp)
   1be30:	e17ffd17 	ldw	r5,-12(fp)
   1be34:	e1bffe17 	ldw	r6,-8(fp)
   1be38:	e1ffff17 	ldw	r7,-4(fp)
   1be3c:	103ee83a 	callr	r2
   1be40:	00000106 	br	1be48 <open+0x108>
   1be44:	0005883a 	mov	r2,zero
   1be48:	e0bffa15 	stw	r2,-24(fp)
   1be4c:	00000206 	br	1be58 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1be50:	00bffb44 	movi	r2,-19
   1be54:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1be58:	e0bffa17 	ldw	r2,-24(fp)
   1be5c:	1000080e 	bge	r2,zero,1be80 <open+0x140>
  {
    alt_release_fd (index);  
   1be60:	e13ff917 	ldw	r4,-28(fp)
   1be64:	001a4a80 	call	1a4a8 <alt_release_fd>
    ALT_ERRNO = -status;
   1be68:	001bc000 	call	1bc00 <alt_get_errno>
   1be6c:	e0fffa17 	ldw	r3,-24(fp)
   1be70:	00c7c83a 	sub	r3,zero,r3
   1be74:	10c00015 	stw	r3,0(r2)
    return -1;
   1be78:	00bfffc4 	movi	r2,-1
   1be7c:	00000106 	br	1be84 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1be80:	e0bff917 	ldw	r2,-28(fp)
}
   1be84:	e037883a 	mov	sp,fp
   1be88:	dfc00117 	ldw	ra,4(sp)
   1be8c:	df000017 	ldw	fp,0(sp)
   1be90:	dec00204 	addi	sp,sp,8
   1be94:	f800283a 	ret

0001be98 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1be98:	defffa04 	addi	sp,sp,-24
   1be9c:	df000515 	stw	fp,20(sp)
   1bea0:	df000504 	addi	fp,sp,20
   1bea4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bea8:	0005303a 	rdctl	r2,status
   1beac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1beb0:	e0fffc17 	ldw	r3,-16(fp)
   1beb4:	00bfff84 	movi	r2,-2
   1beb8:	1884703a 	and	r2,r3,r2
   1bebc:	1001703a 	wrctl	status,r2
  
  return context;
   1bec0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1bec4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1bec8:	e0bfff17 	ldw	r2,-4(fp)
   1becc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1bed0:	e0bffd17 	ldw	r2,-12(fp)
   1bed4:	10800017 	ldw	r2,0(r2)
   1bed8:	e0fffd17 	ldw	r3,-12(fp)
   1bedc:	18c00117 	ldw	r3,4(r3)
   1bee0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1bee4:	e0bffd17 	ldw	r2,-12(fp)
   1bee8:	10800117 	ldw	r2,4(r2)
   1beec:	e0fffd17 	ldw	r3,-12(fp)
   1bef0:	18c00017 	ldw	r3,0(r3)
   1bef4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1bef8:	e0bffd17 	ldw	r2,-12(fp)
   1befc:	e0fffd17 	ldw	r3,-12(fp)
   1bf00:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1bf04:	e0bffd17 	ldw	r2,-12(fp)
   1bf08:	e0fffd17 	ldw	r3,-12(fp)
   1bf0c:	10c00015 	stw	r3,0(r2)
   1bf10:	e0bffb17 	ldw	r2,-20(fp)
   1bf14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bf18:	e0bffe17 	ldw	r2,-8(fp)
   1bf1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1bf20:	e037883a 	mov	sp,fp
   1bf24:	df000017 	ldw	fp,0(sp)
   1bf28:	dec00104 	addi	sp,sp,4
   1bf2c:	f800283a 	ret

0001bf30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1bf30:	defffb04 	addi	sp,sp,-20
   1bf34:	dfc00415 	stw	ra,16(sp)
   1bf38:	df000315 	stw	fp,12(sp)
   1bf3c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1bf40:	d0a00d17 	ldw	r2,-32716(gp)
   1bf44:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1bf48:	d0a02217 	ldw	r2,-32632(gp)
   1bf4c:	10800044 	addi	r2,r2,1
   1bf50:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bf54:	00002e06 	br	1c010 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1bf58:	e0bffd17 	ldw	r2,-12(fp)
   1bf5c:	10800017 	ldw	r2,0(r2)
   1bf60:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1bf64:	e0bffd17 	ldw	r2,-12(fp)
   1bf68:	10800403 	ldbu	r2,16(r2)
   1bf6c:	10803fcc 	andi	r2,r2,255
   1bf70:	10000426 	beq	r2,zero,1bf84 <alt_tick+0x54>
   1bf74:	d0a02217 	ldw	r2,-32632(gp)
   1bf78:	1000021e 	bne	r2,zero,1bf84 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1bf7c:	e0bffd17 	ldw	r2,-12(fp)
   1bf80:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1bf84:	e0bffd17 	ldw	r2,-12(fp)
   1bf88:	10800217 	ldw	r2,8(r2)
   1bf8c:	d0e02217 	ldw	r3,-32632(gp)
   1bf90:	18801d36 	bltu	r3,r2,1c008 <alt_tick+0xd8>
   1bf94:	e0bffd17 	ldw	r2,-12(fp)
   1bf98:	10800403 	ldbu	r2,16(r2)
   1bf9c:	10803fcc 	andi	r2,r2,255
   1bfa0:	1000191e 	bne	r2,zero,1c008 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1bfa4:	e0bffd17 	ldw	r2,-12(fp)
   1bfa8:	10c00317 	ldw	r3,12(r2)
   1bfac:	e0bffd17 	ldw	r2,-12(fp)
   1bfb0:	10800517 	ldw	r2,20(r2)
   1bfb4:	1009883a 	mov	r4,r2
   1bfb8:	183ee83a 	callr	r3
   1bfbc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1bfc0:	e0bfff17 	ldw	r2,-4(fp)
   1bfc4:	1000031e 	bne	r2,zero,1bfd4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1bfc8:	e13ffd17 	ldw	r4,-12(fp)
   1bfcc:	001be980 	call	1be98 <alt_alarm_stop>
   1bfd0:	00000d06 	br	1c008 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1bfd4:	e0bffd17 	ldw	r2,-12(fp)
   1bfd8:	10c00217 	ldw	r3,8(r2)
   1bfdc:	e0bfff17 	ldw	r2,-4(fp)
   1bfe0:	1887883a 	add	r3,r3,r2
   1bfe4:	e0bffd17 	ldw	r2,-12(fp)
   1bfe8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1bfec:	e0bffd17 	ldw	r2,-12(fp)
   1bff0:	10c00217 	ldw	r3,8(r2)
   1bff4:	d0a02217 	ldw	r2,-32632(gp)
   1bff8:	1880032e 	bgeu	r3,r2,1c008 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1bffc:	e0bffd17 	ldw	r2,-12(fp)
   1c000:	00c00044 	movi	r3,1
   1c004:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1c008:	e0bffe17 	ldw	r2,-8(fp)
   1c00c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c010:	e0fffd17 	ldw	r3,-12(fp)
   1c014:	d0a00d04 	addi	r2,gp,-32716
   1c018:	18bfcf1e 	bne	r3,r2,1bf58 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1c01c:	0001883a 	nop
}
   1c020:	e037883a 	mov	sp,fp
   1c024:	dfc00117 	ldw	ra,4(sp)
   1c028:	df000017 	ldw	fp,0(sp)
   1c02c:	dec00204 	addi	sp,sp,8
   1c030:	f800283a 	ret

0001c034 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1c034:	deffff04 	addi	sp,sp,-4
   1c038:	df000015 	stw	fp,0(sp)
   1c03c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1c040:	000170fa 	wrctl	ienable,zero
}
   1c044:	e037883a 	mov	sp,fp
   1c048:	df000017 	ldw	fp,0(sp)
   1c04c:	dec00104 	addi	sp,sp,4
   1c050:	f800283a 	ret

0001c054 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1c054:	defffa04 	addi	sp,sp,-24
   1c058:	dfc00515 	stw	ra,20(sp)
   1c05c:	df000415 	stw	fp,16(sp)
   1c060:	df000404 	addi	fp,sp,16
   1c064:	e13ffe15 	stw	r4,-8(fp)
   1c068:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1c06c:	e0bfff17 	ldw	r2,-4(fp)
   1c070:	10800017 	ldw	r2,0(r2)
   1c074:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1c078:	e13ffe17 	ldw	r4,-8(fp)
   1c07c:	00108bc0 	call	108bc <strlen>
   1c080:	10800044 	addi	r2,r2,1
   1c084:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c088:	00000d06 	br	1c0c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1c08c:	e0bffc17 	ldw	r2,-16(fp)
   1c090:	10c00217 	ldw	r3,8(r2)
   1c094:	e0bffd17 	ldw	r2,-12(fp)
   1c098:	1809883a 	mov	r4,r3
   1c09c:	e17ffe17 	ldw	r5,-8(fp)
   1c0a0:	100d883a 	mov	r6,r2
   1c0a4:	001c3a40 	call	1c3a4 <memcmp>
   1c0a8:	1000021e 	bne	r2,zero,1c0b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1c0ac:	e0bffc17 	ldw	r2,-16(fp)
   1c0b0:	00000706 	br	1c0d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1c0b4:	e0bffc17 	ldw	r2,-16(fp)
   1c0b8:	10800017 	ldw	r2,0(r2)
   1c0bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c0c0:	e0fffc17 	ldw	r3,-16(fp)
   1c0c4:	e0bfff17 	ldw	r2,-4(fp)
   1c0c8:	18bff01e 	bne	r3,r2,1c08c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1c0cc:	0005883a 	mov	r2,zero
}
   1c0d0:	e037883a 	mov	sp,fp
   1c0d4:	dfc00117 	ldw	ra,4(sp)
   1c0d8:	df000017 	ldw	fp,0(sp)
   1c0dc:	dec00204 	addi	sp,sp,8
   1c0e0:	f800283a 	ret

0001c0e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1c0e4:	defffb04 	addi	sp,sp,-20
   1c0e8:	dfc00415 	stw	ra,16(sp)
   1c0ec:	df000315 	stw	fp,12(sp)
   1c0f0:	df000304 	addi	fp,sp,12
   1c0f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1c0f8:	008000f4 	movhi	r2,3
   1c0fc:	10a77204 	addi	r2,r2,-25144
   1c100:	10800017 	ldw	r2,0(r2)
   1c104:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c108:	00003106 	br	1c1d0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1c10c:	e0bffd17 	ldw	r2,-12(fp)
   1c110:	10800217 	ldw	r2,8(r2)
   1c114:	1009883a 	mov	r4,r2
   1c118:	00108bc0 	call	108bc <strlen>
   1c11c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1c120:	e0bffd17 	ldw	r2,-12(fp)
   1c124:	10c00217 	ldw	r3,8(r2)
   1c128:	e0bffe17 	ldw	r2,-8(fp)
   1c12c:	10bfffc4 	addi	r2,r2,-1
   1c130:	1885883a 	add	r2,r3,r2
   1c134:	10800003 	ldbu	r2,0(r2)
   1c138:	10803fcc 	andi	r2,r2,255
   1c13c:	1080201c 	xori	r2,r2,128
   1c140:	10bfe004 	addi	r2,r2,-128
   1c144:	10800bd8 	cmpnei	r2,r2,47
   1c148:	1000031e 	bne	r2,zero,1c158 <alt_find_file+0x74>
    {
      len -= 1;
   1c14c:	e0bffe17 	ldw	r2,-8(fp)
   1c150:	10bfffc4 	addi	r2,r2,-1
   1c154:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c158:	e0bffe17 	ldw	r2,-8(fp)
   1c15c:	e0ffff17 	ldw	r3,-4(fp)
   1c160:	1885883a 	add	r2,r3,r2
   1c164:	10800003 	ldbu	r2,0(r2)
   1c168:	10803fcc 	andi	r2,r2,255
   1c16c:	1080201c 	xori	r2,r2,128
   1c170:	10bfe004 	addi	r2,r2,-128
   1c174:	10800be0 	cmpeqi	r2,r2,47
   1c178:	1000081e 	bne	r2,zero,1c19c <alt_find_file+0xb8>
   1c17c:	e0bffe17 	ldw	r2,-8(fp)
   1c180:	e0ffff17 	ldw	r3,-4(fp)
   1c184:	1885883a 	add	r2,r3,r2
   1c188:	10800003 	ldbu	r2,0(r2)
   1c18c:	10803fcc 	andi	r2,r2,255
   1c190:	1080201c 	xori	r2,r2,128
   1c194:	10bfe004 	addi	r2,r2,-128
   1c198:	10000a1e 	bne	r2,zero,1c1c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1c19c:	e0bffd17 	ldw	r2,-12(fp)
   1c1a0:	10c00217 	ldw	r3,8(r2)
   1c1a4:	e0bffe17 	ldw	r2,-8(fp)
   1c1a8:	1809883a 	mov	r4,r3
   1c1ac:	e17fff17 	ldw	r5,-4(fp)
   1c1b0:	100d883a 	mov	r6,r2
   1c1b4:	001c3a40 	call	1c3a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c1b8:	1000021e 	bne	r2,zero,1c1c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1c1bc:	e0bffd17 	ldw	r2,-12(fp)
   1c1c0:	00000806 	br	1c1e4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1c1c4:	e0bffd17 	ldw	r2,-12(fp)
   1c1c8:	10800017 	ldw	r2,0(r2)
   1c1cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c1d0:	e0fffd17 	ldw	r3,-12(fp)
   1c1d4:	008000f4 	movhi	r2,3
   1c1d8:	10a77204 	addi	r2,r2,-25144
   1c1dc:	18bfcb1e 	bne	r3,r2,1c10c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c1e0:	0005883a 	mov	r2,zero
}
   1c1e4:	e037883a 	mov	sp,fp
   1c1e8:	dfc00117 	ldw	ra,4(sp)
   1c1ec:	df000017 	ldw	fp,0(sp)
   1c1f0:	dec00204 	addi	sp,sp,8
   1c1f4:	f800283a 	ret

0001c1f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c1f8:	defffa04 	addi	sp,sp,-24
   1c1fc:	dfc00515 	stw	ra,20(sp)
   1c200:	df000415 	stw	fp,16(sp)
   1c204:	dc000315 	stw	r16,12(sp)
   1c208:	df000304 	addi	fp,sp,12
   1c20c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c210:	00bffa04 	movi	r2,-24
   1c214:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c218:	e03ffd15 	stw	zero,-12(fp)
   1c21c:	00002106 	br	1c2a4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1c220:	040000f4 	movhi	r16,3
   1c224:	8422f504 	addi	r16,r16,-29740
   1c228:	e0bffd17 	ldw	r2,-12(fp)
   1c22c:	1009883a 	mov	r4,r2
   1c230:	01400304 	movi	r5,12
   1c234:	00107940 	call	10794 <__mulsi3>
   1c238:	8085883a 	add	r2,r16,r2
   1c23c:	10800017 	ldw	r2,0(r2)
   1c240:	1000151e 	bne	r2,zero,1c298 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1c244:	040000f4 	movhi	r16,3
   1c248:	8422f504 	addi	r16,r16,-29740
   1c24c:	e0bffd17 	ldw	r2,-12(fp)
   1c250:	1009883a 	mov	r4,r2
   1c254:	01400304 	movi	r5,12
   1c258:	00107940 	call	10794 <__mulsi3>
   1c25c:	8085883a 	add	r2,r16,r2
   1c260:	e0ffff17 	ldw	r3,-4(fp)
   1c264:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1c268:	008000f4 	movhi	r2,3
   1c26c:	10a77604 	addi	r2,r2,-25128
   1c270:	10c00017 	ldw	r3,0(r2)
   1c274:	e0bffd17 	ldw	r2,-12(fp)
   1c278:	1880040e 	bge	r3,r2,1c28c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1c27c:	008000f4 	movhi	r2,3
   1c280:	10a77604 	addi	r2,r2,-25128
   1c284:	e0fffd17 	ldw	r3,-12(fp)
   1c288:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1c28c:	e0bffd17 	ldw	r2,-12(fp)
   1c290:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1c294:	00000606 	br	1c2b0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c298:	e0bffd17 	ldw	r2,-12(fp)
   1c29c:	10800044 	addi	r2,r2,1
   1c2a0:	e0bffd15 	stw	r2,-12(fp)
   1c2a4:	e0bffd17 	ldw	r2,-12(fp)
   1c2a8:	10800810 	cmplti	r2,r2,32
   1c2ac:	103fdc1e 	bne	r2,zero,1c220 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1c2b0:	e0bffe17 	ldw	r2,-8(fp)
}
   1c2b4:	e037883a 	mov	sp,fp
   1c2b8:	dfc00217 	ldw	ra,8(sp)
   1c2bc:	df000117 	ldw	fp,4(sp)
   1c2c0:	dc000017 	ldw	r16,0(sp)
   1c2c4:	dec00304 	addi	sp,sp,12
   1c2c8:	f800283a 	ret

0001c2cc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c2cc:	defffb04 	addi	sp,sp,-20
   1c2d0:	df000415 	stw	fp,16(sp)
   1c2d4:	df000404 	addi	fp,sp,16
   1c2d8:	e13ffe15 	stw	r4,-8(fp)
   1c2dc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c2e0:	e0bfff17 	ldw	r2,-4(fp)
   1c2e4:	10840070 	cmpltui	r2,r2,4097
   1c2e8:	1000021e 	bne	r2,zero,1c2f4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c2ec:	00840004 	movi	r2,4096
   1c2f0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c2f4:	e0fffe17 	ldw	r3,-8(fp)
   1c2f8:	e0bfff17 	ldw	r2,-4(fp)
   1c2fc:	1885883a 	add	r2,r3,r2
   1c300:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c304:	e0bffe17 	ldw	r2,-8(fp)
   1c308:	e0bffc15 	stw	r2,-16(fp)
   1c30c:	00000506 	br	1c324 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c310:	e0bffc17 	ldw	r2,-16(fp)
   1c314:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c318:	e0bffc17 	ldw	r2,-16(fp)
   1c31c:	10800804 	addi	r2,r2,32
   1c320:	e0bffc15 	stw	r2,-16(fp)
   1c324:	e0fffc17 	ldw	r3,-16(fp)
   1c328:	e0bffd17 	ldw	r2,-12(fp)
   1c32c:	18bff836 	bltu	r3,r2,1c310 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c330:	e0bffe17 	ldw	r2,-8(fp)
   1c334:	108007cc 	andi	r2,r2,31
   1c338:	10000226 	beq	r2,zero,1c344 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c33c:	e0bffc17 	ldw	r2,-16(fp)
   1c340:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c344:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c348:	e037883a 	mov	sp,fp
   1c34c:	df000017 	ldw	fp,0(sp)
   1c350:	dec00104 	addi	sp,sp,4
   1c354:	f800283a 	ret

0001c358 <atexit>:
   1c358:	200b883a 	mov	r5,r4
   1c35c:	000d883a 	mov	r6,zero
   1c360:	0009883a 	mov	r4,zero
   1c364:	000f883a 	mov	r7,zero
   1c368:	001c4201 	jmpi	1c420 <__register_exitproc>

0001c36c <exit>:
   1c36c:	defffe04 	addi	sp,sp,-8
   1c370:	000b883a 	mov	r5,zero
   1c374:	dc000015 	stw	r16,0(sp)
   1c378:	dfc00115 	stw	ra,4(sp)
   1c37c:	2021883a 	mov	r16,r4
   1c380:	001c5500 	call	1c550 <__call_exitprocs>
   1c384:	008000f4 	movhi	r2,3
   1c388:	10a76d04 	addi	r2,r2,-25164
   1c38c:	11000017 	ldw	r4,0(r2)
   1c390:	20800f17 	ldw	r2,60(r4)
   1c394:	10000126 	beq	r2,zero,1c39c <exit+0x30>
   1c398:	103ee83a 	callr	r2
   1c39c:	8009883a 	mov	r4,r16
   1c3a0:	001c6f00 	call	1c6f0 <_exit>

0001c3a4 <memcmp>:
   1c3a4:	01c000c4 	movi	r7,3
   1c3a8:	3980192e 	bgeu	r7,r6,1c410 <memcmp+0x6c>
   1c3ac:	2904b03a 	or	r2,r5,r4
   1c3b0:	11c4703a 	and	r2,r2,r7
   1c3b4:	10000f26 	beq	r2,zero,1c3f4 <memcmp+0x50>
   1c3b8:	20c00003 	ldbu	r3,0(r4)
   1c3bc:	28800003 	ldbu	r2,0(r5)
   1c3c0:	1880151e 	bne	r3,r2,1c418 <memcmp+0x74>
   1c3c4:	31bfff84 	addi	r6,r6,-2
   1c3c8:	01ffffc4 	movi	r7,-1
   1c3cc:	00000406 	br	1c3e0 <memcmp+0x3c>
   1c3d0:	20c00003 	ldbu	r3,0(r4)
   1c3d4:	28800003 	ldbu	r2,0(r5)
   1c3d8:	31bfffc4 	addi	r6,r6,-1
   1c3dc:	18800e1e 	bne	r3,r2,1c418 <memcmp+0x74>
   1c3e0:	21000044 	addi	r4,r4,1
   1c3e4:	29400044 	addi	r5,r5,1
   1c3e8:	31fff91e 	bne	r6,r7,1c3d0 <memcmp+0x2c>
   1c3ec:	0005883a 	mov	r2,zero
   1c3f0:	f800283a 	ret
   1c3f4:	20c00017 	ldw	r3,0(r4)
   1c3f8:	28800017 	ldw	r2,0(r5)
   1c3fc:	1880041e 	bne	r3,r2,1c410 <memcmp+0x6c>
   1c400:	31bfff04 	addi	r6,r6,-4
   1c404:	21000104 	addi	r4,r4,4
   1c408:	29400104 	addi	r5,r5,4
   1c40c:	39bff936 	bltu	r7,r6,1c3f4 <memcmp+0x50>
   1c410:	303fe91e 	bne	r6,zero,1c3b8 <memcmp+0x14>
   1c414:	003ff506 	br	1c3ec <memcmp+0x48>
   1c418:	1885c83a 	sub	r2,r3,r2
   1c41c:	f800283a 	ret

0001c420 <__register_exitproc>:
   1c420:	defffa04 	addi	sp,sp,-24
   1c424:	008000f4 	movhi	r2,3
   1c428:	10a76d04 	addi	r2,r2,-25164
   1c42c:	dc000315 	stw	r16,12(sp)
   1c430:	14000017 	ldw	r16,0(r2)
   1c434:	dc400415 	stw	r17,16(sp)
   1c438:	dfc00515 	stw	ra,20(sp)
   1c43c:	80805217 	ldw	r2,328(r16)
   1c440:	2023883a 	mov	r17,r4
   1c444:	10003e26 	beq	r2,zero,1c540 <__register_exitproc+0x120>
   1c448:	10c00117 	ldw	r3,4(r2)
   1c44c:	020007c4 	movi	r8,31
   1c450:	40c0180e 	bge	r8,r3,1c4b4 <__register_exitproc+0x94>
   1c454:	00800034 	movhi	r2,0
   1c458:	10800004 	addi	r2,r2,0
   1c45c:	1000061e 	bne	r2,zero,1c478 <__register_exitproc+0x58>
   1c460:	00bfffc4 	movi	r2,-1
   1c464:	dfc00517 	ldw	ra,20(sp)
   1c468:	dc400417 	ldw	r17,16(sp)
   1c46c:	dc000317 	ldw	r16,12(sp)
   1c470:	dec00604 	addi	sp,sp,24
   1c474:	f800283a 	ret
   1c478:	01006404 	movi	r4,400
   1c47c:	d9400015 	stw	r5,0(sp)
   1c480:	d9800115 	stw	r6,4(sp)
   1c484:	d9c00215 	stw	r7,8(sp)
   1c488:	00000000 	call	0 <__alt_mem_instruction_memory_1-0x10000>
   1c48c:	d9400017 	ldw	r5,0(sp)
   1c490:	d9800117 	ldw	r6,4(sp)
   1c494:	d9c00217 	ldw	r7,8(sp)
   1c498:	103ff126 	beq	r2,zero,1c460 <__register_exitproc+0x40>
   1c49c:	80c05217 	ldw	r3,328(r16)
   1c4a0:	10000115 	stw	zero,4(r2)
   1c4a4:	10c00015 	stw	r3,0(r2)
   1c4a8:	80805215 	stw	r2,328(r16)
   1c4ac:	10006215 	stw	zero,392(r2)
   1c4b0:	10006315 	stw	zero,396(r2)
   1c4b4:	10c00117 	ldw	r3,4(r2)
   1c4b8:	88000d1e 	bne	r17,zero,1c4f0 <__register_exitproc+0xd0>
   1c4bc:	19000084 	addi	r4,r3,2
   1c4c0:	2109883a 	add	r4,r4,r4
   1c4c4:	18c00044 	addi	r3,r3,1
   1c4c8:	2109883a 	add	r4,r4,r4
   1c4cc:	1109883a 	add	r4,r2,r4
   1c4d0:	10c00115 	stw	r3,4(r2)
   1c4d4:	0005883a 	mov	r2,zero
   1c4d8:	21400015 	stw	r5,0(r4)
   1c4dc:	dfc00517 	ldw	ra,20(sp)
   1c4e0:	dc400417 	ldw	r17,16(sp)
   1c4e4:	dc000317 	ldw	r16,12(sp)
   1c4e8:	dec00604 	addi	sp,sp,24
   1c4ec:	f800283a 	ret
   1c4f0:	02400044 	movi	r9,1
   1c4f4:	12806217 	ldw	r10,392(r2)
   1c4f8:	48d2983a 	sll	r9,r9,r3
   1c4fc:	19000804 	addi	r4,r3,32
   1c500:	18d1883a 	add	r8,r3,r3
   1c504:	2109883a 	add	r4,r4,r4
   1c508:	4211883a 	add	r8,r8,r8
   1c50c:	2109883a 	add	r4,r4,r4
   1c510:	1109883a 	add	r4,r2,r4
   1c514:	1211883a 	add	r8,r2,r8
   1c518:	5254b03a 	or	r10,r10,r9
   1c51c:	21c02215 	stw	r7,136(r4)
   1c520:	41802215 	stw	r6,136(r8)
   1c524:	12806215 	stw	r10,392(r2)
   1c528:	01000084 	movi	r4,2
   1c52c:	893fe31e 	bne	r17,r4,1c4bc <__register_exitproc+0x9c>
   1c530:	11006317 	ldw	r4,396(r2)
   1c534:	2252b03a 	or	r9,r4,r9
   1c538:	12406315 	stw	r9,396(r2)
   1c53c:	003fdf06 	br	1c4bc <__register_exitproc+0x9c>
   1c540:	008000f4 	movhi	r2,3
   1c544:	10a7da04 	addi	r2,r2,-24728
   1c548:	80805215 	stw	r2,328(r16)
   1c54c:	003fbe06 	br	1c448 <__register_exitproc+0x28>

0001c550 <__call_exitprocs>:
   1c550:	008000f4 	movhi	r2,3
   1c554:	10a76d04 	addi	r2,r2,-25164
   1c558:	10800017 	ldw	r2,0(r2)
   1c55c:	defff304 	addi	sp,sp,-52
   1c560:	df000b15 	stw	fp,44(sp)
   1c564:	d8800015 	stw	r2,0(sp)
   1c568:	10805204 	addi	r2,r2,328
   1c56c:	dd400815 	stw	r21,32(sp)
   1c570:	dfc00c15 	stw	ra,48(sp)
   1c574:	ddc00a15 	stw	r23,40(sp)
   1c578:	dd800915 	stw	r22,36(sp)
   1c57c:	dd000715 	stw	r20,28(sp)
   1c580:	dcc00615 	stw	r19,24(sp)
   1c584:	dc800515 	stw	r18,20(sp)
   1c588:	dc400415 	stw	r17,16(sp)
   1c58c:	dc000315 	stw	r16,12(sp)
   1c590:	d9000115 	stw	r4,4(sp)
   1c594:	2839883a 	mov	fp,r5
   1c598:	d8800215 	stw	r2,8(sp)
   1c59c:	057fffc4 	movi	r21,-1
   1c5a0:	d8800017 	ldw	r2,0(sp)
   1c5a4:	ddc00217 	ldw	r23,8(sp)
   1c5a8:	14805217 	ldw	r18,328(r2)
   1c5ac:	90001726 	beq	r18,zero,1c60c <__call_exitprocs+0xbc>
   1c5b0:	94400117 	ldw	r17,4(r18)
   1c5b4:	8c3fffc4 	addi	r16,r17,-1
   1c5b8:	80001116 	blt	r16,zero,1c600 <__call_exitprocs+0xb0>
   1c5bc:	8c400044 	addi	r17,r17,1
   1c5c0:	8427883a 	add	r19,r16,r16
   1c5c4:	8c63883a 	add	r17,r17,r17
   1c5c8:	95802204 	addi	r22,r18,136
   1c5cc:	9ce7883a 	add	r19,r19,r19
   1c5d0:	8c63883a 	add	r17,r17,r17
   1c5d4:	b4e7883a 	add	r19,r22,r19
   1c5d8:	9463883a 	add	r17,r18,r17
   1c5dc:	e0001726 	beq	fp,zero,1c63c <__call_exitprocs+0xec>
   1c5e0:	8c87c83a 	sub	r3,r17,r18
   1c5e4:	b0c7883a 	add	r3,r22,r3
   1c5e8:	18c01e17 	ldw	r3,120(r3)
   1c5ec:	1f001326 	beq	r3,fp,1c63c <__call_exitprocs+0xec>
   1c5f0:	843fffc4 	addi	r16,r16,-1
   1c5f4:	9cffff04 	addi	r19,r19,-4
   1c5f8:	8c7fff04 	addi	r17,r17,-4
   1c5fc:	857ff71e 	bne	r16,r21,1c5dc <__call_exitprocs+0x8c>
   1c600:	00800034 	movhi	r2,0
   1c604:	10800004 	addi	r2,r2,0
   1c608:	10002a1e 	bne	r2,zero,1c6b4 <__call_exitprocs+0x164>
   1c60c:	dfc00c17 	ldw	ra,48(sp)
   1c610:	df000b17 	ldw	fp,44(sp)
   1c614:	ddc00a17 	ldw	r23,40(sp)
   1c618:	dd800917 	ldw	r22,36(sp)
   1c61c:	dd400817 	ldw	r21,32(sp)
   1c620:	dd000717 	ldw	r20,28(sp)
   1c624:	dcc00617 	ldw	r19,24(sp)
   1c628:	dc800517 	ldw	r18,20(sp)
   1c62c:	dc400417 	ldw	r17,16(sp)
   1c630:	dc000317 	ldw	r16,12(sp)
   1c634:	dec00d04 	addi	sp,sp,52
   1c638:	f800283a 	ret
   1c63c:	91000117 	ldw	r4,4(r18)
   1c640:	88c00017 	ldw	r3,0(r17)
   1c644:	213fffc4 	addi	r4,r4,-1
   1c648:	24001526 	beq	r4,r16,1c6a0 <__call_exitprocs+0x150>
   1c64c:	88000015 	stw	zero,0(r17)
   1c650:	183fe726 	beq	r3,zero,1c5f0 <__call_exitprocs+0xa0>
   1c654:	00800044 	movi	r2,1
   1c658:	1408983a 	sll	r4,r2,r16
   1c65c:	91406217 	ldw	r5,392(r18)
   1c660:	95000117 	ldw	r20,4(r18)
   1c664:	214a703a 	and	r5,r4,r5
   1c668:	28000b26 	beq	r5,zero,1c698 <__call_exitprocs+0x148>
   1c66c:	91406317 	ldw	r5,396(r18)
   1c670:	2148703a 	and	r4,r4,r5
   1c674:	20000c1e 	bne	r4,zero,1c6a8 <__call_exitprocs+0x158>
   1c678:	99400017 	ldw	r5,0(r19)
   1c67c:	d9000117 	ldw	r4,4(sp)
   1c680:	183ee83a 	callr	r3
   1c684:	90c00117 	ldw	r3,4(r18)
   1c688:	1d3fc51e 	bne	r3,r20,1c5a0 <__call_exitprocs+0x50>
   1c68c:	b8c00017 	ldw	r3,0(r23)
   1c690:	1cbfd726 	beq	r3,r18,1c5f0 <__call_exitprocs+0xa0>
   1c694:	003fc206 	br	1c5a0 <__call_exitprocs+0x50>
   1c698:	183ee83a 	callr	r3
   1c69c:	003ff906 	br	1c684 <__call_exitprocs+0x134>
   1c6a0:	94000115 	stw	r16,4(r18)
   1c6a4:	003fea06 	br	1c650 <__call_exitprocs+0x100>
   1c6a8:	99000017 	ldw	r4,0(r19)
   1c6ac:	183ee83a 	callr	r3
   1c6b0:	003ff406 	br	1c684 <__call_exitprocs+0x134>
   1c6b4:	90c00117 	ldw	r3,4(r18)
   1c6b8:	1800071e 	bne	r3,zero,1c6d8 <__call_exitprocs+0x188>
   1c6bc:	90c00017 	ldw	r3,0(r18)
   1c6c0:	18000926 	beq	r3,zero,1c6e8 <__call_exitprocs+0x198>
   1c6c4:	9009883a 	mov	r4,r18
   1c6c8:	b8c00015 	stw	r3,0(r23)
   1c6cc:	00000000 	call	0 <__alt_mem_instruction_memory_1-0x10000>
   1c6d0:	bc800017 	ldw	r18,0(r23)
   1c6d4:	003fb506 	br	1c5ac <__call_exitprocs+0x5c>
   1c6d8:	90c00017 	ldw	r3,0(r18)
   1c6dc:	902f883a 	mov	r23,r18
   1c6e0:	1825883a 	mov	r18,r3
   1c6e4:	003fb106 	br	1c5ac <__call_exitprocs+0x5c>
   1c6e8:	0007883a 	mov	r3,zero
   1c6ec:	003ffb06 	br	1c6dc <__call_exitprocs+0x18c>

0001c6f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c6f0:	defffc04 	addi	sp,sp,-16
   1c6f4:	df000315 	stw	fp,12(sp)
   1c6f8:	df000304 	addi	fp,sp,12
   1c6fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1c700:	0001883a 	nop
   1c704:	e0bfff17 	ldw	r2,-4(fp)
   1c708:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   1c70c:	e0bffd17 	ldw	r2,-12(fp)
   1c710:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c714:	e0bffe17 	ldw	r2,-8(fp)
   1c718:	10000226 	beq	r2,zero,1c724 <_exit+0x34>
    ALT_SIM_FAIL();
   1c71c:	002af070 	cmpltui	zero,zero,43969
   1c720:	00000106 	br	1c728 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1c724:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c728:	003fff06 	br	1c728 <_exit+0x38>
