
producer.elf:     file format elf32-littlenios2
producer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000cac8 memsz 0x0000cac8 flags r-x
    LOAD off    0x0000e448 vaddr 0x00028448 paddr 0x0001cae8 align 2**12
         filesz 0x00001a58 memsz 0x00001d60 flags rw-
    LOAD off    0x00010000 vaddr 0x00028000 paddr 0x00028000 align 2**12
         filesz 0x00000448 memsz 0x00000448 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c930  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000448  00028000  00028000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  00028448  0001cae8  0000e448  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00029ea0  0001e540  0000fea0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  00010470  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002319b  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000918d  00000000  00000000  000343e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a3d3  00000000  00000000  0003d570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001b14  00000000  00000000  00047944  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003111  00000000  00000000  00049458  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000110de  00000000  00000000  0004c569  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0005d648  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005d668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000615ba  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000615bd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000615c2  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000615c3  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000615c4  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000615c8  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000615cc  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000615d0  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000615db  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000615e6  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  000615f1  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002b  00000000  00000000  000615f4  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00087d98  00000000  00000000  0006161f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00028000 l    d  .rodata	00000000 .rodata
00028448 l    d  .rwdata	00000000 .rwdata
00029ea0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../producer_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 producer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010534 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010818 l     F .text	00000034 __sprint_r
00028166 l     O .rodata	00000010 blanks.3515
00028176 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012860 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000142d0 l     F .text	00000008 __fp_lock
000142d8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00028448 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000281ac l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000282f4 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000188b4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00019c30 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019d4c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019d78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00019e78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00019f6c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a058 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a234 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00029e90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a4a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a5e8 l     F .text	00000038 alt_dev_reg
00028e04 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001adec l     F .text	00000204 altera_avalon_jtag_uart_irq
0001aff0 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b62c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b9c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001be64 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001bfbc l     F .text	00000050 alt_get_errno
0001c00c l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00016d90 g     F .text	00000074 _mprec_log10
00016e80 g     F .text	00000084 __any_on
00017b00 g     F .text	00000064 _isatty_r
000281dc g     O .rodata	00000028 __mprec_tinytens
0001a17c g     F .text	00000078 alt_main
00019bec g     F .text	00000044 __ashldi3
000106f4 g     F .text	00000084 _puts_r
00029ea0 g     O .bss	00000004 writep
00029f18 g     O .bss	00000100 alt_irq
00017b64 g     F .text	0000006c _lseek_r
0001a958 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0001cae8 g       *ABS*	00000000 __flash_rwdata_start
00019154 g     F .text	0000005c __eqdf2
000103a8 g     F .text	00000038 FIFO_1_INIT
0002a1a8 g       *ABS*	00000000 __alt_heap_start
000106b8 g     F .text	0000003c printf
000176a4 g     F .text	0000005c __sseek
00014374 g     F .text	0000010c __sinit
0001500c g     F .text	0000009c _setlocale_r
000142ec g     F .text	00000078 __sfmoreglue
0001a214 g     F .text	00000020 __malloc_unlock
00029ea4 g     O .bss	00000004 readp
00029ee0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00015c4c g     F .text	0000018c memmove
0001a6d8 g     F .text	00000098 altera_avalon_fifo_init
00014364 g     F .text	00000010 _cleanup
0001aa08 g     F .text	00000058 altera_avalon_fifo_write_fifo
00015eb4 g     F .text	000000a8 _Balloc
0001920c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
0001aba0 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00017a98 g     F .text	00000068 _fstat_r
00029ecc g     O .bss	00000004 errno
00029ed4 g     O .bss	00000004 alt_argv
00031e64 g       *ABS*	00000000 _gp
0001a8a4 g     F .text	0000005c altera_avalon_fifo_clear_event
00028c84 g     O .rwdata	00000180 alt_fd_list
0001c410 g     F .text	00000090 alt_find_dev
00015b0c g     F .text	00000140 memcpy
000142e0 g     F .text	0000000c _cleanup_r
00019330 g     F .text	000000d4 __floatsidf
0001bf44 g     F .text	00000078 alt_io_redirect
000192d4 g     F .text	0000005c __ltdf2
0001cae8 g       *ABS*	00000000 __DTOR_END__
00010000 g       *ABS*	00000000 __alt_mem_instruction_memory_0
00010778 g     F .text	00000014 puts
00016cec g     F .text	000000a4 __ratio
0001b1f0 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0001068c g     F .text	0000002c _printf_r
00010654 g     F .text	00000008 __udivsi3
00019ec8 g     F .text	000000a4 isatty
0002822c g     O .rodata	000000c8 __mprec_tens
000150a8 g     F .text	0000000c __locale_charset
0001c688 g     F .text	0000008c alt_icache_flush
00029ec8 g     O .bss	00000004 __malloc_top_pad
00029e6c g     O .rwdata	00000004 __mb_cur_max
000150b4 g     F .text	0000000c _localeconv_r
000162e4 g     F .text	0000003c __i2b
000149c8 g     F .text	000004e4 __sfvwrite_r
00017564 g     F .text	00000064 _sbrk_r
00029ea8 g     O .bss	00000004 fullp
00017bd0 g     F .text	0000006c _read_r
00028848 g     O .rwdata	0000000c __lc_ctype
00029e88 g     O .rwdata	00000004 alt_max_fd
000199d4 g     F .text	00000104 __unpack_d
00017948 g     F .text	0000013c _fclose_r
000142a0 g     F .text	00000030 fflush
00029ec4 g     O .bss	00000004 __malloc_max_sbrked_mem
00018c08 g     F .text	00000054 __adddf3
00016a60 g     F .text	00000148 __b2d
0001828c g     F .text	00000628 __umoddi3
0001a0a8 g     F .text	000000d4 lseek
00028000 g       *ABS*	00000000 __alt_mem_data_memory_0
00029e64 g     O .rwdata	00000004 _global_impure_ptr
00016f04 g     F .text	000005fc _realloc_r
0002a1a8 g       *ABS*	00000000 __bss_end
0001bd74 g     F .text	000000f0 alt_iic_isr_register
0001c2ec g     F .text	00000104 alt_tick
00017c3c g     F .text	00000650 __udivdi3
00028204 g     O .rodata	00000028 __mprec_bigtens
000160c8 g     F .text	00000104 __s2b
000194d8 g     F .text	0000011c __floatunsidf
00016800 g     F .text	00000058 __mcmp
0001458c g     F .text	00000018 __fp_lock_all
0001bd28 g     F .text	0000004c alt_ic_irq_enabled
00010458 g     F .text	0000009c producer
0001c254 g     F .text	00000098 alt_alarm_stop
00029ee4 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000cc alt_irq_handler
00028c5c g     O .rwdata	00000028 alt_dev_null
0001b9a8 g     F .text	0000001c alt_dcache_flush_all
000161cc g     F .text	00000068 __hi0bits
00019404 g     F .text	000000d4 __fixdfsi
0001a900 g     F .text	00000058 altera_avalon_fifo_write_ienable
00029ea0 g       *ABS*	00000000 __ram_rwdata_end
0001a814 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00029e80 g     O .rwdata	00000008 alt_dev_list
0001a4f8 g     F .text	000000f0 write
0001b840 g     F .text	00000028 alt_timestamp_freq
00028448 g       *ABS*	00000000 __ram_rodata_end
00019dc8 g     F .text	000000b0 fstat
00019ba8 g     F .text	00000044 __lshrdi3
00016578 g     F .text	0000012c __pow5mult
00029ebc g     O .bss	00000004 __nlocale_changed
0001065c g     F .text	00000008 __umodsi3
0002a1a8 g       *ABS*	00000000 end
0001ad2c g     F .text	000000c0 altera_avalon_jtag_uart_init
0001a840 g     F .text	0000003c altera_avalon_fifo_read_event
0001cae8 g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
0001b6a0 g     F .text	00000088 alt_avalon_timer_sc_init
00019704 g     F .text	000000ac __clzsi2
0001b408 g     F .text	00000224 altera_avalon_jtag_uart_write
0001457c g     F .text	00000004 __sfp_lock_acquire
0001aacc g     F .text	0000004c altera_avalon_fifo_read_fifo
00015a14 g     F .text	000000f8 memchr
0001084c g     F .text	00001e7c ___vfprintf_internal_r
000146f8 g     F .text	000002d0 _free_r
0001c90c g     F .text	000001a0 __call_exitprocs
00029eb8 g     O .bss	00000004 __mlocale_changed
00029e70 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00029ee8 g     O .bss	00000004 _alt_tick_rate
000166a4 g     F .text	0000015c __lshift
00029eec g     O .bss	00000004 _alt_nticks
0001a284 g     F .text	000000f4 read
0001a654 g     F .text	00000084 alt_sys_init
0001c7dc g     F .text	00000130 __register_exitproc
00016320 g     F .text	00000258 __multiply
0001b094 g     F .text	00000068 altera_avalon_jtag_uart_close
00010664 g     F .text	00000028 __mulsi3
00028448 g       *ABS*	00000000 __ram_rwdata_start
00028000 g       *ABS*	00000000 __ram_rodata_start
00029ef0 g     O .bss	00000028 __malloc_current_mallinfo
00016ba8 g     F .text	00000144 __d2b
0001abc8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001c5b4 g     F .text	000000d4 alt_get_fd
00019ad8 g     F .text	000000d0 __fpcmp_parts_d
000178e4 g     F .text	00000064 _close_r
0001c760 g     F .text	0000007c memcmp
0001ac88 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a1a8 g       *ABS*	00000000 __alt_stack_base
0001acd8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000101f4 g     F .text	00000108 print_status
000126ec g     F .text	00000174 __swsetup_r
0001a770 g     F .text	0000003c altera_avalon_fifo_read_status
00018fa0 g     F .text	000001b4 __divdf3
00014480 g     F .text	000000fc __sfp
00016e04 g     F .text	0000007c __copybits
00028854 g     O .rwdata	00000408 __malloc_av_
00014588 g     F .text	00000004 __sinit_lock_release
00018cbc g     F .text	000002e4 __muldf3
000175c8 g     F .text	00000054 __sread
0001ab74 g     F .text	0000002c altera_avalon_fifo_read_other_info
0001c4a0 g     F .text	00000114 alt_find_file
0001ba14 g     F .text	000000a0 alt_dev_llist_insert
0001a1f4 g     F .text	00000020 __malloc_lock
0001a3f8 g     F .text	000000b0 sbrk
000140b8 g     F .text	000001e8 _fflush_r
00017818 g     F .text	000000cc _calloc_r
00029ea0 g       *ABS*	00000000 __bss_start
00015dd8 g     F .text	000000dc memset
000103e0 g     F .text	00000078 main
00029ed8 g     O .bss	00000004 alt_envp
00029ec0 g     O .bss	00000004 __malloc_max_total_mem
0001ac28 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001a87c g     F .text	00000028 altera_avalon_fifo_read_level
00017700 g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
00017a84 g     F .text	00000014 fclose
0001b728 g     F .text	00000088 alt_timestamp_start
0002a018 g     O .bss	00000190 _atexit0
00012a9c g     F .text	0000161c _dtoa_r
00015290 g     F .text	00000784 _malloc_r
00029e8c g     O .rwdata	00000004 alt_errno
00014eac g     F .text	000000a8 _fwalk
000102fc g     F .text	00000058 WRITE_FIFO_1
000105a8 g     F .text	00000050 __divsi3
00028300 g     O .rodata	00000014 __thenan_df
000145bc g     F .text	0000013c _malloc_trim_r
0001cae8 g       *ABS*	00000000 __CTOR_END__
00017708 g     F .text	000000a4 strcmp
00028000 g       *ABS*	00000000 __flash_rodata_start
0001cae8 g       *ABS*	00000000 __DTOR_LIST__
000104f4 g     F .text	00000040 delay
000191b0 g     F .text	0000005c __nedf2
0001a620 g     F .text	00000034 alt_irq_init
0001a378 g     F .text	00000080 alt_release_fd
00028314 g     O .rodata	00000100 __clz_tab
00029eb4 g     O .bss	00000004 _PathLocale
0001c714 g     F .text	00000014 atexit
000177ac g     F .text	0000006c _write_r
000150c0 g     F .text	0000001c setlocale
00029e68 g     O .rwdata	00000004 _impure_ptr
00029ed0 g     O .bss	00000004 alt_argc
00029edc g     O .bss	00000004 altera_avalon_timer_ts_base
0001bb10 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00016a00 g     F .text	00000060 __ulp
00017500 g     F .text	00000038 __isinfd
000145a4 g     F .text	00000018 __fp_unlock_all
00029e78 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000150dc g     F .text	0000000c localeconv
0001b7b0 g     F .text	00000090 alt_timestamp
0001ab18 g     F .text	0000005c altera_avalon_fifo_write_other_info
0001bb9c g     F .text	00000050 alt_ic_isr_register
00029ea0 g       *ABS*	00000000 _edata
0002a1a8 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
0001b0fc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001bc88 g     F .text	000000a0 alt_ic_irq_disable
0001761c g     F .text	00000088 __swrite
00029e74 g     O .rwdata	00000004 __malloc_trim_threshold
0001c3f0 g     F .text	00000020 altera_nios2_qsys_irq_init
0001c728 g     F .text	00000038 exit
00014f54 g     F .text	000000b8 _fwalk_reent
00016858 g     F .text	000001a8 __mdiff
000105f8 g     F .text	0000005c __modsi3
0001a7ac g     F .text	0000003c altera_avalon_fifo_read_ienable
00030000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00014580 g     F .text	00000004 __sfp_lock_release
0001caac g     F .text	0000003c _exit
00017538 g     F .text	0000002c __isnand
0001b868 g     F .text	00000140 alt_alarm_start
000195f4 g     F .text	00000110 __muldi3
0001a7e8 g     F .text	0000002c altera_avalon_fifo_read_almostfull
000150e8 g     F .text	000001a8 __smakebuf_r
0001078c g     F .text	0000008c strlen
0001c0fc g     F .text	00000158 open
0001aa60 g     F .text	0000006c altera_avalon_read_fifo
00019270 g     F .text	00000064 __gedf2
00010354 g     F .text	00000054 READ_FIFO_1
0001bb6c g     F .text	00000030 alt_icache_flush_all
00029e94 g     O .rwdata	00000004 alt_priority_mask
00029eac g     O .bss	00000004 emptyp
0001bbec g     F .text	0000009c alt_ic_irq_enable
000126c8 g     F .text	00000024 __vfprintf_internal
00018c5c g     F .text	00000060 __subdf3
00016234 g     F .text	000000b0 __lo0bits
0001a9b0 g     F .text	00000058 altera_avalon_fifo_write_almostempty
00029e98 g     O .rwdata	00000008 alt_alarm_list
0001bab4 g     F .text	0000005c _do_ctors
00029eb0 g     O .bss	00000004 countp
00019c80 g     F .text	000000cc close
00019fd8 g     F .text	00000080 alt_load
000197b0 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00014584 g     F .text	00000004 __sinit_lock_acquire
00015f84 g     F .text	00000144 __multadd
00015f5c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406e14 	ori	at,at,440
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_instruction_memory_0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000f4 	movhi	r3,3
   10130:	18e7c604 	addi	r3,r3,-24808
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000f4 	movhi	r4,3
   10148:	2127c604 	addi	r4,r4,-24808
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   101c4:	d6879914 	ori	gp,gp,7780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   101cc:	10a7a814 	ori	r2,r2,40608

    movhi r3, %hi(__bss_end)
   101d0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   101d4:	18e86a14 	ori	r3,r3,41384

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	0019fd80 	call	19fd8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	001a17c0 	call	1a17c <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <print_status>:
*/


#include "FIFO_1.h"
void print_status(alt_u32 control_base_address)
{
   101f4:	defffd04 	addi	sp,sp,-12
   101f8:	dfc00215 	stw	ra,8(sp)
   101fc:	df000115 	stw	fp,4(sp)
   10200:	df000104 	addi	fp,sp,4
   10204:	e13fff15 	stw	r4,-4(fp)
	printf("--------------------------------------\n");
   10208:	010000f4 	movhi	r4,3
   1020c:	21200004 	addi	r4,r4,-32768
   10210:	00107780 	call	10778 <puts>
	printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   10214:	e13fff17 	ldw	r4,-4(fp)
   10218:	001a87c0 	call	1a87c <altera_avalon_fifo_read_level>
   1021c:	010000f4 	movhi	r4,3
   10220:	21200a04 	addi	r4,r4,-32728
   10224:	100b883a 	mov	r5,r2
   10228:	00106b80 	call	106b8 <printf>
	printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   1022c:	e13fff17 	ldw	r4,-4(fp)
   10230:	01400fc4 	movi	r5,63
   10234:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   10238:	010000f4 	movhi	r4,3
   1023c:	21200d04 	addi	r4,r4,-32716
   10240:	100b883a 	mov	r5,r2
   10244:	00106b80 	call	106b8 <printf>
	ALTERA_AVALON_FIFO_STATUS_ALL) );
	printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   10248:	e13fff17 	ldw	r4,-4(fp)
   1024c:	01400fc4 	movi	r5,63
   10250:	001a8400 	call	1a840 <altera_avalon_fifo_read_event>
   10254:	010000f4 	movhi	r4,3
   10258:	21201104 	addi	r4,r4,-32700
   1025c:	100b883a 	mov	r5,r2
   10260:	00106b80 	call	106b8 <printf>
	ALTERA_AVALON_FIFO_EVENT_ALL) );
	printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   10264:	e13fff17 	ldw	r4,-4(fp)
   10268:	01400fc4 	movi	r5,63
   1026c:	001a7ac0 	call	1a7ac <altera_avalon_fifo_read_ienable>
   10270:	010000f4 	movhi	r4,3
   10274:	21201404 	addi	r4,r4,-32688
   10278:	100b883a 	mov	r5,r2
   1027c:	00106b80 	call	106b8 <printf>
	ALTERA_AVALON_FIFO_IENABLE_ALL) );
	printf("ALMOSTEMPTY = %u\n",
   10280:	e13fff17 	ldw	r4,-4(fp)
   10284:	001a8140 	call	1a814 <altera_avalon_fifo_read_almostempty>
   10288:	010000f4 	movhi	r4,3
   1028c:	21201804 	addi	r4,r4,-32672
   10290:	100b883a 	mov	r5,r2
   10294:	00106b80 	call	106b8 <printf>
	altera_avalon_fifo_read_almostempty(control_base_address) );
	printf("ALMOSTFULL = %u\n\n",
   10298:	e13fff17 	ldw	r4,-4(fp)
   1029c:	001a7e80 	call	1a7e8 <altera_avalon_fifo_read_almostfull>
   102a0:	010000f4 	movhi	r4,3
   102a4:	21201d04 	addi	r4,r4,-32652
   102a8:	100b883a 	mov	r5,r2
   102ac:	00106b80 	call	106b8 <printf>
	altera_avalon_fifo_read_almostfull(control_base_address));
	//full
	printf("FULL = %u\n\n",
   102b0:	e13fff17 	ldw	r4,-4(fp)
   102b4:	01400044 	movi	r5,1
   102b8:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   102bc:	010000f4 	movhi	r4,3
   102c0:	21202204 	addi	r4,r4,-32632
   102c4:	100b883a 	mov	r5,r2
   102c8:	00106b80 	call	106b8 <printf>
	altera_avalon_fifo_read_status(control_base_address,0x01));
	//empty
	printf("EMPTY = %u\n\n",
   102cc:	e13fff17 	ldw	r4,-4(fp)
   102d0:	01400084 	movi	r5,2
   102d4:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   102d8:	010000f4 	movhi	r4,3
   102dc:	21202504 	addi	r4,r4,-32620
   102e0:	100b883a 	mov	r5,r2
   102e4:	00106b80 	call	106b8 <printf>
	altera_avalon_fifo_read_status(control_base_address,0x02));
}
   102e8:	e037883a 	mov	sp,fp
   102ec:	dfc00117 	ldw	ra,4(sp)
   102f0:	df000017 	ldw	fp,0(sp)
   102f4:	dec00204 	addi	sp,sp,8
   102f8:	f800283a 	ret

000102fc <WRITE_FIFO_1>:


void WRITE_FIFO_1(int *buffer)
{
   102fc:	defffd04 	addi	sp,sp,-12
   10300:	dfc00215 	stw	ra,8(sp)
   10304:	df000115 	stw	fp,4(sp)
   10308:	df000104 	addi	fp,sp,4
   1030c:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(altera_avalon_fifo_read_status(CTRL_MEMORY, 0x01)){}
   10310:	0001883a 	nop
   10314:	0009883a 	mov	r4,zero
   10318:	01400044 	movi	r5,1
   1031c:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   10320:	103ffc1e 	bne	r2,zero,10314 <WRITE_FIFO_1+0x18>

	// Write the data to FIFO
	altera_avalon_fifo_write_fifo(IN_BASE, CTRL_MEMORY, *buffer);
   10324:	e0bfff17 	ldw	r2,-4(fp)
   10328:	10800017 	ldw	r2,0(r2)
   1032c:	010000f4 	movhi	r4,3
   10330:	21041d04 	addi	r4,r4,4212
   10334:	000b883a 	mov	r5,zero
   10338:	100d883a 	mov	r6,r2
   1033c:	001aa080 	call	1aa08 <altera_avalon_fifo_write_fifo>


}
   10340:	e037883a 	mov	sp,fp
   10344:	dfc00117 	ldw	ra,4(sp)
   10348:	df000017 	ldw	fp,0(sp)
   1034c:	dec00204 	addi	sp,sp,8
   10350:	f800283a 	ret

00010354 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   10354:	defffd04 	addi	sp,sp,-12
   10358:	dfc00215 	stw	ra,8(sp)
   1035c:	df000115 	stw	fp,4(sp)
   10360:	df000104 	addi	fp,sp,4
   10364:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(altera_avalon_fifo_read_status(CTRL_MEMORY, 0x02)){}
   10368:	0001883a 	nop
   1036c:	0009883a 	mov	r4,zero
   10370:	01400084 	movi	r5,2
   10374:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   10378:	103ffc1e 	bne	r2,zero,1036c <READ_FIFO_1+0x18>

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(OUT_BASE,CTRL_MEMORY);
   1037c:	010000f4 	movhi	r4,3
   10380:	21041304 	addi	r4,r4,4172
   10384:	000b883a 	mov	r5,zero
   10388:	001aacc0 	call	1aacc <altera_avalon_fifo_read_fifo>
   1038c:	e0ffff17 	ldw	r3,-4(fp)
   10390:	18800015 	stw	r2,0(r3)


}
   10394:	e037883a 	mov	sp,fp
   10398:	dfc00117 	ldw	ra,4(sp)
   1039c:	df000017 	ldw	fp,0(sp)
   103a0:	dec00204 	addi	sp,sp,8
   103a4:	f800283a 	ret

000103a8 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   103a8:	defffe04 	addi	sp,sp,-8
   103ac:	dfc00115 	stw	ra,4(sp)
   103b0:	df000015 	stw	fp,0(sp)
   103b4:	d839883a 	mov	fp,sp
	altera_avalon_fifo_init(CTRL_MEMORY, 0x000000, ALMOST_EMPTY, ALMOST_FULL);
   103b8:	0009883a 	mov	r4,zero
   103bc:	000b883a 	mov	r5,zero
   103c0:	01800084 	movi	r6,2
   103c4:	01c002c4 	movi	r7,11
   103c8:	001a6d80 	call	1a6d8 <altera_avalon_fifo_init>
	 *
	 * */



}
   103cc:	e037883a 	mov	sp,fp
   103d0:	dfc00117 	ldw	ra,4(sp)
   103d4:	df000017 	ldw	fp,0(sp)
   103d8:	dec00204 	addi	sp,sp,8
   103dc:	f800283a 	ret

000103e0 <main>:
void delay(int n);
int producer();


int main()
{
   103e0:	defffb04 	addi	sp,sp,-20
   103e4:	dfc00415 	stw	ra,16(sp)
   103e8:	df000315 	stw	fp,12(sp)
   103ec:	dc000215 	stw	r16,8(sp)
   103f0:	df000204 	addi	fp,sp,8
	printf("Starting main....\n");
   103f4:	010000f4 	movhi	r4,3
   103f8:	21202904 	addi	r4,r4,-32604
   103fc:	00107780 	call	10778 <puts>

	alt_u32 start_time, end_time;

	alt_timestamp_start();
   10400:	001b7280 	call	1b728 <alt_timestamp_start>

	start_time = alt_timestamp();
   10404:	001b7b00 	call	1b7b0 <alt_timestamp>
   10408:	e0bffe15 	stw	r2,-8(fp)

	producer();
   1040c:	00104580 	call	10458 <producer>

	end_time = alt_timestamp();
   10410:	001b7b00 	call	1b7b0 <alt_timestamp>
   10414:	e0bfff15 	stw	r2,-4(fp)

	printf("Time taken for Write Operation: %.2lu ms\n", 1000*((unsigned long)(end_time-start_time))/((unsigned long)alt_timestamp_freq()));
   10418:	e0ffff17 	ldw	r3,-4(fp)
   1041c:	e0bffe17 	ldw	r2,-8(fp)
   10420:	1885c83a 	sub	r2,r3,r2
   10424:	1009883a 	mov	r4,r2
   10428:	0140fa04 	movi	r5,1000
   1042c:	00106640 	call	10664 <__mulsi3>
   10430:	1021883a 	mov	r16,r2
   10434:	001b8400 	call	1b840 <alt_timestamp_freq>
   10438:	8009883a 	mov	r4,r16
   1043c:	100b883a 	mov	r5,r2
   10440:	00106540 	call	10654 <__udivsi3>
   10444:	010000f4 	movhi	r4,3
   10448:	21202e04 	addi	r4,r4,-32584
   1044c:	100b883a 	mov	r5,r2
   10450:	00106b80 	call	106b8 <printf>
	while(1) { }
   10454:	003fff06 	br	10454 <main+0x74>

00010458 <producer>:

	return 0;
}

int producer()
{
   10458:	defffd04 	addi	sp,sp,-12
   1045c:	dfc00215 	stw	ra,8(sp)
   10460:	df000115 	stw	fp,4(sp)
   10464:	df000104 	addi	fp,sp,4
	printf("Producer starting..\n");
   10468:	010000f4 	movhi	r4,3
   1046c:	21203904 	addi	r4,r4,-32540
   10470:	00107780 	call	10778 <puts>

	FIFO_1_INIT(); // Initialize the FIFO
   10474:	00103a80 	call	103a8 <FIFO_1_INIT>

	int j = 5;
   10478:	00800144 	movi	r2,5
   1047c:	e0bfff15 	stw	r2,-4(fp)
	while(j<=500)
   10480:	00001006 	br	104c4 <producer+0x6c>
	{
		delay(100000);
   10484:	010000b4 	movhi	r4,2
   10488:	2121a804 	addi	r4,r4,-31072
   1048c:	00104f40 	call	104f4 <delay>
		WRITE_FIFO_1(&j); // Write to the producer-consumer fifo
   10490:	e13fff04 	addi	r4,fp,-4
   10494:	00102fc0 	call	102fc <WRITE_FIFO_1>
		delay(100000);
   10498:	010000b4 	movhi	r4,2
   1049c:	2121a804 	addi	r4,r4,-31072
   104a0:	00104f40 	call	104f4 <delay>

		printf("Producer sent [%i]\n",j);
   104a4:	e0bfff17 	ldw	r2,-4(fp)
   104a8:	010000f4 	movhi	r4,3
   104ac:	21203e04 	addi	r4,r4,-32520
   104b0:	100b883a 	mov	r5,r2
   104b4:	00106b80 	call	106b8 <printf>
		j+=10;
   104b8:	e0bfff17 	ldw	r2,-4(fp)
   104bc:	10800284 	addi	r2,r2,10
   104c0:	e0bfff15 	stw	r2,-4(fp)
	printf("Producer starting..\n");

	FIFO_1_INIT(); // Initialize the FIFO

	int j = 5;
	while(j<=500)
   104c4:	e0bfff17 	ldw	r2,-4(fp)
   104c8:	10807d50 	cmplti	r2,r2,501
   104cc:	103fed1e 	bne	r2,zero,10484 <producer+0x2c>

		printf("Producer sent [%i]\n",j);
		j+=10;
	}

	printf("Producer finished..\n");
   104d0:	010000f4 	movhi	r4,3
   104d4:	21204304 	addi	r4,r4,-32500
   104d8:	00107780 	call	10778 <puts>
	return 0;
   104dc:	0005883a 	mov	r2,zero
}
   104e0:	e037883a 	mov	sp,fp
   104e4:	dfc00117 	ldw	ra,4(sp)
   104e8:	df000017 	ldw	fp,0(sp)
   104ec:	dec00204 	addi	sp,sp,8
   104f0:	f800283a 	ret

000104f4 <delay>:


void delay(int n)
{
   104f4:	defffd04 	addi	sp,sp,-12
   104f8:	df000215 	stw	fp,8(sp)
   104fc:	df000204 	addi	fp,sp,8
   10500:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   10504:	e0bfff17 	ldw	r2,-4(fp)
   10508:	e0bffe15 	stw	r2,-8(fp)
   1050c:	00000306 	br	1051c <delay+0x28>
   10510:	e0bffe17 	ldw	r2,-8(fp)
   10514:	10bfffc4 	addi	r2,r2,-1
   10518:	e0bffe15 	stw	r2,-8(fp)
   1051c:	e0bffe17 	ldw	r2,-8(fp)
   10520:	00bffb16 	blt	zero,r2,10510 <delay+0x1c>
	{
		continue;
	}
}
   10524:	e037883a 	mov	sp,fp
   10528:	df000017 	ldw	fp,0(sp)
   1052c:	dec00104 	addi	sp,sp,4
   10530:	f800283a 	ret

00010534 <udivmodsi4>:
   10534:	2005883a 	mov	r2,r4
   10538:	2900182e 	bgeu	r5,r4,1059c <udivmodsi4+0x68>
   1053c:	28001716 	blt	r5,zero,1059c <udivmodsi4+0x68>
   10540:	01000804 	movi	r4,32
   10544:	00c00044 	movi	r3,1
   10548:	00000206 	br	10554 <udivmodsi4+0x20>
   1054c:	20001126 	beq	r4,zero,10594 <udivmodsi4+0x60>
   10550:	28000516 	blt	r5,zero,10568 <udivmodsi4+0x34>
   10554:	294b883a 	add	r5,r5,r5
   10558:	213fffc4 	addi	r4,r4,-1
   1055c:	18c7883a 	add	r3,r3,r3
   10560:	28bffa36 	bltu	r5,r2,1054c <udivmodsi4+0x18>
   10564:	18000b26 	beq	r3,zero,10594 <udivmodsi4+0x60>
   10568:	0009883a 	mov	r4,zero
   1056c:	11400236 	bltu	r2,r5,10578 <udivmodsi4+0x44>
   10570:	1145c83a 	sub	r2,r2,r5
   10574:	20c8b03a 	or	r4,r4,r3
   10578:	1806d07a 	srli	r3,r3,1
   1057c:	280ad07a 	srli	r5,r5,1
   10580:	183ffa1e 	bne	r3,zero,1056c <udivmodsi4+0x38>
   10584:	3000021e 	bne	r6,zero,10590 <udivmodsi4+0x5c>
   10588:	2005883a 	mov	r2,r4
   1058c:	f800283a 	ret
   10590:	f800283a 	ret
   10594:	0009883a 	mov	r4,zero
   10598:	003ffa06 	br	10584 <udivmodsi4+0x50>
   1059c:	00c00044 	movi	r3,1
   105a0:	0009883a 	mov	r4,zero
   105a4:	003ff106 	br	1056c <udivmodsi4+0x38>

000105a8 <__divsi3>:
   105a8:	defffe04 	addi	sp,sp,-8
   105ac:	dfc00115 	stw	ra,4(sp)
   105b0:	dc000015 	stw	r16,0(sp)
   105b4:	20000a16 	blt	r4,zero,105e0 <__divsi3+0x38>
   105b8:	0021883a 	mov	r16,zero
   105bc:	28000b16 	blt	r5,zero,105ec <__divsi3+0x44>
   105c0:	000d883a 	mov	r6,zero
   105c4:	00105340 	call	10534 <udivmodsi4>
   105c8:	80000126 	beq	r16,zero,105d0 <__divsi3+0x28>
   105cc:	0085c83a 	sub	r2,zero,r2
   105d0:	dfc00117 	ldw	ra,4(sp)
   105d4:	dc000017 	ldw	r16,0(sp)
   105d8:	dec00204 	addi	sp,sp,8
   105dc:	f800283a 	ret
   105e0:	0109c83a 	sub	r4,zero,r4
   105e4:	04000044 	movi	r16,1
   105e8:	283ff50e 	bge	r5,zero,105c0 <__divsi3+0x18>
   105ec:	014bc83a 	sub	r5,zero,r5
   105f0:	8400005c 	xori	r16,r16,1
   105f4:	003ff206 	br	105c0 <__divsi3+0x18>

000105f8 <__modsi3>:
   105f8:	deffff04 	addi	sp,sp,-4
   105fc:	dfc00015 	stw	ra,0(sp)
   10600:	20000516 	blt	r4,zero,10618 <__modsi3+0x20>
   10604:	28000c16 	blt	r5,zero,10638 <__modsi3+0x40>
   10608:	01800044 	movi	r6,1
   1060c:	dfc00017 	ldw	ra,0(sp)
   10610:	dec00104 	addi	sp,sp,4
   10614:	00105341 	jmpi	10534 <udivmodsi4>
   10618:	0109c83a 	sub	r4,zero,r4
   1061c:	28000b16 	blt	r5,zero,1064c <__modsi3+0x54>
   10620:	01800044 	movi	r6,1
   10624:	00105340 	call	10534 <udivmodsi4>
   10628:	0085c83a 	sub	r2,zero,r2
   1062c:	dfc00017 	ldw	ra,0(sp)
   10630:	dec00104 	addi	sp,sp,4
   10634:	f800283a 	ret
   10638:	014bc83a 	sub	r5,zero,r5
   1063c:	01800044 	movi	r6,1
   10640:	dfc00017 	ldw	ra,0(sp)
   10644:	dec00104 	addi	sp,sp,4
   10648:	00105341 	jmpi	10534 <udivmodsi4>
   1064c:	014bc83a 	sub	r5,zero,r5
   10650:	003ff306 	br	10620 <__modsi3+0x28>

00010654 <__udivsi3>:
   10654:	000d883a 	mov	r6,zero
   10658:	00105341 	jmpi	10534 <udivmodsi4>

0001065c <__umodsi3>:
   1065c:	01800044 	movi	r6,1
   10660:	00105341 	jmpi	10534 <udivmodsi4>

00010664 <__mulsi3>:
   10664:	0005883a 	mov	r2,zero
   10668:	20000726 	beq	r4,zero,10688 <__mulsi3+0x24>
   1066c:	20c0004c 	andi	r3,r4,1
   10670:	2008d07a 	srli	r4,r4,1
   10674:	18000126 	beq	r3,zero,1067c <__mulsi3+0x18>
   10678:	1145883a 	add	r2,r2,r5
   1067c:	294b883a 	add	r5,r5,r5
   10680:	203ffa1e 	bne	r4,zero,1066c <__mulsi3+0x8>
   10684:	f800283a 	ret
   10688:	f800283a 	ret

0001068c <_printf_r>:
   1068c:	defffd04 	addi	sp,sp,-12
   10690:	dfc00015 	stw	ra,0(sp)
   10694:	d9800115 	stw	r6,4(sp)
   10698:	d9c00215 	stw	r7,8(sp)
   1069c:	280d883a 	mov	r6,r5
   106a0:	21400217 	ldw	r5,8(r4)
   106a4:	d9c00104 	addi	r7,sp,4
   106a8:	001084c0 	call	1084c <___vfprintf_internal_r>
   106ac:	dfc00017 	ldw	ra,0(sp)
   106b0:	dec00304 	addi	sp,sp,12
   106b4:	f800283a 	ret

000106b8 <printf>:
   106b8:	defffc04 	addi	sp,sp,-16
   106bc:	dfc00015 	stw	ra,0(sp)
   106c0:	d9400115 	stw	r5,4(sp)
   106c4:	d9800215 	stw	r6,8(sp)
   106c8:	d9c00315 	stw	r7,12(sp)
   106cc:	008000f4 	movhi	r2,3
   106d0:	10a79a04 	addi	r2,r2,-24984
   106d4:	10800017 	ldw	r2,0(r2)
   106d8:	200b883a 	mov	r5,r4
   106dc:	d9800104 	addi	r6,sp,4
   106e0:	11000217 	ldw	r4,8(r2)
   106e4:	00126c80 	call	126c8 <__vfprintf_internal>
   106e8:	dfc00017 	ldw	ra,0(sp)
   106ec:	dec00404 	addi	sp,sp,16
   106f0:	f800283a 	ret

000106f4 <_puts_r>:
   106f4:	defff604 	addi	sp,sp,-40
   106f8:	dc400815 	stw	r17,32(sp)
   106fc:	2023883a 	mov	r17,r4
   10700:	2809883a 	mov	r4,r5
   10704:	dc000715 	stw	r16,28(sp)
   10708:	dfc00915 	stw	ra,36(sp)
   1070c:	2821883a 	mov	r16,r5
   10710:	001078c0 	call	1078c <strlen>
   10714:	10c00044 	addi	r3,r2,1
   10718:	d8800115 	stw	r2,4(sp)
   1071c:	89400217 	ldw	r5,8(r17)
   10720:	008000f4 	movhi	r2,3
   10724:	10a04804 	addi	r2,r2,-32480
   10728:	d8800215 	stw	r2,8(sp)
   1072c:	00800044 	movi	r2,1
   10730:	d8800315 	stw	r2,12(sp)
   10734:	8809883a 	mov	r4,r17
   10738:	00800084 	movi	r2,2
   1073c:	d9800404 	addi	r6,sp,16
   10740:	dc000015 	stw	r16,0(sp)
   10744:	d8c00615 	stw	r3,24(sp)
   10748:	dec00415 	stw	sp,16(sp)
   1074c:	d8800515 	stw	r2,20(sp)
   10750:	00149c80 	call	149c8 <__sfvwrite_r>
   10754:	1000061e 	bne	r2,zero,10770 <_puts_r+0x7c>
   10758:	00800284 	movi	r2,10
   1075c:	dfc00917 	ldw	ra,36(sp)
   10760:	dc400817 	ldw	r17,32(sp)
   10764:	dc000717 	ldw	r16,28(sp)
   10768:	dec00a04 	addi	sp,sp,40
   1076c:	f800283a 	ret
   10770:	00bfffc4 	movi	r2,-1
   10774:	003ff906 	br	1075c <_puts_r+0x68>

00010778 <puts>:
   10778:	008000f4 	movhi	r2,3
   1077c:	10a79a04 	addi	r2,r2,-24984
   10780:	200b883a 	mov	r5,r4
   10784:	11000017 	ldw	r4,0(r2)
   10788:	00106f41 	jmpi	106f4 <_puts_r>

0001078c <strlen>:
   1078c:	208000cc 	andi	r2,r4,3
   10790:	10001f1e 	bne	r2,zero,10810 <strlen+0x84>
   10794:	20800017 	ldw	r2,0(r4)
   10798:	01ffbff4 	movhi	r7,65279
   1079c:	39ffbfc4 	addi	r7,r7,-257
   107a0:	01a02074 	movhi	r6,32897
   107a4:	31a02004 	addi	r6,r6,-32640
   107a8:	11c7883a 	add	r3,r2,r7
   107ac:	0084303a 	nor	r2,zero,r2
   107b0:	1886703a 	and	r3,r3,r2
   107b4:	1986703a 	and	r3,r3,r6
   107b8:	2005883a 	mov	r2,r4
   107bc:	1800101e 	bne	r3,zero,10800 <strlen+0x74>
   107c0:	10800104 	addi	r2,r2,4
   107c4:	10c00017 	ldw	r3,0(r2)
   107c8:	19cb883a 	add	r5,r3,r7
   107cc:	00c6303a 	nor	r3,zero,r3
   107d0:	28c6703a 	and	r3,r5,r3
   107d4:	1986703a 	and	r3,r3,r6
   107d8:	1800091e 	bne	r3,zero,10800 <strlen+0x74>
   107dc:	10800104 	addi	r2,r2,4
   107e0:	10c00017 	ldw	r3,0(r2)
   107e4:	19cb883a 	add	r5,r3,r7
   107e8:	00c6303a 	nor	r3,zero,r3
   107ec:	28c6703a 	and	r3,r5,r3
   107f0:	1986703a 	and	r3,r3,r6
   107f4:	183ff226 	beq	r3,zero,107c0 <strlen+0x34>
   107f8:	00000106 	br	10800 <strlen+0x74>
   107fc:	10800044 	addi	r2,r2,1
   10800:	10c00007 	ldb	r3,0(r2)
   10804:	183ffd1e 	bne	r3,zero,107fc <strlen+0x70>
   10808:	1105c83a 	sub	r2,r2,r4
   1080c:	f800283a 	ret
   10810:	2005883a 	mov	r2,r4
   10814:	003ffa06 	br	10800 <strlen+0x74>

00010818 <__sprint_r>:
   10818:	30800217 	ldw	r2,8(r6)
   1081c:	defffe04 	addi	sp,sp,-8
   10820:	dc000015 	stw	r16,0(sp)
   10824:	dfc00115 	stw	ra,4(sp)
   10828:	3021883a 	mov	r16,r6
   1082c:	10000226 	beq	r2,zero,10838 <__sprint_r+0x20>
   10830:	00149c80 	call	149c8 <__sfvwrite_r>
   10834:	80000215 	stw	zero,8(r16)
   10838:	80000115 	stw	zero,4(r16)
   1083c:	dfc00117 	ldw	ra,4(sp)
   10840:	dc000017 	ldw	r16,0(sp)
   10844:	dec00204 	addi	sp,sp,8
   10848:	f800283a 	ret

0001084c <___vfprintf_internal_r>:
   1084c:	defeb904 	addi	sp,sp,-1308
   10850:	dc013d15 	stw	r16,1268(sp)
   10854:	d9013015 	stw	r4,1216(sp)
   10858:	dfc14615 	stw	ra,1304(sp)
   1085c:	df014515 	stw	fp,1300(sp)
   10860:	ddc14415 	stw	r23,1296(sp)
   10864:	dd814315 	stw	r22,1292(sp)
   10868:	dd414215 	stw	r21,1288(sp)
   1086c:	dd014115 	stw	r20,1284(sp)
   10870:	dcc14015 	stw	r19,1280(sp)
   10874:	dc813f15 	stw	r18,1276(sp)
   10878:	dc413e15 	stw	r17,1272(sp)
   1087c:	d9412915 	stw	r5,1188(sp)
   10880:	3021883a 	mov	r16,r6
   10884:	d9c12d15 	stw	r7,1204(sp)
   10888:	00150b40 	call	150b4 <_localeconv_r>
   1088c:	10800017 	ldw	r2,0(r2)
   10890:	d9013017 	ldw	r4,1216(sp)
   10894:	d8013315 	stw	zero,1228(sp)
   10898:	d8813715 	stw	r2,1244(sp)
   1089c:	d8013415 	stw	zero,1232(sp)
   108a0:	20000226 	beq	r4,zero,108ac <___vfprintf_internal_r+0x60>
   108a4:	20800e17 	ldw	r2,56(r4)
   108a8:	10014b26 	beq	r2,zero,10dd8 <___vfprintf_internal_r+0x58c>
   108ac:	d8c12917 	ldw	r3,1188(sp)
   108b0:	1880030b 	ldhu	r2,12(r3)
   108b4:	10c0020c 	andi	r3,r2,8
   108b8:	18ffffcc 	andi	r3,r3,65535
   108bc:	18e0001c 	xori	r3,r3,32768
   108c0:	18e00004 	addi	r3,r3,-32768
   108c4:	1800ed26 	beq	r3,zero,10c7c <___vfprintf_internal_r+0x430>
   108c8:	d9012917 	ldw	r4,1188(sp)
   108cc:	20c00417 	ldw	r3,16(r4)
   108d0:	1800ea26 	beq	r3,zero,10c7c <___vfprintf_internal_r+0x430>
   108d4:	1100068c 	andi	r4,r2,26
   108d8:	00c00284 	movi	r3,10
   108dc:	20c0f026 	beq	r4,r3,10ca0 <___vfprintf_internal_r+0x454>
   108e0:	d9010dc4 	addi	r4,sp,1079
   108e4:	d8810e04 	addi	r2,sp,1080
   108e8:	dc413017 	ldw	r17,1216(sp)
   108ec:	d8c00404 	addi	r3,sp,16
   108f0:	d9012615 	stw	r4,1176(sp)
   108f4:	1109c83a 	sub	r4,r2,r4
   108f8:	d8812715 	stw	r2,1180(sp)
   108fc:	d8c11b15 	stw	r3,1132(sp)
   10900:	d8011d15 	stw	zero,1140(sp)
   10904:	d8011c15 	stw	zero,1136(sp)
   10908:	802b883a 	mov	r21,r16
   1090c:	d8013215 	stw	zero,1224(sp)
   10910:	d8013615 	stw	zero,1240(sp)
   10914:	d8013515 	stw	zero,1236(sp)
   10918:	d8012c15 	stw	zero,1200(sp)
   1091c:	1813883a 	mov	r9,r3
   10920:	d9013915 	stw	r4,1252(sp)
   10924:	a8800007 	ldb	r2,0(r21)
   10928:	1002f326 	beq	r2,zero,114f8 <___vfprintf_internal_r+0xcac>
   1092c:	00c00944 	movi	r3,37
   10930:	a825883a 	mov	r18,r21
   10934:	10c0021e 	bne	r2,r3,10940 <___vfprintf_internal_r+0xf4>
   10938:	00001406 	br	1098c <___vfprintf_internal_r+0x140>
   1093c:	10c00326 	beq	r2,r3,1094c <___vfprintf_internal_r+0x100>
   10940:	94800044 	addi	r18,r18,1
   10944:	90800007 	ldb	r2,0(r18)
   10948:	103ffc1e 	bne	r2,zero,1093c <___vfprintf_internal_r+0xf0>
   1094c:	9561c83a 	sub	r16,r18,r21
   10950:	80000e26 	beq	r16,zero,1098c <___vfprintf_internal_r+0x140>
   10954:	da011d17 	ldw	r8,1140(sp)
   10958:	d8c11c17 	ldw	r3,1136(sp)
   1095c:	4d400015 	stw	r21,0(r9)
   10960:	4c000115 	stw	r16,4(r9)
   10964:	4411883a 	add	r8,r8,r16
   10968:	18c00044 	addi	r3,r3,1
   1096c:	da011d15 	stw	r8,1140(sp)
   10970:	d8c11c15 	stw	r3,1136(sp)
   10974:	008001c4 	movi	r2,7
   10978:	10c11016 	blt	r2,r3,10dbc <___vfprintf_internal_r+0x570>
   1097c:	4a400204 	addi	r9,r9,8
   10980:	d8812c17 	ldw	r2,1200(sp)
   10984:	1405883a 	add	r2,r2,r16
   10988:	d8812c15 	stw	r2,1200(sp)
   1098c:	90800007 	ldb	r2,0(r18)
   10990:	1000ee26 	beq	r2,zero,10d4c <___vfprintf_internal_r+0x500>
   10994:	95400044 	addi	r21,r18,1
   10998:	94800047 	ldb	r18,1(r18)
   1099c:	073fffc4 	movi	fp,-1
   109a0:	e007883a 	mov	r3,fp
   109a4:	d8012585 	stb	zero,1174(sp)
   109a8:	d8012e15 	stw	zero,1208(sp)
   109ac:	0021883a 	mov	r16,zero
   109b0:	05001604 	movi	r20,88
   109b4:	04c00244 	movi	r19,9
   109b8:	4839883a 	mov	fp,r9
   109bc:	ad400044 	addi	r21,r21,1
   109c0:	90bff804 	addi	r2,r18,-32
   109c4:	a080462e 	bgeu	r20,r2,10ae0 <___vfprintf_internal_r+0x294>
   109c8:	e013883a 	mov	r9,fp
   109cc:	9000df26 	beq	r18,zero,10d4c <___vfprintf_internal_r+0x500>
   109d0:	00c00044 	movi	r3,1
   109d4:	d8c12815 	stw	r3,1184(sp)
   109d8:	dc810405 	stb	r18,1040(sp)
   109dc:	d8012585 	stb	zero,1174(sp)
   109e0:	d8c12b15 	stw	r3,1196(sp)
   109e4:	dcc10404 	addi	r19,sp,1040
   109e8:	d8013115 	stw	zero,1220(sp)
   109ec:	80c0008c 	andi	r3,r16,2
   109f0:	d8c12a15 	stw	r3,1192(sp)
   109f4:	18000326 	beq	r3,zero,10a04 <___vfprintf_internal_r+0x1b8>
   109f8:	d8c12817 	ldw	r3,1184(sp)
   109fc:	18c00084 	addi	r3,r3,2
   10a00:	d8c12815 	stw	r3,1184(sp)
   10a04:	80c0210c 	andi	r3,r16,132
   10a08:	d8c12f15 	stw	r3,1212(sp)
   10a0c:	1802251e 	bne	r3,zero,112a4 <___vfprintf_internal_r+0xa58>
   10a10:	d9012e17 	ldw	r4,1208(sp)
   10a14:	d8c12817 	ldw	r3,1184(sp)
   10a18:	20edc83a 	sub	r22,r4,r3
   10a1c:	0582210e 	bge	zero,r22,112a4 <___vfprintf_internal_r+0xa58>
   10a20:	02800404 	movi	r10,16
   10a24:	da011d17 	ldw	r8,1140(sp)
   10a28:	d8c11c17 	ldw	r3,1136(sp)
   10a2c:	05c000f4 	movhi	r23,3
   10a30:	bde05984 	addi	r23,r23,-32410
   10a34:	5580200e 	bge	r10,r22,10ab8 <___vfprintf_internal_r+0x26c>
   10a38:	dc813815 	stw	r18,1248(sp)
   10a3c:	5039883a 	mov	fp,r10
   10a40:	b825883a 	mov	r18,r23
   10a44:	050001c4 	movi	r20,7
   10a48:	b02f883a 	mov	r23,r22
   10a4c:	802d883a 	mov	r22,r16
   10a50:	dc012917 	ldw	r16,1188(sp)
   10a54:	00000306 	br	10a64 <___vfprintf_internal_r+0x218>
   10a58:	bdfffc04 	addi	r23,r23,-16
   10a5c:	4a400204 	addi	r9,r9,8
   10a60:	e5c0110e 	bge	fp,r23,10aa8 <___vfprintf_internal_r+0x25c>
   10a64:	4c800015 	stw	r18,0(r9)
   10a68:	4f000115 	stw	fp,4(r9)
   10a6c:	42000404 	addi	r8,r8,16
   10a70:	18c00044 	addi	r3,r3,1
   10a74:	da011d15 	stw	r8,1140(sp)
   10a78:	d8c11c15 	stw	r3,1136(sp)
   10a7c:	a0fff60e 	bge	r20,r3,10a58 <___vfprintf_internal_r+0x20c>
   10a80:	8809883a 	mov	r4,r17
   10a84:	800b883a 	mov	r5,r16
   10a88:	d9811b04 	addi	r6,sp,1132
   10a8c:	00108180 	call	10818 <__sprint_r>
   10a90:	1000b41e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   10a94:	bdfffc04 	addi	r23,r23,-16
   10a98:	da011d17 	ldw	r8,1140(sp)
   10a9c:	d8c11c17 	ldw	r3,1136(sp)
   10aa0:	da400404 	addi	r9,sp,16
   10aa4:	e5ffef16 	blt	fp,r23,10a64 <___vfprintf_internal_r+0x218>
   10aa8:	b021883a 	mov	r16,r22
   10aac:	b82d883a 	mov	r22,r23
   10ab0:	902f883a 	mov	r23,r18
   10ab4:	dc813817 	ldw	r18,1248(sp)
   10ab8:	4dc00015 	stw	r23,0(r9)
   10abc:	4d800115 	stw	r22,4(r9)
   10ac0:	4591883a 	add	r8,r8,r22
   10ac4:	18c00044 	addi	r3,r3,1
   10ac8:	da011d15 	stw	r8,1140(sp)
   10acc:	d8c11c15 	stw	r3,1136(sp)
   10ad0:	008001c4 	movi	r2,7
   10ad4:	10c3fe16 	blt	r2,r3,11ad0 <___vfprintf_internal_r+0x1284>
   10ad8:	4a400204 	addi	r9,r9,8
   10adc:	0001f306 	br	112ac <___vfprintf_internal_r+0xa60>
   10ae0:	1085883a 	add	r2,r2,r2
   10ae4:	1085883a 	add	r2,r2,r2
   10ae8:	01000074 	movhi	r4,1
   10aec:	2102bf04 	addi	r4,r4,2812
   10af0:	1105883a 	add	r2,r2,r4
   10af4:	10800017 	ldw	r2,0(r2)
   10af8:	1000683a 	jmp	r2
   10afc:	000111d8 	cmpnei	zero,zero,1095
   10b00:	000109c8 	cmpgei	zero,zero,1063
   10b04:	000109c8 	cmpgei	zero,zero,1063
   10b08:	000111f0 	cmpltui	zero,zero,1095
   10b0c:	000109c8 	cmpgei	zero,zero,1063
   10b10:	000109c8 	cmpgei	zero,zero,1063
   10b14:	000109c8 	cmpgei	zero,zero,1063
   10b18:	000109c8 	cmpgei	zero,zero,1063
   10b1c:	000109c8 	cmpgei	zero,zero,1063
   10b20:	000109c8 	cmpgei	zero,zero,1063
   10b24:	000110a8 	cmpgeui	zero,zero,1090
   10b28:	0001123c 	xorhi	zero,zero,1096
   10b2c:	000109c8 	cmpgei	zero,zero,1063
   10b30:	00010c70 	cmpltui	zero,zero,1073
   10b34:	00011010 	cmplti	zero,zero,1088
   10b38:	000109c8 	cmpgei	zero,zero,1063
   10b3c:	000111fc 	xorhi	zero,zero,1095
   10b40:	00011208 	cmpgei	zero,zero,1096
   10b44:	00011208 	cmpgei	zero,zero,1096
   10b48:	00011208 	cmpgei	zero,zero,1096
   10b4c:	00011208 	cmpgei	zero,zero,1096
   10b50:	00011208 	cmpgei	zero,zero,1096
   10b54:	00011208 	cmpgei	zero,zero,1096
   10b58:	00011208 	cmpgei	zero,zero,1096
   10b5c:	00011208 	cmpgei	zero,zero,1096
   10b60:	00011208 	cmpgei	zero,zero,1096
   10b64:	000109c8 	cmpgei	zero,zero,1063
   10b68:	000109c8 	cmpgei	zero,zero,1063
   10b6c:	000109c8 	cmpgei	zero,zero,1063
   10b70:	000109c8 	cmpgei	zero,zero,1063
   10b74:	000109c8 	cmpgei	zero,zero,1063
   10b78:	000109c8 	cmpgei	zero,zero,1063
   10b7c:	000109c8 	cmpgei	zero,zero,1063
   10b80:	000109c8 	cmpgei	zero,zero,1063
   10b84:	000109c8 	cmpgei	zero,zero,1063
   10b88:	000109c8 	cmpgei	zero,zero,1063
   10b8c:	00010de0 	cmpeqi	zero,zero,1079
   10b90:	00010ea0 	cmpeqi	zero,zero,1082
   10b94:	000109c8 	cmpgei	zero,zero,1063
   10b98:	00010ea0 	cmpeqi	zero,zero,1082
   10b9c:	000109c8 	cmpgei	zero,zero,1063
   10ba0:	000109c8 	cmpgei	zero,zero,1063
   10ba4:	000109c8 	cmpgei	zero,zero,1063
   10ba8:	000109c8 	cmpgei	zero,zero,1063
   10bac:	00010f34 	movhi	zero,1084
   10bb0:	000109c8 	cmpgei	zero,zero,1063
   10bb4:	000109c8 	cmpgei	zero,zero,1063
   10bb8:	00010f40 	call	10f4 <__alt_mem_instruction_memory_0-0xef0c>
   10bbc:	000109c8 	cmpgei	zero,zero,1063
   10bc0:	000109c8 	cmpgei	zero,zero,1063
   10bc4:	000109c8 	cmpgei	zero,zero,1063
   10bc8:	000109c8 	cmpgei	zero,zero,1063
   10bcc:	000109c8 	cmpgei	zero,zero,1063
   10bd0:	00010f78 	rdprs	zero,zero,1085
   10bd4:	000109c8 	cmpgei	zero,zero,1063
   10bd8:	000109c8 	cmpgei	zero,zero,1063
   10bdc:	00010fb4 	movhi	zero,1086
   10be0:	000109c8 	cmpgei	zero,zero,1063
   10be4:	000109c8 	cmpgei	zero,zero,1063
   10be8:	000109c8 	cmpgei	zero,zero,1063
   10bec:	000109c8 	cmpgei	zero,zero,1063
   10bf0:	000109c8 	cmpgei	zero,zero,1063
   10bf4:	000109c8 	cmpgei	zero,zero,1063
   10bf8:	000109c8 	cmpgei	zero,zero,1063
   10bfc:	000109c8 	cmpgei	zero,zero,1063
   10c00:	000109c8 	cmpgei	zero,zero,1063
   10c04:	000109c8 	cmpgei	zero,zero,1063
   10c08:	0001124c 	andi	zero,zero,1097
   10c0c:	00011280 	call	1128 <__alt_mem_instruction_memory_0-0xeed8>
   10c10:	00010ea0 	cmpeqi	zero,zero,1082
   10c14:	00010ea0 	cmpeqi	zero,zero,1082
   10c18:	00010ea0 	cmpeqi	zero,zero,1082
   10c1c:	000111cc 	andi	zero,zero,1095
   10c20:	00011280 	call	1128 <__alt_mem_instruction_memory_0-0xeed8>
   10c24:	000109c8 	cmpgei	zero,zero,1063
   10c28:	000109c8 	cmpgei	zero,zero,1063
   10c2c:	00011058 	cmpnei	zero,zero,1089
   10c30:	000109c8 	cmpgei	zero,zero,1063
   10c34:	00011070 	cmpltui	zero,zero,1089
   10c38:	0001128c 	andi	zero,zero,1098
   10c3c:	000110d0 	cmplti	zero,zero,1091
   10c40:	00011120 	cmpeqi	zero,zero,1092
   10c44:	000109c8 	cmpgei	zero,zero,1063
   10c48:	0001112c 	andhi	zero,zero,1092
   10c4c:	000109c8 	cmpgei	zero,zero,1063
   10c50:	00011298 	cmpnei	zero,zero,1098
   10c54:	000109c8 	cmpgei	zero,zero,1063
   10c58:	000109c8 	cmpgei	zero,zero,1063
   10c5c:	00011190 	cmplti	zero,zero,1094
   10c60:	d9012e17 	ldw	r4,1208(sp)
   10c64:	d8812d15 	stw	r2,1204(sp)
   10c68:	0109c83a 	sub	r4,zero,r4
   10c6c:	d9012e15 	stw	r4,1208(sp)
   10c70:	84000114 	ori	r16,r16,4
   10c74:	ac800007 	ldb	r18,0(r21)
   10c78:	003f5006 	br	109bc <___vfprintf_internal_r+0x170>
   10c7c:	d9013017 	ldw	r4,1216(sp)
   10c80:	d9412917 	ldw	r5,1188(sp)
   10c84:	00126ec0 	call	126ec <__swsetup_r>
   10c88:	10003d1e 	bne	r2,zero,10d80 <___vfprintf_internal_r+0x534>
   10c8c:	d8c12917 	ldw	r3,1188(sp)
   10c90:	1880030b 	ldhu	r2,12(r3)
   10c94:	00c00284 	movi	r3,10
   10c98:	1100068c 	andi	r4,r2,26
   10c9c:	20ff101e 	bne	r4,r3,108e0 <___vfprintf_internal_r+0x94>
   10ca0:	d9012917 	ldw	r4,1188(sp)
   10ca4:	20c0038b 	ldhu	r3,14(r4)
   10ca8:	193fffcc 	andi	r4,r3,65535
   10cac:	2120001c 	xori	r4,r4,32768
   10cb0:	21200004 	addi	r4,r4,-32768
   10cb4:	203f0a16 	blt	r4,zero,108e0 <___vfprintf_internal_r+0x94>
   10cb8:	d9012917 	ldw	r4,1188(sp)
   10cbc:	d9c12d17 	ldw	r7,1204(sp)
   10cc0:	10bfff4c 	andi	r2,r2,65533
   10cc4:	22800717 	ldw	r10,28(r4)
   10cc8:	22400917 	ldw	r9,36(r4)
   10ccc:	d9013017 	ldw	r4,1216(sp)
   10cd0:	02010004 	movi	r8,1024
   10cd4:	d881070d 	sth	r2,1052(sp)
   10cd8:	d9410404 	addi	r5,sp,1040
   10cdc:	d8800404 	addi	r2,sp,16
   10ce0:	800d883a 	mov	r6,r16
   10ce4:	d8c1078d 	sth	r3,1054(sp)
   10ce8:	da810b15 	stw	r10,1068(sp)
   10cec:	da410d15 	stw	r9,1076(sp)
   10cf0:	d8810415 	stw	r2,1040(sp)
   10cf4:	d8810815 	stw	r2,1056(sp)
   10cf8:	da010615 	stw	r8,1048(sp)
   10cfc:	da010915 	stw	r8,1060(sp)
   10d00:	d8010a15 	stw	zero,1064(sp)
   10d04:	001084c0 	call	1084c <___vfprintf_internal_r>
   10d08:	d8812c15 	stw	r2,1200(sp)
   10d0c:	10000416 	blt	r2,zero,10d20 <___vfprintf_internal_r+0x4d4>
   10d10:	d9013017 	ldw	r4,1216(sp)
   10d14:	d9410404 	addi	r5,sp,1040
   10d18:	00140b80 	call	140b8 <_fflush_r>
   10d1c:	1006501e 	bne	r2,zero,12660 <___vfprintf_internal_r+0x1e14>
   10d20:	d881070b 	ldhu	r2,1052(sp)
   10d24:	1080100c 	andi	r2,r2,64
   10d28:	10bfffcc 	andi	r2,r2,65535
   10d2c:	10a0001c 	xori	r2,r2,32768
   10d30:	10a00004 	addi	r2,r2,-32768
   10d34:	10001426 	beq	r2,zero,10d88 <___vfprintf_internal_r+0x53c>
   10d38:	d8c12917 	ldw	r3,1188(sp)
   10d3c:	1880030b 	ldhu	r2,12(r3)
   10d40:	10801014 	ori	r2,r2,64
   10d44:	1880030d 	sth	r2,12(r3)
   10d48:	00000f06 	br	10d88 <___vfprintf_internal_r+0x53c>
   10d4c:	d8811d17 	ldw	r2,1140(sp)
   10d50:	10000426 	beq	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   10d54:	d9013017 	ldw	r4,1216(sp)
   10d58:	d9412917 	ldw	r5,1188(sp)
   10d5c:	d9811b04 	addi	r6,sp,1132
   10d60:	00108180 	call	10818 <__sprint_r>
   10d64:	d8c12917 	ldw	r3,1188(sp)
   10d68:	1880030b 	ldhu	r2,12(r3)
   10d6c:	1080100c 	andi	r2,r2,64
   10d70:	10bfffcc 	andi	r2,r2,65535
   10d74:	10a0001c 	xori	r2,r2,32768
   10d78:	10a00004 	addi	r2,r2,-32768
   10d7c:	10000226 	beq	r2,zero,10d88 <___vfprintf_internal_r+0x53c>
   10d80:	00bfffc4 	movi	r2,-1
   10d84:	d8812c15 	stw	r2,1200(sp)
   10d88:	d8812c17 	ldw	r2,1200(sp)
   10d8c:	dfc14617 	ldw	ra,1304(sp)
   10d90:	df014517 	ldw	fp,1300(sp)
   10d94:	ddc14417 	ldw	r23,1296(sp)
   10d98:	dd814317 	ldw	r22,1292(sp)
   10d9c:	dd414217 	ldw	r21,1288(sp)
   10da0:	dd014117 	ldw	r20,1284(sp)
   10da4:	dcc14017 	ldw	r19,1280(sp)
   10da8:	dc813f17 	ldw	r18,1276(sp)
   10dac:	dc413e17 	ldw	r17,1272(sp)
   10db0:	dc013d17 	ldw	r16,1268(sp)
   10db4:	dec14704 	addi	sp,sp,1308
   10db8:	f800283a 	ret
   10dbc:	d9412917 	ldw	r5,1188(sp)
   10dc0:	8809883a 	mov	r4,r17
   10dc4:	d9811b04 	addi	r6,sp,1132
   10dc8:	00108180 	call	10818 <__sprint_r>
   10dcc:	103fe51e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   10dd0:	da400404 	addi	r9,sp,16
   10dd4:	003eea06 	br	10980 <___vfprintf_internal_r+0x134>
   10dd8:	00143740 	call	14374 <__sinit>
   10ddc:	003eb306 	br	108ac <___vfprintf_internal_r+0x60>
   10de0:	e013883a 	mov	r9,fp
   10de4:	84000414 	ori	r16,r16,16
   10de8:	1839883a 	mov	fp,r3
   10dec:	8080080c 	andi	r2,r16,32
   10df0:	10034426 	beq	r2,zero,11b04 <___vfprintf_internal_r+0x12b8>
   10df4:	d8c12d17 	ldw	r3,1204(sp)
   10df8:	18800117 	ldw	r2,4(r3)
   10dfc:	1dc00017 	ldw	r23,0(r3)
   10e00:	18c00204 	addi	r3,r3,8
   10e04:	d8c12d15 	stw	r3,1204(sp)
   10e08:	102d883a 	mov	r22,r2
   10e0c:	1003020e 	bge	r2,zero,11a18 <___vfprintf_internal_r+0x11cc>
   10e10:	05efc83a 	sub	r23,zero,r23
   10e14:	b804c03a 	cmpne	r2,r23,zero
   10e18:	05adc83a 	sub	r22,zero,r22
   10e1c:	b0adc83a 	sub	r22,r22,r2
   10e20:	00800b44 	movi	r2,45
   10e24:	d8812585 	stb	r2,1174(sp)
   10e28:	00c00044 	movi	r3,1
   10e2c:	bd84b03a 	or	r2,r23,r22
   10e30:	e0000216 	blt	fp,zero,10e3c <___vfprintf_internal_r+0x5f0>
   10e34:	013fdfc4 	movi	r4,-129
   10e38:	8120703a 	and	r16,r16,r4
   10e3c:	1001cc1e 	bne	r2,zero,11570 <___vfprintf_internal_r+0xd24>
   10e40:	e001cb1e 	bne	fp,zero,11570 <___vfprintf_internal_r+0xd24>
   10e44:	18c03fcc 	andi	r3,r3,255
   10e48:	1802ca1e 	bne	r3,zero,11974 <___vfprintf_internal_r+0x1128>
   10e4c:	8080004c 	andi	r2,r16,1
   10e50:	1002c826 	beq	r2,zero,11974 <___vfprintf_internal_r+0x1128>
   10e54:	d8c13917 	ldw	r3,1252(sp)
   10e58:	00800c04 	movi	r2,48
   10e5c:	d8810dc5 	stb	r2,1079(sp)
   10e60:	d8c12b15 	stw	r3,1196(sp)
   10e64:	dcc10dc4 	addi	r19,sp,1079
   10e68:	d8812b17 	ldw	r2,1196(sp)
   10e6c:	d8812815 	stw	r2,1184(sp)
   10e70:	1700010e 	bge	r2,fp,10e78 <___vfprintf_internal_r+0x62c>
   10e74:	df012815 	stw	fp,1184(sp)
   10e78:	d8812583 	ldbu	r2,1174(sp)
   10e7c:	df013115 	stw	fp,1220(sp)
   10e80:	10803fcc 	andi	r2,r2,255
   10e84:	1080201c 	xori	r2,r2,128
   10e88:	10bfe004 	addi	r2,r2,-128
   10e8c:	103ed726 	beq	r2,zero,109ec <___vfprintf_internal_r+0x1a0>
   10e90:	d8c12817 	ldw	r3,1184(sp)
   10e94:	18c00044 	addi	r3,r3,1
   10e98:	d8c12815 	stw	r3,1184(sp)
   10e9c:	003ed306 	br	109ec <___vfprintf_internal_r+0x1a0>
   10ea0:	8080020c 	andi	r2,r16,8
   10ea4:	e013883a 	mov	r9,fp
   10ea8:	1839883a 	mov	fp,r3
   10eac:	1003a626 	beq	r2,zero,11d48 <___vfprintf_internal_r+0x14fc>
   10eb0:	d9012d17 	ldw	r4,1204(sp)
   10eb4:	25800017 	ldw	r22,0(r4)
   10eb8:	25000117 	ldw	r20,4(r4)
   10ebc:	21000204 	addi	r4,r4,8
   10ec0:	d9012d15 	stw	r4,1204(sp)
   10ec4:	dd813315 	stw	r22,1228(sp)
   10ec8:	dd013415 	stw	r20,1232(sp)
   10ecc:	b009883a 	mov	r4,r22
   10ed0:	a00b883a 	mov	r5,r20
   10ed4:	da413c15 	stw	r9,1264(sp)
   10ed8:	00175000 	call	17500 <__isinfd>
   10edc:	da413c17 	ldw	r9,1264(sp)
   10ee0:	b009883a 	mov	r4,r22
   10ee4:	a00b883a 	mov	r5,r20
   10ee8:	10041d26 	beq	r2,zero,11f60 <___vfprintf_internal_r+0x1714>
   10eec:	000d883a 	mov	r6,zero
   10ef0:	000f883a 	mov	r7,zero
   10ef4:	00192d40 	call	192d4 <__ltdf2>
   10ef8:	da413c17 	ldw	r9,1264(sp)
   10efc:	1004da16 	blt	r2,zero,12268 <___vfprintf_internal_r+0x1a1c>
   10f00:	d8812583 	ldbu	r2,1174(sp)
   10f04:	00c011c4 	movi	r3,71
   10f08:	1c83d116 	blt	r3,r18,11e50 <___vfprintf_internal_r+0x1604>
   10f0c:	04c000f4 	movhi	r19,3
   10f10:	9ce04904 	addi	r19,r19,-32476
   10f14:	00c000c4 	movi	r3,3
   10f18:	d8c12815 	stw	r3,1184(sp)
   10f1c:	00ffdfc4 	movi	r3,-129
   10f20:	80e0703a 	and	r16,r16,r3
   10f24:	d8c12817 	ldw	r3,1184(sp)
   10f28:	d8013115 	stw	zero,1220(sp)
   10f2c:	d8c12b15 	stw	r3,1196(sp)
   10f30:	003fd306 	br	10e80 <___vfprintf_internal_r+0x634>
   10f34:	84000214 	ori	r16,r16,8
   10f38:	ac800007 	ldb	r18,0(r21)
   10f3c:	003e9f06 	br	109bc <___vfprintf_internal_r+0x170>
   10f40:	e013883a 	mov	r9,fp
   10f44:	84000414 	ori	r16,r16,16
   10f48:	1839883a 	mov	fp,r3
   10f4c:	8080080c 	andi	r2,r16,32
   10f50:	10031d26 	beq	r2,zero,11bc8 <___vfprintf_internal_r+0x137c>
   10f54:	d8812d17 	ldw	r2,1204(sp)
   10f58:	0007883a 	mov	r3,zero
   10f5c:	15c00017 	ldw	r23,0(r2)
   10f60:	15800117 	ldw	r22,4(r2)
   10f64:	10800204 	addi	r2,r2,8
   10f68:	d8812d15 	stw	r2,1204(sp)
   10f6c:	d8012585 	stb	zero,1174(sp)
   10f70:	bd84b03a 	or	r2,r23,r22
   10f74:	003fae06 	br	10e30 <___vfprintf_internal_r+0x5e4>
   10f78:	e013883a 	mov	r9,fp
   10f7c:	84000414 	ori	r16,r16,16
   10f80:	1839883a 	mov	fp,r3
   10f84:	8080080c 	andi	r2,r16,32
   10f88:	1002e726 	beq	r2,zero,11b28 <___vfprintf_internal_r+0x12dc>
   10f8c:	d8c12d17 	ldw	r3,1204(sp)
   10f90:	d9012d17 	ldw	r4,1204(sp)
   10f94:	1dc00017 	ldw	r23,0(r3)
   10f98:	1d800117 	ldw	r22,4(r3)
   10f9c:	21000204 	addi	r4,r4,8
   10fa0:	00c00044 	movi	r3,1
   10fa4:	d9012d15 	stw	r4,1204(sp)
   10fa8:	bd84b03a 	or	r2,r23,r22
   10fac:	d8012585 	stb	zero,1174(sp)
   10fb0:	003f9f06 	br	10e30 <___vfprintf_internal_r+0x5e4>
   10fb4:	e013883a 	mov	r9,fp
   10fb8:	1839883a 	mov	fp,r3
   10fbc:	00c000f4 	movhi	r3,3
   10fc0:	18e04d04 	addi	r3,r3,-32460
   10fc4:	d8c13615 	stw	r3,1240(sp)
   10fc8:	8080080c 	andi	r2,r16,32
   10fcc:	10007726 	beq	r2,zero,111ac <___vfprintf_internal_r+0x960>
   10fd0:	d9012d17 	ldw	r4,1204(sp)
   10fd4:	25c00017 	ldw	r23,0(r4)
   10fd8:	25800117 	ldw	r22,4(r4)
   10fdc:	21000204 	addi	r4,r4,8
   10fe0:	d9012d15 	stw	r4,1204(sp)
   10fe4:	8080004c 	andi	r2,r16,1
   10fe8:	1002c226 	beq	r2,zero,11af4 <___vfprintf_internal_r+0x12a8>
   10fec:	bd84b03a 	or	r2,r23,r22
   10ff0:	10035d26 	beq	r2,zero,11d68 <___vfprintf_internal_r+0x151c>
   10ff4:	00c00c04 	movi	r3,48
   10ff8:	d8c12505 	stb	r3,1172(sp)
   10ffc:	dc812545 	stb	r18,1173(sp)
   11000:	84000094 	ori	r16,r16,2
   11004:	00c00084 	movi	r3,2
   11008:	d8012585 	stb	zero,1174(sp)
   1100c:	003f8806 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11010:	ac800007 	ldb	r18,0(r21)
   11014:	00c00a84 	movi	r3,42
   11018:	adc00044 	addi	r23,r21,1
   1101c:	90c57526 	beq	r18,r3,125f4 <___vfprintf_internal_r+0x1da8>
   11020:	95bff404 	addi	r22,r18,-48
   11024:	0009883a 	mov	r4,zero
   11028:	9d84ff36 	bltu	r19,r22,12428 <___vfprintf_internal_r+0x1bdc>
   1102c:	01400284 	movi	r5,10
   11030:	00106640 	call	10664 <__mulsi3>
   11034:	bc800007 	ldb	r18,0(r23)
   11038:	b089883a 	add	r4,r22,r2
   1103c:	bdc00044 	addi	r23,r23,1
   11040:	95bff404 	addi	r22,r18,-48
   11044:	9dbff92e 	bgeu	r19,r22,1102c <___vfprintf_internal_r+0x7e0>
   11048:	2007883a 	mov	r3,r4
   1104c:	20044316 	blt	r4,zero,1215c <___vfprintf_internal_r+0x1910>
   11050:	b82b883a 	mov	r21,r23
   11054:	003e5a06 	br	109c0 <___vfprintf_internal_r+0x174>
   11058:	ac800007 	ldb	r18,0(r21)
   1105c:	01001b04 	movi	r4,108
   11060:	a805883a 	mov	r2,r21
   11064:	91045526 	beq	r18,r4,121bc <___vfprintf_internal_r+0x1970>
   11068:	84000414 	ori	r16,r16,16
   1106c:	003e5306 	br	109bc <___vfprintf_internal_r+0x170>
   11070:	8080080c 	andi	r2,r16,32
   11074:	e013883a 	mov	r9,fp
   11078:	10034026 	beq	r2,zero,11d7c <___vfprintf_internal_r+0x1530>
   1107c:	d9012d17 	ldw	r4,1204(sp)
   11080:	20800017 	ldw	r2,0(r4)
   11084:	d9012c17 	ldw	r4,1200(sp)
   11088:	2007d7fa 	srai	r3,r4,31
   1108c:	d9012d17 	ldw	r4,1204(sp)
   11090:	10c00115 	stw	r3,4(r2)
   11094:	21000104 	addi	r4,r4,4
   11098:	d9012d15 	stw	r4,1204(sp)
   1109c:	d9012c17 	ldw	r4,1200(sp)
   110a0:	11000015 	stw	r4,0(r2)
   110a4:	003e1f06 	br	10924 <___vfprintf_internal_r+0xd8>
   110a8:	d9012d17 	ldw	r4,1204(sp)
   110ac:	21000017 	ldw	r4,0(r4)
   110b0:	d9012e15 	stw	r4,1208(sp)
   110b4:	d9012d17 	ldw	r4,1204(sp)
   110b8:	20800104 	addi	r2,r4,4
   110bc:	d9012e17 	ldw	r4,1208(sp)
   110c0:	203ee716 	blt	r4,zero,10c60 <___vfprintf_internal_r+0x414>
   110c4:	d8812d15 	stw	r2,1204(sp)
   110c8:	ac800007 	ldb	r18,0(r21)
   110cc:	003e3b06 	br	109bc <___vfprintf_internal_r+0x170>
   110d0:	e013883a 	mov	r9,fp
   110d4:	1839883a 	mov	fp,r3
   110d8:	d8c12d17 	ldw	r3,1204(sp)
   110dc:	00800c04 	movi	r2,48
   110e0:	010000f4 	movhi	r4,3
   110e4:	21205204 	addi	r4,r4,-32440
   110e8:	1dc00017 	ldw	r23,0(r3)
   110ec:	18c00104 	addi	r3,r3,4
   110f0:	d8812505 	stb	r2,1172(sp)
   110f4:	00801e04 	movi	r2,120
   110f8:	d8812545 	stb	r2,1173(sp)
   110fc:	d8c12d15 	stw	r3,1204(sp)
   11100:	002d883a 	mov	r22,zero
   11104:	84000094 	ori	r16,r16,2
   11108:	d9013615 	stw	r4,1240(sp)
   1110c:	00c00084 	movi	r3,2
   11110:	04801e04 	movi	r18,120
   11114:	b805883a 	mov	r2,r23
   11118:	d8012585 	stb	zero,1174(sp)
   1111c:	003f4406 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11120:	84000814 	ori	r16,r16,32
   11124:	ac800007 	ldb	r18,0(r21)
   11128:	003e2406 	br	109bc <___vfprintf_internal_r+0x170>
   1112c:	d8812d17 	ldw	r2,1204(sp)
   11130:	d8012585 	stb	zero,1174(sp)
   11134:	e013883a 	mov	r9,fp
   11138:	14c00017 	ldw	r19,0(r2)
   1113c:	1839883a 	mov	fp,r3
   11140:	15c00104 	addi	r23,r2,4
   11144:	98045526 	beq	r19,zero,1229c <___vfprintf_internal_r+0x1a50>
   11148:	9809883a 	mov	r4,r19
   1114c:	18043116 	blt	r3,zero,12214 <___vfprintf_internal_r+0x19c8>
   11150:	000b883a 	mov	r5,zero
   11154:	180d883a 	mov	r6,r3
   11158:	da413c15 	stw	r9,1264(sp)
   1115c:	0015a140 	call	15a14 <memchr>
   11160:	da413c17 	ldw	r9,1264(sp)
   11164:	10047a26 	beq	r2,zero,12350 <___vfprintf_internal_r+0x1b04>
   11168:	14c5c83a 	sub	r2,r2,r19
   1116c:	d8812b15 	stw	r2,1196(sp)
   11170:	e083d40e 	bge	fp,r2,120c4 <___vfprintf_internal_r+0x1878>
   11174:	df012815 	stw	fp,1184(sp)
   11178:	e004e416 	blt	fp,zero,1250c <___vfprintf_internal_r+0x1cc0>
   1117c:	d8812583 	ldbu	r2,1174(sp)
   11180:	df012b15 	stw	fp,1196(sp)
   11184:	ddc12d15 	stw	r23,1204(sp)
   11188:	d8013115 	stw	zero,1220(sp)
   1118c:	003f3c06 	br	10e80 <___vfprintf_internal_r+0x634>
   11190:	008000f4 	movhi	r2,3
   11194:	10a05204 	addi	r2,r2,-32440
   11198:	d8813615 	stw	r2,1240(sp)
   1119c:	8080080c 	andi	r2,r16,32
   111a0:	e013883a 	mov	r9,fp
   111a4:	1839883a 	mov	fp,r3
   111a8:	103f891e 	bne	r2,zero,10fd0 <___vfprintf_internal_r+0x784>
   111ac:	8080040c 	andi	r2,r16,16
   111b0:	1002c326 	beq	r2,zero,11cc0 <___vfprintf_internal_r+0x1474>
   111b4:	d8812d17 	ldw	r2,1204(sp)
   111b8:	002d883a 	mov	r22,zero
   111bc:	15c00017 	ldw	r23,0(r2)
   111c0:	10800104 	addi	r2,r2,4
   111c4:	d8812d15 	stw	r2,1204(sp)
   111c8:	003f8606 	br	10fe4 <___vfprintf_internal_r+0x798>
   111cc:	84001014 	ori	r16,r16,64
   111d0:	ac800007 	ldb	r18,0(r21)
   111d4:	003df906 	br	109bc <___vfprintf_internal_r+0x170>
   111d8:	d8812587 	ldb	r2,1174(sp)
   111dc:	1002e51e 	bne	r2,zero,11d74 <___vfprintf_internal_r+0x1528>
   111e0:	00800804 	movi	r2,32
   111e4:	d8812585 	stb	r2,1174(sp)
   111e8:	ac800007 	ldb	r18,0(r21)
   111ec:	003df306 	br	109bc <___vfprintf_internal_r+0x170>
   111f0:	84000054 	ori	r16,r16,1
   111f4:	ac800007 	ldb	r18,0(r21)
   111f8:	003df006 	br	109bc <___vfprintf_internal_r+0x170>
   111fc:	84002014 	ori	r16,r16,128
   11200:	ac800007 	ldb	r18,0(r21)
   11204:	003ded06 	br	109bc <___vfprintf_internal_r+0x170>
   11208:	0009883a 	mov	r4,zero
   1120c:	95bff404 	addi	r22,r18,-48
   11210:	182f883a 	mov	r23,r3
   11214:	01400284 	movi	r5,10
   11218:	00106640 	call	10664 <__mulsi3>
   1121c:	ac800007 	ldb	r18,0(r21)
   11220:	1589883a 	add	r4,r2,r22
   11224:	ad400044 	addi	r21,r21,1
   11228:	95bff404 	addi	r22,r18,-48
   1122c:	9dbff92e 	bgeu	r19,r22,11214 <___vfprintf_internal_r+0x9c8>
   11230:	b807883a 	mov	r3,r23
   11234:	d9012e15 	stw	r4,1208(sp)
   11238:	003de106 	br	109c0 <___vfprintf_internal_r+0x174>
   1123c:	00800ac4 	movi	r2,43
   11240:	d8812585 	stb	r2,1174(sp)
   11244:	ac800007 	ldb	r18,0(r21)
   11248:	003ddc06 	br	109bc <___vfprintf_internal_r+0x170>
   1124c:	d8c12d17 	ldw	r3,1204(sp)
   11250:	d9012d17 	ldw	r4,1204(sp)
   11254:	e013883a 	mov	r9,fp
   11258:	18800017 	ldw	r2,0(r3)
   1125c:	21000104 	addi	r4,r4,4
   11260:	00c00044 	movi	r3,1
   11264:	d8c12815 	stw	r3,1184(sp)
   11268:	d8012585 	stb	zero,1174(sp)
   1126c:	d8810405 	stb	r2,1040(sp)
   11270:	d9012d15 	stw	r4,1204(sp)
   11274:	d8c12b15 	stw	r3,1196(sp)
   11278:	dcc10404 	addi	r19,sp,1040
   1127c:	003dda06 	br	109e8 <___vfprintf_internal_r+0x19c>
   11280:	e013883a 	mov	r9,fp
   11284:	1839883a 	mov	fp,r3
   11288:	003ed806 	br	10dec <___vfprintf_internal_r+0x5a0>
   1128c:	e013883a 	mov	r9,fp
   11290:	1839883a 	mov	fp,r3
   11294:	003f2d06 	br	10f4c <___vfprintf_internal_r+0x700>
   11298:	e013883a 	mov	r9,fp
   1129c:	1839883a 	mov	fp,r3
   112a0:	003f3806 	br	10f84 <___vfprintf_internal_r+0x738>
   112a4:	da011d17 	ldw	r8,1140(sp)
   112a8:	d8c11c17 	ldw	r3,1136(sp)
   112ac:	d8812587 	ldb	r2,1174(sp)
   112b0:	10000b26 	beq	r2,zero,112e0 <___vfprintf_internal_r+0xa94>
   112b4:	d8812584 	addi	r2,sp,1174
   112b8:	48800015 	stw	r2,0(r9)
   112bc:	00800044 	movi	r2,1
   112c0:	48800115 	stw	r2,4(r9)
   112c4:	4091883a 	add	r8,r8,r2
   112c8:	1887883a 	add	r3,r3,r2
   112cc:	da011d15 	stw	r8,1140(sp)
   112d0:	d8c11c15 	stw	r3,1136(sp)
   112d4:	008001c4 	movi	r2,7
   112d8:	10c18e16 	blt	r2,r3,11914 <___vfprintf_internal_r+0x10c8>
   112dc:	4a400204 	addi	r9,r9,8
   112e0:	d9012a17 	ldw	r4,1192(sp)
   112e4:	20000b26 	beq	r4,zero,11314 <___vfprintf_internal_r+0xac8>
   112e8:	d8812504 	addi	r2,sp,1172
   112ec:	48800015 	stw	r2,0(r9)
   112f0:	00800084 	movi	r2,2
   112f4:	48800115 	stw	r2,4(r9)
   112f8:	4091883a 	add	r8,r8,r2
   112fc:	18c00044 	addi	r3,r3,1
   11300:	da011d15 	stw	r8,1140(sp)
   11304:	d8c11c15 	stw	r3,1136(sp)
   11308:	008001c4 	movi	r2,7
   1130c:	10c17816 	blt	r2,r3,118f0 <___vfprintf_internal_r+0x10a4>
   11310:	4a400204 	addi	r9,r9,8
   11314:	d9012f17 	ldw	r4,1212(sp)
   11318:	00802004 	movi	r2,128
   1131c:	2080fc26 	beq	r4,r2,11710 <___vfprintf_internal_r+0xec4>
   11320:	d8813117 	ldw	r2,1220(sp)
   11324:	d9012b17 	ldw	r4,1196(sp)
   11328:	112fc83a 	sub	r23,r2,r4
   1132c:	05c02a0e 	bge	zero,r23,113d8 <___vfprintf_internal_r+0xb8c>
   11330:	07000404 	movi	fp,16
   11334:	050000f4 	movhi	r20,3
   11338:	a5205d84 	addi	r20,r20,-32394
   1133c:	e5c01d0e 	bge	fp,r23,113b4 <___vfprintf_internal_r+0xb68>
   11340:	dc812a15 	stw	r18,1192(sp)
   11344:	058001c4 	movi	r22,7
   11348:	a025883a 	mov	r18,r20
   1134c:	8029883a 	mov	r20,r16
   11350:	dc012917 	ldw	r16,1188(sp)
   11354:	00000306 	br	11364 <___vfprintf_internal_r+0xb18>
   11358:	bdfffc04 	addi	r23,r23,-16
   1135c:	4a400204 	addi	r9,r9,8
   11360:	e5c0110e 	bge	fp,r23,113a8 <___vfprintf_internal_r+0xb5c>
   11364:	4c800015 	stw	r18,0(r9)
   11368:	4f000115 	stw	fp,4(r9)
   1136c:	42000404 	addi	r8,r8,16
   11370:	18c00044 	addi	r3,r3,1
   11374:	da011d15 	stw	r8,1140(sp)
   11378:	d8c11c15 	stw	r3,1136(sp)
   1137c:	b0fff60e 	bge	r22,r3,11358 <___vfprintf_internal_r+0xb0c>
   11380:	8809883a 	mov	r4,r17
   11384:	800b883a 	mov	r5,r16
   11388:	d9811b04 	addi	r6,sp,1132
   1138c:	00108180 	call	10818 <__sprint_r>
   11390:	103e741e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11394:	bdfffc04 	addi	r23,r23,-16
   11398:	da011d17 	ldw	r8,1140(sp)
   1139c:	d8c11c17 	ldw	r3,1136(sp)
   113a0:	da400404 	addi	r9,sp,16
   113a4:	e5ffef16 	blt	fp,r23,11364 <___vfprintf_internal_r+0xb18>
   113a8:	a021883a 	mov	r16,r20
   113ac:	9029883a 	mov	r20,r18
   113b0:	dc812a17 	ldw	r18,1192(sp)
   113b4:	4d000015 	stw	r20,0(r9)
   113b8:	4dc00115 	stw	r23,4(r9)
   113bc:	45d1883a 	add	r8,r8,r23
   113c0:	18c00044 	addi	r3,r3,1
   113c4:	da011d15 	stw	r8,1140(sp)
   113c8:	d8c11c15 	stw	r3,1136(sp)
   113cc:	008001c4 	movi	r2,7
   113d0:	10c13e16 	blt	r2,r3,118cc <___vfprintf_internal_r+0x1080>
   113d4:	4a400204 	addi	r9,r9,8
   113d8:	8080400c 	andi	r2,r16,256
   113dc:	1000831e 	bne	r2,zero,115ec <___vfprintf_internal_r+0xda0>
   113e0:	d8812b17 	ldw	r2,1196(sp)
   113e4:	4cc00015 	stw	r19,0(r9)
   113e8:	48800115 	stw	r2,4(r9)
   113ec:	4091883a 	add	r8,r8,r2
   113f0:	18c00044 	addi	r3,r3,1
   113f4:	da011d15 	stw	r8,1140(sp)
   113f8:	d8c11c15 	stw	r3,1136(sp)
   113fc:	008001c4 	movi	r2,7
   11400:	10c05316 	blt	r2,r3,11550 <___vfprintf_internal_r+0xd04>
   11404:	4a400204 	addi	r9,r9,8
   11408:	8400010c 	andi	r16,r16,4
   1140c:	80002e26 	beq	r16,zero,114c8 <___vfprintf_internal_r+0xc7c>
   11410:	d8812e17 	ldw	r2,1208(sp)
   11414:	d8c12817 	ldw	r3,1184(sp)
   11418:	10e1c83a 	sub	r16,r2,r3
   1141c:	04002a0e 	bge	zero,r16,114c8 <___vfprintf_internal_r+0xc7c>
   11420:	04800404 	movi	r18,16
   11424:	d8c11c17 	ldw	r3,1136(sp)
   11428:	05c000f4 	movhi	r23,3
   1142c:	bde05984 	addi	r23,r23,-32410
   11430:	9400170e 	bge	r18,r16,11490 <___vfprintf_internal_r+0xc44>
   11434:	04c001c4 	movi	r19,7
   11438:	dd012917 	ldw	r20,1188(sp)
   1143c:	00000306 	br	1144c <___vfprintf_internal_r+0xc00>
   11440:	843ffc04 	addi	r16,r16,-16
   11444:	4a400204 	addi	r9,r9,8
   11448:	9400110e 	bge	r18,r16,11490 <___vfprintf_internal_r+0xc44>
   1144c:	4dc00015 	stw	r23,0(r9)
   11450:	4c800115 	stw	r18,4(r9)
   11454:	42000404 	addi	r8,r8,16
   11458:	18c00044 	addi	r3,r3,1
   1145c:	da011d15 	stw	r8,1140(sp)
   11460:	d8c11c15 	stw	r3,1136(sp)
   11464:	98fff60e 	bge	r19,r3,11440 <___vfprintf_internal_r+0xbf4>
   11468:	8809883a 	mov	r4,r17
   1146c:	a00b883a 	mov	r5,r20
   11470:	d9811b04 	addi	r6,sp,1132
   11474:	00108180 	call	10818 <__sprint_r>
   11478:	103e3a1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   1147c:	843ffc04 	addi	r16,r16,-16
   11480:	da011d17 	ldw	r8,1140(sp)
   11484:	d8c11c17 	ldw	r3,1136(sp)
   11488:	da400404 	addi	r9,sp,16
   1148c:	943fef16 	blt	r18,r16,1144c <___vfprintf_internal_r+0xc00>
   11490:	4dc00015 	stw	r23,0(r9)
   11494:	4c000115 	stw	r16,4(r9)
   11498:	8211883a 	add	r8,r16,r8
   1149c:	18c00044 	addi	r3,r3,1
   114a0:	da011d15 	stw	r8,1140(sp)
   114a4:	d8c11c15 	stw	r3,1136(sp)
   114a8:	008001c4 	movi	r2,7
   114ac:	10c0060e 	bge	r2,r3,114c8 <___vfprintf_internal_r+0xc7c>
   114b0:	d9412917 	ldw	r5,1188(sp)
   114b4:	8809883a 	mov	r4,r17
   114b8:	d9811b04 	addi	r6,sp,1132
   114bc:	00108180 	call	10818 <__sprint_r>
   114c0:	103e281e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   114c4:	da011d17 	ldw	r8,1140(sp)
   114c8:	dd012817 	ldw	r20,1184(sp)
   114cc:	d9012e17 	ldw	r4,1208(sp)
   114d0:	a100010e 	bge	r20,r4,114d8 <___vfprintf_internal_r+0xc8c>
   114d4:	2029883a 	mov	r20,r4
   114d8:	d8812c17 	ldw	r2,1200(sp)
   114dc:	1505883a 	add	r2,r2,r20
   114e0:	d8812c15 	stw	r2,1200(sp)
   114e4:	4000b91e 	bne	r8,zero,117cc <___vfprintf_internal_r+0xf80>
   114e8:	d8011c15 	stw	zero,1136(sp)
   114ec:	a8800007 	ldb	r2,0(r21)
   114f0:	da400404 	addi	r9,sp,16
   114f4:	103d0d1e 	bne	r2,zero,1092c <___vfprintf_internal_r+0xe0>
   114f8:	a825883a 	mov	r18,r21
   114fc:	003d2306 	br	1098c <___vfprintf_internal_r+0x140>
   11500:	d9412917 	ldw	r5,1188(sp)
   11504:	8809883a 	mov	r4,r17
   11508:	d9811b04 	addi	r6,sp,1132
   1150c:	00108180 	call	10818 <__sprint_r>
   11510:	103e141e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11514:	da011d17 	ldw	r8,1140(sp)
   11518:	da400404 	addi	r9,sp,16
   1151c:	8080004c 	andi	r2,r16,1
   11520:	103fb926 	beq	r2,zero,11408 <___vfprintf_internal_r+0xbbc>
   11524:	d8c11c17 	ldw	r3,1136(sp)
   11528:	d9013717 	ldw	r4,1244(sp)
   1152c:	00800044 	movi	r2,1
   11530:	48800115 	stw	r2,4(r9)
   11534:	49000015 	stw	r4,0(r9)
   11538:	4091883a 	add	r8,r8,r2
   1153c:	1887883a 	add	r3,r3,r2
   11540:	da011d15 	stw	r8,1140(sp)
   11544:	d8c11c15 	stw	r3,1136(sp)
   11548:	008001c4 	movi	r2,7
   1154c:	10ffad0e 	bge	r2,r3,11404 <___vfprintf_internal_r+0xbb8>
   11550:	d9412917 	ldw	r5,1188(sp)
   11554:	8809883a 	mov	r4,r17
   11558:	d9811b04 	addi	r6,sp,1132
   1155c:	00108180 	call	10818 <__sprint_r>
   11560:	103e001e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11564:	da400404 	addi	r9,sp,16
   11568:	da011d17 	ldw	r8,1140(sp)
   1156c:	003fa606 	br	11408 <___vfprintf_internal_r+0xbbc>
   11570:	18803fcc 	andi	r2,r3,255
   11574:	00c00044 	movi	r3,1
   11578:	10c10126 	beq	r2,r3,11980 <___vfprintf_internal_r+0x1134>
   1157c:	00c00084 	movi	r3,2
   11580:	10c0ed26 	beq	r2,r3,11938 <___vfprintf_internal_r+0x10ec>
   11584:	d8c10dc4 	addi	r3,sp,1079
   11588:	b808d0fa 	srli	r4,r23,3
   1158c:	b00a977a 	slli	r5,r22,29
   11590:	b02cd0fa 	srli	r22,r22,3
   11594:	bdc001cc 	andi	r23,r23,7
   11598:	b8800c04 	addi	r2,r23,48
   1159c:	292eb03a 	or	r23,r5,r4
   115a0:	18800005 	stb	r2,0(r3)
   115a4:	bd88b03a 	or	r4,r23,r22
   115a8:	1827883a 	mov	r19,r3
   115ac:	18ffffc4 	addi	r3,r3,-1
   115b0:	203ff51e 	bne	r4,zero,11588 <___vfprintf_internal_r+0xd3c>
   115b4:	8100004c 	andi	r4,r16,1
   115b8:	980b883a 	mov	r5,r19
   115bc:	20000726 	beq	r4,zero,115dc <___vfprintf_internal_r+0xd90>
   115c0:	10803fcc 	andi	r2,r2,255
   115c4:	1080201c 	xori	r2,r2,128
   115c8:	10bfe004 	addi	r2,r2,-128
   115cc:	01000c04 	movi	r4,48
   115d0:	11000226 	beq	r2,r4,115dc <___vfprintf_internal_r+0xd90>
   115d4:	1827883a 	mov	r19,r3
   115d8:	293fffc5 	stb	r4,-1(r5)
   115dc:	d8812717 	ldw	r2,1180(sp)
   115e0:	14c5c83a 	sub	r2,r2,r19
   115e4:	d8812b15 	stw	r2,1196(sp)
   115e8:	003e1f06 	br	10e68 <___vfprintf_internal_r+0x61c>
   115ec:	00801944 	movi	r2,101
   115f0:	14807c0e 	bge	r2,r18,117e4 <___vfprintf_internal_r+0xf98>
   115f4:	d9013317 	ldw	r4,1228(sp)
   115f8:	d9413417 	ldw	r5,1232(sp)
   115fc:	000d883a 	mov	r6,zero
   11600:	000f883a 	mov	r7,zero
   11604:	d8c13b15 	stw	r3,1260(sp)
   11608:	da013a15 	stw	r8,1256(sp)
   1160c:	da413c15 	stw	r9,1264(sp)
   11610:	00191540 	call	19154 <__eqdf2>
   11614:	d8c13b17 	ldw	r3,1260(sp)
   11618:	da013a17 	ldw	r8,1256(sp)
   1161c:	da413c17 	ldw	r9,1264(sp)
   11620:	1001001e 	bne	r2,zero,11a24 <___vfprintf_internal_r+0x11d8>
   11624:	008000f4 	movhi	r2,3
   11628:	10a05904 	addi	r2,r2,-32412
   1162c:	48800015 	stw	r2,0(r9)
   11630:	00800044 	movi	r2,1
   11634:	48800115 	stw	r2,4(r9)
   11638:	4091883a 	add	r8,r8,r2
   1163c:	1887883a 	add	r3,r3,r2
   11640:	da011d15 	stw	r8,1140(sp)
   11644:	d8c11c15 	stw	r3,1136(sp)
   11648:	008001c4 	movi	r2,7
   1164c:	10c20316 	blt	r2,r3,11e5c <___vfprintf_internal_r+0x1610>
   11650:	4a400204 	addi	r9,r9,8
   11654:	d8812417 	ldw	r2,1168(sp)
   11658:	d8c13217 	ldw	r3,1224(sp)
   1165c:	10c00216 	blt	r2,r3,11668 <___vfprintf_internal_r+0xe1c>
   11660:	8080004c 	andi	r2,r16,1
   11664:	103f6826 	beq	r2,zero,11408 <___vfprintf_internal_r+0xbbc>
   11668:	d8c11c17 	ldw	r3,1136(sp)
   1166c:	d9013717 	ldw	r4,1244(sp)
   11670:	00800044 	movi	r2,1
   11674:	48800115 	stw	r2,4(r9)
   11678:	49000015 	stw	r4,0(r9)
   1167c:	4091883a 	add	r8,r8,r2
   11680:	1887883a 	add	r3,r3,r2
   11684:	da011d15 	stw	r8,1140(sp)
   11688:	d8c11c15 	stw	r3,1136(sp)
   1168c:	008001c4 	movi	r2,7
   11690:	10c2ce16 	blt	r2,r3,121cc <___vfprintf_internal_r+0x1980>
   11694:	4a400204 	addi	r9,r9,8
   11698:	d8813217 	ldw	r2,1224(sp)
   1169c:	14bfffc4 	addi	r18,r2,-1
   116a0:	04bf590e 	bge	zero,r18,11408 <___vfprintf_internal_r+0xbbc>
   116a4:	04c00404 	movi	r19,16
   116a8:	d8c11c17 	ldw	r3,1136(sp)
   116ac:	050000f4 	movhi	r20,3
   116b0:	a5205d84 	addi	r20,r20,-32394
   116b4:	9c818a0e 	bge	r19,r18,11ce0 <___vfprintf_internal_r+0x1494>
   116b8:	058001c4 	movi	r22,7
   116bc:	ddc12917 	ldw	r23,1188(sp)
   116c0:	00000306 	br	116d0 <___vfprintf_internal_r+0xe84>
   116c4:	4a400204 	addi	r9,r9,8
   116c8:	94bffc04 	addi	r18,r18,-16
   116cc:	9c81840e 	bge	r19,r18,11ce0 <___vfprintf_internal_r+0x1494>
   116d0:	4d000015 	stw	r20,0(r9)
   116d4:	4cc00115 	stw	r19,4(r9)
   116d8:	42000404 	addi	r8,r8,16
   116dc:	18c00044 	addi	r3,r3,1
   116e0:	da011d15 	stw	r8,1140(sp)
   116e4:	d8c11c15 	stw	r3,1136(sp)
   116e8:	b0fff60e 	bge	r22,r3,116c4 <___vfprintf_internal_r+0xe78>
   116ec:	8809883a 	mov	r4,r17
   116f0:	b80b883a 	mov	r5,r23
   116f4:	d9811b04 	addi	r6,sp,1132
   116f8:	00108180 	call	10818 <__sprint_r>
   116fc:	103d991e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11700:	da011d17 	ldw	r8,1140(sp)
   11704:	d8c11c17 	ldw	r3,1136(sp)
   11708:	da400404 	addi	r9,sp,16
   1170c:	003fee06 	br	116c8 <___vfprintf_internal_r+0xe7c>
   11710:	d8812e17 	ldw	r2,1208(sp)
   11714:	d9012817 	ldw	r4,1184(sp)
   11718:	112fc83a 	sub	r23,r2,r4
   1171c:	05ff000e 	bge	zero,r23,11320 <___vfprintf_internal_r+0xad4>
   11720:	07000404 	movi	fp,16
   11724:	050000f4 	movhi	r20,3
   11728:	a5205d84 	addi	r20,r20,-32394
   1172c:	e5c01d0e 	bge	fp,r23,117a4 <___vfprintf_internal_r+0xf58>
   11730:	dc812a15 	stw	r18,1192(sp)
   11734:	058001c4 	movi	r22,7
   11738:	a025883a 	mov	r18,r20
   1173c:	8029883a 	mov	r20,r16
   11740:	dc012917 	ldw	r16,1188(sp)
   11744:	00000306 	br	11754 <___vfprintf_internal_r+0xf08>
   11748:	bdfffc04 	addi	r23,r23,-16
   1174c:	4a400204 	addi	r9,r9,8
   11750:	e5c0110e 	bge	fp,r23,11798 <___vfprintf_internal_r+0xf4c>
   11754:	4c800015 	stw	r18,0(r9)
   11758:	4f000115 	stw	fp,4(r9)
   1175c:	42000404 	addi	r8,r8,16
   11760:	18c00044 	addi	r3,r3,1
   11764:	da011d15 	stw	r8,1140(sp)
   11768:	d8c11c15 	stw	r3,1136(sp)
   1176c:	b0fff60e 	bge	r22,r3,11748 <___vfprintf_internal_r+0xefc>
   11770:	8809883a 	mov	r4,r17
   11774:	800b883a 	mov	r5,r16
   11778:	d9811b04 	addi	r6,sp,1132
   1177c:	00108180 	call	10818 <__sprint_r>
   11780:	103d781e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11784:	bdfffc04 	addi	r23,r23,-16
   11788:	da011d17 	ldw	r8,1140(sp)
   1178c:	d8c11c17 	ldw	r3,1136(sp)
   11790:	da400404 	addi	r9,sp,16
   11794:	e5ffef16 	blt	fp,r23,11754 <___vfprintf_internal_r+0xf08>
   11798:	a021883a 	mov	r16,r20
   1179c:	9029883a 	mov	r20,r18
   117a0:	dc812a17 	ldw	r18,1192(sp)
   117a4:	4d000015 	stw	r20,0(r9)
   117a8:	4dc00115 	stw	r23,4(r9)
   117ac:	45d1883a 	add	r8,r8,r23
   117b0:	18c00044 	addi	r3,r3,1
   117b4:	da011d15 	stw	r8,1140(sp)
   117b8:	d8c11c15 	stw	r3,1136(sp)
   117bc:	008001c4 	movi	r2,7
   117c0:	10c13616 	blt	r2,r3,11c9c <___vfprintf_internal_r+0x1450>
   117c4:	4a400204 	addi	r9,r9,8
   117c8:	003ed506 	br	11320 <___vfprintf_internal_r+0xad4>
   117cc:	d9412917 	ldw	r5,1188(sp)
   117d0:	8809883a 	mov	r4,r17
   117d4:	d9811b04 	addi	r6,sp,1132
   117d8:	00108180 	call	10818 <__sprint_r>
   117dc:	103f4226 	beq	r2,zero,114e8 <___vfprintf_internal_r+0xc9c>
   117e0:	003d6006 	br	10d64 <___vfprintf_internal_r+0x518>
   117e4:	d9013217 	ldw	r4,1224(sp)
   117e8:	00800044 	movi	r2,1
   117ec:	4cc00015 	stw	r19,0(r9)
   117f0:	1101000e 	bge	r2,r4,11bf4 <___vfprintf_internal_r+0x13a8>
   117f4:	00800044 	movi	r2,1
   117f8:	48800115 	stw	r2,4(r9)
   117fc:	4091883a 	add	r8,r8,r2
   11800:	1887883a 	add	r3,r3,r2
   11804:	da011d15 	stw	r8,1140(sp)
   11808:	d8c11c15 	stw	r3,1136(sp)
   1180c:	008001c4 	movi	r2,7
   11810:	10c10c16 	blt	r2,r3,11c44 <___vfprintf_internal_r+0x13f8>
   11814:	4a400204 	addi	r9,r9,8
   11818:	d8813717 	ldw	r2,1244(sp)
   1181c:	48800015 	stw	r2,0(r9)
   11820:	00800044 	movi	r2,1
   11824:	48800115 	stw	r2,4(r9)
   11828:	4091883a 	add	r8,r8,r2
   1182c:	1887883a 	add	r3,r3,r2
   11830:	da011d15 	stw	r8,1140(sp)
   11834:	d8c11c15 	stw	r3,1136(sp)
   11838:	008001c4 	movi	r2,7
   1183c:	10c10a16 	blt	r2,r3,11c68 <___vfprintf_internal_r+0x141c>
   11840:	4c800204 	addi	r18,r9,8
   11844:	d9013317 	ldw	r4,1228(sp)
   11848:	d9413417 	ldw	r5,1232(sp)
   1184c:	000d883a 	mov	r6,zero
   11850:	000f883a 	mov	r7,zero
   11854:	d8c13b15 	stw	r3,1260(sp)
   11858:	da013a15 	stw	r8,1256(sp)
   1185c:	00191b00 	call	191b0 <__nedf2>
   11860:	d8c13b17 	ldw	r3,1260(sp)
   11864:	da013a17 	ldw	r8,1256(sp)
   11868:	1000ba26 	beq	r2,zero,11b54 <___vfprintf_internal_r+0x1308>
   1186c:	d9013217 	ldw	r4,1224(sp)
   11870:	9cc00044 	addi	r19,r19,1
   11874:	94c00015 	stw	r19,0(r18)
   11878:	20bfffc4 	addi	r2,r4,-1
   1187c:	90800115 	stw	r2,4(r18)
   11880:	4091883a 	add	r8,r8,r2
   11884:	18c00044 	addi	r3,r3,1
   11888:	da011d15 	stw	r8,1140(sp)
   1188c:	d8c11c15 	stw	r3,1136(sp)
   11890:	008001c4 	movi	r2,7
   11894:	10c0e216 	blt	r2,r3,11c20 <___vfprintf_internal_r+0x13d4>
   11898:	94800204 	addi	r18,r18,8
   1189c:	d9013517 	ldw	r4,1236(sp)
   118a0:	d8811fc4 	addi	r2,sp,1151
   118a4:	90800015 	stw	r2,0(r18)
   118a8:	91000115 	stw	r4,4(r18)
   118ac:	4111883a 	add	r8,r8,r4
   118b0:	18c00044 	addi	r3,r3,1
   118b4:	da011d15 	stw	r8,1140(sp)
   118b8:	d8c11c15 	stw	r3,1136(sp)
   118bc:	008001c4 	movi	r2,7
   118c0:	10ff2316 	blt	r2,r3,11550 <___vfprintf_internal_r+0xd04>
   118c4:	92400204 	addi	r9,r18,8
   118c8:	003ecf06 	br	11408 <___vfprintf_internal_r+0xbbc>
   118cc:	d9412917 	ldw	r5,1188(sp)
   118d0:	8809883a 	mov	r4,r17
   118d4:	d9811b04 	addi	r6,sp,1132
   118d8:	00108180 	call	10818 <__sprint_r>
   118dc:	103d211e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   118e0:	da011d17 	ldw	r8,1140(sp)
   118e4:	d8c11c17 	ldw	r3,1136(sp)
   118e8:	da400404 	addi	r9,sp,16
   118ec:	003eba06 	br	113d8 <___vfprintf_internal_r+0xb8c>
   118f0:	d9412917 	ldw	r5,1188(sp)
   118f4:	8809883a 	mov	r4,r17
   118f8:	d9811b04 	addi	r6,sp,1132
   118fc:	00108180 	call	10818 <__sprint_r>
   11900:	103d181e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11904:	da011d17 	ldw	r8,1140(sp)
   11908:	d8c11c17 	ldw	r3,1136(sp)
   1190c:	da400404 	addi	r9,sp,16
   11910:	003e8006 	br	11314 <___vfprintf_internal_r+0xac8>
   11914:	d9412917 	ldw	r5,1188(sp)
   11918:	8809883a 	mov	r4,r17
   1191c:	d9811b04 	addi	r6,sp,1132
   11920:	00108180 	call	10818 <__sprint_r>
   11924:	103d0f1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11928:	da011d17 	ldw	r8,1140(sp)
   1192c:	d8c11c17 	ldw	r3,1136(sp)
   11930:	da400404 	addi	r9,sp,16
   11934:	003e6a06 	br	112e0 <___vfprintf_internal_r+0xa94>
   11938:	d9413617 	ldw	r5,1240(sp)
   1193c:	d8810dc4 	addi	r2,sp,1079
   11940:	b8c003cc 	andi	r3,r23,15
   11944:	b008973a 	slli	r4,r22,28
   11948:	28c7883a 	add	r3,r5,r3
   1194c:	b82ed13a 	srli	r23,r23,4
   11950:	18c00003 	ldbu	r3,0(r3)
   11954:	b02cd13a 	srli	r22,r22,4
   11958:	25eeb03a 	or	r23,r4,r23
   1195c:	10c00005 	stb	r3,0(r2)
   11960:	bd86b03a 	or	r3,r23,r22
   11964:	1027883a 	mov	r19,r2
   11968:	10bfffc4 	addi	r2,r2,-1
   1196c:	183ff41e 	bne	r3,zero,11940 <___vfprintf_internal_r+0x10f4>
   11970:	003f1a06 	br	115dc <___vfprintf_internal_r+0xd90>
   11974:	d8012b15 	stw	zero,1196(sp)
   11978:	dcc10e04 	addi	r19,sp,1080
   1197c:	003d3a06 	br	10e68 <___vfprintf_internal_r+0x61c>
   11980:	b0025426 	beq	r22,zero,122d4 <___vfprintf_internal_r+0x1a88>
   11984:	b807883a 	mov	r3,r23
   11988:	d8810dc4 	addi	r2,sp,1079
   1198c:	882f883a 	mov	r23,r17
   11990:	04c00244 	movi	r19,9
   11994:	8023883a 	mov	r17,r16
   11998:	da412815 	stw	r9,1184(sp)
   1199c:	1821883a 	mov	r16,r3
   119a0:	8009883a 	mov	r4,r16
   119a4:	b00b883a 	mov	r5,r22
   119a8:	01800284 	movi	r6,10
   119ac:	000f883a 	mov	r7,zero
   119b0:	1029883a 	mov	r20,r2
   119b4:	001828c0 	call	1828c <__umoddi3>
   119b8:	10800c04 	addi	r2,r2,48
   119bc:	8009883a 	mov	r4,r16
   119c0:	b00b883a 	mov	r5,r22
   119c4:	a0800005 	stb	r2,0(r20)
   119c8:	01800284 	movi	r6,10
   119cc:	000f883a 	mov	r7,zero
   119d0:	0017c3c0 	call	17c3c <__udivdi3>
   119d4:	1021883a 	mov	r16,r2
   119d8:	182d883a 	mov	r22,r3
   119dc:	a0bfffc4 	addi	r2,r20,-1
   119e0:	183fef1e 	bne	r3,zero,119a0 <___vfprintf_internal_r+0x1154>
   119e4:	9c3fee36 	bltu	r19,r16,119a0 <___vfprintf_internal_r+0x1154>
   119e8:	da412817 	ldw	r9,1184(sp)
   119ec:	8005883a 	mov	r2,r16
   119f0:	8821883a 	mov	r16,r17
   119f4:	b823883a 	mov	r17,r23
   119f8:	102f883a 	mov	r23,r2
   119fc:	d8812717 	ldw	r2,1180(sp)
   11a00:	a4ffffc4 	addi	r19,r20,-1
   11a04:	bdc00c04 	addi	r23,r23,48
   11a08:	14c5c83a 	sub	r2,r2,r19
   11a0c:	a5ffffc5 	stb	r23,-1(r20)
   11a10:	d8812b15 	stw	r2,1196(sp)
   11a14:	003d1406 	br	10e68 <___vfprintf_internal_r+0x61c>
   11a18:	00c00044 	movi	r3,1
   11a1c:	bd84b03a 	or	r2,r23,r22
   11a20:	003d0306 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11a24:	dc812417 	ldw	r18,1168(sp)
   11a28:	0481140e 	bge	zero,r18,11e7c <___vfprintf_internal_r+0x1630>
   11a2c:	d9013217 	ldw	r4,1224(sp)
   11a30:	4cc00015 	stw	r19,0(r9)
   11a34:	9100ec16 	blt	r18,r4,11de8 <___vfprintf_internal_r+0x159c>
   11a38:	49000115 	stw	r4,4(r9)
   11a3c:	4111883a 	add	r8,r8,r4
   11a40:	18c00044 	addi	r3,r3,1
   11a44:	da011d15 	stw	r8,1140(sp)
   11a48:	d8c11c15 	stw	r3,1136(sp)
   11a4c:	008001c4 	movi	r2,7
   11a50:	10c23616 	blt	r2,r3,1232c <___vfprintf_internal_r+0x1ae0>
   11a54:	4a400204 	addi	r9,r9,8
   11a58:	d8813217 	ldw	r2,1224(sp)
   11a5c:	90a5c83a 	sub	r18,r18,r2
   11a60:	04beae0e 	bge	zero,r18,1151c <___vfprintf_internal_r+0xcd0>
   11a64:	04c00404 	movi	r19,16
   11a68:	d8c11c17 	ldw	r3,1136(sp)
   11a6c:	050000f4 	movhi	r20,3
   11a70:	a5205d84 	addi	r20,r20,-32394
   11a74:	9c81dd0e 	bge	r19,r18,121ec <___vfprintf_internal_r+0x19a0>
   11a78:	058001c4 	movi	r22,7
   11a7c:	ddc12917 	ldw	r23,1188(sp)
   11a80:	00000306 	br	11a90 <___vfprintf_internal_r+0x1244>
   11a84:	4a400204 	addi	r9,r9,8
   11a88:	94bffc04 	addi	r18,r18,-16
   11a8c:	9c81d70e 	bge	r19,r18,121ec <___vfprintf_internal_r+0x19a0>
   11a90:	4d000015 	stw	r20,0(r9)
   11a94:	4cc00115 	stw	r19,4(r9)
   11a98:	42000404 	addi	r8,r8,16
   11a9c:	18c00044 	addi	r3,r3,1
   11aa0:	da011d15 	stw	r8,1140(sp)
   11aa4:	d8c11c15 	stw	r3,1136(sp)
   11aa8:	b0fff60e 	bge	r22,r3,11a84 <___vfprintf_internal_r+0x1238>
   11aac:	8809883a 	mov	r4,r17
   11ab0:	b80b883a 	mov	r5,r23
   11ab4:	d9811b04 	addi	r6,sp,1132
   11ab8:	00108180 	call	10818 <__sprint_r>
   11abc:	103ca91e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11ac0:	da011d17 	ldw	r8,1140(sp)
   11ac4:	d8c11c17 	ldw	r3,1136(sp)
   11ac8:	da400404 	addi	r9,sp,16
   11acc:	003fee06 	br	11a88 <___vfprintf_internal_r+0x123c>
   11ad0:	d9412917 	ldw	r5,1188(sp)
   11ad4:	8809883a 	mov	r4,r17
   11ad8:	d9811b04 	addi	r6,sp,1132
   11adc:	00108180 	call	10818 <__sprint_r>
   11ae0:	103ca01e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11ae4:	da011d17 	ldw	r8,1140(sp)
   11ae8:	d8c11c17 	ldw	r3,1136(sp)
   11aec:	da400404 	addi	r9,sp,16
   11af0:	003dee06 	br	112ac <___vfprintf_internal_r+0xa60>
   11af4:	00c00084 	movi	r3,2
   11af8:	bd84b03a 	or	r2,r23,r22
   11afc:	d8012585 	stb	zero,1174(sp)
   11b00:	003ccb06 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11b04:	8080040c 	andi	r2,r16,16
   11b08:	1000ae26 	beq	r2,zero,11dc4 <___vfprintf_internal_r+0x1578>
   11b0c:	d9012d17 	ldw	r4,1204(sp)
   11b10:	25c00017 	ldw	r23,0(r4)
   11b14:	21000104 	addi	r4,r4,4
   11b18:	d9012d15 	stw	r4,1204(sp)
   11b1c:	b82dd7fa 	srai	r22,r23,31
   11b20:	b005883a 	mov	r2,r22
   11b24:	003cb906 	br	10e0c <___vfprintf_internal_r+0x5c0>
   11b28:	8080040c 	andi	r2,r16,16
   11b2c:	10007026 	beq	r2,zero,11cf0 <___vfprintf_internal_r+0x14a4>
   11b30:	d8812d17 	ldw	r2,1204(sp)
   11b34:	002d883a 	mov	r22,zero
   11b38:	00c00044 	movi	r3,1
   11b3c:	15c00017 	ldw	r23,0(r2)
   11b40:	10800104 	addi	r2,r2,4
   11b44:	d8812d15 	stw	r2,1204(sp)
   11b48:	d8012585 	stb	zero,1174(sp)
   11b4c:	b805883a 	mov	r2,r23
   11b50:	003cb706 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11b54:	d8813217 	ldw	r2,1224(sp)
   11b58:	14ffffc4 	addi	r19,r2,-1
   11b5c:	04ff4f0e 	bge	zero,r19,1189c <___vfprintf_internal_r+0x1050>
   11b60:	05800404 	movi	r22,16
   11b64:	050000f4 	movhi	r20,3
   11b68:	a5205d84 	addi	r20,r20,-32394
   11b6c:	b4c0470e 	bge	r22,r19,11c8c <___vfprintf_internal_r+0x1440>
   11b70:	05c001c4 	movi	r23,7
   11b74:	df012917 	ldw	fp,1188(sp)
   11b78:	00000306 	br	11b88 <___vfprintf_internal_r+0x133c>
   11b7c:	94800204 	addi	r18,r18,8
   11b80:	9cfffc04 	addi	r19,r19,-16
   11b84:	b4c0410e 	bge	r22,r19,11c8c <___vfprintf_internal_r+0x1440>
   11b88:	95000015 	stw	r20,0(r18)
   11b8c:	95800115 	stw	r22,4(r18)
   11b90:	42000404 	addi	r8,r8,16
   11b94:	18c00044 	addi	r3,r3,1
   11b98:	da011d15 	stw	r8,1140(sp)
   11b9c:	d8c11c15 	stw	r3,1136(sp)
   11ba0:	b8fff60e 	bge	r23,r3,11b7c <___vfprintf_internal_r+0x1330>
   11ba4:	8809883a 	mov	r4,r17
   11ba8:	e00b883a 	mov	r5,fp
   11bac:	d9811b04 	addi	r6,sp,1132
   11bb0:	00108180 	call	10818 <__sprint_r>
   11bb4:	103c6b1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11bb8:	da011d17 	ldw	r8,1140(sp)
   11bbc:	d8c11c17 	ldw	r3,1136(sp)
   11bc0:	dc800404 	addi	r18,sp,16
   11bc4:	003fee06 	br	11b80 <___vfprintf_internal_r+0x1334>
   11bc8:	8080040c 	andi	r2,r16,16
   11bcc:	10005326 	beq	r2,zero,11d1c <___vfprintf_internal_r+0x14d0>
   11bd0:	d8c12d17 	ldw	r3,1204(sp)
   11bd4:	002d883a 	mov	r22,zero
   11bd8:	1dc00017 	ldw	r23,0(r3)
   11bdc:	18c00104 	addi	r3,r3,4
   11be0:	d8c12d15 	stw	r3,1204(sp)
   11be4:	b805883a 	mov	r2,r23
   11be8:	0007883a 	mov	r3,zero
   11bec:	d8012585 	stb	zero,1174(sp)
   11bf0:	003c8f06 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11bf4:	8088703a 	and	r4,r16,r2
   11bf8:	203efe1e 	bne	r4,zero,117f4 <___vfprintf_internal_r+0xfa8>
   11bfc:	48800115 	stw	r2,4(r9)
   11c00:	42000044 	addi	r8,r8,1
   11c04:	18c00044 	addi	r3,r3,1
   11c08:	da011d15 	stw	r8,1140(sp)
   11c0c:	d8c11c15 	stw	r3,1136(sp)
   11c10:	008001c4 	movi	r2,7
   11c14:	10c00216 	blt	r2,r3,11c20 <___vfprintf_internal_r+0x13d4>
   11c18:	4c800204 	addi	r18,r9,8
   11c1c:	003f1f06 	br	1189c <___vfprintf_internal_r+0x1050>
   11c20:	d9412917 	ldw	r5,1188(sp)
   11c24:	8809883a 	mov	r4,r17
   11c28:	d9811b04 	addi	r6,sp,1132
   11c2c:	00108180 	call	10818 <__sprint_r>
   11c30:	103c4c1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11c34:	dc800404 	addi	r18,sp,16
   11c38:	da011d17 	ldw	r8,1140(sp)
   11c3c:	d8c11c17 	ldw	r3,1136(sp)
   11c40:	003f1606 	br	1189c <___vfprintf_internal_r+0x1050>
   11c44:	d9412917 	ldw	r5,1188(sp)
   11c48:	8809883a 	mov	r4,r17
   11c4c:	d9811b04 	addi	r6,sp,1132
   11c50:	00108180 	call	10818 <__sprint_r>
   11c54:	103c431e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11c58:	da011d17 	ldw	r8,1140(sp)
   11c5c:	d8c11c17 	ldw	r3,1136(sp)
   11c60:	da400404 	addi	r9,sp,16
   11c64:	003eec06 	br	11818 <___vfprintf_internal_r+0xfcc>
   11c68:	d9412917 	ldw	r5,1188(sp)
   11c6c:	8809883a 	mov	r4,r17
   11c70:	d9811b04 	addi	r6,sp,1132
   11c74:	00108180 	call	10818 <__sprint_r>
   11c78:	103c3a1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11c7c:	da011d17 	ldw	r8,1140(sp)
   11c80:	d8c11c17 	ldw	r3,1136(sp)
   11c84:	dc800404 	addi	r18,sp,16
   11c88:	003eee06 	br	11844 <___vfprintf_internal_r+0xff8>
   11c8c:	95000015 	stw	r20,0(r18)
   11c90:	94c00115 	stw	r19,4(r18)
   11c94:	44d1883a 	add	r8,r8,r19
   11c98:	003efa06 	br	11884 <___vfprintf_internal_r+0x1038>
   11c9c:	d9412917 	ldw	r5,1188(sp)
   11ca0:	8809883a 	mov	r4,r17
   11ca4:	d9811b04 	addi	r6,sp,1132
   11ca8:	00108180 	call	10818 <__sprint_r>
   11cac:	103c2d1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11cb0:	da011d17 	ldw	r8,1140(sp)
   11cb4:	d8c11c17 	ldw	r3,1136(sp)
   11cb8:	da400404 	addi	r9,sp,16
   11cbc:	003d9806 	br	11320 <___vfprintf_internal_r+0xad4>
   11cc0:	8080100c 	andi	r2,r16,64
   11cc4:	10011626 	beq	r2,zero,12120 <___vfprintf_internal_r+0x18d4>
   11cc8:	d8c12d17 	ldw	r3,1204(sp)
   11ccc:	002d883a 	mov	r22,zero
   11cd0:	1dc0000b 	ldhu	r23,0(r3)
   11cd4:	18c00104 	addi	r3,r3,4
   11cd8:	d8c12d15 	stw	r3,1204(sp)
   11cdc:	003cc106 	br	10fe4 <___vfprintf_internal_r+0x798>
   11ce0:	4d000015 	stw	r20,0(r9)
   11ce4:	4c800115 	stw	r18,4(r9)
   11ce8:	4491883a 	add	r8,r8,r18
   11cec:	003dc006 	br	113f0 <___vfprintf_internal_r+0xba4>
   11cf0:	8080100c 	andi	r2,r16,64
   11cf4:	10010126 	beq	r2,zero,120fc <___vfprintf_internal_r+0x18b0>
   11cf8:	d8c12d17 	ldw	r3,1204(sp)
   11cfc:	002d883a 	mov	r22,zero
   11d00:	1dc0000b 	ldhu	r23,0(r3)
   11d04:	18c00104 	addi	r3,r3,4
   11d08:	d8c12d15 	stw	r3,1204(sp)
   11d0c:	b805883a 	mov	r2,r23
   11d10:	00c00044 	movi	r3,1
   11d14:	d8012585 	stb	zero,1174(sp)
   11d18:	003c4506 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11d1c:	8080100c 	andi	r2,r16,64
   11d20:	10010526 	beq	r2,zero,12138 <___vfprintf_internal_r+0x18ec>
   11d24:	d9012d17 	ldw	r4,1204(sp)
   11d28:	002d883a 	mov	r22,zero
   11d2c:	0007883a 	mov	r3,zero
   11d30:	25c0000b 	ldhu	r23,0(r4)
   11d34:	21000104 	addi	r4,r4,4
   11d38:	d9012d15 	stw	r4,1204(sp)
   11d3c:	b805883a 	mov	r2,r23
   11d40:	d8012585 	stb	zero,1174(sp)
   11d44:	003c3a06 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11d48:	d8812d17 	ldw	r2,1204(sp)
   11d4c:	15800017 	ldw	r22,0(r2)
   11d50:	15000117 	ldw	r20,4(r2)
   11d54:	10800204 	addi	r2,r2,8
   11d58:	d8812d15 	stw	r2,1204(sp)
   11d5c:	dd813315 	stw	r22,1228(sp)
   11d60:	dd013415 	stw	r20,1232(sp)
   11d64:	003c5906 	br	10ecc <___vfprintf_internal_r+0x680>
   11d68:	00c00084 	movi	r3,2
   11d6c:	d8012585 	stb	zero,1174(sp)
   11d70:	003c2f06 	br	10e30 <___vfprintf_internal_r+0x5e4>
   11d74:	ac800007 	ldb	r18,0(r21)
   11d78:	003b1006 	br	109bc <___vfprintf_internal_r+0x170>
   11d7c:	8080040c 	andi	r2,r16,16
   11d80:	1000091e 	bne	r2,zero,11da8 <___vfprintf_internal_r+0x155c>
   11d84:	8400100c 	andi	r16,r16,64
   11d88:	80000726 	beq	r16,zero,11da8 <___vfprintf_internal_r+0x155c>
   11d8c:	d8c12d17 	ldw	r3,1204(sp)
   11d90:	d9012c17 	ldw	r4,1200(sp)
   11d94:	18800017 	ldw	r2,0(r3)
   11d98:	18c00104 	addi	r3,r3,4
   11d9c:	d8c12d15 	stw	r3,1204(sp)
   11da0:	1100000d 	sth	r4,0(r2)
   11da4:	003adf06 	br	10924 <___vfprintf_internal_r+0xd8>
   11da8:	d8c12d17 	ldw	r3,1204(sp)
   11dac:	d9012c17 	ldw	r4,1200(sp)
   11db0:	18800017 	ldw	r2,0(r3)
   11db4:	18c00104 	addi	r3,r3,4
   11db8:	d8c12d15 	stw	r3,1204(sp)
   11dbc:	11000015 	stw	r4,0(r2)
   11dc0:	003ad806 	br	10924 <___vfprintf_internal_r+0xd8>
   11dc4:	8080100c 	andi	r2,r16,64
   11dc8:	1000c526 	beq	r2,zero,120e0 <___vfprintf_internal_r+0x1894>
   11dcc:	d8812d17 	ldw	r2,1204(sp)
   11dd0:	15c0000f 	ldh	r23,0(r2)
   11dd4:	10800104 	addi	r2,r2,4
   11dd8:	d8812d15 	stw	r2,1204(sp)
   11ddc:	b82dd7fa 	srai	r22,r23,31
   11de0:	b005883a 	mov	r2,r22
   11de4:	003c0906 	br	10e0c <___vfprintf_internal_r+0x5c0>
   11de8:	4c800115 	stw	r18,4(r9)
   11dec:	9211883a 	add	r8,r18,r8
   11df0:	18c00044 	addi	r3,r3,1
   11df4:	da011d15 	stw	r8,1140(sp)
   11df8:	d8c11c15 	stw	r3,1136(sp)
   11dfc:	008001c4 	movi	r2,7
   11e00:	10c14016 	blt	r2,r3,12304 <___vfprintf_internal_r+0x1ab8>
   11e04:	4a400204 	addi	r9,r9,8
   11e08:	d8813717 	ldw	r2,1244(sp)
   11e0c:	9ca7883a 	add	r19,r19,r18
   11e10:	48800015 	stw	r2,0(r9)
   11e14:	00800044 	movi	r2,1
   11e18:	48800115 	stw	r2,4(r9)
   11e1c:	4091883a 	add	r8,r8,r2
   11e20:	1887883a 	add	r3,r3,r2
   11e24:	da011d15 	stw	r8,1140(sp)
   11e28:	d8c11c15 	stw	r3,1136(sp)
   11e2c:	008001c4 	movi	r2,7
   11e30:	10c12c16 	blt	r2,r3,122e4 <___vfprintf_internal_r+0x1a98>
   11e34:	4a400204 	addi	r9,r9,8
   11e38:	d9013217 	ldw	r4,1224(sp)
   11e3c:	da011d17 	ldw	r8,1140(sp)
   11e40:	d8c11c17 	ldw	r3,1136(sp)
   11e44:	24a5c83a 	sub	r18,r4,r18
   11e48:	4cc00015 	stw	r19,0(r9)
   11e4c:	003fa506 	br	11ce4 <___vfprintf_internal_r+0x1498>
   11e50:	04c000f4 	movhi	r19,3
   11e54:	9ce04a04 	addi	r19,r19,-32472
   11e58:	003c2e06 	br	10f14 <___vfprintf_internal_r+0x6c8>
   11e5c:	d9412917 	ldw	r5,1188(sp)
   11e60:	8809883a 	mov	r4,r17
   11e64:	d9811b04 	addi	r6,sp,1132
   11e68:	00108180 	call	10818 <__sprint_r>
   11e6c:	103bbd1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11e70:	da011d17 	ldw	r8,1140(sp)
   11e74:	da400404 	addi	r9,sp,16
   11e78:	003df606 	br	11654 <___vfprintf_internal_r+0xe08>
   11e7c:	008000f4 	movhi	r2,3
   11e80:	10a05904 	addi	r2,r2,-32412
   11e84:	48800015 	stw	r2,0(r9)
   11e88:	00800044 	movi	r2,1
   11e8c:	48800115 	stw	r2,4(r9)
   11e90:	4091883a 	add	r8,r8,r2
   11e94:	1887883a 	add	r3,r3,r2
   11e98:	da011d15 	stw	r8,1140(sp)
   11e9c:	d8c11c15 	stw	r3,1136(sp)
   11ea0:	008001c4 	movi	r2,7
   11ea4:	10c0bc16 	blt	r2,r3,12198 <___vfprintf_internal_r+0x194c>
   11ea8:	4a400204 	addi	r9,r9,8
   11eac:	9000041e 	bne	r18,zero,11ec0 <___vfprintf_internal_r+0x1674>
   11eb0:	d8c13217 	ldw	r3,1224(sp)
   11eb4:	1800021e 	bne	r3,zero,11ec0 <___vfprintf_internal_r+0x1674>
   11eb8:	8080004c 	andi	r2,r16,1
   11ebc:	103d5226 	beq	r2,zero,11408 <___vfprintf_internal_r+0xbbc>
   11ec0:	d8c11c17 	ldw	r3,1136(sp)
   11ec4:	d9013717 	ldw	r4,1244(sp)
   11ec8:	00800044 	movi	r2,1
   11ecc:	48800115 	stw	r2,4(r9)
   11ed0:	49000015 	stw	r4,0(r9)
   11ed4:	4091883a 	add	r8,r8,r2
   11ed8:	1887883a 	add	r3,r3,r2
   11edc:	da011d15 	stw	r8,1140(sp)
   11ee0:	d8c11c15 	stw	r3,1136(sp)
   11ee4:	008001c4 	movi	r2,7
   11ee8:	10c14516 	blt	r2,r3,12400 <___vfprintf_internal_r+0x1bb4>
   11eec:	4a400204 	addi	r9,r9,8
   11ef0:	04a5c83a 	sub	r18,zero,r18
   11ef4:	0480d70e 	bge	zero,r18,12254 <___vfprintf_internal_r+0x1a08>
   11ef8:	05800404 	movi	r22,16
   11efc:	050000f4 	movhi	r20,3
   11f00:	a5205d84 	addi	r20,r20,-32394
   11f04:	b480db0e 	bge	r22,r18,12274 <___vfprintf_internal_r+0x1a28>
   11f08:	05c001c4 	movi	r23,7
   11f0c:	df012917 	ldw	fp,1188(sp)
   11f10:	00000306 	br	11f20 <___vfprintf_internal_r+0x16d4>
   11f14:	4a400204 	addi	r9,r9,8
   11f18:	94bffc04 	addi	r18,r18,-16
   11f1c:	b480d50e 	bge	r22,r18,12274 <___vfprintf_internal_r+0x1a28>
   11f20:	4d000015 	stw	r20,0(r9)
   11f24:	4d800115 	stw	r22,4(r9)
   11f28:	42000404 	addi	r8,r8,16
   11f2c:	18c00044 	addi	r3,r3,1
   11f30:	da011d15 	stw	r8,1140(sp)
   11f34:	d8c11c15 	stw	r3,1136(sp)
   11f38:	b8fff60e 	bge	r23,r3,11f14 <___vfprintf_internal_r+0x16c8>
   11f3c:	8809883a 	mov	r4,r17
   11f40:	e00b883a 	mov	r5,fp
   11f44:	d9811b04 	addi	r6,sp,1132
   11f48:	00108180 	call	10818 <__sprint_r>
   11f4c:	103b851e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   11f50:	da011d17 	ldw	r8,1140(sp)
   11f54:	d8c11c17 	ldw	r3,1136(sp)
   11f58:	da400404 	addi	r9,sp,16
   11f5c:	003fee06 	br	11f18 <___vfprintf_internal_r+0x16cc>
   11f60:	da413c15 	stw	r9,1264(sp)
   11f64:	00175380 	call	17538 <__isnand>
   11f68:	da413c17 	ldw	r9,1264(sp)
   11f6c:	10007e1e 	bne	r2,zero,12168 <___vfprintf_internal_r+0x191c>
   11f70:	00bfffc4 	movi	r2,-1
   11f74:	e0816a26 	beq	fp,r2,12520 <___vfprintf_internal_r+0x1cd4>
   11f78:	008019c4 	movi	r2,103
   11f7c:	90816526 	beq	r18,r2,12514 <___vfprintf_internal_r+0x1cc8>
   11f80:	008011c4 	movi	r2,71
   11f84:	90816326 	beq	r18,r2,12514 <___vfprintf_internal_r+0x1cc8>
   11f88:	80c04014 	ori	r3,r16,256
   11f8c:	d8c12a15 	stw	r3,1192(sp)
   11f90:	a0016516 	blt	r20,zero,12528 <___vfprintf_internal_r+0x1cdc>
   11f94:	d8012f05 	stb	zero,1212(sp)
   11f98:	00801984 	movi	r2,102
   11f9c:	9080f226 	beq	r18,r2,12368 <___vfprintf_internal_r+0x1b1c>
   11fa0:	00801184 	movi	r2,70
   11fa4:	9080f026 	beq	r18,r2,12368 <___vfprintf_internal_r+0x1b1c>
   11fa8:	00801944 	movi	r2,101
   11fac:	90818d26 	beq	r18,r2,125e4 <___vfprintf_internal_r+0x1d98>
   11fb0:	00801144 	movi	r2,69
   11fb4:	90818b26 	beq	r18,r2,125e4 <___vfprintf_internal_r+0x1d98>
   11fb8:	e02f883a 	mov	r23,fp
   11fbc:	d8812404 	addi	r2,sp,1168
   11fc0:	d8800115 	stw	r2,4(sp)
   11fc4:	d8812304 	addi	r2,sp,1164
   11fc8:	d8800215 	stw	r2,8(sp)
   11fcc:	d8812204 	addi	r2,sp,1160
   11fd0:	ddc00015 	stw	r23,0(sp)
   11fd4:	d8800315 	stw	r2,12(sp)
   11fd8:	8809883a 	mov	r4,r17
   11fdc:	b00b883a 	mov	r5,r22
   11fe0:	a00d883a 	mov	r6,r20
   11fe4:	01c00084 	movi	r7,2
   11fe8:	da413c15 	stw	r9,1264(sp)
   11fec:	0012a9c0 	call	12a9c <_dtoa_r>
   11ff0:	1027883a 	mov	r19,r2
   11ff4:	008019c4 	movi	r2,103
   11ff8:	da413c17 	ldw	r9,1264(sp)
   11ffc:	9081951e 	bne	r18,r2,12654 <___vfprintf_internal_r+0x1e08>
   12000:	8080004c 	andi	r2,r16,1
   12004:	10017926 	beq	r2,zero,125ec <___vfprintf_internal_r+0x1da0>
   12008:	00801184 	movi	r2,70
   1200c:	9dc7883a 	add	r3,r19,r23
   12010:	9080e626 	beq	r18,r2,123ac <___vfprintf_internal_r+0x1b60>
   12014:	b009883a 	mov	r4,r22
   12018:	a00b883a 	mov	r5,r20
   1201c:	000d883a 	mov	r6,zero
   12020:	000f883a 	mov	r7,zero
   12024:	d8c13b15 	stw	r3,1260(sp)
   12028:	da413c15 	stw	r9,1264(sp)
   1202c:	00191540 	call	19154 <__eqdf2>
   12030:	d8c13b17 	ldw	r3,1260(sp)
   12034:	da413c17 	ldw	r9,1264(sp)
   12038:	10000726 	beq	r2,zero,12058 <___vfprintf_internal_r+0x180c>
   1203c:	d8812217 	ldw	r2,1160(sp)
   12040:	10c18a2e 	bgeu	r2,r3,1266c <___vfprintf_internal_r+0x1e20>
   12044:	01000c04 	movi	r4,48
   12048:	11000005 	stb	r4,0(r2)
   1204c:	10800044 	addi	r2,r2,1
   12050:	d8812215 	stw	r2,1160(sp)
   12054:	10fffc1e 	bne	r2,r3,12048 <___vfprintf_internal_r+0x17fc>
   12058:	1cc7c83a 	sub	r3,r3,r19
   1205c:	d8c13215 	stw	r3,1224(sp)
   12060:	008019c4 	movi	r2,103
   12064:	9080fa26 	beq	r18,r2,12450 <___vfprintf_internal_r+0x1c04>
   12068:	008011c4 	movi	r2,71
   1206c:	9080f826 	beq	r18,r2,12450 <___vfprintf_internal_r+0x1c04>
   12070:	00801984 	movi	r2,102
   12074:	90818e1e 	bne	r18,r2,126b0 <___vfprintf_internal_r+0x1e64>
   12078:	d8812417 	ldw	r2,1168(sp)
   1207c:	d8812b15 	stw	r2,1196(sp)
   12080:	00817c0e 	bge	zero,r2,12674 <___vfprintf_internal_r+0x1e28>
   12084:	e000021e 	bne	fp,zero,12090 <___vfprintf_internal_r+0x1844>
   12088:	8400004c 	andi	r16,r16,1
   1208c:	80000426 	beq	r16,zero,120a0 <___vfprintf_internal_r+0x1854>
   12090:	d8812b17 	ldw	r2,1196(sp)
   12094:	e2000044 	addi	r8,fp,1
   12098:	1205883a 	add	r2,r2,r8
   1209c:	d8812b15 	stw	r2,1196(sp)
   120a0:	d8812815 	stw	r2,1184(sp)
   120a4:	10010b16 	blt	r2,zero,124d4 <___vfprintf_internal_r+0x1c88>
   120a8:	ddc12f07 	ldb	r23,1212(sp)
   120ac:	b800e426 	beq	r23,zero,12440 <___vfprintf_internal_r+0x1bf4>
   120b0:	00800b44 	movi	r2,45
   120b4:	d8812585 	stb	r2,1174(sp)
   120b8:	dc012a17 	ldw	r16,1192(sp)
   120bc:	d8013115 	stw	zero,1220(sp)
   120c0:	003b7306 	br	10e90 <___vfprintf_internal_r+0x644>
   120c4:	d8812b17 	ldw	r2,1196(sp)
   120c8:	d8812815 	stw	r2,1184(sp)
   120cc:	10005716 	blt	r2,zero,1222c <___vfprintf_internal_r+0x19e0>
   120d0:	d8812583 	ldbu	r2,1174(sp)
   120d4:	ddc12d15 	stw	r23,1204(sp)
   120d8:	d8013115 	stw	zero,1220(sp)
   120dc:	003b6806 	br	10e80 <___vfprintf_internal_r+0x634>
   120e0:	d8c12d17 	ldw	r3,1204(sp)
   120e4:	1dc00017 	ldw	r23,0(r3)
   120e8:	18c00104 	addi	r3,r3,4
   120ec:	d8c12d15 	stw	r3,1204(sp)
   120f0:	b82dd7fa 	srai	r22,r23,31
   120f4:	b005883a 	mov	r2,r22
   120f8:	003b4406 	br	10e0c <___vfprintf_internal_r+0x5c0>
   120fc:	d9012d17 	ldw	r4,1204(sp)
   12100:	002d883a 	mov	r22,zero
   12104:	00c00044 	movi	r3,1
   12108:	25c00017 	ldw	r23,0(r4)
   1210c:	21000104 	addi	r4,r4,4
   12110:	d9012d15 	stw	r4,1204(sp)
   12114:	b805883a 	mov	r2,r23
   12118:	d8012585 	stb	zero,1174(sp)
   1211c:	003b4406 	br	10e30 <___vfprintf_internal_r+0x5e4>
   12120:	d9012d17 	ldw	r4,1204(sp)
   12124:	002d883a 	mov	r22,zero
   12128:	25c00017 	ldw	r23,0(r4)
   1212c:	21000104 	addi	r4,r4,4
   12130:	d9012d15 	stw	r4,1204(sp)
   12134:	003bab06 	br	10fe4 <___vfprintf_internal_r+0x798>
   12138:	d8812d17 	ldw	r2,1204(sp)
   1213c:	002d883a 	mov	r22,zero
   12140:	0007883a 	mov	r3,zero
   12144:	15c00017 	ldw	r23,0(r2)
   12148:	10800104 	addi	r2,r2,4
   1214c:	d8812d15 	stw	r2,1204(sp)
   12150:	d8012585 	stb	zero,1174(sp)
   12154:	b805883a 	mov	r2,r23
   12158:	003b3506 	br	10e30 <___vfprintf_internal_r+0x5e4>
   1215c:	00ffffc4 	movi	r3,-1
   12160:	b82b883a 	mov	r21,r23
   12164:	003a1606 	br	109c0 <___vfprintf_internal_r+0x174>
   12168:	008011c4 	movi	r2,71
   1216c:	1480b116 	blt	r2,r18,12434 <___vfprintf_internal_r+0x1be8>
   12170:	04c000f4 	movhi	r19,3
   12174:	9ce04b04 	addi	r19,r19,-32468
   12178:	00c000c4 	movi	r3,3
   1217c:	00bfdfc4 	movi	r2,-129
   12180:	80a0703a 	and	r16,r16,r2
   12184:	d8c12815 	stw	r3,1184(sp)
   12188:	d8812583 	ldbu	r2,1174(sp)
   1218c:	d8c12b15 	stw	r3,1196(sp)
   12190:	d8013115 	stw	zero,1220(sp)
   12194:	003b3a06 	br	10e80 <___vfprintf_internal_r+0x634>
   12198:	d9412917 	ldw	r5,1188(sp)
   1219c:	8809883a 	mov	r4,r17
   121a0:	d9811b04 	addi	r6,sp,1132
   121a4:	00108180 	call	10818 <__sprint_r>
   121a8:	103aee1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   121ac:	dc812417 	ldw	r18,1168(sp)
   121b0:	da011d17 	ldw	r8,1140(sp)
   121b4:	da400404 	addi	r9,sp,16
   121b8:	003f3c06 	br	11eac <___vfprintf_internal_r+0x1660>
   121bc:	ad400044 	addi	r21,r21,1
   121c0:	84000814 	ori	r16,r16,32
   121c4:	14800047 	ldb	r18,1(r2)
   121c8:	0039fc06 	br	109bc <___vfprintf_internal_r+0x170>
   121cc:	d9412917 	ldw	r5,1188(sp)
   121d0:	8809883a 	mov	r4,r17
   121d4:	d9811b04 	addi	r6,sp,1132
   121d8:	00108180 	call	10818 <__sprint_r>
   121dc:	103ae11e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   121e0:	da011d17 	ldw	r8,1140(sp)
   121e4:	da400404 	addi	r9,sp,16
   121e8:	003d2b06 	br	11698 <___vfprintf_internal_r+0xe4c>
   121ec:	4d000015 	stw	r20,0(r9)
   121f0:	4c800115 	stw	r18,4(r9)
   121f4:	4491883a 	add	r8,r8,r18
   121f8:	18c00044 	addi	r3,r3,1
   121fc:	da011d15 	stw	r8,1140(sp)
   12200:	d8c11c15 	stw	r3,1136(sp)
   12204:	008001c4 	movi	r2,7
   12208:	10fcbd16 	blt	r2,r3,11500 <___vfprintf_internal_r+0xcb4>
   1220c:	4a400204 	addi	r9,r9,8
   12210:	003cc206 	br	1151c <___vfprintf_internal_r+0xcd0>
   12214:	da413c15 	stw	r9,1264(sp)
   12218:	001078c0 	call	1078c <strlen>
   1221c:	d8812b15 	stw	r2,1196(sp)
   12220:	d8812815 	stw	r2,1184(sp)
   12224:	da413c17 	ldw	r9,1264(sp)
   12228:	103fa90e 	bge	r2,zero,120d0 <___vfprintf_internal_r+0x1884>
   1222c:	d8012815 	stw	zero,1184(sp)
   12230:	003fa706 	br	120d0 <___vfprintf_internal_r+0x1884>
   12234:	d9412917 	ldw	r5,1188(sp)
   12238:	8809883a 	mov	r4,r17
   1223c:	d9811b04 	addi	r6,sp,1132
   12240:	00108180 	call	10818 <__sprint_r>
   12244:	103ac71e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   12248:	da011d17 	ldw	r8,1140(sp)
   1224c:	d8c11c17 	ldw	r3,1136(sp)
   12250:	da400404 	addi	r9,sp,16
   12254:	d8813217 	ldw	r2,1224(sp)
   12258:	4cc00015 	stw	r19,0(r9)
   1225c:	48800115 	stw	r2,4(r9)
   12260:	4091883a 	add	r8,r8,r2
   12264:	003c6206 	br	113f0 <___vfprintf_internal_r+0xba4>
   12268:	00800b44 	movi	r2,45
   1226c:	d8812585 	stb	r2,1174(sp)
   12270:	003b2406 	br	10f04 <___vfprintf_internal_r+0x6b8>
   12274:	4d000015 	stw	r20,0(r9)
   12278:	4c800115 	stw	r18,4(r9)
   1227c:	4491883a 	add	r8,r8,r18
   12280:	18c00044 	addi	r3,r3,1
   12284:	da011d15 	stw	r8,1140(sp)
   12288:	d8c11c15 	stw	r3,1136(sp)
   1228c:	008001c4 	movi	r2,7
   12290:	10ffe816 	blt	r2,r3,12234 <___vfprintf_internal_r+0x19e8>
   12294:	4a400204 	addi	r9,r9,8
   12298:	003fee06 	br	12254 <___vfprintf_internal_r+0x1a08>
   1229c:	d8c12b15 	stw	r3,1196(sp)
   122a0:	00800184 	movi	r2,6
   122a4:	10c0062e 	bgeu	r2,r3,122c0 <___vfprintf_internal_r+0x1a74>
   122a8:	d8812b15 	stw	r2,1196(sp)
   122ac:	d8812815 	stw	r2,1184(sp)
   122b0:	ddc12d15 	stw	r23,1204(sp)
   122b4:	04c000f4 	movhi	r19,3
   122b8:	9ce05704 	addi	r19,r19,-32420
   122bc:	0039ca06 	br	109e8 <___vfprintf_internal_r+0x19c>
   122c0:	d8812b17 	ldw	r2,1196(sp)
   122c4:	d8812815 	stw	r2,1184(sp)
   122c8:	103ff90e 	bge	r2,zero,122b0 <___vfprintf_internal_r+0x1a64>
   122cc:	d8012815 	stw	zero,1184(sp)
   122d0:	003ff706 	br	122b0 <___vfprintf_internal_r+0x1a64>
   122d4:	00800244 	movi	r2,9
   122d8:	15fdaa36 	bltu	r2,r23,11984 <___vfprintf_internal_r+0x1138>
   122dc:	dd010e04 	addi	r20,sp,1080
   122e0:	003dc606 	br	119fc <___vfprintf_internal_r+0x11b0>
   122e4:	d9412917 	ldw	r5,1188(sp)
   122e8:	8809883a 	mov	r4,r17
   122ec:	d9811b04 	addi	r6,sp,1132
   122f0:	00108180 	call	10818 <__sprint_r>
   122f4:	103a9b1e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   122f8:	dc812417 	ldw	r18,1168(sp)
   122fc:	da400404 	addi	r9,sp,16
   12300:	003ecd06 	br	11e38 <___vfprintf_internal_r+0x15ec>
   12304:	d9412917 	ldw	r5,1188(sp)
   12308:	8809883a 	mov	r4,r17
   1230c:	d9811b04 	addi	r6,sp,1132
   12310:	00108180 	call	10818 <__sprint_r>
   12314:	103a931e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   12318:	dc812417 	ldw	r18,1168(sp)
   1231c:	da011d17 	ldw	r8,1140(sp)
   12320:	d8c11c17 	ldw	r3,1136(sp)
   12324:	da400404 	addi	r9,sp,16
   12328:	003eb706 	br	11e08 <___vfprintf_internal_r+0x15bc>
   1232c:	d9412917 	ldw	r5,1188(sp)
   12330:	8809883a 	mov	r4,r17
   12334:	d9811b04 	addi	r6,sp,1132
   12338:	00108180 	call	10818 <__sprint_r>
   1233c:	103a891e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   12340:	dc812417 	ldw	r18,1168(sp)
   12344:	da011d17 	ldw	r8,1140(sp)
   12348:	da400404 	addi	r9,sp,16
   1234c:	003dc206 	br	11a58 <___vfprintf_internal_r+0x120c>
   12350:	df012815 	stw	fp,1184(sp)
   12354:	d8812583 	ldbu	r2,1174(sp)
   12358:	df012b15 	stw	fp,1196(sp)
   1235c:	ddc12d15 	stw	r23,1204(sp)
   12360:	d8013115 	stw	zero,1220(sp)
   12364:	003ac606 	br	10e80 <___vfprintf_internal_r+0x634>
   12368:	d8812404 	addi	r2,sp,1168
   1236c:	d8800115 	stw	r2,4(sp)
   12370:	d8812304 	addi	r2,sp,1164
   12374:	d8800215 	stw	r2,8(sp)
   12378:	d8812204 	addi	r2,sp,1160
   1237c:	df000015 	stw	fp,0(sp)
   12380:	d8800315 	stw	r2,12(sp)
   12384:	8809883a 	mov	r4,r17
   12388:	b00b883a 	mov	r5,r22
   1238c:	a00d883a 	mov	r6,r20
   12390:	01c000c4 	movi	r7,3
   12394:	da413c15 	stw	r9,1264(sp)
   12398:	0012a9c0 	call	12a9c <_dtoa_r>
   1239c:	da413c17 	ldw	r9,1264(sp)
   123a0:	1027883a 	mov	r19,r2
   123a4:	1707883a 	add	r3,r2,fp
   123a8:	e02f883a 	mov	r23,fp
   123ac:	99000007 	ldb	r4,0(r19)
   123b0:	00800c04 	movi	r2,48
   123b4:	20800326 	beq	r4,r2,123c4 <___vfprintf_internal_r+0x1b78>
   123b8:	da812417 	ldw	r10,1168(sp)
   123bc:	1a87883a 	add	r3,r3,r10
   123c0:	003f1406 	br	12014 <___vfprintf_internal_r+0x17c8>
   123c4:	b009883a 	mov	r4,r22
   123c8:	a00b883a 	mov	r5,r20
   123cc:	000d883a 	mov	r6,zero
   123d0:	000f883a 	mov	r7,zero
   123d4:	d8c13b15 	stw	r3,1260(sp)
   123d8:	da413c15 	stw	r9,1264(sp)
   123dc:	00191b00 	call	191b0 <__nedf2>
   123e0:	d8c13b17 	ldw	r3,1260(sp)
   123e4:	da413c17 	ldw	r9,1264(sp)
   123e8:	103ff326 	beq	r2,zero,123b8 <___vfprintf_internal_r+0x1b6c>
   123ec:	00800044 	movi	r2,1
   123f0:	15d5c83a 	sub	r10,r2,r23
   123f4:	da812415 	stw	r10,1168(sp)
   123f8:	1a87883a 	add	r3,r3,r10
   123fc:	003f0506 	br	12014 <___vfprintf_internal_r+0x17c8>
   12400:	d9412917 	ldw	r5,1188(sp)
   12404:	8809883a 	mov	r4,r17
   12408:	d9811b04 	addi	r6,sp,1132
   1240c:	00108180 	call	10818 <__sprint_r>
   12410:	103a541e 	bne	r2,zero,10d64 <___vfprintf_internal_r+0x518>
   12414:	dc812417 	ldw	r18,1168(sp)
   12418:	da011d17 	ldw	r8,1140(sp)
   1241c:	d8c11c17 	ldw	r3,1136(sp)
   12420:	da400404 	addi	r9,sp,16
   12424:	003eb206 	br	11ef0 <___vfprintf_internal_r+0x16a4>
   12428:	b82b883a 	mov	r21,r23
   1242c:	0007883a 	mov	r3,zero
   12430:	00396306 	br	109c0 <___vfprintf_internal_r+0x174>
   12434:	04c000f4 	movhi	r19,3
   12438:	9ce04c04 	addi	r19,r19,-32464
   1243c:	003f4e06 	br	12178 <___vfprintf_internal_r+0x192c>
   12440:	d8812583 	ldbu	r2,1174(sp)
   12444:	dc012a17 	ldw	r16,1192(sp)
   12448:	d8013115 	stw	zero,1220(sp)
   1244c:	003a8c06 	br	10e80 <___vfprintf_internal_r+0x634>
   12450:	d8812417 	ldw	r2,1168(sp)
   12454:	d8812b15 	stw	r2,1196(sp)
   12458:	1029883a 	mov	r20,r2
   1245c:	00bfff44 	movi	r2,-3
   12460:	a0800116 	blt	r20,r2,12468 <___vfprintf_internal_r+0x1c1c>
   12464:	e5001d0e 	bge	fp,r20,124dc <___vfprintf_internal_r+0x1c90>
   12468:	94bfff84 	addi	r18,r18,-2
   1246c:	a53fffc4 	addi	r20,r20,-1
   12470:	dd012415 	stw	r20,1168(sp)
   12474:	dc811fc5 	stb	r18,1151(sp)
   12478:	a0007216 	blt	r20,zero,12644 <___vfprintf_internal_r+0x1df8>
   1247c:	00800ac4 	movi	r2,43
   12480:	d8812005 	stb	r2,1152(sp)
   12484:	00800244 	movi	r2,9
   12488:	15003516 	blt	r2,r20,12560 <___vfprintf_internal_r+0x1d14>
   1248c:	00800c04 	movi	r2,48
   12490:	a5000c04 	addi	r20,r20,48
   12494:	d8812045 	stb	r2,1153(sp)
   12498:	dd012085 	stb	r20,1154(sp)
   1249c:	d8c120c4 	addi	r3,sp,1155
   124a0:	d8811fc4 	addi	r2,sp,1151
   124a4:	1885c83a 	sub	r2,r3,r2
   124a8:	d8c13217 	ldw	r3,1224(sp)
   124ac:	d8813515 	stw	r2,1236(sp)
   124b0:	1885883a 	add	r2,r3,r2
   124b4:	d8812b15 	stw	r2,1196(sp)
   124b8:	00800044 	movi	r2,1
   124bc:	10c0580e 	bge	r2,r3,12620 <___vfprintf_internal_r+0x1dd4>
   124c0:	d8812b17 	ldw	r2,1196(sp)
   124c4:	10800044 	addi	r2,r2,1
   124c8:	d8812b15 	stw	r2,1196(sp)
   124cc:	d8812815 	stw	r2,1184(sp)
   124d0:	103ef50e 	bge	r2,zero,120a8 <___vfprintf_internal_r+0x185c>
   124d4:	d8012815 	stw	zero,1184(sp)
   124d8:	003ef306 	br	120a8 <___vfprintf_internal_r+0x185c>
   124dc:	d8812b17 	ldw	r2,1196(sp)
   124e0:	d8c13217 	ldw	r3,1224(sp)
   124e4:	10c01416 	blt	r2,r3,12538 <___vfprintf_internal_r+0x1cec>
   124e8:	8400004c 	andi	r16,r16,1
   124ec:	80000326 	beq	r16,zero,124fc <___vfprintf_internal_r+0x1cb0>
   124f0:	d8812b17 	ldw	r2,1196(sp)
   124f4:	10800044 	addi	r2,r2,1
   124f8:	d8812b15 	stw	r2,1196(sp)
   124fc:	d8812815 	stw	r2,1184(sp)
   12500:	10001416 	blt	r2,zero,12554 <___vfprintf_internal_r+0x1d08>
   12504:	048019c4 	movi	r18,103
   12508:	003ee706 	br	120a8 <___vfprintf_internal_r+0x185c>
   1250c:	d8012815 	stw	zero,1184(sp)
   12510:	003b1a06 	br	1117c <___vfprintf_internal_r+0x930>
   12514:	e03e9c1e 	bne	fp,zero,11f88 <___vfprintf_internal_r+0x173c>
   12518:	07000044 	movi	fp,1
   1251c:	003e9a06 	br	11f88 <___vfprintf_internal_r+0x173c>
   12520:	07000184 	movi	fp,6
   12524:	003e9806 	br	11f88 <___vfprintf_internal_r+0x173c>
   12528:	00c00b44 	movi	r3,45
   1252c:	a520003c 	xorhi	r20,r20,32768
   12530:	d8c12f05 	stb	r3,1212(sp)
   12534:	003e9806 	br	11f98 <___vfprintf_internal_r+0x174c>
   12538:	05003f0e 	bge	zero,r20,12638 <___vfprintf_internal_r+0x1dec>
   1253c:	05000044 	movi	r20,1
   12540:	d8c13217 	ldw	r3,1224(sp)
   12544:	a0e9883a 	add	r20,r20,r3
   12548:	dd012b15 	stw	r20,1196(sp)
   1254c:	dd012815 	stw	r20,1184(sp)
   12550:	a03fec0e 	bge	r20,zero,12504 <___vfprintf_internal_r+0x1cb8>
   12554:	d8012815 	stw	zero,1184(sp)
   12558:	048019c4 	movi	r18,103
   1255c:	003ed206 	br	120a8 <___vfprintf_internal_r+0x185c>
   12560:	d8c11f84 	addi	r3,sp,1150
   12564:	102f883a 	mov	r23,r2
   12568:	4839883a 	mov	fp,r9
   1256c:	a009883a 	mov	r4,r20
   12570:	01400284 	movi	r5,10
   12574:	182d883a 	mov	r22,r3
   12578:	00105f80 	call	105f8 <__modsi3>
   1257c:	10800c04 	addi	r2,r2,48
   12580:	a009883a 	mov	r4,r20
   12584:	b0800005 	stb	r2,0(r22)
   12588:	01400284 	movi	r5,10
   1258c:	00105a80 	call	105a8 <__divsi3>
   12590:	1029883a 	mov	r20,r2
   12594:	b0ffffc4 	addi	r3,r22,-1
   12598:	b8bff416 	blt	r23,r2,1256c <___vfprintf_internal_r+0x1d20>
   1259c:	11400c04 	addi	r5,r2,48
   125a0:	b17fffc5 	stb	r5,-1(r22)
   125a4:	d8811fc4 	addi	r2,sp,1151
   125a8:	e013883a 	mov	r9,fp
   125ac:	18803e2e 	bgeu	r3,r2,126a8 <___vfprintf_internal_r+0x1e5c>
   125b0:	b007883a 	mov	r3,r22
   125b4:	d9012044 	addi	r4,sp,1153
   125b8:	00000206 	br	125c4 <___vfprintf_internal_r+0x1d78>
   125bc:	19400003 	ldbu	r5,0(r3)
   125c0:	18c00044 	addi	r3,r3,1
   125c4:	21400005 	stb	r5,0(r4)
   125c8:	21000044 	addi	r4,r4,1
   125cc:	10fffb1e 	bne	r2,r3,125bc <___vfprintf_internal_r+0x1d70>
   125d0:	d8c12004 	addi	r3,sp,1152
   125d4:	1d87c83a 	sub	r3,r3,r22
   125d8:	d9012044 	addi	r4,sp,1153
   125dc:	20c7883a 	add	r3,r4,r3
   125e0:	003fb006 	br	124a4 <___vfprintf_internal_r+0x1c58>
   125e4:	e5c00044 	addi	r23,fp,1
   125e8:	003e7406 	br	11fbc <___vfprintf_internal_r+0x1770>
   125ec:	d8c12217 	ldw	r3,1160(sp)
   125f0:	003e9906 	br	12058 <___vfprintf_internal_r+0x180c>
   125f4:	d9012d17 	ldw	r4,1204(sp)
   125f8:	ac800043 	ldbu	r18,1(r21)
   125fc:	b82b883a 	mov	r21,r23
   12600:	20c00017 	ldw	r3,0(r4)
   12604:	20800104 	addi	r2,r4,4
   12608:	d8812d15 	stw	r2,1204(sp)
   1260c:	18002116 	blt	r3,zero,12694 <___vfprintf_internal_r+0x1e48>
   12610:	94803fcc 	andi	r18,r18,255
   12614:	9480201c 	xori	r18,r18,128
   12618:	94bfe004 	addi	r18,r18,-128
   1261c:	0038e706 	br	109bc <___vfprintf_internal_r+0x170>
   12620:	80a0703a 	and	r16,r16,r2
   12624:	803fa61e 	bne	r16,zero,124c0 <___vfprintf_internal_r+0x1c74>
   12628:	d8812b17 	ldw	r2,1196(sp)
   1262c:	d8812815 	stw	r2,1184(sp)
   12630:	103e9d0e 	bge	r2,zero,120a8 <___vfprintf_internal_r+0x185c>
   12634:	003fa706 	br	124d4 <___vfprintf_internal_r+0x1c88>
   12638:	00800084 	movi	r2,2
   1263c:	1529c83a 	sub	r20,r2,r20
   12640:	003fbf06 	br	12540 <___vfprintf_internal_r+0x1cf4>
   12644:	00800b44 	movi	r2,45
   12648:	0529c83a 	sub	r20,zero,r20
   1264c:	d8812005 	stb	r2,1152(sp)
   12650:	003f8c06 	br	12484 <___vfprintf_internal_r+0x1c38>
   12654:	008011c4 	movi	r2,71
   12658:	90be6926 	beq	r18,r2,12000 <___vfprintf_internal_r+0x17b4>
   1265c:	003e6a06 	br	12008 <___vfprintf_internal_r+0x17bc>
   12660:	00bfffc4 	movi	r2,-1
   12664:	d8812c15 	stw	r2,1200(sp)
   12668:	0039ad06 	br	10d20 <___vfprintf_internal_r+0x4d4>
   1266c:	1007883a 	mov	r3,r2
   12670:	003e7906 	br	12058 <___vfprintf_internal_r+0x180c>
   12674:	e000021e 	bne	fp,zero,12680 <___vfprintf_internal_r+0x1e34>
   12678:	8400004c 	andi	r16,r16,1
   1267c:	80000e26 	beq	r16,zero,126b8 <___vfprintf_internal_r+0x1e6c>
   12680:	e7000084 	addi	fp,fp,2
   12684:	df012b15 	stw	fp,1196(sp)
   12688:	df012815 	stw	fp,1184(sp)
   1268c:	e03e860e 	bge	fp,zero,120a8 <___vfprintf_internal_r+0x185c>
   12690:	003f9006 	br	124d4 <___vfprintf_internal_r+0x1c88>
   12694:	94803fcc 	andi	r18,r18,255
   12698:	9480201c 	xori	r18,r18,128
   1269c:	00ffffc4 	movi	r3,-1
   126a0:	94bfe004 	addi	r18,r18,-128
   126a4:	0038c506 	br	109bc <___vfprintf_internal_r+0x170>
   126a8:	d8c12044 	addi	r3,sp,1153
   126ac:	003f7d06 	br	124a4 <___vfprintf_internal_r+0x1c58>
   126b0:	dd012417 	ldw	r20,1168(sp)
   126b4:	003f6d06 	br	1246c <___vfprintf_internal_r+0x1c20>
   126b8:	00c00044 	movi	r3,1
   126bc:	d8c12815 	stw	r3,1184(sp)
   126c0:	d8c12b15 	stw	r3,1196(sp)
   126c4:	003e7806 	br	120a8 <___vfprintf_internal_r+0x185c>

000126c8 <__vfprintf_internal>:
   126c8:	008000f4 	movhi	r2,3
   126cc:	10a79a04 	addi	r2,r2,-24984
   126d0:	2007883a 	mov	r3,r4
   126d4:	11000017 	ldw	r4,0(r2)
   126d8:	2805883a 	mov	r2,r5
   126dc:	300f883a 	mov	r7,r6
   126e0:	180b883a 	mov	r5,r3
   126e4:	100d883a 	mov	r6,r2
   126e8:	001084c1 	jmpi	1084c <___vfprintf_internal_r>

000126ec <__swsetup_r>:
   126ec:	008000f4 	movhi	r2,3
   126f0:	10a79a04 	addi	r2,r2,-24984
   126f4:	10800017 	ldw	r2,0(r2)
   126f8:	defffd04 	addi	sp,sp,-12
   126fc:	dc400115 	stw	r17,4(sp)
   12700:	dc000015 	stw	r16,0(sp)
   12704:	dfc00215 	stw	ra,8(sp)
   12708:	2023883a 	mov	r17,r4
   1270c:	2821883a 	mov	r16,r5
   12710:	10000226 	beq	r2,zero,1271c <__swsetup_r+0x30>
   12714:	10c00e17 	ldw	r3,56(r2)
   12718:	18003d26 	beq	r3,zero,12810 <__swsetup_r+0x124>
   1271c:	8080030b 	ldhu	r2,12(r16)
   12720:	10c0020c 	andi	r3,r2,8
   12724:	18ffffcc 	andi	r3,r3,65535
   12728:	18e0001c 	xori	r3,r3,32768
   1272c:	18e00004 	addi	r3,r3,-32768
   12730:	18001226 	beq	r3,zero,1277c <__swsetup_r+0x90>
   12734:	80c00417 	ldw	r3,16(r16)
   12738:	18001f26 	beq	r3,zero,127b8 <__swsetup_r+0xcc>
   1273c:	1100004c 	andi	r4,r2,1
   12740:	2000261e 	bne	r4,zero,127dc <__swsetup_r+0xf0>
   12744:	1080008c 	andi	r2,r2,2
   12748:	10bfffcc 	andi	r2,r2,65535
   1274c:	10a0001c 	xori	r2,r2,32768
   12750:	10a00004 	addi	r2,r2,-32768
   12754:	1000311e 	bne	r2,zero,1281c <__swsetup_r+0x130>
   12758:	80800517 	ldw	r2,20(r16)
   1275c:	80800215 	stw	r2,8(r16)
   12760:	18002326 	beq	r3,zero,127f0 <__swsetup_r+0x104>
   12764:	0005883a 	mov	r2,zero
   12768:	dfc00217 	ldw	ra,8(sp)
   1276c:	dc400117 	ldw	r17,4(sp)
   12770:	dc000017 	ldw	r16,0(sp)
   12774:	dec00304 	addi	sp,sp,12
   12778:	f800283a 	ret
   1277c:	10c0040c 	andi	r3,r2,16
   12780:	18ffffcc 	andi	r3,r3,65535
   12784:	18e0001c 	xori	r3,r3,32768
   12788:	18e00004 	addi	r3,r3,-32768
   1278c:	18001e26 	beq	r3,zero,12808 <__swsetup_r+0x11c>
   12790:	10c0010c 	andi	r3,r2,4
   12794:	18ffffcc 	andi	r3,r3,65535
   12798:	18e0001c 	xori	r3,r3,32768
   1279c:	18e00004 	addi	r3,r3,-32768
   127a0:	1800211e 	bne	r3,zero,12828 <__swsetup_r+0x13c>
   127a4:	80c00417 	ldw	r3,16(r16)
   127a8:	11400214 	ori	r5,r2,8
   127ac:	8140030d 	sth	r5,12(r16)
   127b0:	2805883a 	mov	r2,r5
   127b4:	183fe11e 	bne	r3,zero,1273c <__swsetup_r+0x50>
   127b8:	1140a00c 	andi	r5,r2,640
   127bc:	01008004 	movi	r4,512
   127c0:	293fde26 	beq	r5,r4,1273c <__swsetup_r+0x50>
   127c4:	8809883a 	mov	r4,r17
   127c8:	800b883a 	mov	r5,r16
   127cc:	00150e80 	call	150e8 <__smakebuf_r>
   127d0:	8080030b 	ldhu	r2,12(r16)
   127d4:	80c00417 	ldw	r3,16(r16)
   127d8:	003fd806 	br	1273c <__swsetup_r+0x50>
   127dc:	80800517 	ldw	r2,20(r16)
   127e0:	80000215 	stw	zero,8(r16)
   127e4:	0085c83a 	sub	r2,zero,r2
   127e8:	80800615 	stw	r2,24(r16)
   127ec:	183fdd1e 	bne	r3,zero,12764 <__swsetup_r+0x78>
   127f0:	8080030b 	ldhu	r2,12(r16)
   127f4:	1080200c 	andi	r2,r2,128
   127f8:	10bfffcc 	andi	r2,r2,65535
   127fc:	10a0001c 	xori	r2,r2,32768
   12800:	10a00004 	addi	r2,r2,-32768
   12804:	103fd826 	beq	r2,zero,12768 <__swsetup_r+0x7c>
   12808:	00bfffc4 	movi	r2,-1
   1280c:	003fd606 	br	12768 <__swsetup_r+0x7c>
   12810:	1009883a 	mov	r4,r2
   12814:	00143740 	call	14374 <__sinit>
   12818:	003fc006 	br	1271c <__swsetup_r+0x30>
   1281c:	0005883a 	mov	r2,zero
   12820:	80800215 	stw	r2,8(r16)
   12824:	003fce06 	br	12760 <__swsetup_r+0x74>
   12828:	81400c17 	ldw	r5,48(r16)
   1282c:	28000626 	beq	r5,zero,12848 <__swsetup_r+0x15c>
   12830:	80c01004 	addi	r3,r16,64
   12834:	28c00326 	beq	r5,r3,12844 <__swsetup_r+0x158>
   12838:	8809883a 	mov	r4,r17
   1283c:	00146f80 	call	146f8 <_free_r>
   12840:	8080030b 	ldhu	r2,12(r16)
   12844:	80000c15 	stw	zero,48(r16)
   12848:	80c00417 	ldw	r3,16(r16)
   1284c:	013ff6c4 	movi	r4,-37
   12850:	2084703a 	and	r2,r4,r2
   12854:	80000115 	stw	zero,4(r16)
   12858:	80c00015 	stw	r3,0(r16)
   1285c:	003fd206 	br	127a8 <__swsetup_r+0xbc>

00012860 <quorem>:
   12860:	defff204 	addi	sp,sp,-56
   12864:	dd000815 	stw	r20,32(sp)
   12868:	20800417 	ldw	r2,16(r4)
   1286c:	2d000417 	ldw	r20,16(r5)
   12870:	dcc00715 	stw	r19,28(sp)
   12874:	dfc00d15 	stw	ra,52(sp)
   12878:	df000c15 	stw	fp,48(sp)
   1287c:	ddc00b15 	stw	r23,44(sp)
   12880:	dd800a15 	stw	r22,40(sp)
   12884:	dd400915 	stw	r21,36(sp)
   12888:	dc800615 	stw	r18,24(sp)
   1288c:	dc400515 	stw	r17,20(sp)
   12890:	dc000415 	stw	r16,16(sp)
   12894:	d9400015 	stw	r5,0(sp)
   12898:	2027883a 	mov	r19,r4
   1289c:	15007d16 	blt	r2,r20,12a94 <quorem+0x234>
   128a0:	a0800104 	addi	r2,r20,4
   128a4:	1085883a 	add	r2,r2,r2
   128a8:	1085883a 	add	r2,r2,r2
   128ac:	28ad883a 	add	r22,r5,r2
   128b0:	2085883a 	add	r2,r4,r2
   128b4:	10800017 	ldw	r2,0(r2)
   128b8:	b1400017 	ldw	r5,0(r22)
   128bc:	a53fffc4 	addi	r20,r20,-1
   128c0:	1009883a 	mov	r4,r2
   128c4:	29400044 	addi	r5,r5,1
   128c8:	d8800115 	stw	r2,4(sp)
   128cc:	00106540 	call	10654 <__udivsi3>
   128d0:	1025883a 	mov	r18,r2
   128d4:	d8800017 	ldw	r2,0(sp)
   128d8:	9f000504 	addi	fp,r19,20
   128dc:	14000504 	addi	r16,r2,20
   128e0:	90003626 	beq	r18,zero,129bc <quorem+0x15c>
   128e4:	802b883a 	mov	r21,r16
   128e8:	e023883a 	mov	r17,fp
   128ec:	0007883a 	mov	r3,zero
   128f0:	002f883a 	mov	r23,zero
   128f4:	a9800017 	ldw	r6,0(r21)
   128f8:	900b883a 	mov	r5,r18
   128fc:	d8c00315 	stw	r3,12(sp)
   12900:	313fffcc 	andi	r4,r6,65535
   12904:	d9800215 	stw	r6,8(sp)
   12908:	00106640 	call	10664 <__mulsi3>
   1290c:	d9800217 	ldw	r6,8(sp)
   12910:	d8c00317 	ldw	r3,12(sp)
   12914:	900b883a 	mov	r5,r18
   12918:	3008d43a 	srli	r4,r6,16
   1291c:	1887883a 	add	r3,r3,r2
   12920:	d8c00315 	stw	r3,12(sp)
   12924:	00106640 	call	10664 <__mulsi3>
   12928:	89400017 	ldw	r5,0(r17)
   1292c:	d8c00317 	ldw	r3,12(sp)
   12930:	ad400104 	addi	r21,r21,4
   12934:	293fffcc 	andi	r4,r5,65535
   12938:	1810d43a 	srli	r8,r3,16
   1293c:	25c9883a 	add	r4,r4,r23
   12940:	18ffffcc 	andi	r3,r3,65535
   12944:	20c9c83a 	sub	r4,r4,r3
   12948:	280cd43a 	srli	r6,r5,16
   1294c:	4085883a 	add	r2,r8,r2
   12950:	2007d43a 	srai	r3,r4,16
   12954:	117fffcc 	andi	r5,r2,65535
   12958:	314bc83a 	sub	r5,r6,r5
   1295c:	28cb883a 	add	r5,r5,r3
   12960:	8940008d 	sth	r5,2(r17)
   12964:	8900000d 	sth	r4,0(r17)
   12968:	1006d43a 	srli	r3,r2,16
   1296c:	282fd43a 	srai	r23,r5,16
   12970:	8c400104 	addi	r17,r17,4
   12974:	b57fdf2e 	bgeu	r22,r21,128f4 <quorem+0x94>
   12978:	d8c00117 	ldw	r3,4(sp)
   1297c:	18000f1e 	bne	r3,zero,129bc <quorem+0x15c>
   12980:	a0800144 	addi	r2,r20,5
   12984:	1085883a 	add	r2,r2,r2
   12988:	1085883a 	add	r2,r2,r2
   1298c:	9887883a 	add	r3,r19,r2
   12990:	18bfff04 	addi	r2,r3,-4
   12994:	e080082e 	bgeu	fp,r2,129b8 <quorem+0x158>
   12998:	18ffff17 	ldw	r3,-4(r3)
   1299c:	18000326 	beq	r3,zero,129ac <quorem+0x14c>
   129a0:	00000506 	br	129b8 <quorem+0x158>
   129a4:	10c00017 	ldw	r3,0(r2)
   129a8:	1800031e 	bne	r3,zero,129b8 <quorem+0x158>
   129ac:	10bfff04 	addi	r2,r2,-4
   129b0:	a53fffc4 	addi	r20,r20,-1
   129b4:	e0bffb36 	bltu	fp,r2,129a4 <quorem+0x144>
   129b8:	9d000415 	stw	r20,16(r19)
   129bc:	d9400017 	ldw	r5,0(sp)
   129c0:	9809883a 	mov	r4,r19
   129c4:	00168000 	call	16800 <__mcmp>
   129c8:	10002516 	blt	r2,zero,12a60 <quorem+0x200>
   129cc:	94800044 	addi	r18,r18,1
   129d0:	e007883a 	mov	r3,fp
   129d4:	000d883a 	mov	r6,zero
   129d8:	18800017 	ldw	r2,0(r3)
   129dc:	82000017 	ldw	r8,0(r16)
   129e0:	84000104 	addi	r16,r16,4
   129e4:	11ffffcc 	andi	r7,r2,65535
   129e8:	413fffcc 	andi	r4,r8,65535
   129ec:	398d883a 	add	r6,r7,r6
   129f0:	310fc83a 	sub	r7,r6,r4
   129f4:	4010d43a 	srli	r8,r8,16
   129f8:	100cd43a 	srli	r6,r2,16
   129fc:	3809d43a 	srai	r4,r7,16
   12a00:	19c0000d 	sth	r7,0(r3)
   12a04:	320dc83a 	sub	r6,r6,r8
   12a08:	310d883a 	add	r6,r6,r4
   12a0c:	1980008d 	sth	r6,2(r3)
   12a10:	300dd43a 	srai	r6,r6,16
   12a14:	18c00104 	addi	r3,r3,4
   12a18:	b43fef2e 	bgeu	r22,r16,129d8 <quorem+0x178>
   12a1c:	a0800144 	addi	r2,r20,5
   12a20:	1085883a 	add	r2,r2,r2
   12a24:	1085883a 	add	r2,r2,r2
   12a28:	9885883a 	add	r2,r19,r2
   12a2c:	10c00017 	ldw	r3,0(r2)
   12a30:	18000b1e 	bne	r3,zero,12a60 <quorem+0x200>
   12a34:	10ffff04 	addi	r3,r2,-4
   12a38:	e0c0082e 	bgeu	fp,r3,12a5c <quorem+0x1fc>
   12a3c:	10bfff17 	ldw	r2,-4(r2)
   12a40:	10000326 	beq	r2,zero,12a50 <quorem+0x1f0>
   12a44:	00000506 	br	12a5c <quorem+0x1fc>
   12a48:	18800017 	ldw	r2,0(r3)
   12a4c:	1000031e 	bne	r2,zero,12a5c <quorem+0x1fc>
   12a50:	18ffff04 	addi	r3,r3,-4
   12a54:	a53fffc4 	addi	r20,r20,-1
   12a58:	e0fffb36 	bltu	fp,r3,12a48 <quorem+0x1e8>
   12a5c:	9d000415 	stw	r20,16(r19)
   12a60:	9005883a 	mov	r2,r18
   12a64:	dfc00d17 	ldw	ra,52(sp)
   12a68:	df000c17 	ldw	fp,48(sp)
   12a6c:	ddc00b17 	ldw	r23,44(sp)
   12a70:	dd800a17 	ldw	r22,40(sp)
   12a74:	dd400917 	ldw	r21,36(sp)
   12a78:	dd000817 	ldw	r20,32(sp)
   12a7c:	dcc00717 	ldw	r19,28(sp)
   12a80:	dc800617 	ldw	r18,24(sp)
   12a84:	dc400517 	ldw	r17,20(sp)
   12a88:	dc000417 	ldw	r16,16(sp)
   12a8c:	dec00e04 	addi	sp,sp,56
   12a90:	f800283a 	ret
   12a94:	0005883a 	mov	r2,zero
   12a98:	003ff206 	br	12a64 <quorem+0x204>

00012a9c <_dtoa_r>:
   12a9c:	20801017 	ldw	r2,64(r4)
   12aa0:	deffdf04 	addi	sp,sp,-132
   12aa4:	dcc01a15 	stw	r19,104(sp)
   12aa8:	dc801915 	stw	r18,100(sp)
   12aac:	dc401815 	stw	r17,96(sp)
   12ab0:	dc001715 	stw	r16,92(sp)
   12ab4:	dfc02015 	stw	ra,128(sp)
   12ab8:	df001f15 	stw	fp,124(sp)
   12abc:	ddc01e15 	stw	r23,120(sp)
   12ac0:	dd801d15 	stw	r22,116(sp)
   12ac4:	dd401c15 	stw	r21,112(sp)
   12ac8:	dd001b15 	stw	r20,108(sp)
   12acc:	d9400315 	stw	r5,12(sp)
   12ad0:	d9c00415 	stw	r7,16(sp)
   12ad4:	2021883a 	mov	r16,r4
   12ad8:	3025883a 	mov	r18,r6
   12adc:	dcc02317 	ldw	r19,140(sp)
   12ae0:	3023883a 	mov	r17,r6
   12ae4:	10000826 	beq	r2,zero,12b08 <_dtoa_r+0x6c>
   12ae8:	20c01117 	ldw	r3,68(r4)
   12aec:	01800044 	movi	r6,1
   12af0:	100b883a 	mov	r5,r2
   12af4:	30cc983a 	sll	r6,r6,r3
   12af8:	10c00115 	stw	r3,4(r2)
   12afc:	11800215 	stw	r6,8(r2)
   12b00:	0015f5c0 	call	15f5c <_Bfree>
   12b04:	80001015 	stw	zero,64(r16)
   12b08:	90002f16 	blt	r18,zero,12bc8 <_dtoa_r+0x12c>
   12b0c:	98000015 	stw	zero,0(r19)
   12b10:	90dffc2c 	andhi	r3,r18,32752
   12b14:	009ffc34 	movhi	r2,32752
   12b18:	18801c26 	beq	r3,r2,12b8c <_dtoa_r+0xf0>
   12b1c:	d9000317 	ldw	r4,12(sp)
   12b20:	880b883a 	mov	r5,r17
   12b24:	000d883a 	mov	r6,zero
   12b28:	000f883a 	mov	r7,zero
   12b2c:	00191540 	call	19154 <__eqdf2>
   12b30:	10002c1e 	bne	r2,zero,12be4 <_dtoa_r+0x148>
   12b34:	d9002217 	ldw	r4,136(sp)
   12b38:	d9c02417 	ldw	r7,144(sp)
   12b3c:	00800044 	movi	r2,1
   12b40:	20800015 	stw	r2,0(r4)
   12b44:	38019426 	beq	r7,zero,13198 <_dtoa_r+0x6fc>
   12b48:	008000f4 	movhi	r2,3
   12b4c:	10a05944 	addi	r2,r2,-32411
   12b50:	38800015 	stw	r2,0(r7)
   12b54:	15ffffc4 	addi	r23,r2,-1
   12b58:	b805883a 	mov	r2,r23
   12b5c:	dfc02017 	ldw	ra,128(sp)
   12b60:	df001f17 	ldw	fp,124(sp)
   12b64:	ddc01e17 	ldw	r23,120(sp)
   12b68:	dd801d17 	ldw	r22,116(sp)
   12b6c:	dd401c17 	ldw	r21,112(sp)
   12b70:	dd001b17 	ldw	r20,108(sp)
   12b74:	dcc01a17 	ldw	r19,104(sp)
   12b78:	dc801917 	ldw	r18,100(sp)
   12b7c:	dc401817 	ldw	r17,96(sp)
   12b80:	dc001717 	ldw	r16,92(sp)
   12b84:	dec02104 	addi	sp,sp,132
   12b88:	f800283a 	ret
   12b8c:	d8c02217 	ldw	r3,136(sp)
   12b90:	d9000317 	ldw	r4,12(sp)
   12b94:	0089c3c4 	movi	r2,9999
   12b98:	18800015 	stw	r2,0(r3)
   12b9c:	20016c26 	beq	r4,zero,13150 <_dtoa_r+0x6b4>
   12ba0:	05c000f4 	movhi	r23,3
   12ba4:	bde06504 	addi	r23,r23,-32364
   12ba8:	d9c02417 	ldw	r7,144(sp)
   12bac:	383fea26 	beq	r7,zero,12b58 <_dtoa_r+0xbc>
   12bb0:	b88000c7 	ldb	r2,3(r23)
   12bb4:	10016d1e 	bne	r2,zero,1316c <_dtoa_r+0x6d0>
   12bb8:	b88000c4 	addi	r2,r23,3
   12bbc:	d8c02417 	ldw	r3,144(sp)
   12bc0:	18800015 	stw	r2,0(r3)
   12bc4:	003fe406 	br	12b58 <_dtoa_r+0xbc>
   12bc8:	04600034 	movhi	r17,32768
   12bcc:	8c7fffc4 	addi	r17,r17,-1
   12bd0:	9462703a 	and	r17,r18,r17
   12bd4:	00800044 	movi	r2,1
   12bd8:	98800015 	stw	r2,0(r19)
   12bdc:	8825883a 	mov	r18,r17
   12be0:	003fcb06 	br	12b10 <_dtoa_r+0x74>
   12be4:	d9400317 	ldw	r5,12(sp)
   12be8:	9028d53a 	srli	r20,r18,20
   12bec:	d8800204 	addi	r2,sp,8
   12bf0:	d8800015 	stw	r2,0(sp)
   12bf4:	8009883a 	mov	r4,r16
   12bf8:	880d883a 	mov	r6,r17
   12bfc:	d9c00104 	addi	r7,sp,4
   12c00:	0016ba80 	call	16ba8 <__d2b>
   12c04:	a501ffcc 	andi	r20,r20,2047
   12c08:	1039883a 	mov	fp,r2
   12c0c:	a001591e 	bne	r20,zero,13174 <_dtoa_r+0x6d8>
   12c10:	dd400217 	ldw	r21,8(sp)
   12c14:	dd000117 	ldw	r20,4(sp)
   12c18:	00befbc4 	movi	r2,-1041
   12c1c:	ad29883a 	add	r20,r21,r20
   12c20:	a082d216 	blt	r20,r2,1376c <_dtoa_r+0xcd0>
   12c24:	d8c00317 	ldw	r3,12(sp)
   12c28:	013f0384 	movi	r4,-1010
   12c2c:	2509c83a 	sub	r4,r4,r20
   12c30:	a0810484 	addi	r2,r20,1042
   12c34:	9124983a 	sll	r18,r18,r4
   12c38:	1884d83a 	srl	r2,r3,r2
   12c3c:	9088b03a 	or	r4,r18,r2
   12c40:	00194d80 	call	194d8 <__floatunsidf>
   12c44:	1009883a 	mov	r4,r2
   12c48:	017f8434 	movhi	r5,65040
   12c4c:	00800044 	movi	r2,1
   12c50:	194b883a 	add	r5,r3,r5
   12c54:	a53fffc4 	addi	r20,r20,-1
   12c58:	d8800f15 	stw	r2,60(sp)
   12c5c:	000d883a 	mov	r6,zero
   12c60:	01cffe34 	movhi	r7,16376
   12c64:	0018c5c0 	call	18c5c <__subdf3>
   12c68:	1009883a 	mov	r4,r2
   12c6c:	180b883a 	mov	r5,r3
   12c70:	0198dbf4 	movhi	r6,25455
   12c74:	3190d844 	addi	r6,r6,17249
   12c78:	01cff4f4 	movhi	r7,16339
   12c7c:	39e1e9c4 	addi	r7,r7,-30809
   12c80:	0018cbc0 	call	18cbc <__muldf3>
   12c84:	180b883a 	mov	r5,r3
   12c88:	01a2d874 	movhi	r6,35681
   12c8c:	31b22cc4 	addi	r6,r6,-14157
   12c90:	01cff1f4 	movhi	r7,16327
   12c94:	39e28a04 	addi	r7,r7,-30168
   12c98:	1009883a 	mov	r4,r2
   12c9c:	0018c080 	call	18c08 <__adddf3>
   12ca0:	a009883a 	mov	r4,r20
   12ca4:	1027883a 	mov	r19,r2
   12ca8:	1825883a 	mov	r18,r3
   12cac:	00193300 	call	19330 <__floatsidf>
   12cb0:	1009883a 	mov	r4,r2
   12cb4:	180b883a 	mov	r5,r3
   12cb8:	019427f4 	movhi	r6,20639
   12cbc:	319e7ec4 	addi	r6,r6,31227
   12cc0:	01cff4f4 	movhi	r7,16339
   12cc4:	39d104c4 	addi	r7,r7,17427
   12cc8:	0018cbc0 	call	18cbc <__muldf3>
   12ccc:	9809883a 	mov	r4,r19
   12cd0:	900b883a 	mov	r5,r18
   12cd4:	100d883a 	mov	r6,r2
   12cd8:	180f883a 	mov	r7,r3
   12cdc:	0018c080 	call	18c08 <__adddf3>
   12ce0:	1009883a 	mov	r4,r2
   12ce4:	180b883a 	mov	r5,r3
   12ce8:	1027883a 	mov	r19,r2
   12cec:	1825883a 	mov	r18,r3
   12cf0:	00194040 	call	19404 <__fixdfsi>
   12cf4:	9809883a 	mov	r4,r19
   12cf8:	900b883a 	mov	r5,r18
   12cfc:	000d883a 	mov	r6,zero
   12d00:	000f883a 	mov	r7,zero
   12d04:	d8800615 	stw	r2,24(sp)
   12d08:	00192d40 	call	192d4 <__ltdf2>
   12d0c:	10027e16 	blt	r2,zero,13708 <_dtoa_r+0xc6c>
   12d10:	d8c00617 	ldw	r3,24(sp)
   12d14:	00800584 	movi	r2,22
   12d18:	10c26c36 	bltu	r2,r3,136cc <_dtoa_r+0xc30>
   12d1c:	180490fa 	slli	r2,r3,3
   12d20:	00c000f4 	movhi	r3,3
   12d24:	18e08b04 	addi	r3,r3,-32212
   12d28:	d9800317 	ldw	r6,12(sp)
   12d2c:	1885883a 	add	r2,r3,r2
   12d30:	11000017 	ldw	r4,0(r2)
   12d34:	11400117 	ldw	r5,4(r2)
   12d38:	880f883a 	mov	r7,r17
   12d3c:	001920c0 	call	1920c <__gtdf2>
   12d40:	00828f0e 	bge	zero,r2,13780 <_dtoa_r+0xce4>
   12d44:	d8800617 	ldw	r2,24(sp)
   12d48:	d8000d15 	stw	zero,52(sp)
   12d4c:	10bfffc4 	addi	r2,r2,-1
   12d50:	d8800615 	stw	r2,24(sp)
   12d54:	ad29c83a 	sub	r20,r21,r20
   12d58:	a53fffc4 	addi	r20,r20,-1
   12d5c:	a0026616 	blt	r20,zero,136f8 <_dtoa_r+0xc5c>
   12d60:	dd000715 	stw	r20,28(sp)
   12d64:	d8000815 	stw	zero,32(sp)
   12d68:	d8800617 	ldw	r2,24(sp)
   12d6c:	10025a16 	blt	r2,zero,136d8 <_dtoa_r+0xc3c>
   12d70:	d8c00717 	ldw	r3,28(sp)
   12d74:	d8800b15 	stw	r2,44(sp)
   12d78:	d8000a15 	stw	zero,40(sp)
   12d7c:	1887883a 	add	r3,r3,r2
   12d80:	d8c00715 	stw	r3,28(sp)
   12d84:	d9c00417 	ldw	r7,16(sp)
   12d88:	00800244 	movi	r2,9
   12d8c:	11c10536 	bltu	r2,r7,131a4 <_dtoa_r+0x708>
   12d90:	00800144 	movi	r2,5
   12d94:	11c4c60e 	bge	r2,r7,140b0 <_dtoa_r+0x1614>
   12d98:	39ffff04 	addi	r7,r7,-4
   12d9c:	d9c00415 	stw	r7,16(sp)
   12da0:	0027883a 	mov	r19,zero
   12da4:	d9c00417 	ldw	r7,16(sp)
   12da8:	008000c4 	movi	r2,3
   12dac:	3883a226 	beq	r7,r2,13c38 <_dtoa_r+0x119c>
   12db0:	11c2bc16 	blt	r2,r7,138a4 <_dtoa_r+0xe08>
   12db4:	00800084 	movi	r2,2
   12db8:	3880fb1e 	bne	r7,r2,131a8 <_dtoa_r+0x70c>
   12dbc:	d8000c15 	stw	zero,48(sp)
   12dc0:	d9002117 	ldw	r4,132(sp)
   12dc4:	0103ae0e 	bge	zero,r4,13c80 <_dtoa_r+0x11e4>
   12dc8:	2025883a 	mov	r18,r4
   12dcc:	d9000e15 	stw	r4,56(sp)
   12dd0:	d9000915 	stw	r4,36(sp)
   12dd4:	80001115 	stw	zero,68(r16)
   12dd8:	008005c4 	movi	r2,23
   12ddc:	1484b22e 	bgeu	r2,r18,140a8 <_dtoa_r+0x160c>
   12de0:	00c00044 	movi	r3,1
   12de4:	00800104 	movi	r2,4
   12de8:	1085883a 	add	r2,r2,r2
   12dec:	11000504 	addi	r4,r2,20
   12df0:	180b883a 	mov	r5,r3
   12df4:	18c00044 	addi	r3,r3,1
   12df8:	913ffb2e 	bgeu	r18,r4,12de8 <_dtoa_r+0x34c>
   12dfc:	81401115 	stw	r5,68(r16)
   12e00:	8009883a 	mov	r4,r16
   12e04:	0015eb40 	call	15eb4 <_Balloc>
   12e08:	102f883a 	mov	r23,r2
   12e0c:	80801015 	stw	r2,64(r16)
   12e10:	00800384 	movi	r2,14
   12e14:	1480f036 	bltu	r2,r18,131d8 <_dtoa_r+0x73c>
   12e18:	9800ef26 	beq	r19,zero,131d8 <_dtoa_r+0x73c>
   12e1c:	d8800617 	ldw	r2,24(sp)
   12e20:	00839c0e 	bge	zero,r2,13c94 <_dtoa_r+0x11f8>
   12e24:	d8c00617 	ldw	r3,24(sp)
   12e28:	108003cc 	andi	r2,r2,15
   12e2c:	100490fa 	slli	r2,r2,3
   12e30:	182bd13a 	srai	r21,r3,4
   12e34:	00c000f4 	movhi	r3,3
   12e38:	18e08b04 	addi	r3,r3,-32212
   12e3c:	1885883a 	add	r2,r3,r2
   12e40:	a8c0040c 	andi	r3,r21,16
   12e44:	12800017 	ldw	r10,0(r2)
   12e48:	15800117 	ldw	r22,4(r2)
   12e4c:	18038726 	beq	r3,zero,13c6c <_dtoa_r+0x11d0>
   12e50:	008000f4 	movhi	r2,3
   12e54:	10a08104 	addi	r2,r2,-32252
   12e58:	11800817 	ldw	r6,32(r2)
   12e5c:	11c00917 	ldw	r7,36(r2)
   12e60:	d9000317 	ldw	r4,12(sp)
   12e64:	880b883a 	mov	r5,r17
   12e68:	da801515 	stw	r10,84(sp)
   12e6c:	0018fa00 	call	18fa0 <__divdf3>
   12e70:	da801517 	ldw	r10,84(sp)
   12e74:	d8801015 	stw	r2,64(sp)
   12e78:	1829883a 	mov	r20,r3
   12e7c:	ad4003cc 	andi	r21,r21,15
   12e80:	048000c4 	movi	r18,3
   12e84:	a8001126 	beq	r21,zero,12ecc <_dtoa_r+0x430>
   12e88:	04c000f4 	movhi	r19,3
   12e8c:	9ce08104 	addi	r19,r19,-32252
   12e90:	5005883a 	mov	r2,r10
   12e94:	b007883a 	mov	r3,r22
   12e98:	a980004c 	andi	r6,r21,1
   12e9c:	1009883a 	mov	r4,r2
   12ea0:	a82bd07a 	srai	r21,r21,1
   12ea4:	180b883a 	mov	r5,r3
   12ea8:	30000426 	beq	r6,zero,12ebc <_dtoa_r+0x420>
   12eac:	99800017 	ldw	r6,0(r19)
   12eb0:	99c00117 	ldw	r7,4(r19)
   12eb4:	94800044 	addi	r18,r18,1
   12eb8:	0018cbc0 	call	18cbc <__muldf3>
   12ebc:	9cc00204 	addi	r19,r19,8
   12ec0:	a83ff51e 	bne	r21,zero,12e98 <_dtoa_r+0x3fc>
   12ec4:	1015883a 	mov	r10,r2
   12ec8:	182d883a 	mov	r22,r3
   12ecc:	d9001017 	ldw	r4,64(sp)
   12ed0:	a00b883a 	mov	r5,r20
   12ed4:	500d883a 	mov	r6,r10
   12ed8:	b00f883a 	mov	r7,r22
   12edc:	0018fa00 	call	18fa0 <__divdf3>
   12ee0:	1027883a 	mov	r19,r2
   12ee4:	1829883a 	mov	r20,r3
   12ee8:	d8c00d17 	ldw	r3,52(sp)
   12eec:	18000626 	beq	r3,zero,12f08 <_dtoa_r+0x46c>
   12ef0:	9809883a 	mov	r4,r19
   12ef4:	a00b883a 	mov	r5,r20
   12ef8:	000d883a 	mov	r6,zero
   12efc:	01cffc34 	movhi	r7,16368
   12f00:	00192d40 	call	192d4 <__ltdf2>
   12f04:	10040e16 	blt	r2,zero,13f40 <_dtoa_r+0x14a4>
   12f08:	9009883a 	mov	r4,r18
   12f0c:	00193300 	call	19330 <__floatsidf>
   12f10:	1009883a 	mov	r4,r2
   12f14:	180b883a 	mov	r5,r3
   12f18:	980d883a 	mov	r6,r19
   12f1c:	a00f883a 	mov	r7,r20
   12f20:	0018cbc0 	call	18cbc <__muldf3>
   12f24:	1009883a 	mov	r4,r2
   12f28:	180b883a 	mov	r5,r3
   12f2c:	000d883a 	mov	r6,zero
   12f30:	01d00734 	movhi	r7,16412
   12f34:	0018c080 	call	18c08 <__adddf3>
   12f38:	057f3034 	movhi	r21,64704
   12f3c:	1d6b883a 	add	r21,r3,r21
   12f40:	d8c00917 	ldw	r3,36(sp)
   12f44:	1025883a 	mov	r18,r2
   12f48:	18031f26 	beq	r3,zero,13bc8 <_dtoa_r+0x112c>
   12f4c:	d8800617 	ldw	r2,24(sp)
   12f50:	dac00917 	ldw	r11,36(sp)
   12f54:	d8801315 	stw	r2,76(sp)
   12f58:	d8c00c17 	ldw	r3,48(sp)
   12f5c:	18039026 	beq	r3,zero,13da0 <_dtoa_r+0x1304>
   12f60:	58bfffc4 	addi	r2,r11,-1
   12f64:	100490fa 	slli	r2,r2,3
   12f68:	00c000f4 	movhi	r3,3
   12f6c:	18e08b04 	addi	r3,r3,-32212
   12f70:	0009883a 	mov	r4,zero
   12f74:	1885883a 	add	r2,r3,r2
   12f78:	11800017 	ldw	r6,0(r2)
   12f7c:	11c00117 	ldw	r7,4(r2)
   12f80:	014ff834 	movhi	r5,16352
   12f84:	dac01615 	stw	r11,88(sp)
   12f88:	0018fa00 	call	18fa0 <__divdf3>
   12f8c:	900d883a 	mov	r6,r18
   12f90:	a80f883a 	mov	r7,r21
   12f94:	1009883a 	mov	r4,r2
   12f98:	180b883a 	mov	r5,r3
   12f9c:	0018c5c0 	call	18c5c <__subdf3>
   12fa0:	a00b883a 	mov	r5,r20
   12fa4:	9809883a 	mov	r4,r19
   12fa8:	182b883a 	mov	r21,r3
   12fac:	d8801015 	stw	r2,64(sp)
   12fb0:	00194040 	call	19404 <__fixdfsi>
   12fb4:	1009883a 	mov	r4,r2
   12fb8:	d8801515 	stw	r2,84(sp)
   12fbc:	00193300 	call	19330 <__floatsidf>
   12fc0:	9809883a 	mov	r4,r19
   12fc4:	a00b883a 	mov	r5,r20
   12fc8:	100d883a 	mov	r6,r2
   12fcc:	180f883a 	mov	r7,r3
   12fd0:	0018c5c0 	call	18c5c <__subdf3>
   12fd4:	da401517 	ldw	r9,84(sp)
   12fd8:	d9001017 	ldw	r4,64(sp)
   12fdc:	a80b883a 	mov	r5,r21
   12fe0:	4d000c04 	addi	r20,r9,48
   12fe4:	bd000005 	stb	r20,0(r23)
   12fe8:	100d883a 	mov	r6,r2
   12fec:	180f883a 	mov	r7,r3
   12ff0:	bd800044 	addi	r22,r23,1
   12ff4:	1025883a 	mov	r18,r2
   12ff8:	1827883a 	mov	r19,r3
   12ffc:	001920c0 	call	1920c <__gtdf2>
   13000:	00842216 	blt	zero,r2,1408c <_dtoa_r+0x15f0>
   13004:	0009883a 	mov	r4,zero
   13008:	014ffc34 	movhi	r5,16368
   1300c:	900d883a 	mov	r6,r18
   13010:	980f883a 	mov	r7,r19
   13014:	0018c5c0 	call	18c5c <__subdf3>
   13018:	d9001017 	ldw	r4,64(sp)
   1301c:	a80b883a 	mov	r5,r21
   13020:	100d883a 	mov	r6,r2
   13024:	180f883a 	mov	r7,r3
   13028:	001920c0 	call	1920c <__gtdf2>
   1302c:	dac01617 	ldw	r11,88(sp)
   13030:	00841316 	blt	zero,r2,14080 <_dtoa_r+0x15e4>
   13034:	00800044 	movi	r2,1
   13038:	12c0670e 	bge	r2,r11,131d8 <_dtoa_r+0x73c>
   1303c:	bad7883a 	add	r11,r23,r11
   13040:	df001115 	stw	fp,68(sp)
   13044:	dc401215 	stw	r17,72(sp)
   13048:	5839883a 	mov	fp,r11
   1304c:	dc401017 	ldw	r17,64(sp)
   13050:	00000806 	br	13074 <_dtoa_r+0x5d8>
   13054:	0018c5c0 	call	18c5c <__subdf3>
   13058:	1009883a 	mov	r4,r2
   1305c:	180b883a 	mov	r5,r3
   13060:	880d883a 	mov	r6,r17
   13064:	a80f883a 	mov	r7,r21
   13068:	00192d40 	call	192d4 <__ltdf2>
   1306c:	1003ee16 	blt	r2,zero,14028 <_dtoa_r+0x158c>
   13070:	b703f126 	beq	r22,fp,14038 <_dtoa_r+0x159c>
   13074:	8809883a 	mov	r4,r17
   13078:	a80b883a 	mov	r5,r21
   1307c:	000d883a 	mov	r6,zero
   13080:	01d00934 	movhi	r7,16420
   13084:	0018cbc0 	call	18cbc <__muldf3>
   13088:	000d883a 	mov	r6,zero
   1308c:	01d00934 	movhi	r7,16420
   13090:	9009883a 	mov	r4,r18
   13094:	980b883a 	mov	r5,r19
   13098:	1023883a 	mov	r17,r2
   1309c:	182b883a 	mov	r21,r3
   130a0:	0018cbc0 	call	18cbc <__muldf3>
   130a4:	180b883a 	mov	r5,r3
   130a8:	1009883a 	mov	r4,r2
   130ac:	1825883a 	mov	r18,r3
   130b0:	1027883a 	mov	r19,r2
   130b4:	00194040 	call	19404 <__fixdfsi>
   130b8:	1009883a 	mov	r4,r2
   130bc:	1029883a 	mov	r20,r2
   130c0:	00193300 	call	19330 <__floatsidf>
   130c4:	9809883a 	mov	r4,r19
   130c8:	900b883a 	mov	r5,r18
   130cc:	100d883a 	mov	r6,r2
   130d0:	180f883a 	mov	r7,r3
   130d4:	0018c5c0 	call	18c5c <__subdf3>
   130d8:	a5000c04 	addi	r20,r20,48
   130dc:	b5000005 	stb	r20,0(r22)
   130e0:	1009883a 	mov	r4,r2
   130e4:	180b883a 	mov	r5,r3
   130e8:	880d883a 	mov	r6,r17
   130ec:	a80f883a 	mov	r7,r21
   130f0:	1025883a 	mov	r18,r2
   130f4:	1827883a 	mov	r19,r3
   130f8:	00192d40 	call	192d4 <__ltdf2>
   130fc:	b5800044 	addi	r22,r22,1
   13100:	0009883a 	mov	r4,zero
   13104:	014ffc34 	movhi	r5,16368
   13108:	900d883a 	mov	r6,r18
   1310c:	980f883a 	mov	r7,r19
   13110:	103fd00e 	bge	r2,zero,13054 <_dtoa_r+0x5b8>
   13114:	d9001317 	ldw	r4,76(sp)
   13118:	df001117 	ldw	fp,68(sp)
   1311c:	d9000615 	stw	r4,24(sp)
   13120:	8009883a 	mov	r4,r16
   13124:	e00b883a 	mov	r5,fp
   13128:	0015f5c0 	call	15f5c <_Bfree>
   1312c:	d9c00617 	ldw	r7,24(sp)
   13130:	d8c02217 	ldw	r3,136(sp)
   13134:	d9002417 	ldw	r4,144(sp)
   13138:	b0000005 	stb	zero,0(r22)
   1313c:	38800044 	addi	r2,r7,1
   13140:	18800015 	stw	r2,0(r3)
   13144:	203e8426 	beq	r4,zero,12b58 <_dtoa_r+0xbc>
   13148:	25800015 	stw	r22,0(r4)
   1314c:	003e8206 	br	12b58 <_dtoa_r+0xbc>
   13150:	00800434 	movhi	r2,16
   13154:	10bfffc4 	addi	r2,r2,-1
   13158:	90a4703a 	and	r18,r18,r2
   1315c:	903e901e 	bne	r18,zero,12ba0 <_dtoa_r+0x104>
   13160:	05c000f4 	movhi	r23,3
   13164:	bde06204 	addi	r23,r23,-32376
   13168:	003e8f06 	br	12ba8 <_dtoa_r+0x10c>
   1316c:	b8800204 	addi	r2,r23,8
   13170:	003e9206 	br	12bbc <_dtoa_r+0x120>
   13174:	01400434 	movhi	r5,16
   13178:	297fffc4 	addi	r5,r5,-1
   1317c:	894a703a 	and	r5,r17,r5
   13180:	d9000317 	ldw	r4,12(sp)
   13184:	294ffc34 	orhi	r5,r5,16368
   13188:	a53f0044 	addi	r20,r20,-1023
   1318c:	dd400217 	ldw	r21,8(sp)
   13190:	d8000f15 	stw	zero,60(sp)
   13194:	003eb106 	br	12c5c <_dtoa_r+0x1c0>
   13198:	05c000f4 	movhi	r23,3
   1319c:	bde05904 	addi	r23,r23,-32412
   131a0:	003e6d06 	br	12b58 <_dtoa_r+0xbc>
   131a4:	d8000415 	stw	zero,16(sp)
   131a8:	80001115 	stw	zero,68(r16)
   131ac:	8009883a 	mov	r4,r16
   131b0:	000b883a 	mov	r5,zero
   131b4:	0015eb40 	call	15eb4 <_Balloc>
   131b8:	01ffffc4 	movi	r7,-1
   131bc:	102f883a 	mov	r23,r2
   131c0:	80801015 	stw	r2,64(r16)
   131c4:	00800044 	movi	r2,1
   131c8:	d9c00915 	stw	r7,36(sp)
   131cc:	d8002115 	stw	zero,132(sp)
   131d0:	d9c00e15 	stw	r7,56(sp)
   131d4:	d8800c15 	stw	r2,48(sp)
   131d8:	d8800117 	ldw	r2,4(sp)
   131dc:	10008b16 	blt	r2,zero,1340c <_dtoa_r+0x970>
   131e0:	d9000617 	ldw	r4,24(sp)
   131e4:	00c00384 	movi	r3,14
   131e8:	19008816 	blt	r3,r4,1340c <_dtoa_r+0x970>
   131ec:	200490fa 	slli	r2,r4,3
   131f0:	d9c02117 	ldw	r7,132(sp)
   131f4:	00c000f4 	movhi	r3,3
   131f8:	18e08b04 	addi	r3,r3,-32212
   131fc:	1885883a 	add	r2,r3,r2
   13200:	14800017 	ldw	r18,0(r2)
   13204:	14c00117 	ldw	r19,4(r2)
   13208:	3801c916 	blt	r7,zero,13930 <_dtoa_r+0xe94>
   1320c:	d9000317 	ldw	r4,12(sp)
   13210:	900d883a 	mov	r6,r18
   13214:	980f883a 	mov	r7,r19
   13218:	880b883a 	mov	r5,r17
   1321c:	0018fa00 	call	18fa0 <__divdf3>
   13220:	180b883a 	mov	r5,r3
   13224:	1009883a 	mov	r4,r2
   13228:	00194040 	call	19404 <__fixdfsi>
   1322c:	1009883a 	mov	r4,r2
   13230:	102b883a 	mov	r21,r2
   13234:	00193300 	call	19330 <__floatsidf>
   13238:	1009883a 	mov	r4,r2
   1323c:	180b883a 	mov	r5,r3
   13240:	900d883a 	mov	r6,r18
   13244:	980f883a 	mov	r7,r19
   13248:	0018cbc0 	call	18cbc <__muldf3>
   1324c:	d9000317 	ldw	r4,12(sp)
   13250:	880b883a 	mov	r5,r17
   13254:	100d883a 	mov	r6,r2
   13258:	180f883a 	mov	r7,r3
   1325c:	0018c5c0 	call	18c5c <__subdf3>
   13260:	d9c00917 	ldw	r7,36(sp)
   13264:	1009883a 	mov	r4,r2
   13268:	a8800c04 	addi	r2,r21,48
   1326c:	b8800005 	stb	r2,0(r23)
   13270:	01800044 	movi	r6,1
   13274:	180b883a 	mov	r5,r3
   13278:	2005883a 	mov	r2,r4
   1327c:	bd800044 	addi	r22,r23,1
   13280:	39803726 	beq	r7,r6,13360 <_dtoa_r+0x8c4>
   13284:	000d883a 	mov	r6,zero
   13288:	01d00934 	movhi	r7,16420
   1328c:	0018cbc0 	call	18cbc <__muldf3>
   13290:	1009883a 	mov	r4,r2
   13294:	180b883a 	mov	r5,r3
   13298:	000d883a 	mov	r6,zero
   1329c:	000f883a 	mov	r7,zero
   132a0:	1029883a 	mov	r20,r2
   132a4:	1823883a 	mov	r17,r3
   132a8:	00191540 	call	19154 <__eqdf2>
   132ac:	103f9c26 	beq	r2,zero,13120 <_dtoa_r+0x684>
   132b0:	dd400917 	ldw	r21,36(sp)
   132b4:	dc000415 	stw	r16,16(sp)
   132b8:	00000906 	br	132e0 <_dtoa_r+0x844>
   132bc:	0018cbc0 	call	18cbc <__muldf3>
   132c0:	1009883a 	mov	r4,r2
   132c4:	180b883a 	mov	r5,r3
   132c8:	000d883a 	mov	r6,zero
   132cc:	000f883a 	mov	r7,zero
   132d0:	1029883a 	mov	r20,r2
   132d4:	1823883a 	mov	r17,r3
   132d8:	00191540 	call	19154 <__eqdf2>
   132dc:	10022926 	beq	r2,zero,13b84 <_dtoa_r+0x10e8>
   132e0:	900d883a 	mov	r6,r18
   132e4:	980f883a 	mov	r7,r19
   132e8:	a009883a 	mov	r4,r20
   132ec:	880b883a 	mov	r5,r17
   132f0:	0018fa00 	call	18fa0 <__divdf3>
   132f4:	180b883a 	mov	r5,r3
   132f8:	1009883a 	mov	r4,r2
   132fc:	00194040 	call	19404 <__fixdfsi>
   13300:	1009883a 	mov	r4,r2
   13304:	1021883a 	mov	r16,r2
   13308:	00193300 	call	19330 <__floatsidf>
   1330c:	1009883a 	mov	r4,r2
   13310:	180b883a 	mov	r5,r3
   13314:	900d883a 	mov	r6,r18
   13318:	980f883a 	mov	r7,r19
   1331c:	0018cbc0 	call	18cbc <__muldf3>
   13320:	a009883a 	mov	r4,r20
   13324:	880b883a 	mov	r5,r17
   13328:	100d883a 	mov	r6,r2
   1332c:	180f883a 	mov	r7,r3
   13330:	0018c5c0 	call	18c5c <__subdf3>
   13334:	82400c04 	addi	r9,r16,48
   13338:	b2400005 	stb	r9,0(r22)
   1333c:	b5800044 	addi	r22,r22,1
   13340:	b5d3c83a 	sub	r9,r22,r23
   13344:	000d883a 	mov	r6,zero
   13348:	01d00934 	movhi	r7,16420
   1334c:	1009883a 	mov	r4,r2
   13350:	180b883a 	mov	r5,r3
   13354:	aa7fd91e 	bne	r21,r9,132bc <_dtoa_r+0x820>
   13358:	802b883a 	mov	r21,r16
   1335c:	dc000417 	ldw	r16,16(sp)
   13360:	1009883a 	mov	r4,r2
   13364:	180b883a 	mov	r5,r3
   13368:	100d883a 	mov	r6,r2
   1336c:	180f883a 	mov	r7,r3
   13370:	0018c080 	call	18c08 <__adddf3>
   13374:	9009883a 	mov	r4,r18
   13378:	980b883a 	mov	r5,r19
   1337c:	100d883a 	mov	r6,r2
   13380:	180f883a 	mov	r7,r3
   13384:	1023883a 	mov	r17,r2
   13388:	1829883a 	mov	r20,r3
   1338c:	00192d40 	call	192d4 <__ltdf2>
   13390:	10000816 	blt	r2,zero,133b4 <_dtoa_r+0x918>
   13394:	9009883a 	mov	r4,r18
   13398:	980b883a 	mov	r5,r19
   1339c:	880d883a 	mov	r6,r17
   133a0:	a00f883a 	mov	r7,r20
   133a4:	00191540 	call	19154 <__eqdf2>
   133a8:	103f5d1e 	bne	r2,zero,13120 <_dtoa_r+0x684>
   133ac:	ad40004c 	andi	r21,r21,1
   133b0:	a83f5b26 	beq	r21,zero,13120 <_dtoa_r+0x684>
   133b4:	b53fffc3 	ldbu	r20,-1(r22)
   133b8:	b0ffff84 	addi	r3,r22,-2
   133bc:	01400e44 	movi	r5,57
   133c0:	00000306 	br	133d0 <_dtoa_r+0x934>
   133c4:	1d000003 	ldbu	r20,0(r3)
   133c8:	102d883a 	mov	r22,r2
   133cc:	18ffffc4 	addi	r3,r3,-1
   133d0:	a1003fcc 	andi	r4,r20,255
   133d4:	2100201c 	xori	r4,r4,128
   133d8:	213fe004 	addi	r4,r4,-128
   133dc:	b0bfffc4 	addi	r2,r22,-1
   133e0:	2142ca1e 	bne	r4,r5,13f0c <_dtoa_r+0x1470>
   133e4:	b8bff71e 	bne	r23,r2,133c4 <_dtoa_r+0x928>
   133e8:	d8800617 	ldw	r2,24(sp)
   133ec:	05000c44 	movi	r20,49
   133f0:	10800044 	addi	r2,r2,1
   133f4:	d8800615 	stw	r2,24(sp)
   133f8:	00800c04 	movi	r2,48
   133fc:	b8800005 	stb	r2,0(r23)
   13400:	b805883a 	mov	r2,r23
   13404:	15000005 	stb	r20,0(r2)
   13408:	003f4506 	br	13120 <_dtoa_r+0x684>
   1340c:	d9c00c17 	ldw	r7,48(sp)
   13410:	3800c926 	beq	r7,zero,13738 <_dtoa_r+0xc9c>
   13414:	d9c00417 	ldw	r7,16(sp)
   13418:	00c00044 	movi	r3,1
   1341c:	19c16c0e 	bge	r3,r7,139d0 <_dtoa_r+0xf34>
   13420:	d9000917 	ldw	r4,36(sp)
   13424:	d9c00a17 	ldw	r7,40(sp)
   13428:	24ffffc4 	addi	r19,r4,-1
   1342c:	3cc20716 	blt	r7,r19,13c4c <_dtoa_r+0x11b0>
   13430:	3ce7c83a 	sub	r19,r7,r19
   13434:	d9c00917 	ldw	r7,36(sp)
   13438:	3802ae16 	blt	r7,zero,13ef4 <_dtoa_r+0x1458>
   1343c:	dc800817 	ldw	r18,32(sp)
   13440:	d8800917 	ldw	r2,36(sp)
   13444:	d8c00817 	ldw	r3,32(sp)
   13448:	d9c00717 	ldw	r7,28(sp)
   1344c:	8009883a 	mov	r4,r16
   13450:	1887883a 	add	r3,r3,r2
   13454:	388f883a 	add	r7,r7,r2
   13458:	01400044 	movi	r5,1
   1345c:	d8c00815 	stw	r3,32(sp)
   13460:	d9c00715 	stw	r7,28(sp)
   13464:	00162e40 	call	162e4 <__i2b>
   13468:	102b883a 	mov	r21,r2
   1346c:	90000a26 	beq	r18,zero,13498 <_dtoa_r+0x9fc>
   13470:	d8800717 	ldw	r2,28(sp)
   13474:	0080080e 	bge	zero,r2,13498 <_dtoa_r+0x9fc>
   13478:	90812b16 	blt	r18,r2,13928 <_dtoa_r+0xe8c>
   1347c:	d8c00817 	ldw	r3,32(sp)
   13480:	d9000717 	ldw	r4,28(sp)
   13484:	90a5c83a 	sub	r18,r18,r2
   13488:	1887c83a 	sub	r3,r3,r2
   1348c:	2089c83a 	sub	r4,r4,r2
   13490:	d8c00815 	stw	r3,32(sp)
   13494:	d9000715 	stw	r4,28(sp)
   13498:	d9c00a17 	ldw	r7,40(sp)
   1349c:	01c0140e 	bge	zero,r7,134f0 <_dtoa_r+0xa54>
   134a0:	d8800c17 	ldw	r2,48(sp)
   134a4:	1001de26 	beq	r2,zero,13c20 <_dtoa_r+0x1184>
   134a8:	04c00e0e 	bge	zero,r19,134e4 <_dtoa_r+0xa48>
   134ac:	a80b883a 	mov	r5,r21
   134b0:	8009883a 	mov	r4,r16
   134b4:	980d883a 	mov	r6,r19
   134b8:	00165780 	call	16578 <__pow5mult>
   134bc:	e00d883a 	mov	r6,fp
   134c0:	8009883a 	mov	r4,r16
   134c4:	100b883a 	mov	r5,r2
   134c8:	102b883a 	mov	r21,r2
   134cc:	00163200 	call	16320 <__multiply>
   134d0:	1029883a 	mov	r20,r2
   134d4:	e00b883a 	mov	r5,fp
   134d8:	8009883a 	mov	r4,r16
   134dc:	0015f5c0 	call	15f5c <_Bfree>
   134e0:	a039883a 	mov	fp,r20
   134e4:	d8c00a17 	ldw	r3,40(sp)
   134e8:	1ccdc83a 	sub	r6,r3,r19
   134ec:	3001291e 	bne	r6,zero,13994 <_dtoa_r+0xef8>
   134f0:	8009883a 	mov	r4,r16
   134f4:	01400044 	movi	r5,1
   134f8:	00162e40 	call	162e4 <__i2b>
   134fc:	d9000b17 	ldw	r4,44(sp)
   13500:	1029883a 	mov	r20,r2
   13504:	0100050e 	bge	zero,r4,1351c <_dtoa_r+0xa80>
   13508:	d9800b17 	ldw	r6,44(sp)
   1350c:	8009883a 	mov	r4,r16
   13510:	100b883a 	mov	r5,r2
   13514:	00165780 	call	16578 <__pow5mult>
   13518:	1029883a 	mov	r20,r2
   1351c:	d9c00417 	ldw	r7,16(sp)
   13520:	00800044 	movi	r2,1
   13524:	11c0f00e 	bge	r2,r7,138e8 <_dtoa_r+0xe4c>
   13528:	0023883a 	mov	r17,zero
   1352c:	d8800b17 	ldw	r2,44(sp)
   13530:	1001741e 	bne	r2,zero,13b04 <_dtoa_r+0x1068>
   13534:	00800044 	movi	r2,1
   13538:	d8c00717 	ldw	r3,28(sp)
   1353c:	10c5883a 	add	r2,r2,r3
   13540:	108007cc 	andi	r2,r2,31
   13544:	10008026 	beq	r2,zero,13748 <_dtoa_r+0xcac>
   13548:	01000804 	movi	r4,32
   1354c:	2089c83a 	sub	r4,r4,r2
   13550:	00c00104 	movi	r3,4
   13554:	1902d00e 	bge	r3,r4,14098 <_dtoa_r+0x15fc>
   13558:	d9000817 	ldw	r4,32(sp)
   1355c:	d9c00717 	ldw	r7,28(sp)
   13560:	00c00704 	movi	r3,28
   13564:	1885c83a 	sub	r2,r3,r2
   13568:	2089883a 	add	r4,r4,r2
   1356c:	388f883a 	add	r7,r7,r2
   13570:	d9000815 	stw	r4,32(sp)
   13574:	90a5883a 	add	r18,r18,r2
   13578:	d9c00715 	stw	r7,28(sp)
   1357c:	d9c00817 	ldw	r7,32(sp)
   13580:	01c0050e 	bge	zero,r7,13598 <_dtoa_r+0xafc>
   13584:	e00b883a 	mov	r5,fp
   13588:	8009883a 	mov	r4,r16
   1358c:	380d883a 	mov	r6,r7
   13590:	00166a40 	call	166a4 <__lshift>
   13594:	1039883a 	mov	fp,r2
   13598:	d8800717 	ldw	r2,28(sp)
   1359c:	0080050e 	bge	zero,r2,135b4 <_dtoa_r+0xb18>
   135a0:	a00b883a 	mov	r5,r20
   135a4:	8009883a 	mov	r4,r16
   135a8:	100d883a 	mov	r6,r2
   135ac:	00166a40 	call	166a4 <__lshift>
   135b0:	1029883a 	mov	r20,r2
   135b4:	d8c00d17 	ldw	r3,52(sp)
   135b8:	1801401e 	bne	r3,zero,13abc <_dtoa_r+0x1020>
   135bc:	d8800917 	ldw	r2,36(sp)
   135c0:	00815a0e 	bge	zero,r2,13b2c <_dtoa_r+0x1090>
   135c4:	d8c00c17 	ldw	r3,48(sp)
   135c8:	18006f1e 	bne	r3,zero,13788 <_dtoa_r+0xcec>
   135cc:	b823883a 	mov	r17,r23
   135d0:	dc800917 	ldw	r18,36(sp)
   135d4:	00000206 	br	135e0 <_dtoa_r+0xb44>
   135d8:	0015f840 	call	15f84 <__multadd>
   135dc:	1039883a 	mov	fp,r2
   135e0:	e009883a 	mov	r4,fp
   135e4:	a00b883a 	mov	r5,r20
   135e8:	00128600 	call	12860 <quorem>
   135ec:	10800c04 	addi	r2,r2,48
   135f0:	88800005 	stb	r2,0(r17)
   135f4:	8c400044 	addi	r17,r17,1
   135f8:	8dc7c83a 	sub	r3,r17,r23
   135fc:	8009883a 	mov	r4,r16
   13600:	e00b883a 	mov	r5,fp
   13604:	01800284 	movi	r6,10
   13608:	000f883a 	mov	r7,zero
   1360c:	1cbff216 	blt	r3,r18,135d8 <_dtoa_r+0xb3c>
   13610:	dd800917 	ldw	r22,36(sp)
   13614:	1007883a 	mov	r3,r2
   13618:	05823a0e 	bge	zero,r22,13f04 <_dtoa_r+0x1468>
   1361c:	bdad883a 	add	r22,r23,r22
   13620:	0023883a 	mov	r17,zero
   13624:	e00b883a 	mov	r5,fp
   13628:	01800044 	movi	r6,1
   1362c:	8009883a 	mov	r4,r16
   13630:	d8c01515 	stw	r3,84(sp)
   13634:	00166a40 	call	166a4 <__lshift>
   13638:	1009883a 	mov	r4,r2
   1363c:	a00b883a 	mov	r5,r20
   13640:	1039883a 	mov	fp,r2
   13644:	00168000 	call	16800 <__mcmp>
   13648:	d8c01517 	ldw	r3,84(sp)
   1364c:	0080d60e 	bge	zero,r2,139a8 <_dtoa_r+0xf0c>
   13650:	b13fffc3 	ldbu	r4,-1(r22)
   13654:	b0ffff84 	addi	r3,r22,-2
   13658:	01800e44 	movi	r6,57
   1365c:	00000306 	br	1366c <_dtoa_r+0xbd0>
   13660:	19000003 	ldbu	r4,0(r3)
   13664:	102d883a 	mov	r22,r2
   13668:	18ffffc4 	addi	r3,r3,-1
   1366c:	21403fcc 	andi	r5,r4,255
   13670:	2940201c 	xori	r5,r5,128
   13674:	297fe004 	addi	r5,r5,-128
   13678:	b0bfffc4 	addi	r2,r22,-1
   1367c:	2981a71e 	bne	r5,r6,13d1c <_dtoa_r+0x1280>
   13680:	b8bff71e 	bne	r23,r2,13660 <_dtoa_r+0xbc4>
   13684:	d8800617 	ldw	r2,24(sp)
   13688:	10800044 	addi	r2,r2,1
   1368c:	d8800615 	stw	r2,24(sp)
   13690:	00800c44 	movi	r2,49
   13694:	b8800005 	stb	r2,0(r23)
   13698:	8009883a 	mov	r4,r16
   1369c:	a00b883a 	mov	r5,r20
   136a0:	0015f5c0 	call	15f5c <_Bfree>
   136a4:	a83e9e26 	beq	r21,zero,13120 <_dtoa_r+0x684>
   136a8:	88000426 	beq	r17,zero,136bc <_dtoa_r+0xc20>
   136ac:	8d400326 	beq	r17,r21,136bc <_dtoa_r+0xc20>
   136b0:	8009883a 	mov	r4,r16
   136b4:	880b883a 	mov	r5,r17
   136b8:	0015f5c0 	call	15f5c <_Bfree>
   136bc:	8009883a 	mov	r4,r16
   136c0:	a80b883a 	mov	r5,r21
   136c4:	0015f5c0 	call	15f5c <_Bfree>
   136c8:	003e9506 	br	13120 <_dtoa_r+0x684>
   136cc:	00c00044 	movi	r3,1
   136d0:	d8c00d15 	stw	r3,52(sp)
   136d4:	003d9f06 	br	12d54 <_dtoa_r+0x2b8>
   136d8:	d9000817 	ldw	r4,32(sp)
   136dc:	d8800617 	ldw	r2,24(sp)
   136e0:	d8000b15 	stw	zero,44(sp)
   136e4:	2089c83a 	sub	r4,r4,r2
   136e8:	0087c83a 	sub	r3,zero,r2
   136ec:	d9000815 	stw	r4,32(sp)
   136f0:	d8c00a15 	stw	r3,40(sp)
   136f4:	003da306 	br	12d84 <_dtoa_r+0x2e8>
   136f8:	0529c83a 	sub	r20,zero,r20
   136fc:	dd000815 	stw	r20,32(sp)
   13700:	d8000715 	stw	zero,28(sp)
   13704:	003d9806 	br	12d68 <_dtoa_r+0x2cc>
   13708:	d9000617 	ldw	r4,24(sp)
   1370c:	00193300 	call	19330 <__floatsidf>
   13710:	1009883a 	mov	r4,r2
   13714:	180b883a 	mov	r5,r3
   13718:	980d883a 	mov	r6,r19
   1371c:	900f883a 	mov	r7,r18
   13720:	00191b00 	call	191b0 <__nedf2>
   13724:	103d7a26 	beq	r2,zero,12d10 <_dtoa_r+0x274>
   13728:	d8800617 	ldw	r2,24(sp)
   1372c:	10bfffc4 	addi	r2,r2,-1
   13730:	d8800615 	stw	r2,24(sp)
   13734:	003d7606 	br	12d10 <_dtoa_r+0x274>
   13738:	dcc00a17 	ldw	r19,40(sp)
   1373c:	dc800817 	ldw	r18,32(sp)
   13740:	002b883a 	mov	r21,zero
   13744:	003f4906 	br	1346c <_dtoa_r+0x9d0>
   13748:	00800704 	movi	r2,28
   1374c:	d8c00817 	ldw	r3,32(sp)
   13750:	d9000717 	ldw	r4,28(sp)
   13754:	90a5883a 	add	r18,r18,r2
   13758:	1887883a 	add	r3,r3,r2
   1375c:	2089883a 	add	r4,r4,r2
   13760:	d8c00815 	stw	r3,32(sp)
   13764:	d9000715 	stw	r4,28(sp)
   13768:	003f8406 	br	1357c <_dtoa_r+0xae0>
   1376c:	d9c00317 	ldw	r7,12(sp)
   13770:	013efb84 	movi	r4,-1042
   13774:	2509c83a 	sub	r4,r4,r20
   13778:	3908983a 	sll	r4,r7,r4
   1377c:	003d3006 	br	12c40 <_dtoa_r+0x1a4>
   13780:	d8000d15 	stw	zero,52(sp)
   13784:	003d7306 	br	12d54 <_dtoa_r+0x2b8>
   13788:	0480050e 	bge	zero,r18,137a0 <_dtoa_r+0xd04>
   1378c:	a80b883a 	mov	r5,r21
   13790:	8009883a 	mov	r4,r16
   13794:	900d883a 	mov	r6,r18
   13798:	00166a40 	call	166a4 <__lshift>
   1379c:	102b883a 	mov	r21,r2
   137a0:	8801611e 	bne	r17,zero,13d28 <_dtoa_r+0x128c>
   137a4:	a827883a 	mov	r19,r21
   137a8:	d8c00317 	ldw	r3,12(sp)
   137ac:	d9000917 	ldw	r4,36(sp)
   137b0:	b8bfffc4 	addi	r2,r23,-1
   137b4:	18c0004c 	andi	r3,r3,1
   137b8:	1105883a 	add	r2,r2,r4
   137bc:	b825883a 	mov	r18,r23
   137c0:	d8800515 	stw	r2,20(sp)
   137c4:	a823883a 	mov	r17,r21
   137c8:	d8c00315 	stw	r3,12(sp)
   137cc:	ddc00715 	stw	r23,28(sp)
   137d0:	e009883a 	mov	r4,fp
   137d4:	a00b883a 	mov	r5,r20
   137d8:	00128600 	call	12860 <quorem>
   137dc:	e009883a 	mov	r4,fp
   137e0:	880b883a 	mov	r5,r17
   137e4:	102d883a 	mov	r22,r2
   137e8:	00168000 	call	16800 <__mcmp>
   137ec:	980d883a 	mov	r6,r19
   137f0:	8009883a 	mov	r4,r16
   137f4:	a00b883a 	mov	r5,r20
   137f8:	102b883a 	mov	r21,r2
   137fc:	00168580 	call	16858 <__mdiff>
   13800:	100d883a 	mov	r6,r2
   13804:	10800317 	ldw	r2,12(r2)
   13808:	b5c00c04 	addi	r23,r22,48
   1380c:	10008c26 	beq	r2,zero,13a40 <_dtoa_r+0xfa4>
   13810:	8009883a 	mov	r4,r16
   13814:	300b883a 	mov	r5,r6
   13818:	0015f5c0 	call	15f5c <_Bfree>
   1381c:	00800044 	movi	r2,1
   13820:	a8007116 	blt	r21,zero,139e8 <_dtoa_r+0xf4c>
   13824:	a800041e 	bne	r21,zero,13838 <_dtoa_r+0xd9c>
   13828:	d9c00417 	ldw	r7,16(sp)
   1382c:	3800021e 	bne	r7,zero,13838 <_dtoa_r+0xd9c>
   13830:	d8c00317 	ldw	r3,12(sp)
   13834:	18006c26 	beq	r3,zero,139e8 <_dtoa_r+0xf4c>
   13838:	00814c16 	blt	zero,r2,13d6c <_dtoa_r+0x12d0>
   1383c:	d8c00517 	ldw	r3,20(sp)
   13840:	95400044 	addi	r21,r18,1
   13844:	95c00005 	stb	r23,0(r18)
   13848:	a82d883a 	mov	r22,r21
   1384c:	90c14d26 	beq	r18,r3,13d84 <_dtoa_r+0x12e8>
   13850:	e00b883a 	mov	r5,fp
   13854:	8009883a 	mov	r4,r16
   13858:	01800284 	movi	r6,10
   1385c:	000f883a 	mov	r7,zero
   13860:	0015f840 	call	15f84 <__multadd>
   13864:	1039883a 	mov	fp,r2
   13868:	8cc08b26 	beq	r17,r19,13a98 <_dtoa_r+0xffc>
   1386c:	880b883a 	mov	r5,r17
   13870:	01800284 	movi	r6,10
   13874:	000f883a 	mov	r7,zero
   13878:	8009883a 	mov	r4,r16
   1387c:	0015f840 	call	15f84 <__multadd>
   13880:	980b883a 	mov	r5,r19
   13884:	8009883a 	mov	r4,r16
   13888:	01800284 	movi	r6,10
   1388c:	000f883a 	mov	r7,zero
   13890:	1023883a 	mov	r17,r2
   13894:	0015f840 	call	15f84 <__multadd>
   13898:	1027883a 	mov	r19,r2
   1389c:	a825883a 	mov	r18,r21
   138a0:	003fcb06 	br	137d0 <_dtoa_r+0xd34>
   138a4:	d9c00417 	ldw	r7,16(sp)
   138a8:	00800104 	movi	r2,4
   138ac:	3880e426 	beq	r7,r2,13c40 <_dtoa_r+0x11a4>
   138b0:	00800144 	movi	r2,5
   138b4:	38be3c1e 	bne	r7,r2,131a8 <_dtoa_r+0x70c>
   138b8:	00c00044 	movi	r3,1
   138bc:	d8c00c15 	stw	r3,48(sp)
   138c0:	d9c02117 	ldw	r7,132(sp)
   138c4:	d8800617 	ldw	r2,24(sp)
   138c8:	388f883a 	add	r7,r7,r2
   138cc:	3c800044 	addi	r18,r7,1
   138d0:	d9c00e15 	stw	r7,56(sp)
   138d4:	dc800915 	stw	r18,36(sp)
   138d8:	04bd3e16 	blt	zero,r18,12dd4 <_dtoa_r+0x338>
   138dc:	80001115 	stw	zero,68(r16)
   138e0:	000b883a 	mov	r5,zero
   138e4:	003d4606 	br	12e00 <_dtoa_r+0x364>
   138e8:	d8c00317 	ldw	r3,12(sp)
   138ec:	183f0e1e 	bne	r3,zero,13528 <_dtoa_r+0xa8c>
   138f0:	00c00434 	movhi	r3,16
   138f4:	18ffffc4 	addi	r3,r3,-1
   138f8:	88c6703a 	and	r3,r17,r3
   138fc:	183f0a1e 	bne	r3,zero,13528 <_dtoa_r+0xa8c>
   13900:	8c5ffc2c 	andhi	r17,r17,32752
   13904:	883f0826 	beq	r17,zero,13528 <_dtoa_r+0xa8c>
   13908:	d9000817 	ldw	r4,32(sp)
   1390c:	d9c00717 	ldw	r7,28(sp)
   13910:	1023883a 	mov	r17,r2
   13914:	2089883a 	add	r4,r4,r2
   13918:	388f883a 	add	r7,r7,r2
   1391c:	d9000815 	stw	r4,32(sp)
   13920:	d9c00715 	stw	r7,28(sp)
   13924:	003f0106 	br	1352c <_dtoa_r+0xa90>
   13928:	9005883a 	mov	r2,r18
   1392c:	003ed306 	br	1347c <_dtoa_r+0x9e0>
   13930:	d8800917 	ldw	r2,36(sp)
   13934:	00be3516 	blt	zero,r2,1320c <_dtoa_r+0x770>
   13938:	1000b61e 	bne	r2,zero,13c14 <_dtoa_r+0x1178>
   1393c:	9009883a 	mov	r4,r18
   13940:	980b883a 	mov	r5,r19
   13944:	000d883a 	mov	r6,zero
   13948:	01d00534 	movhi	r7,16404
   1394c:	0018cbc0 	call	18cbc <__muldf3>
   13950:	d9800317 	ldw	r6,12(sp)
   13954:	1009883a 	mov	r4,r2
   13958:	180b883a 	mov	r5,r3
   1395c:	880f883a 	mov	r7,r17
   13960:	00192700 	call	19270 <__gedf2>
   13964:	0029883a 	mov	r20,zero
   13968:	002b883a 	mov	r21,zero
   1396c:	10007e16 	blt	r2,zero,13b68 <_dtoa_r+0x10cc>
   13970:	d8802117 	ldw	r2,132(sp)
   13974:	b82d883a 	mov	r22,r23
   13978:	0084303a 	nor	r2,zero,r2
   1397c:	d8800615 	stw	r2,24(sp)
   13980:	8009883a 	mov	r4,r16
   13984:	a00b883a 	mov	r5,r20
   13988:	0015f5c0 	call	15f5c <_Bfree>
   1398c:	a83f4b1e 	bne	r21,zero,136bc <_dtoa_r+0xc20>
   13990:	003de306 	br	13120 <_dtoa_r+0x684>
   13994:	e00b883a 	mov	r5,fp
   13998:	8009883a 	mov	r4,r16
   1399c:	00165780 	call	16578 <__pow5mult>
   139a0:	1039883a 	mov	fp,r2
   139a4:	003ed206 	br	134f0 <_dtoa_r+0xa54>
   139a8:	1000021e 	bne	r2,zero,139b4 <_dtoa_r+0xf18>
   139ac:	18c0004c 	andi	r3,r3,1
   139b0:	183f271e 	bne	r3,zero,13650 <_dtoa_r+0xbb4>
   139b4:	01000c04 	movi	r4,48
   139b8:	00000106 	br	139c0 <_dtoa_r+0xf24>
   139bc:	102d883a 	mov	r22,r2
   139c0:	b0bfffc4 	addi	r2,r22,-1
   139c4:	10c00007 	ldb	r3,0(r2)
   139c8:	193ffc26 	beq	r3,r4,139bc <_dtoa_r+0xf20>
   139cc:	003f3206 	br	13698 <_dtoa_r+0xbfc>
   139d0:	d8c00f17 	ldw	r3,60(sp)
   139d4:	18015026 	beq	r3,zero,13f18 <_dtoa_r+0x147c>
   139d8:	10810cc4 	addi	r2,r2,1075
   139dc:	dcc00a17 	ldw	r19,40(sp)
   139e0:	dc800817 	ldw	r18,32(sp)
   139e4:	003e9706 	br	13444 <_dtoa_r+0x9a8>
   139e8:	b807883a 	mov	r3,r23
   139ec:	182b883a 	mov	r21,r3
   139f0:	ddc00717 	ldw	r23,28(sp)
   139f4:	00800e0e 	bge	zero,r2,13a30 <_dtoa_r+0xf94>
   139f8:	e00b883a 	mov	r5,fp
   139fc:	01800044 	movi	r6,1
   13a00:	8009883a 	mov	r4,r16
   13a04:	d8c01515 	stw	r3,84(sp)
   13a08:	00166a40 	call	166a4 <__lshift>
   13a0c:	1009883a 	mov	r4,r2
   13a10:	a00b883a 	mov	r5,r20
   13a14:	1039883a 	mov	fp,r2
   13a18:	00168000 	call	16800 <__mcmp>
   13a1c:	d8c01517 	ldw	r3,84(sp)
   13a20:	0081880e 	bge	zero,r2,14044 <_dtoa_r+0x15a8>
   13a24:	00800e44 	movi	r2,57
   13a28:	b0c00c44 	addi	r3,r22,49
   13a2c:	a8816326 	beq	r21,r2,13fbc <_dtoa_r+0x1520>
   13a30:	90c00005 	stb	r3,0(r18)
   13a34:	95800044 	addi	r22,r18,1
   13a38:	982b883a 	mov	r21,r19
   13a3c:	003f1606 	br	13698 <_dtoa_r+0xbfc>
   13a40:	300b883a 	mov	r5,r6
   13a44:	e009883a 	mov	r4,fp
   13a48:	d9801515 	stw	r6,84(sp)
   13a4c:	00168000 	call	16800 <__mcmp>
   13a50:	d9801517 	ldw	r6,84(sp)
   13a54:	8009883a 	mov	r4,r16
   13a58:	d8801515 	stw	r2,84(sp)
   13a5c:	300b883a 	mov	r5,r6
   13a60:	0015f5c0 	call	15f5c <_Bfree>
   13a64:	d8801517 	ldw	r2,84(sp)
   13a68:	103f6d1e 	bne	r2,zero,13820 <_dtoa_r+0xd84>
   13a6c:	d9c00417 	ldw	r7,16(sp)
   13a70:	383f6b1e 	bne	r7,zero,13820 <_dtoa_r+0xd84>
   13a74:	d8c00317 	ldw	r3,12(sp)
   13a78:	183f691e 	bne	r3,zero,13820 <_dtoa_r+0xd84>
   13a7c:	b807883a 	mov	r3,r23
   13a80:	00800e44 	movi	r2,57
   13a84:	ddc00717 	ldw	r23,28(sp)
   13a88:	18814c26 	beq	r3,r2,13fbc <_dtoa_r+0x1520>
   13a8c:	057fe80e 	bge	zero,r21,13a30 <_dtoa_r+0xf94>
   13a90:	b0c00c44 	addi	r3,r22,49
   13a94:	003fe606 	br	13a30 <_dtoa_r+0xf94>
   13a98:	880b883a 	mov	r5,r17
   13a9c:	8009883a 	mov	r4,r16
   13aa0:	01800284 	movi	r6,10
   13aa4:	000f883a 	mov	r7,zero
   13aa8:	0015f840 	call	15f84 <__multadd>
   13aac:	1023883a 	mov	r17,r2
   13ab0:	1027883a 	mov	r19,r2
   13ab4:	a825883a 	mov	r18,r21
   13ab8:	003f4506 	br	137d0 <_dtoa_r+0xd34>
   13abc:	e009883a 	mov	r4,fp
   13ac0:	a00b883a 	mov	r5,r20
   13ac4:	00168000 	call	16800 <__mcmp>
   13ac8:	103ebc0e 	bge	r2,zero,135bc <_dtoa_r+0xb20>
   13acc:	e00b883a 	mov	r5,fp
   13ad0:	8009883a 	mov	r4,r16
   13ad4:	01800284 	movi	r6,10
   13ad8:	000f883a 	mov	r7,zero
   13adc:	0015f840 	call	15f84 <__multadd>
   13ae0:	1039883a 	mov	fp,r2
   13ae4:	d8800617 	ldw	r2,24(sp)
   13ae8:	d8c00c17 	ldw	r3,48(sp)
   13aec:	10bfffc4 	addi	r2,r2,-1
   13af0:	d8800615 	stw	r2,24(sp)
   13af4:	1801571e 	bne	r3,zero,14054 <_dtoa_r+0x15b8>
   13af8:	d9c00e17 	ldw	r7,56(sp)
   13afc:	d9c00915 	stw	r7,36(sp)
   13b00:	003eae06 	br	135bc <_dtoa_r+0xb20>
   13b04:	a0800417 	ldw	r2,16(r20)
   13b08:	10800104 	addi	r2,r2,4
   13b0c:	1085883a 	add	r2,r2,r2
   13b10:	1085883a 	add	r2,r2,r2
   13b14:	a085883a 	add	r2,r20,r2
   13b18:	11000017 	ldw	r4,0(r2)
   13b1c:	00161cc0 	call	161cc <__hi0bits>
   13b20:	00c00804 	movi	r3,32
   13b24:	1885c83a 	sub	r2,r3,r2
   13b28:	003e8306 	br	13538 <_dtoa_r+0xa9c>
   13b2c:	d9c00417 	ldw	r7,16(sp)
   13b30:	00800084 	movi	r2,2
   13b34:	11fea30e 	bge	r2,r7,135c4 <_dtoa_r+0xb28>
   13b38:	d8800917 	ldw	r2,36(sp)
   13b3c:	103f8c1e 	bne	r2,zero,13970 <_dtoa_r+0xed4>
   13b40:	a00b883a 	mov	r5,r20
   13b44:	8009883a 	mov	r4,r16
   13b48:	01800144 	movi	r6,5
   13b4c:	000f883a 	mov	r7,zero
   13b50:	0015f840 	call	15f84 <__multadd>
   13b54:	e009883a 	mov	r4,fp
   13b58:	100b883a 	mov	r5,r2
   13b5c:	1029883a 	mov	r20,r2
   13b60:	00168000 	call	16800 <__mcmp>
   13b64:	00bf820e 	bge	zero,r2,13970 <_dtoa_r+0xed4>
   13b68:	00800c44 	movi	r2,49
   13b6c:	b8800005 	stb	r2,0(r23)
   13b70:	d8800617 	ldw	r2,24(sp)
   13b74:	bd800044 	addi	r22,r23,1
   13b78:	10800044 	addi	r2,r2,1
   13b7c:	d8800615 	stw	r2,24(sp)
   13b80:	003f7f06 	br	13980 <_dtoa_r+0xee4>
   13b84:	dc000417 	ldw	r16,16(sp)
   13b88:	003d6506 	br	13120 <_dtoa_r+0x684>
   13b8c:	9009883a 	mov	r4,r18
   13b90:	00193300 	call	19330 <__floatsidf>
   13b94:	1009883a 	mov	r4,r2
   13b98:	180b883a 	mov	r5,r3
   13b9c:	980d883a 	mov	r6,r19
   13ba0:	a00f883a 	mov	r7,r20
   13ba4:	0018cbc0 	call	18cbc <__muldf3>
   13ba8:	1009883a 	mov	r4,r2
   13bac:	180b883a 	mov	r5,r3
   13bb0:	000d883a 	mov	r6,zero
   13bb4:	01d00734 	movhi	r7,16412
   13bb8:	0018c080 	call	18c08 <__adddf3>
   13bbc:	057f3034 	movhi	r21,64704
   13bc0:	1025883a 	mov	r18,r2
   13bc4:	1d6b883a 	add	r21,r3,r21
   13bc8:	9809883a 	mov	r4,r19
   13bcc:	a00b883a 	mov	r5,r20
   13bd0:	000d883a 	mov	r6,zero
   13bd4:	01d00534 	movhi	r7,16404
   13bd8:	0018c5c0 	call	18c5c <__subdf3>
   13bdc:	1009883a 	mov	r4,r2
   13be0:	180b883a 	mov	r5,r3
   13be4:	900d883a 	mov	r6,r18
   13be8:	a80f883a 	mov	r7,r21
   13bec:	1027883a 	mov	r19,r2
   13bf0:	1829883a 	mov	r20,r3
   13bf4:	001920c0 	call	1920c <__gtdf2>
   13bf8:	00806616 	blt	zero,r2,13d94 <_dtoa_r+0x12f8>
   13bfc:	a9e0003c 	xorhi	r7,r21,32768
   13c00:	9809883a 	mov	r4,r19
   13c04:	a00b883a 	mov	r5,r20
   13c08:	900d883a 	mov	r6,r18
   13c0c:	00192d40 	call	192d4 <__ltdf2>
   13c10:	103d710e 	bge	r2,zero,131d8 <_dtoa_r+0x73c>
   13c14:	0029883a 	mov	r20,zero
   13c18:	002b883a 	mov	r21,zero
   13c1c:	003f5406 	br	13970 <_dtoa_r+0xed4>
   13c20:	d9800a17 	ldw	r6,40(sp)
   13c24:	e00b883a 	mov	r5,fp
   13c28:	8009883a 	mov	r4,r16
   13c2c:	00165780 	call	16578 <__pow5mult>
   13c30:	1039883a 	mov	fp,r2
   13c34:	003e2e06 	br	134f0 <_dtoa_r+0xa54>
   13c38:	d8000c15 	stw	zero,48(sp)
   13c3c:	003f2006 	br	138c0 <_dtoa_r+0xe24>
   13c40:	00800044 	movi	r2,1
   13c44:	d8800c15 	stw	r2,48(sp)
   13c48:	003c5d06 	br	12dc0 <_dtoa_r+0x324>
   13c4c:	d8c00a17 	ldw	r3,40(sp)
   13c50:	d9000b17 	ldw	r4,44(sp)
   13c54:	dcc00a15 	stw	r19,40(sp)
   13c58:	98c5c83a 	sub	r2,r19,r3
   13c5c:	2089883a 	add	r4,r4,r2
   13c60:	d9000b15 	stw	r4,44(sp)
   13c64:	0027883a 	mov	r19,zero
   13c68:	003df206 	br	13434 <_dtoa_r+0x998>
   13c6c:	d9000317 	ldw	r4,12(sp)
   13c70:	8829883a 	mov	r20,r17
   13c74:	04800084 	movi	r18,2
   13c78:	d9001015 	stw	r4,64(sp)
   13c7c:	003c8106 	br	12e84 <_dtoa_r+0x3e8>
   13c80:	04800044 	movi	r18,1
   13c84:	dc800e15 	stw	r18,56(sp)
   13c88:	dc800915 	stw	r18,36(sp)
   13c8c:	dc802115 	stw	r18,132(sp)
   13c90:	003f1206 	br	138dc <_dtoa_r+0xe40>
   13c94:	d8800617 	ldw	r2,24(sp)
   13c98:	00abc83a 	sub	r21,zero,r2
   13c9c:	a800a426 	beq	r21,zero,13f30 <_dtoa_r+0x1494>
   13ca0:	a88003cc 	andi	r2,r21,15
   13ca4:	100490fa 	slli	r2,r2,3
   13ca8:	00c000f4 	movhi	r3,3
   13cac:	18e08b04 	addi	r3,r3,-32212
   13cb0:	d9000317 	ldw	r4,12(sp)
   13cb4:	1885883a 	add	r2,r3,r2
   13cb8:	11800017 	ldw	r6,0(r2)
   13cbc:	11c00117 	ldw	r7,4(r2)
   13cc0:	a82bd13a 	srai	r21,r21,4
   13cc4:	880b883a 	mov	r5,r17
   13cc8:	0018cbc0 	call	18cbc <__muldf3>
   13ccc:	1027883a 	mov	r19,r2
   13cd0:	1829883a 	mov	r20,r3
   13cd4:	a800e826 	beq	r21,zero,14078 <_dtoa_r+0x15dc>
   13cd8:	058000f4 	movhi	r22,3
   13cdc:	b5a08104 	addi	r22,r22,-32252
   13ce0:	04800084 	movi	r18,2
   13ce4:	a980004c 	andi	r6,r21,1
   13ce8:	1009883a 	mov	r4,r2
   13cec:	a82bd07a 	srai	r21,r21,1
   13cf0:	180b883a 	mov	r5,r3
   13cf4:	30000426 	beq	r6,zero,13d08 <_dtoa_r+0x126c>
   13cf8:	b1800017 	ldw	r6,0(r22)
   13cfc:	b1c00117 	ldw	r7,4(r22)
   13d00:	94800044 	addi	r18,r18,1
   13d04:	0018cbc0 	call	18cbc <__muldf3>
   13d08:	b5800204 	addi	r22,r22,8
   13d0c:	a83ff51e 	bne	r21,zero,13ce4 <_dtoa_r+0x1248>
   13d10:	1027883a 	mov	r19,r2
   13d14:	1829883a 	mov	r20,r3
   13d18:	003c7306 	br	12ee8 <_dtoa_r+0x44c>
   13d1c:	21000044 	addi	r4,r4,1
   13d20:	11000005 	stb	r4,0(r2)
   13d24:	003e5c06 	br	13698 <_dtoa_r+0xbfc>
   13d28:	a9400117 	ldw	r5,4(r21)
   13d2c:	8009883a 	mov	r4,r16
   13d30:	0015eb40 	call	15eb4 <_Balloc>
   13d34:	a9800417 	ldw	r6,16(r21)
   13d38:	11000304 	addi	r4,r2,12
   13d3c:	a9400304 	addi	r5,r21,12
   13d40:	31800084 	addi	r6,r6,2
   13d44:	318d883a 	add	r6,r6,r6
   13d48:	318d883a 	add	r6,r6,r6
   13d4c:	1023883a 	mov	r17,r2
   13d50:	0015b0c0 	call	15b0c <memcpy>
   13d54:	8009883a 	mov	r4,r16
   13d58:	880b883a 	mov	r5,r17
   13d5c:	01800044 	movi	r6,1
   13d60:	00166a40 	call	166a4 <__lshift>
   13d64:	1027883a 	mov	r19,r2
   13d68:	003e8f06 	br	137a8 <_dtoa_r+0xd0c>
   13d6c:	b807883a 	mov	r3,r23
   13d70:	00800e44 	movi	r2,57
   13d74:	ddc00717 	ldw	r23,28(sp)
   13d78:	18809026 	beq	r3,r2,13fbc <_dtoa_r+0x1520>
   13d7c:	18c00044 	addi	r3,r3,1
   13d80:	003f2b06 	br	13a30 <_dtoa_r+0xf94>
   13d84:	b807883a 	mov	r3,r23
   13d88:	982b883a 	mov	r21,r19
   13d8c:	ddc00717 	ldw	r23,28(sp)
   13d90:	003e2406 	br	13624 <_dtoa_r+0xb88>
   13d94:	0029883a 	mov	r20,zero
   13d98:	002b883a 	mov	r21,zero
   13d9c:	003f7206 	br	13b68 <_dtoa_r+0x10cc>
   13da0:	593fffc4 	addi	r4,r11,-1
   13da4:	200490fa 	slli	r2,r4,3
   13da8:	00c000f4 	movhi	r3,3
   13dac:	18e08b04 	addi	r3,r3,-32212
   13db0:	d9001015 	stw	r4,64(sp)
   13db4:	1885883a 	add	r2,r3,r2
   13db8:	11000017 	ldw	r4,0(r2)
   13dbc:	11400117 	ldw	r5,4(r2)
   13dc0:	900d883a 	mov	r6,r18
   13dc4:	a80f883a 	mov	r7,r21
   13dc8:	dac01615 	stw	r11,88(sp)
   13dcc:	0018cbc0 	call	18cbc <__muldf3>
   13dd0:	a00b883a 	mov	r5,r20
   13dd4:	9809883a 	mov	r4,r19
   13dd8:	d8c01215 	stw	r3,72(sp)
   13ddc:	d8801115 	stw	r2,68(sp)
   13de0:	00194040 	call	19404 <__fixdfsi>
   13de4:	1009883a 	mov	r4,r2
   13de8:	1025883a 	mov	r18,r2
   13dec:	00193300 	call	19330 <__floatsidf>
   13df0:	9809883a 	mov	r4,r19
   13df4:	a00b883a 	mov	r5,r20
   13df8:	100d883a 	mov	r6,r2
   13dfc:	180f883a 	mov	r7,r3
   13e00:	94800c04 	addi	r18,r18,48
   13e04:	0018c5c0 	call	18c5c <__subdf3>
   13e08:	bc800005 	stb	r18,0(r23)
   13e0c:	dac01617 	ldw	r11,88(sp)
   13e10:	102b883a 	mov	r21,r2
   13e14:	00800044 	movi	r2,1
   13e18:	bd800044 	addi	r22,r23,1
   13e1c:	1815883a 	mov	r10,r3
   13e20:	58802226 	beq	r11,r2,13eac <_dtoa_r+0x1410>
   13e24:	bad7883a 	add	r11,r23,r11
   13e28:	dc001415 	stw	r16,80(sp)
   13e2c:	a805883a 	mov	r2,r21
   13e30:	b027883a 	mov	r19,r22
   13e34:	5821883a 	mov	r16,r11
   13e38:	882b883a 	mov	r21,r17
   13e3c:	000d883a 	mov	r6,zero
   13e40:	01d00934 	movhi	r7,16420
   13e44:	1009883a 	mov	r4,r2
   13e48:	180b883a 	mov	r5,r3
   13e4c:	0018cbc0 	call	18cbc <__muldf3>
   13e50:	180b883a 	mov	r5,r3
   13e54:	1009883a 	mov	r4,r2
   13e58:	1829883a 	mov	r20,r3
   13e5c:	1023883a 	mov	r17,r2
   13e60:	00194040 	call	19404 <__fixdfsi>
   13e64:	1009883a 	mov	r4,r2
   13e68:	1025883a 	mov	r18,r2
   13e6c:	00193300 	call	19330 <__floatsidf>
   13e70:	8809883a 	mov	r4,r17
   13e74:	a00b883a 	mov	r5,r20
   13e78:	100d883a 	mov	r6,r2
   13e7c:	180f883a 	mov	r7,r3
   13e80:	94800c04 	addi	r18,r18,48
   13e84:	0018c5c0 	call	18c5c <__subdf3>
   13e88:	9cc00044 	addi	r19,r19,1
   13e8c:	9cbfffc5 	stb	r18,-1(r19)
   13e90:	9c3fea1e 	bne	r19,r16,13e3c <_dtoa_r+0x13a0>
   13e94:	1815883a 	mov	r10,r3
   13e98:	d8c01017 	ldw	r3,64(sp)
   13e9c:	dc001417 	ldw	r16,80(sp)
   13ea0:	a823883a 	mov	r17,r21
   13ea4:	b0ed883a 	add	r22,r22,r3
   13ea8:	102b883a 	mov	r21,r2
   13eac:	d9001117 	ldw	r4,68(sp)
   13eb0:	d9401217 	ldw	r5,72(sp)
   13eb4:	000d883a 	mov	r6,zero
   13eb8:	01cff834 	movhi	r7,16352
   13ebc:	da801515 	stw	r10,84(sp)
   13ec0:	0018c080 	call	18c08 <__adddf3>
   13ec4:	da801517 	ldw	r10,84(sp)
   13ec8:	1009883a 	mov	r4,r2
   13ecc:	180b883a 	mov	r5,r3
   13ed0:	500f883a 	mov	r7,r10
   13ed4:	a80d883a 	mov	r6,r21
   13ed8:	00192d40 	call	192d4 <__ltdf2>
   13edc:	da801517 	ldw	r10,84(sp)
   13ee0:	10003b0e 	bge	r2,zero,13fd0 <_dtoa_r+0x1534>
   13ee4:	d9c01317 	ldw	r7,76(sp)
   13ee8:	b53fffc3 	ldbu	r20,-1(r22)
   13eec:	d9c00615 	stw	r7,24(sp)
   13ef0:	003d3106 	br	133b8 <_dtoa_r+0x91c>
   13ef4:	d8800817 	ldw	r2,32(sp)
   13ef8:	11e5c83a 	sub	r18,r2,r7
   13efc:	0005883a 	mov	r2,zero
   13f00:	003d5006 	br	13444 <_dtoa_r+0x9a8>
   13f04:	05800044 	movi	r22,1
   13f08:	003dc406 	br	1361c <_dtoa_r+0xb80>
   13f0c:	a5000044 	addi	r20,r20,1
   13f10:	15000005 	stb	r20,0(r2)
   13f14:	003c8206 	br	13120 <_dtoa_r+0x684>
   13f18:	d8800217 	ldw	r2,8(sp)
   13f1c:	00c00d84 	movi	r3,54
   13f20:	dcc00a17 	ldw	r19,40(sp)
   13f24:	1885c83a 	sub	r2,r3,r2
   13f28:	dc800817 	ldw	r18,32(sp)
   13f2c:	003d4506 	br	13444 <_dtoa_r+0x9a8>
   13f30:	dcc00317 	ldw	r19,12(sp)
   13f34:	8829883a 	mov	r20,r17
   13f38:	04800084 	movi	r18,2
   13f3c:	003bea06 	br	12ee8 <_dtoa_r+0x44c>
   13f40:	d9000917 	ldw	r4,36(sp)
   13f44:	203f1126 	beq	r4,zero,13b8c <_dtoa_r+0x10f0>
   13f48:	d9c00e17 	ldw	r7,56(sp)
   13f4c:	01fca20e 	bge	zero,r7,131d8 <_dtoa_r+0x73c>
   13f50:	a00b883a 	mov	r5,r20
   13f54:	9809883a 	mov	r4,r19
   13f58:	000d883a 	mov	r6,zero
   13f5c:	01d00934 	movhi	r7,16420
   13f60:	0018cbc0 	call	18cbc <__muldf3>
   13f64:	91000044 	addi	r4,r18,1
   13f68:	1027883a 	mov	r19,r2
   13f6c:	1829883a 	mov	r20,r3
   13f70:	00193300 	call	19330 <__floatsidf>
   13f74:	9809883a 	mov	r4,r19
   13f78:	a00b883a 	mov	r5,r20
   13f7c:	100d883a 	mov	r6,r2
   13f80:	180f883a 	mov	r7,r3
   13f84:	0018cbc0 	call	18cbc <__muldf3>
   13f88:	1009883a 	mov	r4,r2
   13f8c:	180b883a 	mov	r5,r3
   13f90:	000d883a 	mov	r6,zero
   13f94:	01d00734 	movhi	r7,16412
   13f98:	0018c080 	call	18c08 <__adddf3>
   13f9c:	1025883a 	mov	r18,r2
   13fa0:	d8800617 	ldw	r2,24(sp)
   13fa4:	057f3034 	movhi	r21,64704
   13fa8:	1d6b883a 	add	r21,r3,r21
   13fac:	10bfffc4 	addi	r2,r2,-1
   13fb0:	d8801315 	stw	r2,76(sp)
   13fb4:	dac00e17 	ldw	r11,56(sp)
   13fb8:	003be706 	br	12f58 <_dtoa_r+0x4bc>
   13fbc:	01000e44 	movi	r4,57
   13fc0:	91000005 	stb	r4,0(r18)
   13fc4:	95800044 	addi	r22,r18,1
   13fc8:	982b883a 	mov	r21,r19
   13fcc:	003da106 	br	13654 <_dtoa_r+0xbb8>
   13fd0:	d9801117 	ldw	r6,68(sp)
   13fd4:	d9c01217 	ldw	r7,72(sp)
   13fd8:	0009883a 	mov	r4,zero
   13fdc:	014ff834 	movhi	r5,16352
   13fe0:	da801515 	stw	r10,84(sp)
   13fe4:	0018c5c0 	call	18c5c <__subdf3>
   13fe8:	da801517 	ldw	r10,84(sp)
   13fec:	1009883a 	mov	r4,r2
   13ff0:	180b883a 	mov	r5,r3
   13ff4:	a80d883a 	mov	r6,r21
   13ff8:	500f883a 	mov	r7,r10
   13ffc:	001920c0 	call	1920c <__gtdf2>
   14000:	00bc750e 	bge	zero,r2,131d8 <_dtoa_r+0x73c>
   14004:	01000c04 	movi	r4,48
   14008:	00000106 	br	14010 <_dtoa_r+0x1574>
   1400c:	102d883a 	mov	r22,r2
   14010:	b0bfffc4 	addi	r2,r22,-1
   14014:	10c00007 	ldb	r3,0(r2)
   14018:	193ffc26 	beq	r3,r4,1400c <_dtoa_r+0x1570>
   1401c:	d8801317 	ldw	r2,76(sp)
   14020:	d8800615 	stw	r2,24(sp)
   14024:	003c3e06 	br	13120 <_dtoa_r+0x684>
   14028:	d9001317 	ldw	r4,76(sp)
   1402c:	df001117 	ldw	fp,68(sp)
   14030:	d9000615 	stw	r4,24(sp)
   14034:	003ce006 	br	133b8 <_dtoa_r+0x91c>
   14038:	df001117 	ldw	fp,68(sp)
   1403c:	dc401217 	ldw	r17,72(sp)
   14040:	003c6506 	br	131d8 <_dtoa_r+0x73c>
   14044:	103e7a1e 	bne	r2,zero,13a30 <_dtoa_r+0xf94>
   14048:	1880004c 	andi	r2,r3,1
   1404c:	103e7826 	beq	r2,zero,13a30 <_dtoa_r+0xf94>
   14050:	003e7406 	br	13a24 <_dtoa_r+0xf88>
   14054:	8009883a 	mov	r4,r16
   14058:	a80b883a 	mov	r5,r21
   1405c:	01800284 	movi	r6,10
   14060:	000f883a 	mov	r7,zero
   14064:	0015f840 	call	15f84 <__multadd>
   14068:	d9000e17 	ldw	r4,56(sp)
   1406c:	102b883a 	mov	r21,r2
   14070:	d9000915 	stw	r4,36(sp)
   14074:	003d5106 	br	135bc <_dtoa_r+0xb20>
   14078:	04800084 	movi	r18,2
   1407c:	003b9a06 	br	12ee8 <_dtoa_r+0x44c>
   14080:	d8c01317 	ldw	r3,76(sp)
   14084:	d8c00615 	stw	r3,24(sp)
   14088:	003ccb06 	br	133b8 <_dtoa_r+0x91c>
   1408c:	d8c01317 	ldw	r3,76(sp)
   14090:	d8c00615 	stw	r3,24(sp)
   14094:	003c2206 	br	13120 <_dtoa_r+0x684>
   14098:	20fd3826 	beq	r4,r3,1357c <_dtoa_r+0xae0>
   1409c:	00c00f04 	movi	r3,60
   140a0:	1885c83a 	sub	r2,r3,r2
   140a4:	003da906 	br	1374c <_dtoa_r+0xcb0>
   140a8:	000b883a 	mov	r5,zero
   140ac:	003b5406 	br	12e00 <_dtoa_r+0x364>
   140b0:	04c00044 	movi	r19,1
   140b4:	003b3b06 	br	12da4 <_dtoa_r+0x308>

000140b8 <_fflush_r>:
   140b8:	defffb04 	addi	sp,sp,-20
   140bc:	dcc00315 	stw	r19,12(sp)
   140c0:	dc400115 	stw	r17,4(sp)
   140c4:	dfc00415 	stw	ra,16(sp)
   140c8:	dc800215 	stw	r18,8(sp)
   140cc:	dc000015 	stw	r16,0(sp)
   140d0:	2027883a 	mov	r19,r4
   140d4:	2823883a 	mov	r17,r5
   140d8:	20000226 	beq	r4,zero,140e4 <_fflush_r+0x2c>
   140dc:	20800e17 	ldw	r2,56(r4)
   140e0:	10005726 	beq	r2,zero,14240 <_fflush_r+0x188>
   140e4:	8880030b 	ldhu	r2,12(r17)
   140e8:	10c0020c 	andi	r3,r2,8
   140ec:	18ffffcc 	andi	r3,r3,65535
   140f0:	18e0001c 	xori	r3,r3,32768
   140f4:	18e00004 	addi	r3,r3,-32768
   140f8:	1800311e 	bne	r3,zero,141c0 <_fflush_r+0x108>
   140fc:	89000117 	ldw	r4,4(r17)
   14100:	10c20014 	ori	r3,r2,2048
   14104:	88c0030d 	sth	r3,12(r17)
   14108:	180b883a 	mov	r5,r3
   1410c:	0100520e 	bge	zero,r4,14258 <_fflush_r+0x1a0>
   14110:	88c00a17 	ldw	r3,40(r17)
   14114:	18002226 	beq	r3,zero,141a0 <_fflush_r+0xe8>
   14118:	1084000c 	andi	r2,r2,4096
   1411c:	10bfffcc 	andi	r2,r2,65535
   14120:	10a0001c 	xori	r2,r2,32768
   14124:	10a00004 	addi	r2,r2,-32768
   14128:	10004e26 	beq	r2,zero,14264 <_fflush_r+0x1ac>
   1412c:	8c001417 	ldw	r16,80(r17)
   14130:	2940010c 	andi	r5,r5,4
   14134:	297fffcc 	andi	r5,r5,65535
   14138:	2960001c 	xori	r5,r5,32768
   1413c:	29600004 	addi	r5,r5,-32768
   14140:	28000626 	beq	r5,zero,1415c <_fflush_r+0xa4>
   14144:	89000117 	ldw	r4,4(r17)
   14148:	88800c17 	ldw	r2,48(r17)
   1414c:	8121c83a 	sub	r16,r16,r4
   14150:	10000226 	beq	r2,zero,1415c <_fflush_r+0xa4>
   14154:	88800f17 	ldw	r2,60(r17)
   14158:	80a1c83a 	sub	r16,r16,r2
   1415c:	89400717 	ldw	r5,28(r17)
   14160:	9809883a 	mov	r4,r19
   14164:	800d883a 	mov	r6,r16
   14168:	000f883a 	mov	r7,zero
   1416c:	183ee83a 	callr	r3
   14170:	8080281e 	bne	r16,r2,14214 <_fflush_r+0x15c>
   14174:	8880030b 	ldhu	r2,12(r17)
   14178:	88c00417 	ldw	r3,16(r17)
   1417c:	88000115 	stw	zero,4(r17)
   14180:	113dffcc 	andi	r4,r2,63487
   14184:	1084000c 	andi	r2,r2,4096
   14188:	10bfffcc 	andi	r2,r2,65535
   1418c:	10a0001c 	xori	r2,r2,32768
   14190:	8900030d 	sth	r4,12(r17)
   14194:	88c00015 	stw	r3,0(r17)
   14198:	10a00004 	addi	r2,r2,-32768
   1419c:	10002c1e 	bne	r2,zero,14250 <_fflush_r+0x198>
   141a0:	0005883a 	mov	r2,zero
   141a4:	dfc00417 	ldw	ra,16(sp)
   141a8:	dcc00317 	ldw	r19,12(sp)
   141ac:	dc800217 	ldw	r18,8(sp)
   141b0:	dc400117 	ldw	r17,4(sp)
   141b4:	dc000017 	ldw	r16,0(sp)
   141b8:	dec00504 	addi	sp,sp,20
   141bc:	f800283a 	ret
   141c0:	8c800417 	ldw	r18,16(r17)
   141c4:	903ff626 	beq	r18,zero,141a0 <_fflush_r+0xe8>
   141c8:	8c000017 	ldw	r16,0(r17)
   141cc:	108000cc 	andi	r2,r2,3
   141d0:	8c800015 	stw	r18,0(r17)
   141d4:	84a1c83a 	sub	r16,r16,r18
   141d8:	10001b1e 	bne	r2,zero,14248 <_fflush_r+0x190>
   141dc:	88800517 	ldw	r2,20(r17)
   141e0:	88800215 	stw	r2,8(r17)
   141e4:	04000316 	blt	zero,r16,141f4 <_fflush_r+0x13c>
   141e8:	003fed06 	br	141a0 <_fflush_r+0xe8>
   141ec:	90a5883a 	add	r18,r18,r2
   141f0:	043feb0e 	bge	zero,r16,141a0 <_fflush_r+0xe8>
   141f4:	88800917 	ldw	r2,36(r17)
   141f8:	89400717 	ldw	r5,28(r17)
   141fc:	800f883a 	mov	r7,r16
   14200:	900d883a 	mov	r6,r18
   14204:	9809883a 	mov	r4,r19
   14208:	103ee83a 	callr	r2
   1420c:	80a1c83a 	sub	r16,r16,r2
   14210:	00bff616 	blt	zero,r2,141ec <_fflush_r+0x134>
   14214:	88c0030b 	ldhu	r3,12(r17)
   14218:	00bfffc4 	movi	r2,-1
   1421c:	18c01014 	ori	r3,r3,64
   14220:	88c0030d 	sth	r3,12(r17)
   14224:	dfc00417 	ldw	ra,16(sp)
   14228:	dcc00317 	ldw	r19,12(sp)
   1422c:	dc800217 	ldw	r18,8(sp)
   14230:	dc400117 	ldw	r17,4(sp)
   14234:	dc000017 	ldw	r16,0(sp)
   14238:	dec00504 	addi	sp,sp,20
   1423c:	f800283a 	ret
   14240:	00143740 	call	14374 <__sinit>
   14244:	003fa706 	br	140e4 <_fflush_r+0x2c>
   14248:	0005883a 	mov	r2,zero
   1424c:	003fe406 	br	141e0 <_fflush_r+0x128>
   14250:	8c001415 	stw	r16,80(r17)
   14254:	003fd206 	br	141a0 <_fflush_r+0xe8>
   14258:	88c00f17 	ldw	r3,60(r17)
   1425c:	00ffac16 	blt	zero,r3,14110 <_fflush_r+0x58>
   14260:	003fcf06 	br	141a0 <_fflush_r+0xe8>
   14264:	89400717 	ldw	r5,28(r17)
   14268:	9809883a 	mov	r4,r19
   1426c:	000d883a 	mov	r6,zero
   14270:	01c00044 	movi	r7,1
   14274:	183ee83a 	callr	r3
   14278:	1021883a 	mov	r16,r2
   1427c:	00bfffc4 	movi	r2,-1
   14280:	80800326 	beq	r16,r2,14290 <_fflush_r+0x1d8>
   14284:	8940030b 	ldhu	r5,12(r17)
   14288:	88c00a17 	ldw	r3,40(r17)
   1428c:	003fa806 	br	14130 <_fflush_r+0x78>
   14290:	98c00017 	ldw	r3,0(r19)
   14294:	00800744 	movi	r2,29
   14298:	18bfde1e 	bne	r3,r2,14214 <_fflush_r+0x15c>
   1429c:	003fc006 	br	141a0 <_fflush_r+0xe8>

000142a0 <fflush>:
   142a0:	200b883a 	mov	r5,r4
   142a4:	20000426 	beq	r4,zero,142b8 <fflush+0x18>
   142a8:	008000f4 	movhi	r2,3
   142ac:	10a79a04 	addi	r2,r2,-24984
   142b0:	11000017 	ldw	r4,0(r2)
   142b4:	00140b81 	jmpi	140b8 <_fflush_r>
   142b8:	008000f4 	movhi	r2,3
   142bc:	10a79904 	addi	r2,r2,-24988
   142c0:	11000017 	ldw	r4,0(r2)
   142c4:	01400074 	movhi	r5,1
   142c8:	29502e04 	addi	r5,r5,16568
   142cc:	0014f541 	jmpi	14f54 <_fwalk_reent>

000142d0 <__fp_lock>:
   142d0:	0005883a 	mov	r2,zero
   142d4:	f800283a 	ret

000142d8 <__fp_unlock>:
   142d8:	0005883a 	mov	r2,zero
   142dc:	f800283a 	ret

000142e0 <_cleanup_r>:
   142e0:	01400074 	movhi	r5,1
   142e4:	295ea104 	addi	r5,r5,31364
   142e8:	0014eac1 	jmpi	14eac <_fwalk>

000142ec <__sfmoreglue>:
   142ec:	defffc04 	addi	sp,sp,-16
   142f0:	dc800215 	stw	r18,8(sp)
   142f4:	2825883a 	mov	r18,r5
   142f8:	dc000015 	stw	r16,0(sp)
   142fc:	01401704 	movi	r5,92
   14300:	2021883a 	mov	r16,r4
   14304:	9009883a 	mov	r4,r18
   14308:	dfc00315 	stw	ra,12(sp)
   1430c:	dc400115 	stw	r17,4(sp)
   14310:	00106640 	call	10664 <__mulsi3>
   14314:	8009883a 	mov	r4,r16
   14318:	11400304 	addi	r5,r2,12
   1431c:	1023883a 	mov	r17,r2
   14320:	00152900 	call	15290 <_malloc_r>
   14324:	1021883a 	mov	r16,r2
   14328:	10000726 	beq	r2,zero,14348 <__sfmoreglue+0x5c>
   1432c:	11000304 	addi	r4,r2,12
   14330:	10000015 	stw	zero,0(r2)
   14334:	14800115 	stw	r18,4(r2)
   14338:	11000215 	stw	r4,8(r2)
   1433c:	000b883a 	mov	r5,zero
   14340:	880d883a 	mov	r6,r17
   14344:	0015dd80 	call	15dd8 <memset>
   14348:	8005883a 	mov	r2,r16
   1434c:	dfc00317 	ldw	ra,12(sp)
   14350:	dc800217 	ldw	r18,8(sp)
   14354:	dc400117 	ldw	r17,4(sp)
   14358:	dc000017 	ldw	r16,0(sp)
   1435c:	dec00404 	addi	sp,sp,16
   14360:	f800283a 	ret

00014364 <_cleanup>:
   14364:	008000f4 	movhi	r2,3
   14368:	10a79904 	addi	r2,r2,-24988
   1436c:	11000017 	ldw	r4,0(r2)
   14370:	00142e01 	jmpi	142e0 <_cleanup_r>

00014374 <__sinit>:
   14374:	20800e17 	ldw	r2,56(r4)
   14378:	1000401e 	bne	r2,zero,1447c <__sinit+0x108>
   1437c:	21400117 	ldw	r5,4(r4)
   14380:	01800074 	movhi	r6,1
   14384:	3190b804 	addi	r6,r6,17120
   14388:	20c00217 	ldw	r3,8(r4)
   1438c:	21800f15 	stw	r6,60(r4)
   14390:	2080bb04 	addi	r2,r4,748
   14394:	02400044 	movi	r9,1
   14398:	018000c4 	movi	r6,3
   1439c:	2180b915 	stw	r6,740(r4)
   143a0:	2080ba15 	stw	r2,744(r4)
   143a4:	22400e15 	stw	r9,56(r4)
   143a8:	20800317 	ldw	r2,12(r4)
   143ac:	2000b815 	stw	zero,736(r4)
   143b0:	02000074 	movhi	r8,1
   143b4:	421d7204 	addi	r8,r8,30152
   143b8:	01c00074 	movhi	r7,1
   143bc:	39dd8704 	addi	r7,r7,30236
   143c0:	01800074 	movhi	r6,1
   143c4:	319da904 	addi	r6,r6,30372
   143c8:	01000074 	movhi	r4,1
   143cc:	211dc004 	addi	r4,r4,30464
   143d0:	02800104 	movi	r10,4
   143d4:	28000015 	stw	zero,0(r5)
   143d8:	28000115 	stw	zero,4(r5)
   143dc:	28000215 	stw	zero,8(r5)
   143e0:	2a80030d 	sth	r10,12(r5)
   143e4:	2800038d 	sth	zero,14(r5)
   143e8:	28000415 	stw	zero,16(r5)
   143ec:	28000515 	stw	zero,20(r5)
   143f0:	28000615 	stw	zero,24(r5)
   143f4:	29400715 	stw	r5,28(r5)
   143f8:	2a000815 	stw	r8,32(r5)
   143fc:	29c00915 	stw	r7,36(r5)
   14400:	29800a15 	stw	r6,40(r5)
   14404:	29000b15 	stw	r4,44(r5)
   14408:	01400284 	movi	r5,10
   1440c:	18000015 	stw	zero,0(r3)
   14410:	18000115 	stw	zero,4(r3)
   14414:	18000215 	stw	zero,8(r3)
   14418:	1940030d 	sth	r5,12(r3)
   1441c:	1a40038d 	sth	r9,14(r3)
   14420:	18000415 	stw	zero,16(r3)
   14424:	18000515 	stw	zero,20(r3)
   14428:	18000615 	stw	zero,24(r3)
   1442c:	18c00715 	stw	r3,28(r3)
   14430:	1a000815 	stw	r8,32(r3)
   14434:	19c00915 	stw	r7,36(r3)
   14438:	19800a15 	stw	r6,40(r3)
   1443c:	19000b15 	stw	r4,44(r3)
   14440:	00c00484 	movi	r3,18
   14444:	10c0030d 	sth	r3,12(r2)
   14448:	00c00084 	movi	r3,2
   1444c:	10000015 	stw	zero,0(r2)
   14450:	10000115 	stw	zero,4(r2)
   14454:	10000215 	stw	zero,8(r2)
   14458:	10c0038d 	sth	r3,14(r2)
   1445c:	10000415 	stw	zero,16(r2)
   14460:	10000515 	stw	zero,20(r2)
   14464:	10000615 	stw	zero,24(r2)
   14468:	10800715 	stw	r2,28(r2)
   1446c:	12000815 	stw	r8,32(r2)
   14470:	11c00915 	stw	r7,36(r2)
   14474:	11800a15 	stw	r6,40(r2)
   14478:	11000b15 	stw	r4,44(r2)
   1447c:	f800283a 	ret

00014480 <__sfp>:
   14480:	defffc04 	addi	sp,sp,-16
   14484:	008000f4 	movhi	r2,3
   14488:	10a79904 	addi	r2,r2,-24988
   1448c:	dc400115 	stw	r17,4(sp)
   14490:	14400017 	ldw	r17,0(r2)
   14494:	dc800215 	stw	r18,8(sp)
   14498:	dfc00315 	stw	ra,12(sp)
   1449c:	88800e17 	ldw	r2,56(r17)
   144a0:	dc000015 	stw	r16,0(sp)
   144a4:	2025883a 	mov	r18,r4
   144a8:	10002826 	beq	r2,zero,1454c <__sfp+0xcc>
   144ac:	8c40b804 	addi	r17,r17,736
   144b0:	043fffc4 	movi	r16,-1
   144b4:	89400117 	ldw	r5,4(r17)
   144b8:	88800217 	ldw	r2,8(r17)
   144bc:	297fffc4 	addi	r5,r5,-1
   144c0:	28000a16 	blt	r5,zero,144ec <__sfp+0x6c>
   144c4:	10c0030f 	ldh	r3,12(r2)
   144c8:	18000c26 	beq	r3,zero,144fc <__sfp+0x7c>
   144cc:	10c01a04 	addi	r3,r2,104
   144d0:	00000206 	br	144dc <__sfp+0x5c>
   144d4:	19bfe90f 	ldh	r6,-92(r3)
   144d8:	30000826 	beq	r6,zero,144fc <__sfp+0x7c>
   144dc:	297fffc4 	addi	r5,r5,-1
   144e0:	18bffd04 	addi	r2,r3,-12
   144e4:	18c01704 	addi	r3,r3,92
   144e8:	2c3ffa1e 	bne	r5,r16,144d4 <__sfp+0x54>
   144ec:	88800017 	ldw	r2,0(r17)
   144f0:	10001926 	beq	r2,zero,14558 <__sfp+0xd8>
   144f4:	1023883a 	mov	r17,r2
   144f8:	003fee06 	br	144b4 <__sfp+0x34>
   144fc:	00ffffc4 	movi	r3,-1
   14500:	10c0038d 	sth	r3,14(r2)
   14504:	00c00044 	movi	r3,1
   14508:	10c0030d 	sth	r3,12(r2)
   1450c:	10000015 	stw	zero,0(r2)
   14510:	10000215 	stw	zero,8(r2)
   14514:	10000115 	stw	zero,4(r2)
   14518:	10000415 	stw	zero,16(r2)
   1451c:	10000515 	stw	zero,20(r2)
   14520:	10000615 	stw	zero,24(r2)
   14524:	10000c15 	stw	zero,48(r2)
   14528:	10000d15 	stw	zero,52(r2)
   1452c:	10001115 	stw	zero,68(r2)
   14530:	10001215 	stw	zero,72(r2)
   14534:	dfc00317 	ldw	ra,12(sp)
   14538:	dc800217 	ldw	r18,8(sp)
   1453c:	dc400117 	ldw	r17,4(sp)
   14540:	dc000017 	ldw	r16,0(sp)
   14544:	dec00404 	addi	sp,sp,16
   14548:	f800283a 	ret
   1454c:	8809883a 	mov	r4,r17
   14550:	00143740 	call	14374 <__sinit>
   14554:	003fd506 	br	144ac <__sfp+0x2c>
   14558:	9009883a 	mov	r4,r18
   1455c:	01400104 	movi	r5,4
   14560:	00142ec0 	call	142ec <__sfmoreglue>
   14564:	88800015 	stw	r2,0(r17)
   14568:	103fe21e 	bne	r2,zero,144f4 <__sfp+0x74>
   1456c:	00800304 	movi	r2,12
   14570:	90800015 	stw	r2,0(r18)
   14574:	0005883a 	mov	r2,zero
   14578:	003fee06 	br	14534 <__sfp+0xb4>

0001457c <__sfp_lock_acquire>:
   1457c:	f800283a 	ret

00014580 <__sfp_lock_release>:
   14580:	f800283a 	ret

00014584 <__sinit_lock_acquire>:
   14584:	f800283a 	ret

00014588 <__sinit_lock_release>:
   14588:	f800283a 	ret

0001458c <__fp_lock_all>:
   1458c:	008000f4 	movhi	r2,3
   14590:	10a79a04 	addi	r2,r2,-24984
   14594:	11000017 	ldw	r4,0(r2)
   14598:	01400074 	movhi	r5,1
   1459c:	2950b404 	addi	r5,r5,17104
   145a0:	0014eac1 	jmpi	14eac <_fwalk>

000145a4 <__fp_unlock_all>:
   145a4:	008000f4 	movhi	r2,3
   145a8:	10a79a04 	addi	r2,r2,-24984
   145ac:	11000017 	ldw	r4,0(r2)
   145b0:	01400074 	movhi	r5,1
   145b4:	2950b604 	addi	r5,r5,17112
   145b8:	0014eac1 	jmpi	14eac <_fwalk>

000145bc <_malloc_trim_r>:
   145bc:	defffb04 	addi	sp,sp,-20
   145c0:	dcc00315 	stw	r19,12(sp)
   145c4:	dc800215 	stw	r18,8(sp)
   145c8:	dc400115 	stw	r17,4(sp)
   145cc:	dc000015 	stw	r16,0(sp)
   145d0:	2827883a 	mov	r19,r5
   145d4:	dfc00415 	stw	ra,16(sp)
   145d8:	044000f4 	movhi	r17,3
   145dc:	8c621504 	addi	r17,r17,-30636
   145e0:	2021883a 	mov	r16,r4
   145e4:	001a1f40 	call	1a1f4 <__malloc_lock>
   145e8:	88800217 	ldw	r2,8(r17)
   145ec:	14800117 	ldw	r18,4(r2)
   145f0:	00bfff04 	movi	r2,-4
   145f4:	90a4703a 	and	r18,r18,r2
   145f8:	9083fbc4 	addi	r2,r18,4079
   145fc:	14e7c83a 	sub	r19,r2,r19
   14600:	9826d33a 	srli	r19,r19,12
   14604:	0083ffc4 	movi	r2,4095
   14608:	9cffffc4 	addi	r19,r19,-1
   1460c:	9826933a 	slli	r19,r19,12
   14610:	14c0060e 	bge	r2,r19,1462c <_malloc_trim_r+0x70>
   14614:	8009883a 	mov	r4,r16
   14618:	000b883a 	mov	r5,zero
   1461c:	00175640 	call	17564 <_sbrk_r>
   14620:	88c00217 	ldw	r3,8(r17)
   14624:	1c87883a 	add	r3,r3,r18
   14628:	10c00a26 	beq	r2,r3,14654 <_malloc_trim_r+0x98>
   1462c:	8009883a 	mov	r4,r16
   14630:	001a2140 	call	1a214 <__malloc_unlock>
   14634:	0005883a 	mov	r2,zero
   14638:	dfc00417 	ldw	ra,16(sp)
   1463c:	dcc00317 	ldw	r19,12(sp)
   14640:	dc800217 	ldw	r18,8(sp)
   14644:	dc400117 	ldw	r17,4(sp)
   14648:	dc000017 	ldw	r16,0(sp)
   1464c:	dec00504 	addi	sp,sp,20
   14650:	f800283a 	ret
   14654:	8009883a 	mov	r4,r16
   14658:	04cbc83a 	sub	r5,zero,r19
   1465c:	00175640 	call	17564 <_sbrk_r>
   14660:	00ffffc4 	movi	r3,-1
   14664:	10c01326 	beq	r2,r3,146b4 <_malloc_trim_r+0xf8>
   14668:	008000f4 	movhi	r2,3
   1466c:	10a7bc04 	addi	r2,r2,-24848
   14670:	11000017 	ldw	r4,0(r2)
   14674:	88c00217 	ldw	r3,8(r17)
   14678:	94e5c83a 	sub	r18,r18,r19
   1467c:	94800054 	ori	r18,r18,1
   14680:	24e7c83a 	sub	r19,r4,r19
   14684:	1c800115 	stw	r18,4(r3)
   14688:	8009883a 	mov	r4,r16
   1468c:	14c00015 	stw	r19,0(r2)
   14690:	001a2140 	call	1a214 <__malloc_unlock>
   14694:	00800044 	movi	r2,1
   14698:	dfc00417 	ldw	ra,16(sp)
   1469c:	dcc00317 	ldw	r19,12(sp)
   146a0:	dc800217 	ldw	r18,8(sp)
   146a4:	dc400117 	ldw	r17,4(sp)
   146a8:	dc000017 	ldw	r16,0(sp)
   146ac:	dec00504 	addi	sp,sp,20
   146b0:	f800283a 	ret
   146b4:	8009883a 	mov	r4,r16
   146b8:	000b883a 	mov	r5,zero
   146bc:	00175640 	call	17564 <_sbrk_r>
   146c0:	88c00217 	ldw	r3,8(r17)
   146c4:	014003c4 	movi	r5,15
   146c8:	10c9c83a 	sub	r4,r2,r3
   146cc:	293fd70e 	bge	r5,r4,1462c <_malloc_trim_r+0x70>
   146d0:	014000f4 	movhi	r5,3
   146d4:	29679c04 	addi	r5,r5,-24976
   146d8:	29400017 	ldw	r5,0(r5)
   146dc:	21000054 	ori	r4,r4,1
   146e0:	19000115 	stw	r4,4(r3)
   146e4:	1145c83a 	sub	r2,r2,r5
   146e8:	014000f4 	movhi	r5,3
   146ec:	2967bc04 	addi	r5,r5,-24848
   146f0:	28800015 	stw	r2,0(r5)
   146f4:	003fcd06 	br	1462c <_malloc_trim_r+0x70>

000146f8 <_free_r>:
   146f8:	defffd04 	addi	sp,sp,-12
   146fc:	dc400115 	stw	r17,4(sp)
   14700:	dc000015 	stw	r16,0(sp)
   14704:	dfc00215 	stw	ra,8(sp)
   14708:	2821883a 	mov	r16,r5
   1470c:	2023883a 	mov	r17,r4
   14710:	28004b26 	beq	r5,zero,14840 <_free_r+0x148>
   14714:	001a1f40 	call	1a1f4 <__malloc_lock>
   14718:	823fff17 	ldw	r8,-4(r16)
   1471c:	00bfff84 	movi	r2,-2
   14720:	81bffe04 	addi	r6,r16,-8
   14724:	4084703a 	and	r2,r8,r2
   14728:	3087883a 	add	r3,r6,r2
   1472c:	014000f4 	movhi	r5,3
   14730:	29621504 	addi	r5,r5,-30636
   14734:	1a400117 	ldw	r9,4(r3)
   14738:	29000217 	ldw	r4,8(r5)
   1473c:	01ffff04 	movi	r7,-4
   14740:	49ce703a 	and	r7,r9,r7
   14744:	20c06526 	beq	r4,r3,148dc <_free_r+0x1e4>
   14748:	19c00115 	stw	r7,4(r3)
   1474c:	4200004c 	andi	r8,r8,1
   14750:	40003026 	beq	r8,zero,14814 <_free_r+0x11c>
   14754:	0009883a 	mov	r4,zero
   14758:	19d1883a 	add	r8,r3,r7
   1475c:	42000117 	ldw	r8,4(r8)
   14760:	4200004c 	andi	r8,r8,1
   14764:	4000061e 	bne	r8,zero,14780 <_free_r+0x88>
   14768:	11c5883a 	add	r2,r2,r7
   1476c:	19c00217 	ldw	r7,8(r3)
   14770:	20004e26 	beq	r4,zero,148ac <_free_r+0x1b4>
   14774:	18c00317 	ldw	r3,12(r3)
   14778:	38c00315 	stw	r3,12(r7)
   1477c:	19c00215 	stw	r7,8(r3)
   14780:	11c00054 	ori	r7,r2,1
   14784:	3087883a 	add	r3,r6,r2
   14788:	31c00115 	stw	r7,4(r6)
   1478c:	18800015 	stw	r2,0(r3)
   14790:	20001a1e 	bne	r4,zero,147fc <_free_r+0x104>
   14794:	00c07fc4 	movi	r3,511
   14798:	18802e2e 	bgeu	r3,r2,14854 <_free_r+0x15c>
   1479c:	1006d27a 	srli	r3,r2,9
   147a0:	01000104 	movi	r4,4
   147a4:	20c06636 	bltu	r4,r3,14940 <_free_r+0x248>
   147a8:	1008d1ba 	srli	r4,r2,6
   147ac:	21000e04 	addi	r4,r4,56
   147b0:	210f883a 	add	r7,r4,r4
   147b4:	39cf883a 	add	r7,r7,r7
   147b8:	39cf883a 	add	r7,r7,r7
   147bc:	29cf883a 	add	r7,r5,r7
   147c0:	38c00217 	ldw	r3,8(r7)
   147c4:	014000f4 	movhi	r5,3
   147c8:	29621504 	addi	r5,r5,-30636
   147cc:	19c06126 	beq	r3,r7,14954 <_free_r+0x25c>
   147d0:	013fff04 	movi	r4,-4
   147d4:	19400117 	ldw	r5,4(r3)
   147d8:	290a703a 	and	r5,r5,r4
   147dc:	1140022e 	bgeu	r2,r5,147e8 <_free_r+0xf0>
   147e0:	18c00217 	ldw	r3,8(r3)
   147e4:	38fffb1e 	bne	r7,r3,147d4 <_free_r+0xdc>
   147e8:	18800317 	ldw	r2,12(r3)
   147ec:	30800315 	stw	r2,12(r6)
   147f0:	30c00215 	stw	r3,8(r6)
   147f4:	11800215 	stw	r6,8(r2)
   147f8:	19800315 	stw	r6,12(r3)
   147fc:	8809883a 	mov	r4,r17
   14800:	dfc00217 	ldw	ra,8(sp)
   14804:	dc400117 	ldw	r17,4(sp)
   14808:	dc000017 	ldw	r16,0(sp)
   1480c:	dec00304 	addi	sp,sp,12
   14810:	001a2141 	jmpi	1a214 <__malloc_unlock>
   14814:	813ffe17 	ldw	r4,-8(r16)
   14818:	2a400204 	addi	r9,r5,8
   1481c:	310dc83a 	sub	r6,r6,r4
   14820:	32000217 	ldw	r8,8(r6)
   14824:	1105883a 	add	r2,r2,r4
   14828:	42404326 	beq	r8,r9,14938 <_free_r+0x240>
   1482c:	32400317 	ldw	r9,12(r6)
   14830:	0009883a 	mov	r4,zero
   14834:	42400315 	stw	r9,12(r8)
   14838:	4a000215 	stw	r8,8(r9)
   1483c:	003fc606 	br	14758 <_free_r+0x60>
   14840:	dfc00217 	ldw	ra,8(sp)
   14844:	dc400117 	ldw	r17,4(sp)
   14848:	dc000017 	ldw	r16,0(sp)
   1484c:	dec00304 	addi	sp,sp,12
   14850:	f800283a 	ret
   14854:	1004d0fa 	srli	r2,r2,3
   14858:	02000044 	movi	r8,1
   1485c:	29c00117 	ldw	r7,4(r5)
   14860:	1087883a 	add	r3,r2,r2
   14864:	18c7883a 	add	r3,r3,r3
   14868:	1005d0ba 	srai	r2,r2,2
   1486c:	18c7883a 	add	r3,r3,r3
   14870:	28c7883a 	add	r3,r5,r3
   14874:	19000217 	ldw	r4,8(r3)
   14878:	4084983a 	sll	r2,r8,r2
   1487c:	30c00315 	stw	r3,12(r6)
   14880:	31000215 	stw	r4,8(r6)
   14884:	11c4b03a 	or	r2,r2,r7
   14888:	21800315 	stw	r6,12(r4)
   1488c:	8809883a 	mov	r4,r17
   14890:	28800115 	stw	r2,4(r5)
   14894:	19800215 	stw	r6,8(r3)
   14898:	dfc00217 	ldw	ra,8(sp)
   1489c:	dc400117 	ldw	r17,4(sp)
   148a0:	dc000017 	ldw	r16,0(sp)
   148a4:	dec00304 	addi	sp,sp,12
   148a8:	001a2141 	jmpi	1a214 <__malloc_unlock>
   148ac:	020000f4 	movhi	r8,3
   148b0:	42221704 	addi	r8,r8,-30628
   148b4:	3a3faf1e 	bne	r7,r8,14774 <_free_r+0x7c>
   148b8:	29800515 	stw	r6,20(r5)
   148bc:	29800415 	stw	r6,16(r5)
   148c0:	11000054 	ori	r4,r2,1
   148c4:	3087883a 	add	r3,r6,r2
   148c8:	31c00315 	stw	r7,12(r6)
   148cc:	31c00215 	stw	r7,8(r6)
   148d0:	31000115 	stw	r4,4(r6)
   148d4:	18800015 	stw	r2,0(r3)
   148d8:	003fc806 	br	147fc <_free_r+0x104>
   148dc:	4200004c 	andi	r8,r8,1
   148e0:	3885883a 	add	r2,r7,r2
   148e4:	4000071e 	bne	r8,zero,14904 <_free_r+0x20c>
   148e8:	81fffe17 	ldw	r7,-8(r16)
   148ec:	31cdc83a 	sub	r6,r6,r7
   148f0:	30c00317 	ldw	r3,12(r6)
   148f4:	31000217 	ldw	r4,8(r6)
   148f8:	11c5883a 	add	r2,r2,r7
   148fc:	20c00315 	stw	r3,12(r4)
   14900:	19000215 	stw	r4,8(r3)
   14904:	00c000f4 	movhi	r3,3
   14908:	18e79d04 	addi	r3,r3,-24972
   1490c:	18c00017 	ldw	r3,0(r3)
   14910:	11000054 	ori	r4,r2,1
   14914:	31000115 	stw	r4,4(r6)
   14918:	29800215 	stw	r6,8(r5)
   1491c:	10ffb736 	bltu	r2,r3,147fc <_free_r+0x104>
   14920:	008000f4 	movhi	r2,3
   14924:	10a7b204 	addi	r2,r2,-24888
   14928:	11400017 	ldw	r5,0(r2)
   1492c:	8809883a 	mov	r4,r17
   14930:	00145bc0 	call	145bc <_malloc_trim_r>
   14934:	003fb106 	br	147fc <_free_r+0x104>
   14938:	01000044 	movi	r4,1
   1493c:	003f8606 	br	14758 <_free_r+0x60>
   14940:	01000504 	movi	r4,20
   14944:	20c00b36 	bltu	r4,r3,14974 <_free_r+0x27c>
   14948:	190016c4 	addi	r4,r3,91
   1494c:	210f883a 	add	r7,r4,r4
   14950:	003f9806 	br	147b4 <_free_r+0xbc>
   14954:	2009d0ba 	srai	r4,r4,2
   14958:	00800044 	movi	r2,1
   1495c:	29c00117 	ldw	r7,4(r5)
   14960:	1108983a 	sll	r4,r2,r4
   14964:	1805883a 	mov	r2,r3
   14968:	21c8b03a 	or	r4,r4,r7
   1496c:	29000115 	stw	r4,4(r5)
   14970:	003f9e06 	br	147ec <_free_r+0xf4>
   14974:	01001504 	movi	r4,84
   14978:	20c00436 	bltu	r4,r3,1498c <_free_r+0x294>
   1497c:	1008d33a 	srli	r4,r2,12
   14980:	21001b84 	addi	r4,r4,110
   14984:	210f883a 	add	r7,r4,r4
   14988:	003f8a06 	br	147b4 <_free_r+0xbc>
   1498c:	01005504 	movi	r4,340
   14990:	20c00436 	bltu	r4,r3,149a4 <_free_r+0x2ac>
   14994:	1008d3fa 	srli	r4,r2,15
   14998:	21001dc4 	addi	r4,r4,119
   1499c:	210f883a 	add	r7,r4,r4
   149a0:	003f8406 	br	147b4 <_free_r+0xbc>
   149a4:	01015504 	movi	r4,1364
   149a8:	20c00436 	bltu	r4,r3,149bc <_free_r+0x2c4>
   149ac:	1008d4ba 	srli	r4,r2,18
   149b0:	21001f04 	addi	r4,r4,124
   149b4:	210f883a 	add	r7,r4,r4
   149b8:	003f7e06 	br	147b4 <_free_r+0xbc>
   149bc:	01c03f04 	movi	r7,252
   149c0:	01001f84 	movi	r4,126
   149c4:	003f7b06 	br	147b4 <_free_r+0xbc>

000149c8 <__sfvwrite_r>:
   149c8:	30800217 	ldw	r2,8(r6)
   149cc:	defff504 	addi	sp,sp,-44
   149d0:	dd400615 	stw	r21,24(sp)
   149d4:	dd000515 	stw	r20,20(sp)
   149d8:	dc000115 	stw	r16,4(sp)
   149dc:	dfc00a15 	stw	ra,40(sp)
   149e0:	df000915 	stw	fp,36(sp)
   149e4:	ddc00815 	stw	r23,32(sp)
   149e8:	dd800715 	stw	r22,28(sp)
   149ec:	dcc00415 	stw	r19,16(sp)
   149f0:	dc800315 	stw	r18,12(sp)
   149f4:	dc400215 	stw	r17,8(sp)
   149f8:	3029883a 	mov	r20,r6
   149fc:	202b883a 	mov	r21,r4
   14a00:	2821883a 	mov	r16,r5
   14a04:	10002126 	beq	r2,zero,14a8c <__sfvwrite_r+0xc4>
   14a08:	2880030b 	ldhu	r2,12(r5)
   14a0c:	10c0020c 	andi	r3,r2,8
   14a10:	18ffffcc 	andi	r3,r3,65535
   14a14:	18e0001c 	xori	r3,r3,32768
   14a18:	18e00004 	addi	r3,r3,-32768
   14a1c:	18002826 	beq	r3,zero,14ac0 <__sfvwrite_r+0xf8>
   14a20:	28c00417 	ldw	r3,16(r5)
   14a24:	18002626 	beq	r3,zero,14ac0 <__sfvwrite_r+0xf8>
   14a28:	10c0008c 	andi	r3,r2,2
   14a2c:	18ffffcc 	andi	r3,r3,65535
   14a30:	18e0001c 	xori	r3,r3,32768
   14a34:	18e00004 	addi	r3,r3,-32768
   14a38:	a4400017 	ldw	r17,0(r20)
   14a3c:	18002b26 	beq	r3,zero,14aec <__sfvwrite_r+0x124>
   14a40:	0027883a 	mov	r19,zero
   14a44:	0025883a 	mov	r18,zero
   14a48:	05810004 	movi	r22,1024
   14a4c:	980d883a 	mov	r6,r19
   14a50:	a809883a 	mov	r4,r21
   14a54:	90004f26 	beq	r18,zero,14b94 <__sfvwrite_r+0x1cc>
   14a58:	900f883a 	mov	r7,r18
   14a5c:	81400717 	ldw	r5,28(r16)
   14a60:	b480012e 	bgeu	r22,r18,14a68 <__sfvwrite_r+0xa0>
   14a64:	01c10004 	movi	r7,1024
   14a68:	80800917 	ldw	r2,36(r16)
   14a6c:	103ee83a 	callr	r2
   14a70:	0080540e 	bge	zero,r2,14bc4 <__sfvwrite_r+0x1fc>
   14a74:	a0c00217 	ldw	r3,8(r20)
   14a78:	98a7883a 	add	r19,r19,r2
   14a7c:	90a5c83a 	sub	r18,r18,r2
   14a80:	1885c83a 	sub	r2,r3,r2
   14a84:	a0800215 	stw	r2,8(r20)
   14a88:	103ff01e 	bne	r2,zero,14a4c <__sfvwrite_r+0x84>
   14a8c:	0005883a 	mov	r2,zero
   14a90:	dfc00a17 	ldw	ra,40(sp)
   14a94:	df000917 	ldw	fp,36(sp)
   14a98:	ddc00817 	ldw	r23,32(sp)
   14a9c:	dd800717 	ldw	r22,28(sp)
   14aa0:	dd400617 	ldw	r21,24(sp)
   14aa4:	dd000517 	ldw	r20,20(sp)
   14aa8:	dcc00417 	ldw	r19,16(sp)
   14aac:	dc800317 	ldw	r18,12(sp)
   14ab0:	dc400217 	ldw	r17,8(sp)
   14ab4:	dc000117 	ldw	r16,4(sp)
   14ab8:	dec00b04 	addi	sp,sp,44
   14abc:	f800283a 	ret
   14ac0:	a809883a 	mov	r4,r21
   14ac4:	800b883a 	mov	r5,r16
   14ac8:	00126ec0 	call	126ec <__swsetup_r>
   14acc:	1000f01e 	bne	r2,zero,14e90 <__sfvwrite_r+0x4c8>
   14ad0:	8080030b 	ldhu	r2,12(r16)
   14ad4:	a4400017 	ldw	r17,0(r20)
   14ad8:	10c0008c 	andi	r3,r2,2
   14adc:	18ffffcc 	andi	r3,r3,65535
   14ae0:	18e0001c 	xori	r3,r3,32768
   14ae4:	18e00004 	addi	r3,r3,-32768
   14ae8:	183fd51e 	bne	r3,zero,14a40 <__sfvwrite_r+0x78>
   14aec:	10c0004c 	andi	r3,r2,1
   14af0:	002d883a 	mov	r22,zero
   14af4:	1800381e 	bne	r3,zero,14bd8 <__sfvwrite_r+0x210>
   14af8:	0025883a 	mov	r18,zero
   14afc:	90002126 	beq	r18,zero,14b84 <__sfvwrite_r+0x1bc>
   14b00:	10c0800c 	andi	r3,r2,512
   14b04:	18ffffcc 	andi	r3,r3,65535
   14b08:	18e0001c 	xori	r3,r3,32768
   14b0c:	18e00004 	addi	r3,r3,-32768
   14b10:	84c00217 	ldw	r19,8(r16)
   14b14:	18006b26 	beq	r3,zero,14cc4 <__sfvwrite_r+0x2fc>
   14b18:	980f883a 	mov	r7,r19
   14b1c:	94c08636 	bltu	r18,r19,14d38 <__sfvwrite_r+0x370>
   14b20:	10c1200c 	andi	r3,r2,1152
   14b24:	18009f1e 	bne	r3,zero,14da4 <__sfvwrite_r+0x3dc>
   14b28:	81000017 	ldw	r4,0(r16)
   14b2c:	982f883a 	mov	r23,r19
   14b30:	9039883a 	mov	fp,r18
   14b34:	9027883a 	mov	r19,r18
   14b38:	380d883a 	mov	r6,r7
   14b3c:	b00b883a 	mov	r5,r22
   14b40:	d9c00015 	stw	r7,0(sp)
   14b44:	0015c4c0 	call	15c4c <memmove>
   14b48:	d9c00017 	ldw	r7,0(sp)
   14b4c:	81000217 	ldw	r4,8(r16)
   14b50:	80800017 	ldw	r2,0(r16)
   14b54:	25efc83a 	sub	r23,r4,r23
   14b58:	11cf883a 	add	r7,r2,r7
   14b5c:	85c00215 	stw	r23,8(r16)
   14b60:	81c00015 	stw	r7,0(r16)
   14b64:	a0800217 	ldw	r2,8(r20)
   14b68:	b72d883a 	add	r22,r22,fp
   14b6c:	9725c83a 	sub	r18,r18,fp
   14b70:	14e7c83a 	sub	r19,r2,r19
   14b74:	a4c00215 	stw	r19,8(r20)
   14b78:	983fc426 	beq	r19,zero,14a8c <__sfvwrite_r+0xc4>
   14b7c:	8080030b 	ldhu	r2,12(r16)
   14b80:	903fdf1e 	bne	r18,zero,14b00 <__sfvwrite_r+0x138>
   14b84:	8d800017 	ldw	r22,0(r17)
   14b88:	8c800117 	ldw	r18,4(r17)
   14b8c:	8c400204 	addi	r17,r17,8
   14b90:	003fda06 	br	14afc <__sfvwrite_r+0x134>
   14b94:	8cc00017 	ldw	r19,0(r17)
   14b98:	8c800117 	ldw	r18,4(r17)
   14b9c:	8c400204 	addi	r17,r17,8
   14ba0:	003faa06 	br	14a4c <__sfvwrite_r+0x84>
   14ba4:	0016f040 	call	16f04 <_realloc_r>
   14ba8:	102f883a 	mov	r23,r2
   14bac:	10009f1e 	bne	r2,zero,14e2c <__sfvwrite_r+0x464>
   14bb0:	81400417 	ldw	r5,16(r16)
   14bb4:	a809883a 	mov	r4,r21
   14bb8:	00146f80 	call	146f8 <_free_r>
   14bbc:	00800304 	movi	r2,12
   14bc0:	a8800015 	stw	r2,0(r21)
   14bc4:	80c0030b 	ldhu	r3,12(r16)
   14bc8:	00bfffc4 	movi	r2,-1
   14bcc:	18c01014 	ori	r3,r3,64
   14bd0:	80c0030d 	sth	r3,12(r16)
   14bd4:	003fae06 	br	14a90 <__sfvwrite_r+0xc8>
   14bd8:	0007883a 	mov	r3,zero
   14bdc:	0039883a 	mov	fp,zero
   14be0:	0025883a 	mov	r18,zero
   14be4:	90001e26 	beq	r18,zero,14c60 <__sfvwrite_r+0x298>
   14be8:	18006526 	beq	r3,zero,14d80 <__sfvwrite_r+0x3b8>
   14bec:	b02f883a 	mov	r23,r22
   14bf0:	9580012e 	bgeu	r18,r22,14bf8 <__sfvwrite_r+0x230>
   14bf4:	902f883a 	mov	r23,r18
   14bf8:	81000017 	ldw	r4,0(r16)
   14bfc:	80800417 	ldw	r2,16(r16)
   14c00:	84c00217 	ldw	r19,8(r16)
   14c04:	81c00517 	ldw	r7,20(r16)
   14c08:	1100022e 	bgeu	r2,r4,14c14 <__sfvwrite_r+0x24c>
   14c0c:	99e7883a 	add	r19,r19,r7
   14c10:	9dc01816 	blt	r19,r23,14c74 <__sfvwrite_r+0x2ac>
   14c14:	b9c03b16 	blt	r23,r7,14d04 <__sfvwrite_r+0x33c>
   14c18:	80800917 	ldw	r2,36(r16)
   14c1c:	81400717 	ldw	r5,28(r16)
   14c20:	a809883a 	mov	r4,r21
   14c24:	d8c00015 	stw	r3,0(sp)
   14c28:	e00d883a 	mov	r6,fp
   14c2c:	103ee83a 	callr	r2
   14c30:	1027883a 	mov	r19,r2
   14c34:	d8c00017 	ldw	r3,0(sp)
   14c38:	00bfe20e 	bge	zero,r2,14bc4 <__sfvwrite_r+0x1fc>
   14c3c:	b4edc83a 	sub	r22,r22,r19
   14c40:	b0001a26 	beq	r22,zero,14cac <__sfvwrite_r+0x2e4>
   14c44:	a0800217 	ldw	r2,8(r20)
   14c48:	e4f9883a 	add	fp,fp,r19
   14c4c:	94e5c83a 	sub	r18,r18,r19
   14c50:	14e7c83a 	sub	r19,r2,r19
   14c54:	a4c00215 	stw	r19,8(r20)
   14c58:	983f8c26 	beq	r19,zero,14a8c <__sfvwrite_r+0xc4>
   14c5c:	903fe21e 	bne	r18,zero,14be8 <__sfvwrite_r+0x220>
   14c60:	8f000017 	ldw	fp,0(r17)
   14c64:	8c800117 	ldw	r18,4(r17)
   14c68:	0007883a 	mov	r3,zero
   14c6c:	8c400204 	addi	r17,r17,8
   14c70:	003fdc06 	br	14be4 <__sfvwrite_r+0x21c>
   14c74:	e00b883a 	mov	r5,fp
   14c78:	980d883a 	mov	r6,r19
   14c7c:	d8c00015 	stw	r3,0(sp)
   14c80:	0015c4c0 	call	15c4c <memmove>
   14c84:	80800017 	ldw	r2,0(r16)
   14c88:	a809883a 	mov	r4,r21
   14c8c:	800b883a 	mov	r5,r16
   14c90:	14c5883a 	add	r2,r2,r19
   14c94:	80800015 	stw	r2,0(r16)
   14c98:	00140b80 	call	140b8 <_fflush_r>
   14c9c:	d8c00017 	ldw	r3,0(sp)
   14ca0:	103fc81e 	bne	r2,zero,14bc4 <__sfvwrite_r+0x1fc>
   14ca4:	b4edc83a 	sub	r22,r22,r19
   14ca8:	b03fe61e 	bne	r22,zero,14c44 <__sfvwrite_r+0x27c>
   14cac:	a809883a 	mov	r4,r21
   14cb0:	800b883a 	mov	r5,r16
   14cb4:	00140b80 	call	140b8 <_fflush_r>
   14cb8:	103fc21e 	bne	r2,zero,14bc4 <__sfvwrite_r+0x1fc>
   14cbc:	0007883a 	mov	r3,zero
   14cc0:	003fe006 	br	14c44 <__sfvwrite_r+0x27c>
   14cc4:	81000017 	ldw	r4,0(r16)
   14cc8:	80800417 	ldw	r2,16(r16)
   14ccc:	1100022e 	bgeu	r2,r4,14cd8 <__sfvwrite_r+0x310>
   14cd0:	9839883a 	mov	fp,r19
   14cd4:	9c806036 	bltu	r19,r18,14e58 <__sfvwrite_r+0x490>
   14cd8:	81c00517 	ldw	r7,20(r16)
   14cdc:	91c01c36 	bltu	r18,r7,14d50 <__sfvwrite_r+0x388>
   14ce0:	80800917 	ldw	r2,36(r16)
   14ce4:	81400717 	ldw	r5,28(r16)
   14ce8:	a809883a 	mov	r4,r21
   14cec:	b00d883a 	mov	r6,r22
   14cf0:	103ee83a 	callr	r2
   14cf4:	1027883a 	mov	r19,r2
   14cf8:	00bfb20e 	bge	zero,r2,14bc4 <__sfvwrite_r+0x1fc>
   14cfc:	1039883a 	mov	fp,r2
   14d00:	003f9806 	br	14b64 <__sfvwrite_r+0x19c>
   14d04:	b80d883a 	mov	r6,r23
   14d08:	e00b883a 	mov	r5,fp
   14d0c:	d8c00015 	stw	r3,0(sp)
   14d10:	0015c4c0 	call	15c4c <memmove>
   14d14:	80800217 	ldw	r2,8(r16)
   14d18:	81000017 	ldw	r4,0(r16)
   14d1c:	b827883a 	mov	r19,r23
   14d20:	15c5c83a 	sub	r2,r2,r23
   14d24:	25ef883a 	add	r23,r4,r23
   14d28:	80800215 	stw	r2,8(r16)
   14d2c:	85c00015 	stw	r23,0(r16)
   14d30:	d8c00017 	ldw	r3,0(sp)
   14d34:	003fc106 	br	14c3c <__sfvwrite_r+0x274>
   14d38:	81000017 	ldw	r4,0(r16)
   14d3c:	902f883a 	mov	r23,r18
   14d40:	9039883a 	mov	fp,r18
   14d44:	9027883a 	mov	r19,r18
   14d48:	900f883a 	mov	r7,r18
   14d4c:	003f7a06 	br	14b38 <__sfvwrite_r+0x170>
   14d50:	b00b883a 	mov	r5,r22
   14d54:	900d883a 	mov	r6,r18
   14d58:	0015c4c0 	call	15c4c <memmove>
   14d5c:	80c00217 	ldw	r3,8(r16)
   14d60:	80800017 	ldw	r2,0(r16)
   14d64:	9027883a 	mov	r19,r18
   14d68:	1c87c83a 	sub	r3,r3,r18
   14d6c:	1485883a 	add	r2,r2,r18
   14d70:	80c00215 	stw	r3,8(r16)
   14d74:	80800015 	stw	r2,0(r16)
   14d78:	9039883a 	mov	fp,r18
   14d7c:	003f7906 	br	14b64 <__sfvwrite_r+0x19c>
   14d80:	e009883a 	mov	r4,fp
   14d84:	01400284 	movi	r5,10
   14d88:	900d883a 	mov	r6,r18
   14d8c:	0015a140 	call	15a14 <memchr>
   14d90:	10003c26 	beq	r2,zero,14e84 <__sfvwrite_r+0x4bc>
   14d94:	15800044 	addi	r22,r2,1
   14d98:	b72dc83a 	sub	r22,r22,fp
   14d9c:	00c00044 	movi	r3,1
   14da0:	003f9206 	br	14bec <__sfvwrite_r+0x224>
   14da4:	81000517 	ldw	r4,20(r16)
   14da8:	81400417 	ldw	r5,16(r16)
   14dac:	80c00017 	ldw	r3,0(r16)
   14db0:	210d883a 	add	r6,r4,r4
   14db4:	3109883a 	add	r4,r6,r4
   14db8:	2026d7fa 	srli	r19,r4,31
   14dbc:	1979c83a 	sub	fp,r3,r5
   14dc0:	e1800044 	addi	r6,fp,1
   14dc4:	9909883a 	add	r4,r19,r4
   14dc8:	2027d07a 	srai	r19,r4,1
   14dcc:	3489883a 	add	r4,r6,r18
   14dd0:	980d883a 	mov	r6,r19
   14dd4:	9900022e 	bgeu	r19,r4,14de0 <__sfvwrite_r+0x418>
   14dd8:	2027883a 	mov	r19,r4
   14ddc:	200d883a 	mov	r6,r4
   14de0:	1081000c 	andi	r2,r2,1024
   14de4:	10bfffcc 	andi	r2,r2,65535
   14de8:	10a0001c 	xori	r2,r2,32768
   14dec:	10a00004 	addi	r2,r2,-32768
   14df0:	a809883a 	mov	r4,r21
   14df4:	103f6b26 	beq	r2,zero,14ba4 <__sfvwrite_r+0x1dc>
   14df8:	300b883a 	mov	r5,r6
   14dfc:	00152900 	call	15290 <_malloc_r>
   14e00:	102f883a 	mov	r23,r2
   14e04:	103f6d26 	beq	r2,zero,14bbc <__sfvwrite_r+0x1f4>
   14e08:	81400417 	ldw	r5,16(r16)
   14e0c:	1009883a 	mov	r4,r2
   14e10:	e00d883a 	mov	r6,fp
   14e14:	0015b0c0 	call	15b0c <memcpy>
   14e18:	8080030b 	ldhu	r2,12(r16)
   14e1c:	00fedfc4 	movi	r3,-1153
   14e20:	10c4703a 	and	r2,r2,r3
   14e24:	10802014 	ori	r2,r2,128
   14e28:	8080030d 	sth	r2,12(r16)
   14e2c:	bf09883a 	add	r4,r23,fp
   14e30:	9f07c83a 	sub	r3,r19,fp
   14e34:	85c00415 	stw	r23,16(r16)
   14e38:	84c00515 	stw	r19,20(r16)
   14e3c:	81000015 	stw	r4,0(r16)
   14e40:	902f883a 	mov	r23,r18
   14e44:	80c00215 	stw	r3,8(r16)
   14e48:	9039883a 	mov	fp,r18
   14e4c:	9027883a 	mov	r19,r18
   14e50:	900f883a 	mov	r7,r18
   14e54:	003f3806 	br	14b38 <__sfvwrite_r+0x170>
   14e58:	b00b883a 	mov	r5,r22
   14e5c:	980d883a 	mov	r6,r19
   14e60:	0015c4c0 	call	15c4c <memmove>
   14e64:	80800017 	ldw	r2,0(r16)
   14e68:	a809883a 	mov	r4,r21
   14e6c:	800b883a 	mov	r5,r16
   14e70:	14c5883a 	add	r2,r2,r19
   14e74:	80800015 	stw	r2,0(r16)
   14e78:	00140b80 	call	140b8 <_fflush_r>
   14e7c:	103f3926 	beq	r2,zero,14b64 <__sfvwrite_r+0x19c>
   14e80:	003f5006 	br	14bc4 <__sfvwrite_r+0x1fc>
   14e84:	95800044 	addi	r22,r18,1
   14e88:	00c00044 	movi	r3,1
   14e8c:	003f5706 	br	14bec <__sfvwrite_r+0x224>
   14e90:	80c0030b 	ldhu	r3,12(r16)
   14e94:	00bfffc4 	movi	r2,-1
   14e98:	18c01014 	ori	r3,r3,64
   14e9c:	80c0030d 	sth	r3,12(r16)
   14ea0:	00c00244 	movi	r3,9
   14ea4:	a8c00015 	stw	r3,0(r21)
   14ea8:	003ef906 	br	14a90 <__sfvwrite_r+0xc8>

00014eac <_fwalk>:
   14eac:	defff904 	addi	sp,sp,-28
   14eb0:	dcc00315 	stw	r19,12(sp)
   14eb4:	24c0b804 	addi	r19,r4,736
   14eb8:	dd400515 	stw	r21,20(sp)
   14ebc:	dd000415 	stw	r20,16(sp)
   14ec0:	dfc00615 	stw	ra,24(sp)
   14ec4:	dc800215 	stw	r18,8(sp)
   14ec8:	dc400115 	stw	r17,4(sp)
   14ecc:	dc000015 	stw	r16,0(sp)
   14ed0:	282b883a 	mov	r21,r5
   14ed4:	0029883a 	mov	r20,zero
   14ed8:	001457c0 	call	1457c <__sfp_lock_acquire>
   14edc:	98001226 	beq	r19,zero,14f28 <_fwalk+0x7c>
   14ee0:	04bfffc4 	movi	r18,-1
   14ee4:	9c400117 	ldw	r17,4(r19)
   14ee8:	9c000217 	ldw	r16,8(r19)
   14eec:	8c7fffc4 	addi	r17,r17,-1
   14ef0:	88000b16 	blt	r17,zero,14f20 <_fwalk+0x74>
   14ef4:	84000304 	addi	r16,r16,12
   14ef8:	80c0000f 	ldh	r3,0(r16)
   14efc:	8c7fffc4 	addi	r17,r17,-1
   14f00:	813ffd04 	addi	r4,r16,-12
   14f04:	18000426 	beq	r3,zero,14f18 <_fwalk+0x6c>
   14f08:	80c0008f 	ldh	r3,2(r16)
   14f0c:	1c800226 	beq	r3,r18,14f18 <_fwalk+0x6c>
   14f10:	a83ee83a 	callr	r21
   14f14:	a0a8b03a 	or	r20,r20,r2
   14f18:	84001704 	addi	r16,r16,92
   14f1c:	8cbff61e 	bne	r17,r18,14ef8 <_fwalk+0x4c>
   14f20:	9cc00017 	ldw	r19,0(r19)
   14f24:	983fef1e 	bne	r19,zero,14ee4 <_fwalk+0x38>
   14f28:	00145800 	call	14580 <__sfp_lock_release>
   14f2c:	a005883a 	mov	r2,r20
   14f30:	dfc00617 	ldw	ra,24(sp)
   14f34:	dd400517 	ldw	r21,20(sp)
   14f38:	dd000417 	ldw	r20,16(sp)
   14f3c:	dcc00317 	ldw	r19,12(sp)
   14f40:	dc800217 	ldw	r18,8(sp)
   14f44:	dc400117 	ldw	r17,4(sp)
   14f48:	dc000017 	ldw	r16,0(sp)
   14f4c:	dec00704 	addi	sp,sp,28
   14f50:	f800283a 	ret

00014f54 <_fwalk_reent>:
   14f54:	defff804 	addi	sp,sp,-32
   14f58:	dcc00315 	stw	r19,12(sp)
   14f5c:	24c0b804 	addi	r19,r4,736
   14f60:	dd800615 	stw	r22,24(sp)
   14f64:	dd400515 	stw	r21,20(sp)
   14f68:	dd000415 	stw	r20,16(sp)
   14f6c:	dfc00715 	stw	ra,28(sp)
   14f70:	dc800215 	stw	r18,8(sp)
   14f74:	dc400115 	stw	r17,4(sp)
   14f78:	dc000015 	stw	r16,0(sp)
   14f7c:	2029883a 	mov	r20,r4
   14f80:	282b883a 	mov	r21,r5
   14f84:	002d883a 	mov	r22,zero
   14f88:	001457c0 	call	1457c <__sfp_lock_acquire>
   14f8c:	98001326 	beq	r19,zero,14fdc <_fwalk_reent+0x88>
   14f90:	04bfffc4 	movi	r18,-1
   14f94:	9c400117 	ldw	r17,4(r19)
   14f98:	9c000217 	ldw	r16,8(r19)
   14f9c:	8c7fffc4 	addi	r17,r17,-1
   14fa0:	88000c16 	blt	r17,zero,14fd4 <_fwalk_reent+0x80>
   14fa4:	84000304 	addi	r16,r16,12
   14fa8:	80c0000f 	ldh	r3,0(r16)
   14fac:	8c7fffc4 	addi	r17,r17,-1
   14fb0:	817ffd04 	addi	r5,r16,-12
   14fb4:	18000526 	beq	r3,zero,14fcc <_fwalk_reent+0x78>
   14fb8:	80c0008f 	ldh	r3,2(r16)
   14fbc:	a009883a 	mov	r4,r20
   14fc0:	1c800226 	beq	r3,r18,14fcc <_fwalk_reent+0x78>
   14fc4:	a83ee83a 	callr	r21
   14fc8:	b0acb03a 	or	r22,r22,r2
   14fcc:	84001704 	addi	r16,r16,92
   14fd0:	8cbff51e 	bne	r17,r18,14fa8 <_fwalk_reent+0x54>
   14fd4:	9cc00017 	ldw	r19,0(r19)
   14fd8:	983fee1e 	bne	r19,zero,14f94 <_fwalk_reent+0x40>
   14fdc:	00145800 	call	14580 <__sfp_lock_release>
   14fe0:	b005883a 	mov	r2,r22
   14fe4:	dfc00717 	ldw	ra,28(sp)
   14fe8:	dd800617 	ldw	r22,24(sp)
   14fec:	dd400517 	ldw	r21,20(sp)
   14ff0:	dd000417 	ldw	r20,16(sp)
   14ff4:	dcc00317 	ldw	r19,12(sp)
   14ff8:	dc800217 	ldw	r18,8(sp)
   14ffc:	dc400117 	ldw	r17,4(sp)
   15000:	dc000017 	ldw	r16,0(sp)
   15004:	dec00804 	addi	sp,sp,32
   15008:	f800283a 	ret

0001500c <_setlocale_r>:
   1500c:	defffc04 	addi	sp,sp,-16
   15010:	dc800215 	stw	r18,8(sp)
   15014:	dc400115 	stw	r17,4(sp)
   15018:	dc000015 	stw	r16,0(sp)
   1501c:	dfc00315 	stw	ra,12(sp)
   15020:	3021883a 	mov	r16,r6
   15024:	2023883a 	mov	r17,r4
   15028:	2825883a 	mov	r18,r5
   1502c:	30001626 	beq	r6,zero,15088 <_setlocale_r+0x7c>
   15030:	3009883a 	mov	r4,r6
   15034:	014000f4 	movhi	r5,3
   15038:	29606604 	addi	r5,r5,-32360
   1503c:	00177080 	call	17708 <strcmp>
   15040:	10000a1e 	bne	r2,zero,1506c <_setlocale_r+0x60>
   15044:	8c800c15 	stw	r18,48(r17)
   15048:	8c000d15 	stw	r16,52(r17)
   1504c:	008000f4 	movhi	r2,3
   15050:	10a06604 	addi	r2,r2,-32360
   15054:	dfc00317 	ldw	ra,12(sp)
   15058:	dc800217 	ldw	r18,8(sp)
   1505c:	dc400117 	ldw	r17,4(sp)
   15060:	dc000017 	ldw	r16,0(sp)
   15064:	dec00404 	addi	sp,sp,16
   15068:	f800283a 	ret
   1506c:	8009883a 	mov	r4,r16
   15070:	014000f4 	movhi	r5,3
   15074:	29605104 	addi	r5,r5,-32444
   15078:	00177080 	call	17708 <strcmp>
   1507c:	103ff126 	beq	r2,zero,15044 <_setlocale_r+0x38>
   15080:	0005883a 	mov	r2,zero
   15084:	003ff306 	br	15054 <_setlocale_r+0x48>
   15088:	008000f4 	movhi	r2,3
   1508c:	10a06604 	addi	r2,r2,-32360
   15090:	dfc00317 	ldw	ra,12(sp)
   15094:	dc800217 	ldw	r18,8(sp)
   15098:	dc400117 	ldw	r17,4(sp)
   1509c:	dc000017 	ldw	r16,0(sp)
   150a0:	dec00404 	addi	sp,sp,16
   150a4:	f800283a 	ret

000150a8 <__locale_charset>:
   150a8:	008000f4 	movhi	r2,3
   150ac:	10a06704 	addi	r2,r2,-32356
   150b0:	f800283a 	ret

000150b4 <_localeconv_r>:
   150b4:	008000f4 	movhi	r2,3
   150b8:	10a06b04 	addi	r2,r2,-32340
   150bc:	f800283a 	ret

000150c0 <setlocale>:
   150c0:	00c000f4 	movhi	r3,3
   150c4:	18e79a04 	addi	r3,r3,-24984
   150c8:	2005883a 	mov	r2,r4
   150cc:	19000017 	ldw	r4,0(r3)
   150d0:	280d883a 	mov	r6,r5
   150d4:	100b883a 	mov	r5,r2
   150d8:	001500c1 	jmpi	1500c <_setlocale_r>

000150dc <localeconv>:
   150dc:	008000f4 	movhi	r2,3
   150e0:	10a06b04 	addi	r2,r2,-32340
   150e4:	f800283a 	ret

000150e8 <__smakebuf_r>:
   150e8:	2880030b 	ldhu	r2,12(r5)
   150ec:	deffed04 	addi	sp,sp,-76
   150f0:	dc401015 	stw	r17,64(sp)
   150f4:	10c0008c 	andi	r3,r2,2
   150f8:	18ffffcc 	andi	r3,r3,65535
   150fc:	18e0001c 	xori	r3,r3,32768
   15100:	dc000f15 	stw	r16,60(sp)
   15104:	dfc01215 	stw	ra,72(sp)
   15108:	dc801115 	stw	r18,68(sp)
   1510c:	18e00004 	addi	r3,r3,-32768
   15110:	2821883a 	mov	r16,r5
   15114:	2023883a 	mov	r17,r4
   15118:	1800381e 	bne	r3,zero,151fc <__smakebuf_r+0x114>
   1511c:	2940038f 	ldh	r5,14(r5)
   15120:	28002d16 	blt	r5,zero,151d8 <__smakebuf_r+0xf0>
   15124:	d80d883a 	mov	r6,sp
   15128:	0017a980 	call	17a98 <_fstat_r>
   1512c:	10002916 	blt	r2,zero,151d4 <__smakebuf_r+0xec>
   15130:	d8800117 	ldw	r2,4(sp)
   15134:	00e00014 	movui	r3,32768
   15138:	10bc000c 	andi	r2,r2,61440
   1513c:	10c03c26 	beq	r2,r3,15230 <__smakebuf_r+0x148>
   15140:	80c0030b 	ldhu	r3,12(r16)
   15144:	18c20014 	ori	r3,r3,2048
   15148:	80c0030d 	sth	r3,12(r16)
   1514c:	00c80004 	movi	r3,8192
   15150:	10c00c1e 	bne	r2,r3,15184 <__smakebuf_r+0x9c>
   15154:	8140038f 	ldh	r5,14(r16)
   15158:	8809883a 	mov	r4,r17
   1515c:	0017b000 	call	17b00 <_isatty_r>
   15160:	10000826 	beq	r2,zero,15184 <__smakebuf_r+0x9c>
   15164:	80c0030b 	ldhu	r3,12(r16)
   15168:	808010c4 	addi	r2,r16,67
   1516c:	80800015 	stw	r2,0(r16)
   15170:	18c00054 	ori	r3,r3,1
   15174:	80800415 	stw	r2,16(r16)
   15178:	00800044 	movi	r2,1
   1517c:	80c0030d 	sth	r3,12(r16)
   15180:	80800515 	stw	r2,20(r16)
   15184:	04810004 	movi	r18,1024
   15188:	8809883a 	mov	r4,r17
   1518c:	900b883a 	mov	r5,r18
   15190:	00152900 	call	15290 <_malloc_r>
   15194:	10003026 	beq	r2,zero,15258 <__smakebuf_r+0x170>
   15198:	80c0030b 	ldhu	r3,12(r16)
   1519c:	01000074 	movhi	r4,1
   151a0:	2110b804 	addi	r4,r4,17120
   151a4:	89000f15 	stw	r4,60(r17)
   151a8:	18c02014 	ori	r3,r3,128
   151ac:	80c0030d 	sth	r3,12(r16)
   151b0:	80800015 	stw	r2,0(r16)
   151b4:	80800415 	stw	r2,16(r16)
   151b8:	84800515 	stw	r18,20(r16)
   151bc:	dfc01217 	ldw	ra,72(sp)
   151c0:	dc801117 	ldw	r18,68(sp)
   151c4:	dc401017 	ldw	r17,64(sp)
   151c8:	dc000f17 	ldw	r16,60(sp)
   151cc:	dec01304 	addi	sp,sp,76
   151d0:	f800283a 	ret
   151d4:	8080030b 	ldhu	r2,12(r16)
   151d8:	10c0200c 	andi	r3,r2,128
   151dc:	18ffffcc 	andi	r3,r3,65535
   151e0:	18e0001c 	xori	r3,r3,32768
   151e4:	18e00004 	addi	r3,r3,-32768
   151e8:	18000f1e 	bne	r3,zero,15228 <__smakebuf_r+0x140>
   151ec:	04810004 	movi	r18,1024
   151f0:	10820014 	ori	r2,r2,2048
   151f4:	8080030d 	sth	r2,12(r16)
   151f8:	003fe306 	br	15188 <__smakebuf_r+0xa0>
   151fc:	288010c4 	addi	r2,r5,67
   15200:	28800015 	stw	r2,0(r5)
   15204:	28800415 	stw	r2,16(r5)
   15208:	00800044 	movi	r2,1
   1520c:	28800515 	stw	r2,20(r5)
   15210:	dfc01217 	ldw	ra,72(sp)
   15214:	dc801117 	ldw	r18,68(sp)
   15218:	dc401017 	ldw	r17,64(sp)
   1521c:	dc000f17 	ldw	r16,60(sp)
   15220:	dec01304 	addi	sp,sp,76
   15224:	f800283a 	ret
   15228:	04801004 	movi	r18,64
   1522c:	003ff006 	br	151f0 <__smakebuf_r+0x108>
   15230:	81000a17 	ldw	r4,40(r16)
   15234:	00c00074 	movhi	r3,1
   15238:	18dda904 	addi	r3,r3,30372
   1523c:	20ffc01e 	bne	r4,r3,15140 <__smakebuf_r+0x58>
   15240:	8080030b 	ldhu	r2,12(r16)
   15244:	00c10004 	movi	r3,1024
   15248:	80c01315 	stw	r3,76(r16)
   1524c:	10c4b03a 	or	r2,r2,r3
   15250:	8080030d 	sth	r2,12(r16)
   15254:	003fcb06 	br	15184 <__smakebuf_r+0x9c>
   15258:	8080030b 	ldhu	r2,12(r16)
   1525c:	10c0800c 	andi	r3,r2,512
   15260:	18ffffcc 	andi	r3,r3,65535
   15264:	18e0001c 	xori	r3,r3,32768
   15268:	18e00004 	addi	r3,r3,-32768
   1526c:	183fd31e 	bne	r3,zero,151bc <__smakebuf_r+0xd4>
   15270:	10800094 	ori	r2,r2,2
   15274:	80c010c4 	addi	r3,r16,67
   15278:	8080030d 	sth	r2,12(r16)
   1527c:	00800044 	movi	r2,1
   15280:	80c00015 	stw	r3,0(r16)
   15284:	80c00415 	stw	r3,16(r16)
   15288:	80800515 	stw	r2,20(r16)
   1528c:	003fcb06 	br	151bc <__smakebuf_r+0xd4>

00015290 <_malloc_r>:
   15290:	defff604 	addi	sp,sp,-40
   15294:	dc800215 	stw	r18,8(sp)
   15298:	dfc00915 	stw	ra,36(sp)
   1529c:	df000815 	stw	fp,32(sp)
   152a0:	ddc00715 	stw	r23,28(sp)
   152a4:	dd800615 	stw	r22,24(sp)
   152a8:	dd400515 	stw	r21,20(sp)
   152ac:	dd000415 	stw	r20,16(sp)
   152b0:	dcc00315 	stw	r19,12(sp)
   152b4:	dc400115 	stw	r17,4(sp)
   152b8:	dc000015 	stw	r16,0(sp)
   152bc:	288002c4 	addi	r2,r5,11
   152c0:	00c00584 	movi	r3,22
   152c4:	2025883a 	mov	r18,r4
   152c8:	18802b2e 	bgeu	r3,r2,15378 <_malloc_r+0xe8>
   152cc:	047ffe04 	movi	r17,-8
   152d0:	1462703a 	and	r17,r2,r17
   152d4:	88002a16 	blt	r17,zero,15380 <_malloc_r+0xf0>
   152d8:	89402936 	bltu	r17,r5,15380 <_malloc_r+0xf0>
   152dc:	9009883a 	mov	r4,r18
   152e0:	001a1f40 	call	1a1f4 <__malloc_lock>
   152e4:	00807dc4 	movi	r2,503
   152e8:	14402936 	bltu	r2,r17,15390 <_malloc_r+0x100>
   152ec:	8808d0fa 	srli	r4,r17,3
   152f0:	04c000f4 	movhi	r19,3
   152f4:	9ce21504 	addi	r19,r19,-30636
   152f8:	2105883a 	add	r2,r4,r4
   152fc:	1085883a 	add	r2,r2,r2
   15300:	1085883a 	add	r2,r2,r2
   15304:	9885883a 	add	r2,r19,r2
   15308:	14000317 	ldw	r16,12(r2)
   1530c:	80815526 	beq	r16,r2,15864 <_malloc_r+0x5d4>
   15310:	81000117 	ldw	r4,4(r16)
   15314:	00bfff04 	movi	r2,-4
   15318:	80c00317 	ldw	r3,12(r16)
   1531c:	2084703a 	and	r2,r4,r2
   15320:	8085883a 	add	r2,r16,r2
   15324:	11800117 	ldw	r6,4(r2)
   15328:	81400217 	ldw	r5,8(r16)
   1532c:	9009883a 	mov	r4,r18
   15330:	31800054 	ori	r6,r6,1
   15334:	11800115 	stw	r6,4(r2)
   15338:	28c00315 	stw	r3,12(r5)
   1533c:	19400215 	stw	r5,8(r3)
   15340:	001a2140 	call	1a214 <__malloc_unlock>
   15344:	80800204 	addi	r2,r16,8
   15348:	dfc00917 	ldw	ra,36(sp)
   1534c:	df000817 	ldw	fp,32(sp)
   15350:	ddc00717 	ldw	r23,28(sp)
   15354:	dd800617 	ldw	r22,24(sp)
   15358:	dd400517 	ldw	r21,20(sp)
   1535c:	dd000417 	ldw	r20,16(sp)
   15360:	dcc00317 	ldw	r19,12(sp)
   15364:	dc800217 	ldw	r18,8(sp)
   15368:	dc400117 	ldw	r17,4(sp)
   1536c:	dc000017 	ldw	r16,0(sp)
   15370:	dec00a04 	addi	sp,sp,40
   15374:	f800283a 	ret
   15378:	04400404 	movi	r17,16
   1537c:	897fd72e 	bgeu	r17,r5,152dc <_malloc_r+0x4c>
   15380:	00800304 	movi	r2,12
   15384:	90800015 	stw	r2,0(r18)
   15388:	0005883a 	mov	r2,zero
   1538c:	003fee06 	br	15348 <_malloc_r+0xb8>
   15390:	8808d27a 	srli	r4,r17,9
   15394:	20007126 	beq	r4,zero,1555c <_malloc_r+0x2cc>
   15398:	00800104 	movi	r2,4
   1539c:	1100eb36 	bltu	r2,r4,1574c <_malloc_r+0x4bc>
   153a0:	8808d1ba 	srli	r4,r17,6
   153a4:	21000e04 	addi	r4,r4,56
   153a8:	210b883a 	add	r5,r4,r4
   153ac:	294b883a 	add	r5,r5,r5
   153b0:	294b883a 	add	r5,r5,r5
   153b4:	04c000f4 	movhi	r19,3
   153b8:	9ce21504 	addi	r19,r19,-30636
   153bc:	994b883a 	add	r5,r19,r5
   153c0:	2c000317 	ldw	r16,12(r5)
   153c4:	2c000e26 	beq	r5,r16,15400 <_malloc_r+0x170>
   153c8:	80c00117 	ldw	r3,4(r16)
   153cc:	01ffff04 	movi	r7,-4
   153d0:	018003c4 	movi	r6,15
   153d4:	19c6703a 	and	r3,r3,r7
   153d8:	1c45c83a 	sub	r2,r3,r17
   153dc:	30800716 	blt	r6,r2,153fc <_malloc_r+0x16c>
   153e0:	1000610e 	bge	r2,zero,15568 <_malloc_r+0x2d8>
   153e4:	84000317 	ldw	r16,12(r16)
   153e8:	2c000526 	beq	r5,r16,15400 <_malloc_r+0x170>
   153ec:	80c00117 	ldw	r3,4(r16)
   153f0:	19c6703a 	and	r3,r3,r7
   153f4:	1c45c83a 	sub	r2,r3,r17
   153f8:	30bff90e 	bge	r6,r2,153e0 <_malloc_r+0x150>
   153fc:	213fffc4 	addi	r4,r4,-1
   15400:	21000044 	addi	r4,r4,1
   15404:	9c000417 	ldw	r16,16(r19)
   15408:	00c000f4 	movhi	r3,3
   1540c:	18e21504 	addi	r3,r3,-30636
   15410:	1a400204 	addi	r9,r3,8
   15414:	8240ff26 	beq	r16,r9,15814 <_malloc_r+0x584>
   15418:	81400117 	ldw	r5,4(r16)
   1541c:	00bfff04 	movi	r2,-4
   15420:	018003c4 	movi	r6,15
   15424:	2884703a 	and	r2,r5,r2
   15428:	144bc83a 	sub	r5,r2,r17
   1542c:	3140ea16 	blt	r6,r5,157d8 <_malloc_r+0x548>
   15430:	1a400515 	stw	r9,20(r3)
   15434:	1a400415 	stw	r9,16(r3)
   15438:	2800570e 	bge	r5,zero,15598 <_malloc_r+0x308>
   1543c:	01407fc4 	movi	r5,511
   15440:	2880ca36 	bltu	r5,r2,1576c <_malloc_r+0x4dc>
   15444:	1004d0fa 	srli	r2,r2,3
   15448:	02000044 	movi	r8,1
   1544c:	19c00117 	ldw	r7,4(r3)
   15450:	108b883a 	add	r5,r2,r2
   15454:	294b883a 	add	r5,r5,r5
   15458:	1005d0ba 	srai	r2,r2,2
   1545c:	294b883a 	add	r5,r5,r5
   15460:	28cb883a 	add	r5,r5,r3
   15464:	29800217 	ldw	r6,8(r5)
   15468:	4084983a 	sll	r2,r8,r2
   1546c:	81400315 	stw	r5,12(r16)
   15470:	81800215 	stw	r6,8(r16)
   15474:	11c4b03a 	or	r2,r2,r7
   15478:	18800115 	stw	r2,4(r3)
   1547c:	2c000215 	stw	r16,8(r5)
   15480:	34000315 	stw	r16,12(r6)
   15484:	200bd0ba 	srai	r5,r4,2
   15488:	00c00044 	movi	r3,1
   1548c:	194a983a 	sll	r5,r3,r5
   15490:	11404936 	bltu	r2,r5,155b8 <_malloc_r+0x328>
   15494:	1146703a 	and	r3,r2,r5
   15498:	18000a1e 	bne	r3,zero,154c4 <_malloc_r+0x234>
   1549c:	00ffff04 	movi	r3,-4
   154a0:	294b883a 	add	r5,r5,r5
   154a4:	20c8703a 	and	r4,r4,r3
   154a8:	1146703a 	and	r3,r2,r5
   154ac:	21000104 	addi	r4,r4,4
   154b0:	1800041e 	bne	r3,zero,154c4 <_malloc_r+0x234>
   154b4:	294b883a 	add	r5,r5,r5
   154b8:	1146703a 	and	r3,r2,r5
   154bc:	21000104 	addi	r4,r4,4
   154c0:	183ffc26 	beq	r3,zero,154b4 <_malloc_r+0x224>
   154c4:	023fff04 	movi	r8,-4
   154c8:	01c003c4 	movi	r7,15
   154cc:	2105883a 	add	r2,r4,r4
   154d0:	1085883a 	add	r2,r2,r2
   154d4:	1085883a 	add	r2,r2,r2
   154d8:	9899883a 	add	r12,r19,r2
   154dc:	62800304 	addi	r10,r12,12
   154e0:	2017883a 	mov	r11,r4
   154e4:	54000017 	ldw	r16,0(r10)
   154e8:	51bffd04 	addi	r6,r10,-12
   154ec:	8180041e 	bne	r16,r6,15500 <_malloc_r+0x270>
   154f0:	0000ca06 	br	1581c <_malloc_r+0x58c>
   154f4:	10001c0e 	bge	r2,zero,15568 <_malloc_r+0x2d8>
   154f8:	84000317 	ldw	r16,12(r16)
   154fc:	8180c726 	beq	r16,r6,1581c <_malloc_r+0x58c>
   15500:	80c00117 	ldw	r3,4(r16)
   15504:	1a06703a 	and	r3,r3,r8
   15508:	1c45c83a 	sub	r2,r3,r17
   1550c:	38bff90e 	bge	r7,r2,154f4 <_malloc_r+0x264>
   15510:	81000317 	ldw	r4,12(r16)
   15514:	81400217 	ldw	r5,8(r16)
   15518:	8447883a 	add	r3,r16,r17
   1551c:	8c400054 	ori	r17,r17,1
   15520:	29000315 	stw	r4,12(r5)
   15524:	21400215 	stw	r5,8(r4)
   15528:	84400115 	stw	r17,4(r16)
   1552c:	1889883a 	add	r4,r3,r2
   15530:	11400054 	ori	r5,r2,1
   15534:	98c00515 	stw	r3,20(r19)
   15538:	98c00415 	stw	r3,16(r19)
   1553c:	20800015 	stw	r2,0(r4)
   15540:	1a400315 	stw	r9,12(r3)
   15544:	1a400215 	stw	r9,8(r3)
   15548:	19400115 	stw	r5,4(r3)
   1554c:	9009883a 	mov	r4,r18
   15550:	001a2140 	call	1a214 <__malloc_unlock>
   15554:	80800204 	addi	r2,r16,8
   15558:	003f7b06 	br	15348 <_malloc_r+0xb8>
   1555c:	8808d0fa 	srli	r4,r17,3
   15560:	210b883a 	add	r5,r4,r4
   15564:	003f9106 	br	153ac <_malloc_r+0x11c>
   15568:	80c7883a 	add	r3,r16,r3
   1556c:	19400117 	ldw	r5,4(r3)
   15570:	80800317 	ldw	r2,12(r16)
   15574:	81000217 	ldw	r4,8(r16)
   15578:	29400054 	ori	r5,r5,1
   1557c:	19400115 	stw	r5,4(r3)
   15580:	20800315 	stw	r2,12(r4)
   15584:	11000215 	stw	r4,8(r2)
   15588:	9009883a 	mov	r4,r18
   1558c:	001a2140 	call	1a214 <__malloc_unlock>
   15590:	80800204 	addi	r2,r16,8
   15594:	003f6c06 	br	15348 <_malloc_r+0xb8>
   15598:	8085883a 	add	r2,r16,r2
   1559c:	10c00117 	ldw	r3,4(r2)
   155a0:	9009883a 	mov	r4,r18
   155a4:	18c00054 	ori	r3,r3,1
   155a8:	10c00115 	stw	r3,4(r2)
   155ac:	001a2140 	call	1a214 <__malloc_unlock>
   155b0:	80800204 	addi	r2,r16,8
   155b4:	003f6406 	br	15348 <_malloc_r+0xb8>
   155b8:	9c000217 	ldw	r16,8(r19)
   155bc:	00bfff04 	movi	r2,-4
   155c0:	85400117 	ldw	r21,4(r16)
   155c4:	a8aa703a 	and	r21,r21,r2
   155c8:	ac400336 	bltu	r21,r17,155d8 <_malloc_r+0x348>
   155cc:	ac45c83a 	sub	r2,r21,r17
   155d0:	00c003c4 	movi	r3,15
   155d4:	18805316 	blt	r3,r2,15724 <_malloc_r+0x494>
   155d8:	d5e01917 	ldw	r23,-32668(gp)
   155dc:	d0e00317 	ldw	r3,-32756(gp)
   155e0:	00bfffc4 	movi	r2,-1
   155e4:	8579883a 	add	fp,r16,r21
   155e8:	8def883a 	add	r23,r17,r23
   155ec:	1880d226 	beq	r3,r2,15938 <_malloc_r+0x6a8>
   155f0:	bdc403c4 	addi	r23,r23,4111
   155f4:	00bc0004 	movi	r2,-4096
   155f8:	b8ae703a 	and	r23,r23,r2
   155fc:	9009883a 	mov	r4,r18
   15600:	b80b883a 	mov	r5,r23
   15604:	00175640 	call	17564 <_sbrk_r>
   15608:	1029883a 	mov	r20,r2
   1560c:	00bfffc4 	movi	r2,-1
   15610:	a080d126 	beq	r20,r2,15958 <_malloc_r+0x6c8>
   15614:	a7009f36 	bltu	r20,fp,15894 <_malloc_r+0x604>
   15618:	058000f4 	movhi	r22,3
   1561c:	b5a7bc04 	addi	r22,r22,-24848
   15620:	b0800017 	ldw	r2,0(r22)
   15624:	b885883a 	add	r2,r23,r2
   15628:	b0800015 	stw	r2,0(r22)
   1562c:	e500cf26 	beq	fp,r20,1596c <_malloc_r+0x6dc>
   15630:	d1200317 	ldw	r4,-32756(gp)
   15634:	00ffffc4 	movi	r3,-1
   15638:	20c0e026 	beq	r4,r3,159bc <_malloc_r+0x72c>
   1563c:	a739c83a 	sub	fp,r20,fp
   15640:	1705883a 	add	r2,r2,fp
   15644:	b0800015 	stw	r2,0(r22)
   15648:	a08001cc 	andi	r2,r20,7
   1564c:	1000a526 	beq	r2,zero,158e4 <_malloc_r+0x654>
   15650:	a0a9c83a 	sub	r20,r20,r2
   15654:	00c40204 	movi	r3,4104
   15658:	a5000204 	addi	r20,r20,8
   1565c:	1885c83a 	sub	r2,r3,r2
   15660:	a5c7883a 	add	r3,r20,r23
   15664:	18c3ffcc 	andi	r3,r3,4095
   15668:	10efc83a 	sub	r23,r2,r3
   1566c:	9009883a 	mov	r4,r18
   15670:	b80b883a 	mov	r5,r23
   15674:	00175640 	call	17564 <_sbrk_r>
   15678:	00ffffc4 	movi	r3,-1
   1567c:	10c0cc26 	beq	r2,r3,159b0 <_malloc_r+0x720>
   15680:	1505c83a 	sub	r2,r2,r20
   15684:	b887883a 	add	r3,r23,r2
   15688:	18c00054 	ori	r3,r3,1
   1568c:	b0800017 	ldw	r2,0(r22)
   15690:	9d000215 	stw	r20,8(r19)
   15694:	a0c00115 	stw	r3,4(r20)
   15698:	b885883a 	add	r2,r23,r2
   1569c:	b0800015 	stw	r2,0(r22)
   156a0:	84c00e26 	beq	r16,r19,156dc <_malloc_r+0x44c>
   156a4:	00c003c4 	movi	r3,15
   156a8:	1d40902e 	bgeu	r3,r21,158ec <_malloc_r+0x65c>
   156ac:	ad7ffd04 	addi	r21,r21,-12
   156b0:	013ffe04 	movi	r4,-8
   156b4:	a908703a 	and	r4,r21,r4
   156b8:	810b883a 	add	r5,r16,r4
   156bc:	01800144 	movi	r6,5
   156c0:	29800115 	stw	r6,4(r5)
   156c4:	29800215 	stw	r6,8(r5)
   156c8:	81400117 	ldw	r5,4(r16)
   156cc:	2940004c 	andi	r5,r5,1
   156d0:	214ab03a 	or	r5,r4,r5
   156d4:	81400115 	stw	r5,4(r16)
   156d8:	1900ae36 	bltu	r3,r4,15994 <_malloc_r+0x704>
   156dc:	d0e01817 	ldw	r3,-32672(gp)
   156e0:	1880012e 	bgeu	r3,r2,156e8 <_malloc_r+0x458>
   156e4:	d0a01815 	stw	r2,-32672(gp)
   156e8:	d0e01717 	ldw	r3,-32676(gp)
   156ec:	9c000217 	ldw	r16,8(r19)
   156f0:	1880012e 	bgeu	r3,r2,156f8 <_malloc_r+0x468>
   156f4:	d0a01715 	stw	r2,-32676(gp)
   156f8:	80c00117 	ldw	r3,4(r16)
   156fc:	00bfff04 	movi	r2,-4
   15700:	1886703a 	and	r3,r3,r2
   15704:	1c45c83a 	sub	r2,r3,r17
   15708:	1c400236 	bltu	r3,r17,15714 <_malloc_r+0x484>
   1570c:	00c003c4 	movi	r3,15
   15710:	18800416 	blt	r3,r2,15724 <_malloc_r+0x494>
   15714:	9009883a 	mov	r4,r18
   15718:	001a2140 	call	1a214 <__malloc_unlock>
   1571c:	0005883a 	mov	r2,zero
   15720:	003f0906 	br	15348 <_malloc_r+0xb8>
   15724:	88c00054 	ori	r3,r17,1
   15728:	10800054 	ori	r2,r2,1
   1572c:	80c00115 	stw	r3,4(r16)
   15730:	8463883a 	add	r17,r16,r17
   15734:	88800115 	stw	r2,4(r17)
   15738:	9009883a 	mov	r4,r18
   1573c:	9c400215 	stw	r17,8(r19)
   15740:	001a2140 	call	1a214 <__malloc_unlock>
   15744:	80800204 	addi	r2,r16,8
   15748:	003eff06 	br	15348 <_malloc_r+0xb8>
   1574c:	00800504 	movi	r2,20
   15750:	1100492e 	bgeu	r2,r4,15878 <_malloc_r+0x5e8>
   15754:	00801504 	movi	r2,84
   15758:	11005c36 	bltu	r2,r4,158cc <_malloc_r+0x63c>
   1575c:	8808d33a 	srli	r4,r17,12
   15760:	21001b84 	addi	r4,r4,110
   15764:	210b883a 	add	r5,r4,r4
   15768:	003f1006 	br	153ac <_malloc_r+0x11c>
   1576c:	1006d27a 	srli	r3,r2,9
   15770:	01400104 	movi	r5,4
   15774:	28c0432e 	bgeu	r5,r3,15884 <_malloc_r+0x5f4>
   15778:	01400504 	movi	r5,20
   1577c:	28c07036 	bltu	r5,r3,15940 <_malloc_r+0x6b0>
   15780:	194016c4 	addi	r5,r3,91
   15784:	294d883a 	add	r6,r5,r5
   15788:	318d883a 	add	r6,r6,r6
   1578c:	318d883a 	add	r6,r6,r6
   15790:	998d883a 	add	r6,r19,r6
   15794:	30c00217 	ldw	r3,8(r6)
   15798:	01c000f4 	movhi	r7,3
   1579c:	39e21504 	addi	r7,r7,-30636
   157a0:	19805726 	beq	r3,r6,15900 <_malloc_r+0x670>
   157a4:	01ffff04 	movi	r7,-4
   157a8:	19400117 	ldw	r5,4(r3)
   157ac:	29ca703a 	and	r5,r5,r7
   157b0:	1140022e 	bgeu	r2,r5,157bc <_malloc_r+0x52c>
   157b4:	18c00217 	ldw	r3,8(r3)
   157b8:	30fffb1e 	bne	r6,r3,157a8 <_malloc_r+0x518>
   157bc:	19400317 	ldw	r5,12(r3)
   157c0:	98800117 	ldw	r2,4(r19)
   157c4:	81400315 	stw	r5,12(r16)
   157c8:	80c00215 	stw	r3,8(r16)
   157cc:	2c000215 	stw	r16,8(r5)
   157d0:	1c000315 	stw	r16,12(r3)
   157d4:	003f2b06 	br	15484 <_malloc_r+0x1f4>
   157d8:	8445883a 	add	r2,r16,r17
   157dc:	8c400054 	ori	r17,r17,1
   157e0:	18800515 	stw	r2,20(r3)
   157e4:	18800415 	stw	r2,16(r3)
   157e8:	29000054 	ori	r4,r5,1
   157ec:	1147883a 	add	r3,r2,r5
   157f0:	84400115 	stw	r17,4(r16)
   157f4:	11000115 	stw	r4,4(r2)
   157f8:	12400315 	stw	r9,12(r2)
   157fc:	12400215 	stw	r9,8(r2)
   15800:	19400015 	stw	r5,0(r3)
   15804:	9009883a 	mov	r4,r18
   15808:	001a2140 	call	1a214 <__malloc_unlock>
   1580c:	80800204 	addi	r2,r16,8
   15810:	003ecd06 	br	15348 <_malloc_r+0xb8>
   15814:	18800117 	ldw	r2,4(r3)
   15818:	003f1a06 	br	15484 <_malloc_r+0x1f4>
   1581c:	5ac00044 	addi	r11,r11,1
   15820:	588000cc 	andi	r2,r11,3
   15824:	52800204 	addi	r10,r10,8
   15828:	103f2e1e 	bne	r2,zero,154e4 <_malloc_r+0x254>
   1582c:	20c000cc 	andi	r3,r4,3
   15830:	60bffe04 	addi	r2,r12,-8
   15834:	18006f26 	beq	r3,zero,159f4 <_malloc_r+0x764>
   15838:	63000017 	ldw	r12,0(r12)
   1583c:	213fffc4 	addi	r4,r4,-1
   15840:	60bffa26 	beq	r12,r2,1582c <_malloc_r+0x59c>
   15844:	98800117 	ldw	r2,4(r19)
   15848:	294b883a 	add	r5,r5,r5
   1584c:	117f5a36 	bltu	r2,r5,155b8 <_malloc_r+0x328>
   15850:	283f5926 	beq	r5,zero,155b8 <_malloc_r+0x328>
   15854:	1146703a 	and	r3,r2,r5
   15858:	18001626 	beq	r3,zero,158b4 <_malloc_r+0x624>
   1585c:	5809883a 	mov	r4,r11
   15860:	003f1a06 	br	154cc <_malloc_r+0x23c>
   15864:	80800204 	addi	r2,r16,8
   15868:	84000517 	ldw	r16,20(r16)
   1586c:	143ea81e 	bne	r2,r16,15310 <_malloc_r+0x80>
   15870:	21000084 	addi	r4,r4,2
   15874:	003ee306 	br	15404 <_malloc_r+0x174>
   15878:	210016c4 	addi	r4,r4,91
   1587c:	210b883a 	add	r5,r4,r4
   15880:	003eca06 	br	153ac <_malloc_r+0x11c>
   15884:	100ad1ba 	srli	r5,r2,6
   15888:	29400e04 	addi	r5,r5,56
   1588c:	294d883a 	add	r6,r5,r5
   15890:	003fbd06 	br	15788 <_malloc_r+0x4f8>
   15894:	84ff6026 	beq	r16,r19,15618 <_malloc_r+0x388>
   15898:	008000f4 	movhi	r2,3
   1589c:	10a21504 	addi	r2,r2,-30636
   158a0:	14000217 	ldw	r16,8(r2)
   158a4:	00bfff04 	movi	r2,-4
   158a8:	80c00117 	ldw	r3,4(r16)
   158ac:	1886703a 	and	r3,r3,r2
   158b0:	003f9406 	br	15704 <_malloc_r+0x474>
   158b4:	294b883a 	add	r5,r5,r5
   158b8:	1146703a 	and	r3,r2,r5
   158bc:	5ac00104 	addi	r11,r11,4
   158c0:	183ffc26 	beq	r3,zero,158b4 <_malloc_r+0x624>
   158c4:	5809883a 	mov	r4,r11
   158c8:	003f0006 	br	154cc <_malloc_r+0x23c>
   158cc:	00805504 	movi	r2,340
   158d0:	11001336 	bltu	r2,r4,15920 <_malloc_r+0x690>
   158d4:	8808d3fa 	srli	r4,r17,15
   158d8:	21001dc4 	addi	r4,r4,119
   158dc:	210b883a 	add	r5,r4,r4
   158e0:	003eb206 	br	153ac <_malloc_r+0x11c>
   158e4:	00840004 	movi	r2,4096
   158e8:	003f5d06 	br	15660 <_malloc_r+0x3d0>
   158ec:	00800044 	movi	r2,1
   158f0:	a0800115 	stw	r2,4(r20)
   158f4:	a021883a 	mov	r16,r20
   158f8:	0007883a 	mov	r3,zero
   158fc:	003f8106 	br	15704 <_malloc_r+0x474>
   15900:	280bd0ba 	srai	r5,r5,2
   15904:	01800044 	movi	r6,1
   15908:	38800117 	ldw	r2,4(r7)
   1590c:	314c983a 	sll	r6,r6,r5
   15910:	180b883a 	mov	r5,r3
   15914:	3084b03a 	or	r2,r6,r2
   15918:	38800115 	stw	r2,4(r7)
   1591c:	003fa906 	br	157c4 <_malloc_r+0x534>
   15920:	00815504 	movi	r2,1364
   15924:	11001836 	bltu	r2,r4,15988 <_malloc_r+0x6f8>
   15928:	8808d4ba 	srli	r4,r17,18
   1592c:	21001f04 	addi	r4,r4,124
   15930:	210b883a 	add	r5,r4,r4
   15934:	003e9d06 	br	153ac <_malloc_r+0x11c>
   15938:	bdc00404 	addi	r23,r23,16
   1593c:	003f2f06 	br	155fc <_malloc_r+0x36c>
   15940:	01401504 	movi	r5,84
   15944:	28c01f36 	bltu	r5,r3,159c4 <_malloc_r+0x734>
   15948:	100ad33a 	srli	r5,r2,12
   1594c:	29401b84 	addi	r5,r5,110
   15950:	294d883a 	add	r6,r5,r5
   15954:	003f8c06 	br	15788 <_malloc_r+0x4f8>
   15958:	9c000217 	ldw	r16,8(r19)
   1595c:	00bfff04 	movi	r2,-4
   15960:	80c00117 	ldw	r3,4(r16)
   15964:	1886703a 	and	r3,r3,r2
   15968:	003f6606 	br	15704 <_malloc_r+0x474>
   1596c:	e0c3ffcc 	andi	r3,fp,4095
   15970:	183f2f1e 	bne	r3,zero,15630 <_malloc_r+0x3a0>
   15974:	98c00217 	ldw	r3,8(r19)
   15978:	bd49883a 	add	r4,r23,r21
   1597c:	21000054 	ori	r4,r4,1
   15980:	19000115 	stw	r4,4(r3)
   15984:	003f5506 	br	156dc <_malloc_r+0x44c>
   15988:	01403f04 	movi	r5,252
   1598c:	01001f84 	movi	r4,126
   15990:	003e8606 	br	153ac <_malloc_r+0x11c>
   15994:	9009883a 	mov	r4,r18
   15998:	81400204 	addi	r5,r16,8
   1599c:	00146f80 	call	146f8 <_free_r>
   159a0:	008000f4 	movhi	r2,3
   159a4:	10a7bc04 	addi	r2,r2,-24848
   159a8:	10800017 	ldw	r2,0(r2)
   159ac:	003f4b06 	br	156dc <_malloc_r+0x44c>
   159b0:	00c00044 	movi	r3,1
   159b4:	002f883a 	mov	r23,zero
   159b8:	003f3406 	br	1568c <_malloc_r+0x3fc>
   159bc:	d5200315 	stw	r20,-32756(gp)
   159c0:	003f2106 	br	15648 <_malloc_r+0x3b8>
   159c4:	01405504 	movi	r5,340
   159c8:	28c00436 	bltu	r5,r3,159dc <_malloc_r+0x74c>
   159cc:	100ad3fa 	srli	r5,r2,15
   159d0:	29401dc4 	addi	r5,r5,119
   159d4:	294d883a 	add	r6,r5,r5
   159d8:	003f6b06 	br	15788 <_malloc_r+0x4f8>
   159dc:	01415504 	movi	r5,1364
   159e0:	28c00936 	bltu	r5,r3,15a08 <_malloc_r+0x778>
   159e4:	100ad4ba 	srli	r5,r2,18
   159e8:	29401f04 	addi	r5,r5,124
   159ec:	294d883a 	add	r6,r5,r5
   159f0:	003f6506 	br	15788 <_malloc_r+0x4f8>
   159f4:	98800117 	ldw	r2,4(r19)
   159f8:	0146303a 	nor	r3,zero,r5
   159fc:	1884703a 	and	r2,r3,r2
   15a00:	98800115 	stw	r2,4(r19)
   15a04:	003f9006 	br	15848 <_malloc_r+0x5b8>
   15a08:	01803f04 	movi	r6,252
   15a0c:	01401f84 	movi	r5,126
   15a10:	003f5d06 	br	15788 <_malloc_r+0x4f8>

00015a14 <memchr>:
   15a14:	008000c4 	movi	r2,3
   15a18:	29403fcc 	andi	r5,r5,255
   15a1c:	1180282e 	bgeu	r2,r6,15ac0 <memchr+0xac>
   15a20:	2086703a 	and	r3,r4,r2
   15a24:	1800351e 	bne	r3,zero,15afc <memchr+0xe8>
   15a28:	2816923a 	slli	r11,r5,8
   15a2c:	2093883a 	add	r9,r4,r2
   15a30:	22000084 	addi	r8,r4,2
   15a34:	5957883a 	add	r11,r11,r5
   15a38:	5816923a 	slli	r11,r11,8
   15a3c:	20c00044 	addi	r3,r4,1
   15a40:	037fbff4 	movhi	r13,65279
   15a44:	6b7fbfc4 	addi	r13,r13,-257
   15a48:	5957883a 	add	r11,r11,r5
   15a4c:	5816923a 	slli	r11,r11,8
   15a50:	03202074 	movhi	r12,32897
   15a54:	63202004 	addi	r12,r12,-32640
   15a58:	101d883a 	mov	r14,r2
   15a5c:	5957883a 	add	r11,r11,r5
   15a60:	21c00017 	ldw	r7,0(r4)
   15a64:	31bfff04 	addi	r6,r6,-4
   15a68:	1805883a 	mov	r2,r3
   15a6c:	3acef03a 	xor	r7,r7,r11
   15a70:	3b55883a 	add	r10,r7,r13
   15a74:	01ce303a 	nor	r7,zero,r7
   15a78:	51ce703a 	and	r7,r10,r7
   15a7c:	3b0e703a 	and	r7,r7,r12
   15a80:	38000a26 	beq	r7,zero,15aac <memchr+0x98>
   15a84:	21c00003 	ldbu	r7,0(r4)
   15a88:	39401e26 	beq	r7,r5,15b04 <memchr+0xf0>
   15a8c:	19c00003 	ldbu	r7,0(r3)
   15a90:	39401926 	beq	r7,r5,15af8 <memchr+0xe4>
   15a94:	41c00003 	ldbu	r7,0(r8)
   15a98:	4005883a 	mov	r2,r8
   15a9c:	39401626 	beq	r7,r5,15af8 <memchr+0xe4>
   15aa0:	49c00003 	ldbu	r7,0(r9)
   15aa4:	4805883a 	mov	r2,r9
   15aa8:	39401326 	beq	r7,r5,15af8 <memchr+0xe4>
   15aac:	21000104 	addi	r4,r4,4
   15ab0:	4a400104 	addi	r9,r9,4
   15ab4:	42000104 	addi	r8,r8,4
   15ab8:	18c00104 	addi	r3,r3,4
   15abc:	71bfe836 	bltu	r14,r6,15a60 <memchr+0x4c>
   15ac0:	2005883a 	mov	r2,r4
   15ac4:	30000a26 	beq	r6,zero,15af0 <memchr+0xdc>
   15ac8:	10c00003 	ldbu	r3,0(r2)
   15acc:	19400a26 	beq	r3,r5,15af8 <memchr+0xe4>
   15ad0:	10c00044 	addi	r3,r2,1
   15ad4:	118d883a 	add	r6,r2,r6
   15ad8:	00000306 	br	15ae8 <memchr+0xd4>
   15adc:	11000003 	ldbu	r4,0(r2)
   15ae0:	18c00044 	addi	r3,r3,1
   15ae4:	21400426 	beq	r4,r5,15af8 <memchr+0xe4>
   15ae8:	1805883a 	mov	r2,r3
   15aec:	19bffb1e 	bne	r3,r6,15adc <memchr+0xc8>
   15af0:	0005883a 	mov	r2,zero
   15af4:	f800283a 	ret
   15af8:	f800283a 	ret
   15afc:	2005883a 	mov	r2,r4
   15b00:	003ff106 	br	15ac8 <memchr+0xb4>
   15b04:	2005883a 	mov	r2,r4
   15b08:	f800283a 	ret

00015b0c <memcpy>:
   15b0c:	defffb04 	addi	sp,sp,-20
   15b10:	dc000015 	stw	r16,0(sp)
   15b14:	dfc00415 	stw	ra,16(sp)
   15b18:	dcc00315 	stw	r19,12(sp)
   15b1c:	dc800215 	stw	r18,8(sp)
   15b20:	dc400115 	stw	r17,4(sp)
   15b24:	00c003c4 	movi	r3,15
   15b28:	2021883a 	mov	r16,r4
   15b2c:	3005883a 	mov	r2,r6
   15b30:	1980032e 	bgeu	r3,r6,15b40 <memcpy+0x34>
   15b34:	2906b03a 	or	r3,r5,r4
   15b38:	18c000cc 	andi	r3,r3,3
   15b3c:	18001026 	beq	r3,zero,15b80 <memcpy+0x74>
   15b40:	8007883a 	mov	r3,r16
   15b44:	288f883a 	add	r7,r5,r2
   15b48:	10000526 	beq	r2,zero,15b60 <memcpy+0x54>
   15b4c:	29800003 	ldbu	r6,0(r5)
   15b50:	18c00044 	addi	r3,r3,1
   15b54:	29400044 	addi	r5,r5,1
   15b58:	19bfffc5 	stb	r6,-1(r3)
   15b5c:	29fffb1e 	bne	r5,r7,15b4c <memcpy+0x40>
   15b60:	8005883a 	mov	r2,r16
   15b64:	dfc00417 	ldw	ra,16(sp)
   15b68:	dcc00317 	ldw	r19,12(sp)
   15b6c:	dc800217 	ldw	r18,8(sp)
   15b70:	dc400117 	ldw	r17,4(sp)
   15b74:	dc000017 	ldw	r16,0(sp)
   15b78:	dec00504 	addi	sp,sp,20
   15b7c:	f800283a 	ret
   15b80:	32bffc04 	addi	r10,r6,-16
   15b84:	5014d13a 	srli	r10,r10,4
   15b88:	20800404 	addi	r2,r4,16
   15b8c:	2007883a 	mov	r3,r4
   15b90:	5008913a 	slli	r4,r10,4
   15b94:	280f883a 	mov	r7,r5
   15b98:	1105883a 	add	r2,r2,r4
   15b9c:	3a000017 	ldw	r8,0(r7)
   15ba0:	18c00404 	addi	r3,r3,16
   15ba4:	39c00404 	addi	r7,r7,16
   15ba8:	1a3ffc15 	stw	r8,-16(r3)
   15bac:	3a3ffd17 	ldw	r8,-12(r7)
   15bb0:	1a3ffd15 	stw	r8,-12(r3)
   15bb4:	3a3ffe17 	ldw	r8,-8(r7)
   15bb8:	1a3ffe15 	stw	r8,-8(r3)
   15bbc:	3a3fff17 	ldw	r8,-4(r7)
   15bc0:	1a3fff15 	stw	r8,-4(r3)
   15bc4:	18bff51e 	bne	r3,r2,15b9c <memcpy+0x90>
   15bc8:	52800044 	addi	r10,r10,1
   15bcc:	5014913a 	slli	r10,r10,4
   15bd0:	308003cc 	andi	r2,r6,15
   15bd4:	010000c4 	movi	r4,3
   15bd8:	8287883a 	add	r3,r16,r10
   15bdc:	2a95883a 	add	r10,r5,r10
   15be0:	2080182e 	bgeu	r4,r2,15c44 <memcpy+0x138>
   15be4:	147fff04 	addi	r17,r2,-4
   15be8:	8808d0ba 	srli	r4,r17,2
   15bec:	1a400104 	addi	r9,r3,4
   15bf0:	180d883a 	mov	r6,r3
   15bf4:	2105883a 	add	r2,r4,r4
   15bf8:	1085883a 	add	r2,r2,r2
   15bfc:	4893883a 	add	r9,r9,r2
   15c00:	500f883a 	mov	r7,r10
   15c04:	3a000017 	ldw	r8,0(r7)
   15c08:	31800104 	addi	r6,r6,4
   15c0c:	39c00104 	addi	r7,r7,4
   15c10:	323fff15 	stw	r8,-4(r6)
   15c14:	327ffb1e 	bne	r6,r9,15c04 <memcpy+0xf8>
   15c18:	20800044 	addi	r2,r4,1
   15c1c:	1085883a 	add	r2,r2,r2
   15c20:	1085883a 	add	r2,r2,r2
   15c24:	017fff04 	movi	r5,-4
   15c28:	18a5883a 	add	r18,r3,r2
   15c2c:	50a7883a 	add	r19,r10,r2
   15c30:	00106640 	call	10664 <__mulsi3>
   15c34:	1445883a 	add	r2,r2,r17
   15c38:	980b883a 	mov	r5,r19
   15c3c:	9007883a 	mov	r3,r18
   15c40:	003fc006 	br	15b44 <memcpy+0x38>
   15c44:	500b883a 	mov	r5,r10
   15c48:	003fbe06 	br	15b44 <memcpy+0x38>

00015c4c <memmove>:
   15c4c:	defffb04 	addi	sp,sp,-20
   15c50:	dc000015 	stw	r16,0(sp)
   15c54:	dfc00415 	stw	ra,16(sp)
   15c58:	dcc00315 	stw	r19,12(sp)
   15c5c:	dc800215 	stw	r18,8(sp)
   15c60:	dc400115 	stw	r17,4(sp)
   15c64:	2021883a 	mov	r16,r4
   15c68:	300f883a 	mov	r7,r6
   15c6c:	2900122e 	bgeu	r5,r4,15cb8 <memmove+0x6c>
   15c70:	2987883a 	add	r3,r5,r6
   15c74:	20c0102e 	bgeu	r4,r3,15cb8 <memmove+0x6c>
   15c78:	218b883a 	add	r5,r4,r6
   15c7c:	1989c83a 	sub	r4,r3,r6
   15c80:	30000526 	beq	r6,zero,15c98 <memmove+0x4c>
   15c84:	18ffffc4 	addi	r3,r3,-1
   15c88:	18800003 	ldbu	r2,0(r3)
   15c8c:	297fffc4 	addi	r5,r5,-1
   15c90:	28800005 	stb	r2,0(r5)
   15c94:	193ffb1e 	bne	r3,r4,15c84 <memmove+0x38>
   15c98:	8005883a 	mov	r2,r16
   15c9c:	dfc00417 	ldw	ra,16(sp)
   15ca0:	dcc00317 	ldw	r19,12(sp)
   15ca4:	dc800217 	ldw	r18,8(sp)
   15ca8:	dc400117 	ldw	r17,4(sp)
   15cac:	dc000017 	ldw	r16,0(sp)
   15cb0:	dec00504 	addi	sp,sp,20
   15cb4:	f800283a 	ret
   15cb8:	008003c4 	movi	r2,15
   15cbc:	1180422e 	bgeu	r2,r6,15dc8 <memmove+0x17c>
   15cc0:	2c04b03a 	or	r2,r5,r16
   15cc4:	108000cc 	andi	r2,r2,3
   15cc8:	10003f1e 	bne	r2,zero,15dc8 <memmove+0x17c>
   15ccc:	32bffc04 	addi	r10,r6,-16
   15cd0:	5014d13a 	srli	r10,r10,4
   15cd4:	81000404 	addi	r4,r16,16
   15cd8:	8007883a 	mov	r3,r16
   15cdc:	5004913a 	slli	r2,r10,4
   15ce0:	280f883a 	mov	r7,r5
   15ce4:	2089883a 	add	r4,r4,r2
   15ce8:	38800017 	ldw	r2,0(r7)
   15cec:	18c00404 	addi	r3,r3,16
   15cf0:	39c00404 	addi	r7,r7,16
   15cf4:	18bffc15 	stw	r2,-16(r3)
   15cf8:	38bffd17 	ldw	r2,-12(r7)
   15cfc:	18bffd15 	stw	r2,-12(r3)
   15d00:	38bffe17 	ldw	r2,-8(r7)
   15d04:	18bffe15 	stw	r2,-8(r3)
   15d08:	38bfff17 	ldw	r2,-4(r7)
   15d0c:	18bfff15 	stw	r2,-4(r3)
   15d10:	193ff51e 	bne	r3,r4,15ce8 <memmove+0x9c>
   15d14:	52800044 	addi	r10,r10,1
   15d18:	5014913a 	slli	r10,r10,4
   15d1c:	31c003cc 	andi	r7,r6,15
   15d20:	008000c4 	movi	r2,3
   15d24:	8287883a 	add	r3,r16,r10
   15d28:	2a95883a 	add	r10,r5,r10
   15d2c:	11c0282e 	bgeu	r2,r7,15dd0 <memmove+0x184>
   15d30:	3c7fff04 	addi	r17,r7,-4
   15d34:	8808d0ba 	srli	r4,r17,2
   15d38:	1a400104 	addi	r9,r3,4
   15d3c:	180d883a 	mov	r6,r3
   15d40:	2105883a 	add	r2,r4,r4
   15d44:	1085883a 	add	r2,r2,r2
   15d48:	4893883a 	add	r9,r9,r2
   15d4c:	5005883a 	mov	r2,r10
   15d50:	12000017 	ldw	r8,0(r2)
   15d54:	31800104 	addi	r6,r6,4
   15d58:	10800104 	addi	r2,r2,4
   15d5c:	323fff15 	stw	r8,-4(r6)
   15d60:	327ffb1e 	bne	r6,r9,15d50 <memmove+0x104>
   15d64:	20800044 	addi	r2,r4,1
   15d68:	1085883a 	add	r2,r2,r2
   15d6c:	1085883a 	add	r2,r2,r2
   15d70:	017fff04 	movi	r5,-4
   15d74:	18a5883a 	add	r18,r3,r2
   15d78:	50a7883a 	add	r19,r10,r2
   15d7c:	00106640 	call	10664 <__mulsi3>
   15d80:	144f883a 	add	r7,r2,r17
   15d84:	980b883a 	mov	r5,r19
   15d88:	9007883a 	mov	r3,r18
   15d8c:	383fc226 	beq	r7,zero,15c98 <memmove+0x4c>
   15d90:	19cf883a 	add	r7,r3,r7
   15d94:	29800003 	ldbu	r6,0(r5)
   15d98:	18c00044 	addi	r3,r3,1
   15d9c:	29400044 	addi	r5,r5,1
   15da0:	19bfffc5 	stb	r6,-1(r3)
   15da4:	19fffb1e 	bne	r3,r7,15d94 <memmove+0x148>
   15da8:	8005883a 	mov	r2,r16
   15dac:	dfc00417 	ldw	ra,16(sp)
   15db0:	dcc00317 	ldw	r19,12(sp)
   15db4:	dc800217 	ldw	r18,8(sp)
   15db8:	dc400117 	ldw	r17,4(sp)
   15dbc:	dc000017 	ldw	r16,0(sp)
   15dc0:	dec00504 	addi	sp,sp,20
   15dc4:	f800283a 	ret
   15dc8:	8007883a 	mov	r3,r16
   15dcc:	003fef06 	br	15d8c <memmove+0x140>
   15dd0:	500b883a 	mov	r5,r10
   15dd4:	003fed06 	br	15d8c <memmove+0x140>

00015dd8 <memset>:
   15dd8:	00c000c4 	movi	r3,3
   15ddc:	2005883a 	mov	r2,r4
   15de0:	29403fcc 	andi	r5,r5,255
   15de4:	19802d2e 	bgeu	r3,r6,15e9c <memset+0xc4>
   15de8:	20c6703a 	and	r3,r4,r3
   15dec:	18002e1e 	bne	r3,zero,15ea8 <memset+0xd0>
   15df0:	2806923a 	slli	r3,r5,8
   15df4:	010003c4 	movi	r4,15
   15df8:	3011883a 	mov	r8,r6
   15dfc:	1946b03a 	or	r3,r3,r5
   15e00:	180e943a 	slli	r7,r3,16
   15e04:	38ceb03a 	or	r7,r7,r3
   15e08:	1007883a 	mov	r3,r2
   15e0c:	21800f2e 	bgeu	r4,r6,15e4c <memset+0x74>
   15e10:	19c00015 	stw	r7,0(r3)
   15e14:	19c00115 	stw	r7,4(r3)
   15e18:	19c00215 	stw	r7,8(r3)
   15e1c:	19c00315 	stw	r7,12(r3)
   15e20:	423ffc04 	addi	r8,r8,-16
   15e24:	18c00404 	addi	r3,r3,16
   15e28:	223ff936 	bltu	r4,r8,15e10 <memset+0x38>
   15e2c:	30fffc04 	addi	r3,r6,-16
   15e30:	1806d13a 	srli	r3,r3,4
   15e34:	318003cc 	andi	r6,r6,15
   15e38:	010000c4 	movi	r4,3
   15e3c:	18c00044 	addi	r3,r3,1
   15e40:	1806913a 	slli	r3,r3,4
   15e44:	10c7883a 	add	r3,r2,r3
   15e48:	21800e2e 	bgeu	r4,r6,15e84 <memset+0xac>
   15e4c:	1813883a 	mov	r9,r3
   15e50:	3011883a 	mov	r8,r6
   15e54:	010000c4 	movi	r4,3
   15e58:	49c00015 	stw	r7,0(r9)
   15e5c:	423fff04 	addi	r8,r8,-4
   15e60:	4a400104 	addi	r9,r9,4
   15e64:	223ffc36 	bltu	r4,r8,15e58 <memset+0x80>
   15e68:	313fff04 	addi	r4,r6,-4
   15e6c:	2008d0ba 	srli	r4,r4,2
   15e70:	318000cc 	andi	r6,r6,3
   15e74:	21000044 	addi	r4,r4,1
   15e78:	2109883a 	add	r4,r4,r4
   15e7c:	2109883a 	add	r4,r4,r4
   15e80:	1907883a 	add	r3,r3,r4
   15e84:	30000a26 	beq	r6,zero,15eb0 <memset+0xd8>
   15e88:	198d883a 	add	r6,r3,r6
   15e8c:	19400005 	stb	r5,0(r3)
   15e90:	18c00044 	addi	r3,r3,1
   15e94:	19bffd1e 	bne	r3,r6,15e8c <memset+0xb4>
   15e98:	f800283a 	ret
   15e9c:	2007883a 	mov	r3,r4
   15ea0:	303ff91e 	bne	r6,zero,15e88 <memset+0xb0>
   15ea4:	00000206 	br	15eb0 <memset+0xd8>
   15ea8:	2007883a 	mov	r3,r4
   15eac:	003ff606 	br	15e88 <memset+0xb0>
   15eb0:	f800283a 	ret

00015eb4 <_Balloc>:
   15eb4:	20801317 	ldw	r2,76(r4)
   15eb8:	defffc04 	addi	sp,sp,-16
   15ebc:	dc400115 	stw	r17,4(sp)
   15ec0:	dc000015 	stw	r16,0(sp)
   15ec4:	dfc00315 	stw	ra,12(sp)
   15ec8:	dc800215 	stw	r18,8(sp)
   15ecc:	2023883a 	mov	r17,r4
   15ed0:	2821883a 	mov	r16,r5
   15ed4:	10000f26 	beq	r2,zero,15f14 <_Balloc+0x60>
   15ed8:	8407883a 	add	r3,r16,r16
   15edc:	18c7883a 	add	r3,r3,r3
   15ee0:	10c7883a 	add	r3,r2,r3
   15ee4:	18800017 	ldw	r2,0(r3)
   15ee8:	10001126 	beq	r2,zero,15f30 <_Balloc+0x7c>
   15eec:	11000017 	ldw	r4,0(r2)
   15ef0:	19000015 	stw	r4,0(r3)
   15ef4:	10000415 	stw	zero,16(r2)
   15ef8:	10000315 	stw	zero,12(r2)
   15efc:	dfc00317 	ldw	ra,12(sp)
   15f00:	dc800217 	ldw	r18,8(sp)
   15f04:	dc400117 	ldw	r17,4(sp)
   15f08:	dc000017 	ldw	r16,0(sp)
   15f0c:	dec00404 	addi	sp,sp,16
   15f10:	f800283a 	ret
   15f14:	01400104 	movi	r5,4
   15f18:	01800404 	movi	r6,16
   15f1c:	00178180 	call	17818 <_calloc_r>
   15f20:	88801315 	stw	r2,76(r17)
   15f24:	103fec1e 	bne	r2,zero,15ed8 <_Balloc+0x24>
   15f28:	0005883a 	mov	r2,zero
   15f2c:	003ff306 	br	15efc <_Balloc+0x48>
   15f30:	01400044 	movi	r5,1
   15f34:	2c24983a 	sll	r18,r5,r16
   15f38:	8809883a 	mov	r4,r17
   15f3c:	91800144 	addi	r6,r18,5
   15f40:	318d883a 	add	r6,r6,r6
   15f44:	318d883a 	add	r6,r6,r6
   15f48:	00178180 	call	17818 <_calloc_r>
   15f4c:	103ff626 	beq	r2,zero,15f28 <_Balloc+0x74>
   15f50:	14000115 	stw	r16,4(r2)
   15f54:	14800215 	stw	r18,8(r2)
   15f58:	003fe606 	br	15ef4 <_Balloc+0x40>

00015f5c <_Bfree>:
   15f5c:	28000826 	beq	r5,zero,15f80 <_Bfree+0x24>
   15f60:	28c00117 	ldw	r3,4(r5)
   15f64:	20801317 	ldw	r2,76(r4)
   15f68:	18c7883a 	add	r3,r3,r3
   15f6c:	18c7883a 	add	r3,r3,r3
   15f70:	10c5883a 	add	r2,r2,r3
   15f74:	10c00017 	ldw	r3,0(r2)
   15f78:	28c00015 	stw	r3,0(r5)
   15f7c:	11400015 	stw	r5,0(r2)
   15f80:	f800283a 	ret

00015f84 <__multadd>:
   15f84:	defff604 	addi	sp,sp,-40
   15f88:	dd400515 	stw	r21,20(sp)
   15f8c:	2d400417 	ldw	r21,16(r5)
   15f90:	df000815 	stw	fp,32(sp)
   15f94:	ddc00715 	stw	r23,28(sp)
   15f98:	dd800615 	stw	r22,24(sp)
   15f9c:	dd000415 	stw	r20,16(sp)
   15fa0:	dc400115 	stw	r17,4(sp)
   15fa4:	dc000015 	stw	r16,0(sp)
   15fa8:	dfc00915 	stw	ra,36(sp)
   15fac:	dcc00315 	stw	r19,12(sp)
   15fb0:	dc800215 	stw	r18,8(sp)
   15fb4:	282d883a 	mov	r22,r5
   15fb8:	202f883a 	mov	r23,r4
   15fbc:	3029883a 	mov	r20,r6
   15fc0:	3839883a 	mov	fp,r7
   15fc4:	2c000504 	addi	r16,r5,20
   15fc8:	0023883a 	mov	r17,zero
   15fcc:	84c00017 	ldw	r19,0(r16)
   15fd0:	a00b883a 	mov	r5,r20
   15fd4:	8c400044 	addi	r17,r17,1
   15fd8:	993fffcc 	andi	r4,r19,65535
   15fdc:	00106640 	call	10664 <__mulsi3>
   15fe0:	1725883a 	add	r18,r2,fp
   15fe4:	9808d43a 	srli	r4,r19,16
   15fe8:	9026d43a 	srli	r19,r18,16
   15fec:	a00b883a 	mov	r5,r20
   15ff0:	00106640 	call	10664 <__mulsi3>
   15ff4:	988f883a 	add	r7,r19,r2
   15ff8:	3804943a 	slli	r2,r7,16
   15ffc:	94bfffcc 	andi	r18,r18,65535
   16000:	3838d43a 	srli	fp,r7,16
   16004:	14a5883a 	add	r18,r2,r18
   16008:	84800015 	stw	r18,0(r16)
   1600c:	84000104 	addi	r16,r16,4
   16010:	8d7fee16 	blt	r17,r21,15fcc <__multadd+0x48>
   16014:	e0000926 	beq	fp,zero,1603c <__multadd+0xb8>
   16018:	b0800217 	ldw	r2,8(r22)
   1601c:	a880140e 	bge	r21,r2,16070 <__multadd+0xec>
   16020:	a8800144 	addi	r2,r21,5
   16024:	1085883a 	add	r2,r2,r2
   16028:	1085883a 	add	r2,r2,r2
   1602c:	b085883a 	add	r2,r22,r2
   16030:	ad400044 	addi	r21,r21,1
   16034:	17000015 	stw	fp,0(r2)
   16038:	b5400415 	stw	r21,16(r22)
   1603c:	b005883a 	mov	r2,r22
   16040:	dfc00917 	ldw	ra,36(sp)
   16044:	df000817 	ldw	fp,32(sp)
   16048:	ddc00717 	ldw	r23,28(sp)
   1604c:	dd800617 	ldw	r22,24(sp)
   16050:	dd400517 	ldw	r21,20(sp)
   16054:	dd000417 	ldw	r20,16(sp)
   16058:	dcc00317 	ldw	r19,12(sp)
   1605c:	dc800217 	ldw	r18,8(sp)
   16060:	dc400117 	ldw	r17,4(sp)
   16064:	dc000017 	ldw	r16,0(sp)
   16068:	dec00a04 	addi	sp,sp,40
   1606c:	f800283a 	ret
   16070:	b1400117 	ldw	r5,4(r22)
   16074:	b809883a 	mov	r4,r23
   16078:	29400044 	addi	r5,r5,1
   1607c:	0015eb40 	call	15eb4 <_Balloc>
   16080:	b1800417 	ldw	r6,16(r22)
   16084:	b1400304 	addi	r5,r22,12
   16088:	11000304 	addi	r4,r2,12
   1608c:	31800084 	addi	r6,r6,2
   16090:	318d883a 	add	r6,r6,r6
   16094:	318d883a 	add	r6,r6,r6
   16098:	1021883a 	mov	r16,r2
   1609c:	0015b0c0 	call	15b0c <memcpy>
   160a0:	b0c00117 	ldw	r3,4(r22)
   160a4:	b8801317 	ldw	r2,76(r23)
   160a8:	18c7883a 	add	r3,r3,r3
   160ac:	18c7883a 	add	r3,r3,r3
   160b0:	10c5883a 	add	r2,r2,r3
   160b4:	10c00017 	ldw	r3,0(r2)
   160b8:	b0c00015 	stw	r3,0(r22)
   160bc:	15800015 	stw	r22,0(r2)
   160c0:	802d883a 	mov	r22,r16
   160c4:	003fd606 	br	16020 <__multadd+0x9c>

000160c8 <__s2b>:
   160c8:	defff904 	addi	sp,sp,-28
   160cc:	dd000415 	stw	r20,16(sp)
   160d0:	dc400115 	stw	r17,4(sp)
   160d4:	2829883a 	mov	r20,r5
   160d8:	2023883a 	mov	r17,r4
   160dc:	01400244 	movi	r5,9
   160e0:	39000204 	addi	r4,r7,8
   160e4:	dcc00315 	stw	r19,12(sp)
   160e8:	dc800215 	stw	r18,8(sp)
   160ec:	dfc00615 	stw	ra,24(sp)
   160f0:	dd400515 	stw	r21,20(sp)
   160f4:	dc000015 	stw	r16,0(sp)
   160f8:	3825883a 	mov	r18,r7
   160fc:	3027883a 	mov	r19,r6
   16100:	00105a80 	call	105a8 <__divsi3>
   16104:	00c00044 	movi	r3,1
   16108:	000b883a 	mov	r5,zero
   1610c:	1880030e 	bge	r3,r2,1611c <__s2b+0x54>
   16110:	18c7883a 	add	r3,r3,r3
   16114:	29400044 	addi	r5,r5,1
   16118:	18bffd16 	blt	r3,r2,16110 <__s2b+0x48>
   1611c:	8809883a 	mov	r4,r17
   16120:	0015eb40 	call	15eb4 <_Balloc>
   16124:	d8c00717 	ldw	r3,28(sp)
   16128:	10c00515 	stw	r3,20(r2)
   1612c:	00c00044 	movi	r3,1
   16130:	10c00415 	stw	r3,16(r2)
   16134:	00c00244 	movi	r3,9
   16138:	1cc0210e 	bge	r3,r19,161c0 <__s2b+0xf8>
   1613c:	a0eb883a 	add	r21,r20,r3
   16140:	a821883a 	mov	r16,r21
   16144:	a4e9883a 	add	r20,r20,r19
   16148:	81c00007 	ldb	r7,0(r16)
   1614c:	8809883a 	mov	r4,r17
   16150:	84000044 	addi	r16,r16,1
   16154:	100b883a 	mov	r5,r2
   16158:	01800284 	movi	r6,10
   1615c:	39fff404 	addi	r7,r7,-48
   16160:	0015f840 	call	15f84 <__multadd>
   16164:	853ff81e 	bne	r16,r20,16148 <__s2b+0x80>
   16168:	ace1883a 	add	r16,r21,r19
   1616c:	843ffe04 	addi	r16,r16,-8
   16170:	9c800a0e 	bge	r19,r18,1619c <__s2b+0xd4>
   16174:	94e5c83a 	sub	r18,r18,r19
   16178:	84a5883a 	add	r18,r16,r18
   1617c:	81c00007 	ldb	r7,0(r16)
   16180:	8809883a 	mov	r4,r17
   16184:	84000044 	addi	r16,r16,1
   16188:	100b883a 	mov	r5,r2
   1618c:	01800284 	movi	r6,10
   16190:	39fff404 	addi	r7,r7,-48
   16194:	0015f840 	call	15f84 <__multadd>
   16198:	84bff81e 	bne	r16,r18,1617c <__s2b+0xb4>
   1619c:	dfc00617 	ldw	ra,24(sp)
   161a0:	dd400517 	ldw	r21,20(sp)
   161a4:	dd000417 	ldw	r20,16(sp)
   161a8:	dcc00317 	ldw	r19,12(sp)
   161ac:	dc800217 	ldw	r18,8(sp)
   161b0:	dc400117 	ldw	r17,4(sp)
   161b4:	dc000017 	ldw	r16,0(sp)
   161b8:	dec00704 	addi	sp,sp,28
   161bc:	f800283a 	ret
   161c0:	a4000284 	addi	r16,r20,10
   161c4:	1827883a 	mov	r19,r3
   161c8:	003fe906 	br	16170 <__s2b+0xa8>

000161cc <__hi0bits>:
   161cc:	20bfffec 	andhi	r2,r4,65535
   161d0:	1000141e 	bne	r2,zero,16224 <__hi0bits+0x58>
   161d4:	2008943a 	slli	r4,r4,16
   161d8:	00800404 	movi	r2,16
   161dc:	20ffc02c 	andhi	r3,r4,65280
   161e0:	1800021e 	bne	r3,zero,161ec <__hi0bits+0x20>
   161e4:	2008923a 	slli	r4,r4,8
   161e8:	10800204 	addi	r2,r2,8
   161ec:	20fc002c 	andhi	r3,r4,61440
   161f0:	1800021e 	bne	r3,zero,161fc <__hi0bits+0x30>
   161f4:	2008913a 	slli	r4,r4,4
   161f8:	10800104 	addi	r2,r2,4
   161fc:	20f0002c 	andhi	r3,r4,49152
   16200:	1800031e 	bne	r3,zero,16210 <__hi0bits+0x44>
   16204:	2109883a 	add	r4,r4,r4
   16208:	10800084 	addi	r2,r2,2
   1620c:	2109883a 	add	r4,r4,r4
   16210:	20000316 	blt	r4,zero,16220 <__hi0bits+0x54>
   16214:	2110002c 	andhi	r4,r4,16384
   16218:	2000041e 	bne	r4,zero,1622c <__hi0bits+0x60>
   1621c:	00800804 	movi	r2,32
   16220:	f800283a 	ret
   16224:	0005883a 	mov	r2,zero
   16228:	003fec06 	br	161dc <__hi0bits+0x10>
   1622c:	10800044 	addi	r2,r2,1
   16230:	f800283a 	ret

00016234 <__lo0bits>:
   16234:	20c00017 	ldw	r3,0(r4)
   16238:	188001cc 	andi	r2,r3,7
   1623c:	10000826 	beq	r2,zero,16260 <__lo0bits+0x2c>
   16240:	1880004c 	andi	r2,r3,1
   16244:	1000211e 	bne	r2,zero,162cc <__lo0bits+0x98>
   16248:	1880008c 	andi	r2,r3,2
   1624c:	1000211e 	bne	r2,zero,162d4 <__lo0bits+0xa0>
   16250:	1806d0ba 	srli	r3,r3,2
   16254:	00800084 	movi	r2,2
   16258:	20c00015 	stw	r3,0(r4)
   1625c:	f800283a 	ret
   16260:	18bfffcc 	andi	r2,r3,65535
   16264:	10001326 	beq	r2,zero,162b4 <__lo0bits+0x80>
   16268:	0005883a 	mov	r2,zero
   1626c:	19403fcc 	andi	r5,r3,255
   16270:	2800021e 	bne	r5,zero,1627c <__lo0bits+0x48>
   16274:	1806d23a 	srli	r3,r3,8
   16278:	10800204 	addi	r2,r2,8
   1627c:	194003cc 	andi	r5,r3,15
   16280:	2800021e 	bne	r5,zero,1628c <__lo0bits+0x58>
   16284:	1806d13a 	srli	r3,r3,4
   16288:	10800104 	addi	r2,r2,4
   1628c:	194000cc 	andi	r5,r3,3
   16290:	2800021e 	bne	r5,zero,1629c <__lo0bits+0x68>
   16294:	1806d0ba 	srli	r3,r3,2
   16298:	10800084 	addi	r2,r2,2
   1629c:	1940004c 	andi	r5,r3,1
   162a0:	2800081e 	bne	r5,zero,162c4 <__lo0bits+0x90>
   162a4:	1806d07a 	srli	r3,r3,1
   162a8:	1800051e 	bne	r3,zero,162c0 <__lo0bits+0x8c>
   162ac:	00800804 	movi	r2,32
   162b0:	f800283a 	ret
   162b4:	1806d43a 	srli	r3,r3,16
   162b8:	00800404 	movi	r2,16
   162bc:	003feb06 	br	1626c <__lo0bits+0x38>
   162c0:	10800044 	addi	r2,r2,1
   162c4:	20c00015 	stw	r3,0(r4)
   162c8:	f800283a 	ret
   162cc:	0005883a 	mov	r2,zero
   162d0:	f800283a 	ret
   162d4:	1806d07a 	srli	r3,r3,1
   162d8:	00800044 	movi	r2,1
   162dc:	20c00015 	stw	r3,0(r4)
   162e0:	f800283a 	ret

000162e4 <__i2b>:
   162e4:	defffd04 	addi	sp,sp,-12
   162e8:	dc000015 	stw	r16,0(sp)
   162ec:	04000044 	movi	r16,1
   162f0:	dc400115 	stw	r17,4(sp)
   162f4:	2823883a 	mov	r17,r5
   162f8:	800b883a 	mov	r5,r16
   162fc:	dfc00215 	stw	ra,8(sp)
   16300:	0015eb40 	call	15eb4 <_Balloc>
   16304:	14400515 	stw	r17,20(r2)
   16308:	14000415 	stw	r16,16(r2)
   1630c:	dfc00217 	ldw	ra,8(sp)
   16310:	dc400117 	ldw	r17,4(sp)
   16314:	dc000017 	ldw	r16,0(sp)
   16318:	dec00304 	addi	sp,sp,12
   1631c:	f800283a 	ret

00016320 <__multiply>:
   16320:	defff004 	addi	sp,sp,-64
   16324:	dc800815 	stw	r18,32(sp)
   16328:	dc400715 	stw	r17,28(sp)
   1632c:	34800417 	ldw	r18,16(r6)
   16330:	2c400417 	ldw	r17,16(r5)
   16334:	ddc00d15 	stw	r23,52(sp)
   16338:	dc000615 	stw	r16,24(sp)
   1633c:	dfc00f15 	stw	ra,60(sp)
   16340:	df000e15 	stw	fp,56(sp)
   16344:	dd800c15 	stw	r22,48(sp)
   16348:	dd400b15 	stw	r21,44(sp)
   1634c:	dd000a15 	stw	r20,40(sp)
   16350:	dcc00915 	stw	r19,36(sp)
   16354:	2821883a 	mov	r16,r5
   16358:	302f883a 	mov	r23,r6
   1635c:	8c80050e 	bge	r17,r18,16374 <__multiply+0x54>
   16360:	8807883a 	mov	r3,r17
   16364:	3021883a 	mov	r16,r6
   16368:	9023883a 	mov	r17,r18
   1636c:	282f883a 	mov	r23,r5
   16370:	1825883a 	mov	r18,r3
   16374:	80800217 	ldw	r2,8(r16)
   16378:	8c87883a 	add	r3,r17,r18
   1637c:	d8c00115 	stw	r3,4(sp)
   16380:	81400117 	ldw	r5,4(r16)
   16384:	10c0010e 	bge	r2,r3,1638c <__multiply+0x6c>
   16388:	29400044 	addi	r5,r5,1
   1638c:	0015eb40 	call	15eb4 <_Balloc>
   16390:	d8c00117 	ldw	r3,4(sp)
   16394:	d8800515 	stw	r2,20(sp)
   16398:	14c00504 	addi	r19,r2,20
   1639c:	1d400144 	addi	r21,r3,5
   163a0:	ad6b883a 	add	r21,r21,r21
   163a4:	ad6b883a 	add	r21,r21,r21
   163a8:	156b883a 	add	r21,r2,r21
   163ac:	dd400215 	stw	r21,8(sp)
   163b0:	9805883a 	mov	r2,r19
   163b4:	9d40042e 	bgeu	r19,r21,163c8 <__multiply+0xa8>
   163b8:	d8c00217 	ldw	r3,8(sp)
   163bc:	10000015 	stw	zero,0(r2)
   163c0:	10800104 	addi	r2,r2,4
   163c4:	10fffc36 	bltu	r2,r3,163b8 <__multiply+0x98>
   163c8:	94800144 	addi	r18,r18,5
   163cc:	94a5883a 	add	r18,r18,r18
   163d0:	94ad883a 	add	r22,r18,r18
   163d4:	8c400144 	addi	r17,r17,5
   163d8:	8c63883a 	add	r17,r17,r17
   163dc:	bdad883a 	add	r22,r23,r22
   163e0:	80c00504 	addi	r3,r16,20
   163e4:	8c63883a 	add	r17,r17,r17
   163e8:	bc800504 	addi	r18,r23,20
   163ec:	dd800315 	stw	r22,12(sp)
   163f0:	d8c00415 	stw	r3,16(sp)
   163f4:	dcc00015 	stw	r19,0(sp)
   163f8:	8463883a 	add	r17,r16,r17
   163fc:	9580412e 	bgeu	r18,r22,16504 <__multiply+0x1e4>
   16400:	90800017 	ldw	r2,0(r18)
   16404:	173fffcc 	andi	fp,r2,65535
   16408:	e0001a26 	beq	fp,zero,16474 <__multiply+0x154>
   1640c:	dd000017 	ldw	r20,0(sp)
   16410:	dd800417 	ldw	r22,16(sp)
   16414:	002b883a 	mov	r21,zero
   16418:	b4c00017 	ldw	r19,0(r22)
   1641c:	a4000017 	ldw	r16,0(r20)
   16420:	e00b883a 	mov	r5,fp
   16424:	993fffcc 	andi	r4,r19,65535
   16428:	00106640 	call	10664 <__mulsi3>
   1642c:	9808d43a 	srli	r4,r19,16
   16430:	817fffcc 	andi	r5,r16,65535
   16434:	1145883a 	add	r2,r2,r5
   16438:	e00b883a 	mov	r5,fp
   1643c:	1567883a 	add	r19,r2,r21
   16440:	8020d43a 	srli	r16,r16,16
   16444:	00106640 	call	10664 <__mulsi3>
   16448:	9808d43a 	srli	r4,r19,16
   1644c:	1405883a 	add	r2,r2,r16
   16450:	a4c0000d 	sth	r19,0(r20)
   16454:	110f883a 	add	r7,r2,r4
   16458:	a1c0008d 	sth	r7,2(r20)
   1645c:	b5800104 	addi	r22,r22,4
   16460:	382ad43a 	srli	r21,r7,16
   16464:	a5000104 	addi	r20,r20,4
   16468:	b47feb36 	bltu	r22,r17,16418 <__multiply+0xf8>
   1646c:	a5400015 	stw	r21,0(r20)
   16470:	90800017 	ldw	r2,0(r18)
   16474:	1038d43a 	srli	fp,r2,16
   16478:	e0001c26 	beq	fp,zero,164ec <__multiply+0x1cc>
   1647c:	d8c00017 	ldw	r3,0(sp)
   16480:	dd000417 	ldw	r20,16(sp)
   16484:	002b883a 	mov	r21,zero
   16488:	1d800017 	ldw	r22,0(r3)
   1648c:	182f883a 	mov	r23,r3
   16490:	b021883a 	mov	r16,r22
   16494:	a4c00017 	ldw	r19,0(r20)
   16498:	8020d43a 	srli	r16,r16,16
   1649c:	e00b883a 	mov	r5,fp
   164a0:	993fffcc 	andi	r4,r19,65535
   164a4:	00106640 	call	10664 <__mulsi3>
   164a8:	1405883a 	add	r2,r2,r16
   164ac:	9808d43a 	srli	r4,r19,16
   164b0:	156b883a 	add	r21,r2,r21
   164b4:	bdc00104 	addi	r23,r23,4
   164b8:	bdbfff0d 	sth	r22,-4(r23)
   164bc:	bd7fff8d 	sth	r21,-2(r23)
   164c0:	bc000017 	ldw	r16,0(r23)
   164c4:	e00b883a 	mov	r5,fp
   164c8:	00106640 	call	10664 <__mulsi3>
   164cc:	a80ed43a 	srli	r7,r21,16
   164d0:	813fffcc 	andi	r4,r16,65535
   164d4:	2085883a 	add	r2,r4,r2
   164d8:	11ed883a 	add	r22,r2,r7
   164dc:	a5000104 	addi	r20,r20,4
   164e0:	b02ad43a 	srli	r21,r22,16
   164e4:	a47feb36 	bltu	r20,r17,16494 <__multiply+0x174>
   164e8:	bd800015 	stw	r22,0(r23)
   164ec:	d8c00017 	ldw	r3,0(sp)
   164f0:	94800104 	addi	r18,r18,4
   164f4:	18c00104 	addi	r3,r3,4
   164f8:	d8c00015 	stw	r3,0(sp)
   164fc:	d8c00317 	ldw	r3,12(sp)
   16500:	90ffbf36 	bltu	r18,r3,16400 <__multiply+0xe0>
   16504:	d8c00117 	ldw	r3,4(sp)
   16508:	00c00c0e 	bge	zero,r3,1653c <__multiply+0x21c>
   1650c:	d8c00217 	ldw	r3,8(sp)
   16510:	18bfff17 	ldw	r2,-4(r3)
   16514:	1d7fff04 	addi	r21,r3,-4
   16518:	10000326 	beq	r2,zero,16528 <__multiply+0x208>
   1651c:	00000706 	br	1653c <__multiply+0x21c>
   16520:	a8800017 	ldw	r2,0(r21)
   16524:	1000051e 	bne	r2,zero,1653c <__multiply+0x21c>
   16528:	d8c00117 	ldw	r3,4(sp)
   1652c:	ad7fff04 	addi	r21,r21,-4
   16530:	18ffffc4 	addi	r3,r3,-1
   16534:	d8c00115 	stw	r3,4(sp)
   16538:	183ff91e 	bne	r3,zero,16520 <__multiply+0x200>
   1653c:	d8800517 	ldw	r2,20(sp)
   16540:	d8c00117 	ldw	r3,4(sp)
   16544:	10c00415 	stw	r3,16(r2)
   16548:	dfc00f17 	ldw	ra,60(sp)
   1654c:	df000e17 	ldw	fp,56(sp)
   16550:	ddc00d17 	ldw	r23,52(sp)
   16554:	dd800c17 	ldw	r22,48(sp)
   16558:	dd400b17 	ldw	r21,44(sp)
   1655c:	dd000a17 	ldw	r20,40(sp)
   16560:	dcc00917 	ldw	r19,36(sp)
   16564:	dc800817 	ldw	r18,32(sp)
   16568:	dc400717 	ldw	r17,28(sp)
   1656c:	dc000617 	ldw	r16,24(sp)
   16570:	dec01004 	addi	sp,sp,64
   16574:	f800283a 	ret

00016578 <__pow5mult>:
   16578:	defffb04 	addi	sp,sp,-20
   1657c:	dcc00315 	stw	r19,12(sp)
   16580:	dc800215 	stw	r18,8(sp)
   16584:	dc000015 	stw	r16,0(sp)
   16588:	dfc00415 	stw	ra,16(sp)
   1658c:	dc400115 	stw	r17,4(sp)
   16590:	308000cc 	andi	r2,r6,3
   16594:	3021883a 	mov	r16,r6
   16598:	2027883a 	mov	r19,r4
   1659c:	2825883a 	mov	r18,r5
   165a0:	10002e1e 	bne	r2,zero,1665c <__pow5mult+0xe4>
   165a4:	8021d0ba 	srai	r16,r16,2
   165a8:	80001a26 	beq	r16,zero,16614 <__pow5mult+0x9c>
   165ac:	9c401217 	ldw	r17,72(r19)
   165b0:	8800061e 	bne	r17,zero,165cc <__pow5mult+0x54>
   165b4:	00003406 	br	16688 <__pow5mult+0x110>
   165b8:	8021d07a 	srai	r16,r16,1
   165bc:	80001526 	beq	r16,zero,16614 <__pow5mult+0x9c>
   165c0:	88c00017 	ldw	r3,0(r17)
   165c4:	18001b26 	beq	r3,zero,16634 <__pow5mult+0xbc>
   165c8:	1823883a 	mov	r17,r3
   165cc:	80c0004c 	andi	r3,r16,1
   165d0:	183ff926 	beq	r3,zero,165b8 <__pow5mult+0x40>
   165d4:	900b883a 	mov	r5,r18
   165d8:	880d883a 	mov	r6,r17
   165dc:	9809883a 	mov	r4,r19
   165e0:	00163200 	call	16320 <__multiply>
   165e4:	90001b26 	beq	r18,zero,16654 <__pow5mult+0xdc>
   165e8:	91000117 	ldw	r4,4(r18)
   165ec:	98c01317 	ldw	r3,76(r19)
   165f0:	8021d07a 	srai	r16,r16,1
   165f4:	2109883a 	add	r4,r4,r4
   165f8:	2109883a 	add	r4,r4,r4
   165fc:	1907883a 	add	r3,r3,r4
   16600:	19000017 	ldw	r4,0(r3)
   16604:	91000015 	stw	r4,0(r18)
   16608:	1c800015 	stw	r18,0(r3)
   1660c:	1025883a 	mov	r18,r2
   16610:	803feb1e 	bne	r16,zero,165c0 <__pow5mult+0x48>
   16614:	9005883a 	mov	r2,r18
   16618:	dfc00417 	ldw	ra,16(sp)
   1661c:	dcc00317 	ldw	r19,12(sp)
   16620:	dc800217 	ldw	r18,8(sp)
   16624:	dc400117 	ldw	r17,4(sp)
   16628:	dc000017 	ldw	r16,0(sp)
   1662c:	dec00504 	addi	sp,sp,20
   16630:	f800283a 	ret
   16634:	880b883a 	mov	r5,r17
   16638:	880d883a 	mov	r6,r17
   1663c:	9809883a 	mov	r4,r19
   16640:	00163200 	call	16320 <__multiply>
   16644:	88800015 	stw	r2,0(r17)
   16648:	10000015 	stw	zero,0(r2)
   1664c:	1023883a 	mov	r17,r2
   16650:	003fde06 	br	165cc <__pow5mult+0x54>
   16654:	1025883a 	mov	r18,r2
   16658:	003fd706 	br	165b8 <__pow5mult+0x40>
   1665c:	10bfffc4 	addi	r2,r2,-1
   16660:	1085883a 	add	r2,r2,r2
   16664:	00c000f4 	movhi	r3,3
   16668:	18e0bd04 	addi	r3,r3,-32012
   1666c:	1085883a 	add	r2,r2,r2
   16670:	1885883a 	add	r2,r3,r2
   16674:	11800017 	ldw	r6,0(r2)
   16678:	000f883a 	mov	r7,zero
   1667c:	0015f840 	call	15f84 <__multadd>
   16680:	1025883a 	mov	r18,r2
   16684:	003fc706 	br	165a4 <__pow5mult+0x2c>
   16688:	9809883a 	mov	r4,r19
   1668c:	01409c44 	movi	r5,625
   16690:	00162e40 	call	162e4 <__i2b>
   16694:	98801215 	stw	r2,72(r19)
   16698:	1023883a 	mov	r17,r2
   1669c:	10000015 	stw	zero,0(r2)
   166a0:	003fca06 	br	165cc <__pow5mult+0x54>

000166a4 <__lshift>:
   166a4:	defff904 	addi	sp,sp,-28
   166a8:	dd400515 	stw	r21,20(sp)
   166ac:	dc400115 	stw	r17,4(sp)
   166b0:	2d400417 	ldw	r21,16(r5)
   166b4:	3023d17a 	srai	r17,r6,5
   166b8:	28800217 	ldw	r2,8(r5)
   166bc:	dd000415 	stw	r20,16(sp)
   166c0:	8d6b883a 	add	r21,r17,r21
   166c4:	dcc00315 	stw	r19,12(sp)
   166c8:	dc800215 	stw	r18,8(sp)
   166cc:	dc000015 	stw	r16,0(sp)
   166d0:	dfc00615 	stw	ra,24(sp)
   166d4:	ac000044 	addi	r16,r21,1
   166d8:	2825883a 	mov	r18,r5
   166dc:	3029883a 	mov	r20,r6
   166e0:	2027883a 	mov	r19,r4
   166e4:	29400117 	ldw	r5,4(r5)
   166e8:	1400030e 	bge	r2,r16,166f8 <__lshift+0x54>
   166ec:	1085883a 	add	r2,r2,r2
   166f0:	29400044 	addi	r5,r5,1
   166f4:	143ffd16 	blt	r2,r16,166ec <__lshift+0x48>
   166f8:	9809883a 	mov	r4,r19
   166fc:	0015eb40 	call	15eb4 <_Balloc>
   16700:	10c00504 	addi	r3,r2,20
   16704:	0440090e 	bge	zero,r17,1672c <__lshift+0x88>
   16708:	000f883a 	mov	r7,zero
   1670c:	18000015 	stw	zero,0(r3)
   16710:	39c00044 	addi	r7,r7,1
   16714:	18c00104 	addi	r3,r3,4
   16718:	3c7ffc1e 	bne	r7,r17,1670c <__lshift+0x68>
   1671c:	38c00144 	addi	r3,r7,5
   16720:	18c7883a 	add	r3,r3,r3
   16724:	18c7883a 	add	r3,r3,r3
   16728:	10c7883a 	add	r3,r2,r3
   1672c:	92000417 	ldw	r8,16(r18)
   16730:	a18007cc 	andi	r6,r20,31
   16734:	91c00504 	addi	r7,r18,20
   16738:	42000144 	addi	r8,r8,5
   1673c:	4211883a 	add	r8,r8,r8
   16740:	4211883a 	add	r8,r8,r8
   16744:	9211883a 	add	r8,r18,r8
   16748:	30002226 	beq	r6,zero,167d4 <__lshift+0x130>
   1674c:	02800804 	movi	r10,32
   16750:	5195c83a 	sub	r10,r10,r6
   16754:	000b883a 	mov	r5,zero
   16758:	3a400017 	ldw	r9,0(r7)
   1675c:	18c00104 	addi	r3,r3,4
   16760:	39c00104 	addi	r7,r7,4
   16764:	4992983a 	sll	r9,r9,r6
   16768:	2a4ab03a 	or	r5,r5,r9
   1676c:	197fff15 	stw	r5,-4(r3)
   16770:	397fff17 	ldw	r5,-4(r7)
   16774:	2a8ad83a 	srl	r5,r5,r10
   16778:	3a3ff736 	bltu	r7,r8,16758 <__lshift+0xb4>
   1677c:	19400015 	stw	r5,0(r3)
   16780:	28000126 	beq	r5,zero,16788 <__lshift+0xe4>
   16784:	ac000084 	addi	r16,r21,2
   16788:	91000117 	ldw	r4,4(r18)
   1678c:	98c01317 	ldw	r3,76(r19)
   16790:	843fffc4 	addi	r16,r16,-1
   16794:	2109883a 	add	r4,r4,r4
   16798:	2109883a 	add	r4,r4,r4
   1679c:	1907883a 	add	r3,r3,r4
   167a0:	19000017 	ldw	r4,0(r3)
   167a4:	14000415 	stw	r16,16(r2)
   167a8:	91000015 	stw	r4,0(r18)
   167ac:	1c800015 	stw	r18,0(r3)
   167b0:	dfc00617 	ldw	ra,24(sp)
   167b4:	dd400517 	ldw	r21,20(sp)
   167b8:	dd000417 	ldw	r20,16(sp)
   167bc:	dcc00317 	ldw	r19,12(sp)
   167c0:	dc800217 	ldw	r18,8(sp)
   167c4:	dc400117 	ldw	r17,4(sp)
   167c8:	dc000017 	ldw	r16,0(sp)
   167cc:	dec00704 	addi	sp,sp,28
   167d0:	f800283a 	ret
   167d4:	39400017 	ldw	r5,0(r7)
   167d8:	18c00104 	addi	r3,r3,4
   167dc:	39c00104 	addi	r7,r7,4
   167e0:	197fff15 	stw	r5,-4(r3)
   167e4:	3a3fe82e 	bgeu	r7,r8,16788 <__lshift+0xe4>
   167e8:	39400017 	ldw	r5,0(r7)
   167ec:	18c00104 	addi	r3,r3,4
   167f0:	39c00104 	addi	r7,r7,4
   167f4:	197fff15 	stw	r5,-4(r3)
   167f8:	3a3ff636 	bltu	r7,r8,167d4 <__lshift+0x130>
   167fc:	003fe206 	br	16788 <__lshift+0xe4>

00016800 <__mcmp>:
   16800:	20800417 	ldw	r2,16(r4)
   16804:	28c00417 	ldw	r3,16(r5)
   16808:	10c5c83a 	sub	r2,r2,r3
   1680c:	10000f1e 	bne	r2,zero,1684c <__mcmp+0x4c>
   16810:	18c00144 	addi	r3,r3,5
   16814:	18c7883a 	add	r3,r3,r3
   16818:	18c7883a 	add	r3,r3,r3
   1681c:	21c00504 	addi	r7,r4,20
   16820:	28cb883a 	add	r5,r5,r3
   16824:	20c9883a 	add	r4,r4,r3
   16828:	213fff04 	addi	r4,r4,-4
   1682c:	297fff04 	addi	r5,r5,-4
   16830:	21800017 	ldw	r6,0(r4)
   16834:	28c00017 	ldw	r3,0(r5)
   16838:	30c0021e 	bne	r6,r3,16844 <__mcmp+0x44>
   1683c:	393ffa36 	bltu	r7,r4,16828 <__mcmp+0x28>
   16840:	f800283a 	ret
   16844:	30c00236 	bltu	r6,r3,16850 <__mcmp+0x50>
   16848:	00800044 	movi	r2,1
   1684c:	f800283a 	ret
   16850:	00bfffc4 	movi	r2,-1
   16854:	f800283a 	ret

00016858 <__mdiff>:
   16858:	defffb04 	addi	sp,sp,-20
   1685c:	dc000015 	stw	r16,0(sp)
   16860:	2821883a 	mov	r16,r5
   16864:	dc800215 	stw	r18,8(sp)
   16868:	300b883a 	mov	r5,r6
   1686c:	2025883a 	mov	r18,r4
   16870:	8009883a 	mov	r4,r16
   16874:	dc400115 	stw	r17,4(sp)
   16878:	dfc00415 	stw	ra,16(sp)
   1687c:	dcc00315 	stw	r19,12(sp)
   16880:	3023883a 	mov	r17,r6
   16884:	00168000 	call	16800 <__mcmp>
   16888:	10005026 	beq	r2,zero,169cc <__mdiff+0x174>
   1688c:	10004a16 	blt	r2,zero,169b8 <__mdiff+0x160>
   16890:	0027883a 	mov	r19,zero
   16894:	81400117 	ldw	r5,4(r16)
   16898:	9009883a 	mov	r4,r18
   1689c:	0015eb40 	call	15eb4 <_Balloc>
   168a0:	82400417 	ldw	r9,16(r16)
   168a4:	89800417 	ldw	r6,16(r17)
   168a8:	14c00315 	stw	r19,12(r2)
   168ac:	4b800144 	addi	r14,r9,5
   168b0:	31800144 	addi	r6,r6,5
   168b4:	739d883a 	add	r14,r14,r14
   168b8:	318d883a 	add	r6,r6,r6
   168bc:	739d883a 	add	r14,r14,r14
   168c0:	318d883a 	add	r6,r6,r6
   168c4:	81c00504 	addi	r7,r16,20
   168c8:	839d883a 	add	r14,r16,r14
   168cc:	8a000504 	addi	r8,r17,20
   168d0:	898d883a 	add	r6,r17,r6
   168d4:	10c00504 	addi	r3,r2,20
   168d8:	0009883a 	mov	r4,zero
   168dc:	3b000017 	ldw	r12,0(r7)
   168e0:	42c00017 	ldw	r11,0(r8)
   168e4:	42000104 	addi	r8,r8,4
   168e8:	62bfffcc 	andi	r10,r12,65535
   168ec:	5b7fffcc 	andi	r13,r11,65535
   168f0:	5109883a 	add	r4,r10,r4
   168f4:	2355c83a 	sub	r10,r4,r13
   168f8:	5816d43a 	srli	r11,r11,16
   168fc:	6008d43a 	srli	r4,r12,16
   16900:	501bd43a 	srai	r13,r10,16
   16904:	1a80000d 	sth	r10,0(r3)
   16908:	22c9c83a 	sub	r4,r4,r11
   1690c:	2349883a 	add	r4,r4,r13
   16910:	1900008d 	sth	r4,2(r3)
   16914:	39c00104 	addi	r7,r7,4
   16918:	2009d43a 	srai	r4,r4,16
   1691c:	18c00104 	addi	r3,r3,4
   16920:	41bfee36 	bltu	r8,r6,168dc <__mdiff+0x84>
   16924:	180b883a 	mov	r5,r3
   16928:	3815883a 	mov	r10,r7
   1692c:	3b80132e 	bgeu	r7,r14,1697c <__mdiff+0x124>
   16930:	3a000017 	ldw	r8,0(r7)
   16934:	18c00104 	addi	r3,r3,4
   16938:	39c00104 	addi	r7,r7,4
   1693c:	41bfffcc 	andi	r6,r8,65535
   16940:	310d883a 	add	r6,r6,r4
   16944:	3009d43a 	srai	r4,r6,16
   16948:	4010d43a 	srli	r8,r8,16
   1694c:	19bfff0d 	sth	r6,-4(r3)
   16950:	2209883a 	add	r4,r4,r8
   16954:	193fff8d 	sth	r4,-2(r3)
   16958:	2009d43a 	srai	r4,r4,16
   1695c:	3bbff436 	bltu	r7,r14,16930 <__mdiff+0xd8>
   16960:	0286303a 	nor	r3,zero,r10
   16964:	1b87883a 	add	r3,r3,r14
   16968:	1806d0ba 	srli	r3,r3,2
   1696c:	18c00044 	addi	r3,r3,1
   16970:	18c7883a 	add	r3,r3,r3
   16974:	18c7883a 	add	r3,r3,r3
   16978:	28c7883a 	add	r3,r5,r3
   1697c:	193fff17 	ldw	r4,-4(r3)
   16980:	18ffff04 	addi	r3,r3,-4
   16984:	2000041e 	bne	r4,zero,16998 <__mdiff+0x140>
   16988:	18ffff04 	addi	r3,r3,-4
   1698c:	19000017 	ldw	r4,0(r3)
   16990:	4a7fffc4 	addi	r9,r9,-1
   16994:	203ffc26 	beq	r4,zero,16988 <__mdiff+0x130>
   16998:	12400415 	stw	r9,16(r2)
   1699c:	dfc00417 	ldw	ra,16(sp)
   169a0:	dcc00317 	ldw	r19,12(sp)
   169a4:	dc800217 	ldw	r18,8(sp)
   169a8:	dc400117 	ldw	r17,4(sp)
   169ac:	dc000017 	ldw	r16,0(sp)
   169b0:	dec00504 	addi	sp,sp,20
   169b4:	f800283a 	ret
   169b8:	8005883a 	mov	r2,r16
   169bc:	04c00044 	movi	r19,1
   169c0:	8821883a 	mov	r16,r17
   169c4:	1023883a 	mov	r17,r2
   169c8:	003fb206 	br	16894 <__mdiff+0x3c>
   169cc:	9009883a 	mov	r4,r18
   169d0:	000b883a 	mov	r5,zero
   169d4:	0015eb40 	call	15eb4 <_Balloc>
   169d8:	00c00044 	movi	r3,1
   169dc:	10c00415 	stw	r3,16(r2)
   169e0:	10000515 	stw	zero,20(r2)
   169e4:	dfc00417 	ldw	ra,16(sp)
   169e8:	dcc00317 	ldw	r19,12(sp)
   169ec:	dc800217 	ldw	r18,8(sp)
   169f0:	dc400117 	ldw	r17,4(sp)
   169f4:	dc000017 	ldw	r16,0(sp)
   169f8:	dec00504 	addi	sp,sp,20
   169fc:	f800283a 	ret

00016a00 <__ulp>:
   16a00:	295ffc2c 	andhi	r5,r5,32752
   16a04:	00bf3034 	movhi	r2,64704
   16a08:	2887883a 	add	r3,r5,r2
   16a0c:	00c0020e 	bge	zero,r3,16a18 <__ulp+0x18>
   16a10:	0005883a 	mov	r2,zero
   16a14:	f800283a 	ret
   16a18:	00c7c83a 	sub	r3,zero,r3
   16a1c:	1805d53a 	srai	r2,r3,20
   16a20:	00c004c4 	movi	r3,19
   16a24:	18800a0e 	bge	r3,r2,16a50 <__ulp+0x50>
   16a28:	01000c84 	movi	r4,50
   16a2c:	0007883a 	mov	r3,zero
   16a30:	20800516 	blt	r4,r2,16a48 <__ulp+0x48>
   16a34:	01000cc4 	movi	r4,51
   16a38:	2085c83a 	sub	r2,r4,r2
   16a3c:	01000044 	movi	r4,1
   16a40:	2084983a 	sll	r2,r4,r2
   16a44:	f800283a 	ret
   16a48:	00800044 	movi	r2,1
   16a4c:	f800283a 	ret
   16a50:	00c00234 	movhi	r3,8
   16a54:	1887d83a 	sra	r3,r3,r2
   16a58:	0005883a 	mov	r2,zero
   16a5c:	f800283a 	ret

00016a60 <__b2d>:
   16a60:	defffa04 	addi	sp,sp,-24
   16a64:	dc000015 	stw	r16,0(sp)
   16a68:	24000417 	ldw	r16,16(r4)
   16a6c:	dc400115 	stw	r17,4(sp)
   16a70:	dcc00315 	stw	r19,12(sp)
   16a74:	84000144 	addi	r16,r16,5
   16a78:	8421883a 	add	r16,r16,r16
   16a7c:	8421883a 	add	r16,r16,r16
   16a80:	2421883a 	add	r16,r4,r16
   16a84:	847fff17 	ldw	r17,-4(r16)
   16a88:	24c00504 	addi	r19,r4,20
   16a8c:	dd000415 	stw	r20,16(sp)
   16a90:	8809883a 	mov	r4,r17
   16a94:	dc800215 	stw	r18,8(sp)
   16a98:	2829883a 	mov	r20,r5
   16a9c:	dfc00515 	stw	ra,20(sp)
   16aa0:	00161cc0 	call	161cc <__hi0bits>
   16aa4:	00c00804 	movi	r3,32
   16aa8:	1887c83a 	sub	r3,r3,r2
   16aac:	a0c00015 	stw	r3,0(r20)
   16ab0:	00c00284 	movi	r3,10
   16ab4:	84bfff04 	addi	r18,r16,-4
   16ab8:	18801216 	blt	r3,r2,16b04 <__b2d+0xa4>
   16abc:	010002c4 	movi	r4,11
   16ac0:	2089c83a 	sub	r4,r4,r2
   16ac4:	8906d83a 	srl	r3,r17,r4
   16ac8:	18cffc34 	orhi	r3,r3,16368
   16acc:	9c80322e 	bgeu	r19,r18,16b98 <__b2d+0x138>
   16ad0:	817ffe17 	ldw	r5,-8(r16)
   16ad4:	2908d83a 	srl	r4,r5,r4
   16ad8:	10800544 	addi	r2,r2,21
   16adc:	88a2983a 	sll	r17,r17,r2
   16ae0:	2444b03a 	or	r2,r4,r17
   16ae4:	dfc00517 	ldw	ra,20(sp)
   16ae8:	dd000417 	ldw	r20,16(sp)
   16aec:	dcc00317 	ldw	r19,12(sp)
   16af0:	dc800217 	ldw	r18,8(sp)
   16af4:	dc400117 	ldw	r17,4(sp)
   16af8:	dc000017 	ldw	r16,0(sp)
   16afc:	dec00604 	addi	sp,sp,24
   16b00:	f800283a 	ret
   16b04:	9c801636 	bltu	r19,r18,16b60 <__b2d+0x100>
   16b08:	113ffd44 	addi	r4,r2,-11
   16b0c:	000b883a 	mov	r5,zero
   16b10:	20001726 	beq	r4,zero,16b70 <__b2d+0x110>
   16b14:	00c00ac4 	movi	r3,43
   16b18:	1885c83a 	sub	r2,r3,r2
   16b1c:	8906983a 	sll	r3,r17,r4
   16b20:	288cd83a 	srl	r6,r5,r2
   16b24:	18cffc34 	orhi	r3,r3,16368
   16b28:	1986b03a 	or	r3,r3,r6
   16b2c:	9c801c2e 	bgeu	r19,r18,16ba0 <__b2d+0x140>
   16b30:	91bfff17 	ldw	r6,-4(r18)
   16b34:	3084d83a 	srl	r2,r6,r2
   16b38:	2908983a 	sll	r4,r5,r4
   16b3c:	1104b03a 	or	r2,r2,r4
   16b40:	dfc00517 	ldw	ra,20(sp)
   16b44:	dd000417 	ldw	r20,16(sp)
   16b48:	dcc00317 	ldw	r19,12(sp)
   16b4c:	dc800217 	ldw	r18,8(sp)
   16b50:	dc400117 	ldw	r17,4(sp)
   16b54:	dc000017 	ldw	r16,0(sp)
   16b58:	dec00604 	addi	sp,sp,24
   16b5c:	f800283a 	ret
   16b60:	113ffd44 	addi	r4,r2,-11
   16b64:	84bffe04 	addi	r18,r16,-8
   16b68:	817ffe17 	ldw	r5,-8(r16)
   16b6c:	203fe91e 	bne	r4,zero,16b14 <__b2d+0xb4>
   16b70:	88cffc34 	orhi	r3,r17,16368
   16b74:	2805883a 	mov	r2,r5
   16b78:	dfc00517 	ldw	ra,20(sp)
   16b7c:	dd000417 	ldw	r20,16(sp)
   16b80:	dcc00317 	ldw	r19,12(sp)
   16b84:	dc800217 	ldw	r18,8(sp)
   16b88:	dc400117 	ldw	r17,4(sp)
   16b8c:	dc000017 	ldw	r16,0(sp)
   16b90:	dec00604 	addi	sp,sp,24
   16b94:	f800283a 	ret
   16b98:	0009883a 	mov	r4,zero
   16b9c:	003fce06 	br	16ad8 <__b2d+0x78>
   16ba0:	0005883a 	mov	r2,zero
   16ba4:	003fe406 	br	16b38 <__b2d+0xd8>

00016ba8 <__d2b>:
   16ba8:	defff804 	addi	sp,sp,-32
   16bac:	dc400315 	stw	r17,12(sp)
   16bb0:	3023883a 	mov	r17,r6
   16bb4:	dc800415 	stw	r18,16(sp)
   16bb8:	8824907a 	slli	r18,r17,1
   16bbc:	dcc00515 	stw	r19,20(sp)
   16bc0:	2827883a 	mov	r19,r5
   16bc4:	9024d57a 	srli	r18,r18,21
   16bc8:	01400044 	movi	r5,1
   16bcc:	dd000615 	stw	r20,24(sp)
   16bd0:	dc000215 	stw	r16,8(sp)
   16bd4:	dfc00715 	stw	ra,28(sp)
   16bd8:	3829883a 	mov	r20,r7
   16bdc:	0015eb40 	call	15eb4 <_Balloc>
   16be0:	1021883a 	mov	r16,r2
   16be4:	00800434 	movhi	r2,16
   16be8:	10bfffc4 	addi	r2,r2,-1
   16bec:	88a2703a 	and	r17,r17,r2
   16bf0:	90000126 	beq	r18,zero,16bf8 <__d2b+0x50>
   16bf4:	8c400434 	orhi	r17,r17,16
   16bf8:	dc400015 	stw	r17,0(sp)
   16bfc:	98002226 	beq	r19,zero,16c88 <__d2b+0xe0>
   16c00:	d9000104 	addi	r4,sp,4
   16c04:	dcc00115 	stw	r19,4(sp)
   16c08:	00162340 	call	16234 <__lo0bits>
   16c0c:	d8c00017 	ldw	r3,0(sp)
   16c10:	10002d1e 	bne	r2,zero,16cc8 <__d2b+0x120>
   16c14:	d9000117 	ldw	r4,4(sp)
   16c18:	81000515 	stw	r4,20(r16)
   16c1c:	1823003a 	cmpeq	r17,r3,zero
   16c20:	01000084 	movi	r4,2
   16c24:	2463c83a 	sub	r17,r4,r17
   16c28:	80c00615 	stw	r3,24(r16)
   16c2c:	84400415 	stw	r17,16(r16)
   16c30:	90001d1e 	bne	r18,zero,16ca8 <__d2b+0x100>
   16c34:	88c00104 	addi	r3,r17,4
   16c38:	18c7883a 	add	r3,r3,r3
   16c3c:	18c7883a 	add	r3,r3,r3
   16c40:	80c7883a 	add	r3,r16,r3
   16c44:	19000017 	ldw	r4,0(r3)
   16c48:	10bef384 	addi	r2,r2,-1074
   16c4c:	a0800015 	stw	r2,0(r20)
   16c50:	00161cc0 	call	161cc <__hi0bits>
   16c54:	8822917a 	slli	r17,r17,5
   16c58:	d8c00817 	ldw	r3,32(sp)
   16c5c:	8885c83a 	sub	r2,r17,r2
   16c60:	18800015 	stw	r2,0(r3)
   16c64:	8005883a 	mov	r2,r16
   16c68:	dfc00717 	ldw	ra,28(sp)
   16c6c:	dd000617 	ldw	r20,24(sp)
   16c70:	dcc00517 	ldw	r19,20(sp)
   16c74:	dc800417 	ldw	r18,16(sp)
   16c78:	dc400317 	ldw	r17,12(sp)
   16c7c:	dc000217 	ldw	r16,8(sp)
   16c80:	dec00804 	addi	sp,sp,32
   16c84:	f800283a 	ret
   16c88:	d809883a 	mov	r4,sp
   16c8c:	00162340 	call	16234 <__lo0bits>
   16c90:	d8c00017 	ldw	r3,0(sp)
   16c94:	04400044 	movi	r17,1
   16c98:	84400415 	stw	r17,16(r16)
   16c9c:	80c00515 	stw	r3,20(r16)
   16ca0:	10800804 	addi	r2,r2,32
   16ca4:	903fe326 	beq	r18,zero,16c34 <__d2b+0x8c>
   16ca8:	00c00d44 	movi	r3,53
   16cac:	94bef344 	addi	r18,r18,-1075
   16cb0:	90a5883a 	add	r18,r18,r2
   16cb4:	1885c83a 	sub	r2,r3,r2
   16cb8:	d8c00817 	ldw	r3,32(sp)
   16cbc:	a4800015 	stw	r18,0(r20)
   16cc0:	18800015 	stw	r2,0(r3)
   16cc4:	003fe706 	br	16c64 <__d2b+0xbc>
   16cc8:	01000804 	movi	r4,32
   16ccc:	2089c83a 	sub	r4,r4,r2
   16cd0:	1908983a 	sll	r4,r3,r4
   16cd4:	d9400117 	ldw	r5,4(sp)
   16cd8:	1886d83a 	srl	r3,r3,r2
   16cdc:	2148b03a 	or	r4,r4,r5
   16ce0:	81000515 	stw	r4,20(r16)
   16ce4:	d8c00015 	stw	r3,0(sp)
   16ce8:	003fcc06 	br	16c1c <__d2b+0x74>

00016cec <__ratio>:
   16cec:	defff904 	addi	sp,sp,-28
   16cf0:	dc400315 	stw	r17,12(sp)
   16cf4:	2823883a 	mov	r17,r5
   16cf8:	d9400104 	addi	r5,sp,4
   16cfc:	dfc00615 	stw	ra,24(sp)
   16d00:	dcc00515 	stw	r19,20(sp)
   16d04:	dc800415 	stw	r18,16(sp)
   16d08:	2027883a 	mov	r19,r4
   16d0c:	dc000215 	stw	r16,8(sp)
   16d10:	0016a600 	call	16a60 <__b2d>
   16d14:	8809883a 	mov	r4,r17
   16d18:	d80b883a 	mov	r5,sp
   16d1c:	1025883a 	mov	r18,r2
   16d20:	1821883a 	mov	r16,r3
   16d24:	0016a600 	call	16a60 <__b2d>
   16d28:	99400417 	ldw	r5,16(r19)
   16d2c:	89000417 	ldw	r4,16(r17)
   16d30:	d9800117 	ldw	r6,4(sp)
   16d34:	2909c83a 	sub	r4,r5,r4
   16d38:	d9400017 	ldw	r5,0(sp)
   16d3c:	2008917a 	slli	r4,r4,5
   16d40:	314bc83a 	sub	r5,r6,r5
   16d44:	290b883a 	add	r5,r5,r4
   16d48:	01400e0e 	bge	zero,r5,16d84 <__ratio+0x98>
   16d4c:	280a953a 	slli	r5,r5,20
   16d50:	2c21883a 	add	r16,r5,r16
   16d54:	9009883a 	mov	r4,r18
   16d58:	800b883a 	mov	r5,r16
   16d5c:	100d883a 	mov	r6,r2
   16d60:	180f883a 	mov	r7,r3
   16d64:	0018fa00 	call	18fa0 <__divdf3>
   16d68:	dfc00617 	ldw	ra,24(sp)
   16d6c:	dcc00517 	ldw	r19,20(sp)
   16d70:	dc800417 	ldw	r18,16(sp)
   16d74:	dc400317 	ldw	r17,12(sp)
   16d78:	dc000217 	ldw	r16,8(sp)
   16d7c:	dec00704 	addi	sp,sp,28
   16d80:	f800283a 	ret
   16d84:	280a953a 	slli	r5,r5,20
   16d88:	1947c83a 	sub	r3,r3,r5
   16d8c:	003ff106 	br	16d54 <__ratio+0x68>

00016d90 <_mprec_log10>:
   16d90:	defffe04 	addi	sp,sp,-8
   16d94:	dc000015 	stw	r16,0(sp)
   16d98:	dfc00115 	stw	ra,4(sp)
   16d9c:	008005c4 	movi	r2,23
   16da0:	2021883a 	mov	r16,r4
   16da4:	11000d0e 	bge	r2,r4,16ddc <_mprec_log10+0x4c>
   16da8:	0005883a 	mov	r2,zero
   16dac:	00cffc34 	movhi	r3,16368
   16db0:	843fffc4 	addi	r16,r16,-1
   16db4:	1009883a 	mov	r4,r2
   16db8:	180b883a 	mov	r5,r3
   16dbc:	000d883a 	mov	r6,zero
   16dc0:	01d00934 	movhi	r7,16420
   16dc4:	0018cbc0 	call	18cbc <__muldf3>
   16dc8:	803ff91e 	bne	r16,zero,16db0 <_mprec_log10+0x20>
   16dcc:	dfc00117 	ldw	ra,4(sp)
   16dd0:	dc000017 	ldw	r16,0(sp)
   16dd4:	dec00204 	addi	sp,sp,8
   16dd8:	f800283a 	ret
   16ddc:	202090fa 	slli	r16,r4,3
   16de0:	008000f4 	movhi	r2,3
   16de4:	10a08b04 	addi	r2,r2,-32212
   16de8:	1421883a 	add	r16,r2,r16
   16dec:	80800017 	ldw	r2,0(r16)
   16df0:	80c00117 	ldw	r3,4(r16)
   16df4:	dfc00117 	ldw	ra,4(sp)
   16df8:	dc000017 	ldw	r16,0(sp)
   16dfc:	dec00204 	addi	sp,sp,8
   16e00:	f800283a 	ret

00016e04 <__copybits>:
   16e04:	297fffc4 	addi	r5,r5,-1
   16e08:	31c00417 	ldw	r7,16(r6)
   16e0c:	2811d17a 	srai	r8,r5,5
   16e10:	30800504 	addi	r2,r6,20
   16e14:	39c00144 	addi	r7,r7,5
   16e18:	42000044 	addi	r8,r8,1
   16e1c:	39cf883a 	add	r7,r7,r7
   16e20:	4211883a 	add	r8,r8,r8
   16e24:	39cf883a 	add	r7,r7,r7
   16e28:	4211883a 	add	r8,r8,r8
   16e2c:	31cf883a 	add	r7,r6,r7
   16e30:	2211883a 	add	r8,r4,r8
   16e34:	11c00d2e 	bgeu	r2,r7,16e6c <__copybits+0x68>
   16e38:	2007883a 	mov	r3,r4
   16e3c:	11400017 	ldw	r5,0(r2)
   16e40:	18c00104 	addi	r3,r3,4
   16e44:	10800104 	addi	r2,r2,4
   16e48:	197fff15 	stw	r5,-4(r3)
   16e4c:	11fffb36 	bltu	r2,r7,16e3c <__copybits+0x38>
   16e50:	3985c83a 	sub	r2,r7,r6
   16e54:	10bffac4 	addi	r2,r2,-21
   16e58:	1004d0ba 	srli	r2,r2,2
   16e5c:	10800044 	addi	r2,r2,1
   16e60:	1085883a 	add	r2,r2,r2
   16e64:	1085883a 	add	r2,r2,r2
   16e68:	2089883a 	add	r4,r4,r2
   16e6c:	2200032e 	bgeu	r4,r8,16e7c <__copybits+0x78>
   16e70:	20000015 	stw	zero,0(r4)
   16e74:	21000104 	addi	r4,r4,4
   16e78:	223ffd36 	bltu	r4,r8,16e70 <__copybits+0x6c>
   16e7c:	f800283a 	ret

00016e80 <__any_on>:
   16e80:	21800417 	ldw	r6,16(r4)
   16e84:	2805d17a 	srai	r2,r5,5
   16e88:	20c00504 	addi	r3,r4,20
   16e8c:	30800f0e 	bge	r6,r2,16ecc <__any_on+0x4c>
   16e90:	3005883a 	mov	r2,r6
   16e94:	10800144 	addi	r2,r2,5
   16e98:	1085883a 	add	r2,r2,r2
   16e9c:	1085883a 	add	r2,r2,r2
   16ea0:	2089883a 	add	r4,r4,r2
   16ea4:	1900152e 	bgeu	r3,r4,16efc <__any_on+0x7c>
   16ea8:	20bfff17 	ldw	r2,-4(r4)
   16eac:	213fff04 	addi	r4,r4,-4
   16eb0:	1000041e 	bne	r2,zero,16ec4 <__any_on+0x44>
   16eb4:	1900112e 	bgeu	r3,r4,16efc <__any_on+0x7c>
   16eb8:	213fff04 	addi	r4,r4,-4
   16ebc:	20800017 	ldw	r2,0(r4)
   16ec0:	103ffc26 	beq	r2,zero,16eb4 <__any_on+0x34>
   16ec4:	00800044 	movi	r2,1
   16ec8:	f800283a 	ret
   16ecc:	11bff10e 	bge	r2,r6,16e94 <__any_on+0x14>
   16ed0:	294007cc 	andi	r5,r5,31
   16ed4:	283fef26 	beq	r5,zero,16e94 <__any_on+0x14>
   16ed8:	11800144 	addi	r6,r2,5
   16edc:	318d883a 	add	r6,r6,r6
   16ee0:	318d883a 	add	r6,r6,r6
   16ee4:	218d883a 	add	r6,r4,r6
   16ee8:	31800017 	ldw	r6,0(r6)
   16eec:	314ed83a 	srl	r7,r6,r5
   16ef0:	394a983a 	sll	r5,r7,r5
   16ef4:	29bff31e 	bne	r5,r6,16ec4 <__any_on+0x44>
   16ef8:	003fe606 	br	16e94 <__any_on+0x14>
   16efc:	0005883a 	mov	r2,zero
   16f00:	f800283a 	ret

00016f04 <_realloc_r>:
   16f04:	defff504 	addi	sp,sp,-44
   16f08:	dd400615 	stw	r21,24(sp)
   16f0c:	dc800315 	stw	r18,12(sp)
   16f10:	dc000115 	stw	r16,4(sp)
   16f14:	dfc00a15 	stw	ra,40(sp)
   16f18:	df000915 	stw	fp,36(sp)
   16f1c:	ddc00815 	stw	r23,32(sp)
   16f20:	dd800715 	stw	r22,28(sp)
   16f24:	dd000515 	stw	r20,20(sp)
   16f28:	dcc00415 	stw	r19,16(sp)
   16f2c:	dc400215 	stw	r17,8(sp)
   16f30:	2821883a 	mov	r16,r5
   16f34:	202b883a 	mov	r21,r4
   16f38:	3025883a 	mov	r18,r6
   16f3c:	28009626 	beq	r5,zero,17198 <_realloc_r+0x294>
   16f40:	001a1f40 	call	1a1f4 <__malloc_lock>
   16f44:	80bfff17 	ldw	r2,-4(r16)
   16f48:	04ffff04 	movi	r19,-4
   16f4c:	90c002c4 	addi	r3,r18,11
   16f50:	01000584 	movi	r4,22
   16f54:	85bffe04 	addi	r22,r16,-8
   16f58:	14e6703a 	and	r19,r2,r19
   16f5c:	20c0372e 	bgeu	r4,r3,1703c <_realloc_r+0x138>
   16f60:	047ffe04 	movi	r17,-8
   16f64:	1c62703a 	and	r17,r3,r17
   16f68:	8807883a 	mov	r3,r17
   16f6c:	88005a16 	blt	r17,zero,170d8 <_realloc_r+0x1d4>
   16f70:	8c805936 	bltu	r17,r18,170d8 <_realloc_r+0x1d4>
   16f74:	98c0340e 	bge	r19,r3,17048 <_realloc_r+0x144>
   16f78:	070000f4 	movhi	fp,3
   16f7c:	e7221504 	addi	fp,fp,-30636
   16f80:	e1400217 	ldw	r5,8(fp)
   16f84:	b4c9883a 	add	r4,r22,r19
   16f88:	29009026 	beq	r5,r4,171cc <_realloc_r+0x2c8>
   16f8c:	21800117 	ldw	r6,4(r4)
   16f90:	01ffff84 	movi	r7,-2
   16f94:	31ce703a 	and	r7,r6,r7
   16f98:	21cf883a 	add	r7,r4,r7
   16f9c:	39c00117 	ldw	r7,4(r7)
   16fa0:	39c0004c 	andi	r7,r7,1
   16fa4:	38004326 	beq	r7,zero,170b4 <_realloc_r+0x1b0>
   16fa8:	000d883a 	mov	r6,zero
   16fac:	0009883a 	mov	r4,zero
   16fb0:	1080004c 	andi	r2,r2,1
   16fb4:	10005a1e 	bne	r2,zero,17120 <_realloc_r+0x21c>
   16fb8:	85fffe17 	ldw	r23,-8(r16)
   16fbc:	00bfff04 	movi	r2,-4
   16fc0:	b5efc83a 	sub	r23,r22,r23
   16fc4:	b9c00117 	ldw	r7,4(r23)
   16fc8:	388e703a 	and	r7,r7,r2
   16fcc:	3ccf883a 	add	r7,r7,r19
   16fd0:	20005226 	beq	r4,zero,1711c <_realloc_r+0x218>
   16fd4:	31e9883a 	add	r20,r6,r7
   16fd8:	2140c726 	beq	r4,r5,172f8 <_realloc_r+0x3f4>
   16fdc:	a0c04f16 	blt	r20,r3,1711c <_realloc_r+0x218>
   16fe0:	20800317 	ldw	r2,12(r4)
   16fe4:	20c00217 	ldw	r3,8(r4)
   16fe8:	99bfff04 	addi	r6,r19,-4
   16fec:	01000904 	movi	r4,36
   16ff0:	18800315 	stw	r2,12(r3)
   16ff4:	10c00215 	stw	r3,8(r2)
   16ff8:	b8c00217 	ldw	r3,8(r23)
   16ffc:	b8800317 	ldw	r2,12(r23)
   17000:	bc800204 	addi	r18,r23,8
   17004:	18800315 	stw	r2,12(r3)
   17008:	10c00215 	stw	r3,8(r2)
   1700c:	2180ed36 	bltu	r4,r6,173c4 <_realloc_r+0x4c0>
   17010:	008004c4 	movi	r2,19
   17014:	11809b2e 	bgeu	r2,r6,17284 <_realloc_r+0x380>
   17018:	80800017 	ldw	r2,0(r16)
   1701c:	b8800215 	stw	r2,8(r23)
   17020:	80800117 	ldw	r2,4(r16)
   17024:	b8800315 	stw	r2,12(r23)
   17028:	008006c4 	movi	r2,27
   1702c:	1180f936 	bltu	r2,r6,17414 <_realloc_r+0x510>
   17030:	b8800404 	addi	r2,r23,16
   17034:	80c00204 	addi	r3,r16,8
   17038:	00009406 	br	1728c <_realloc_r+0x388>
   1703c:	00c00404 	movi	r3,16
   17040:	1823883a 	mov	r17,r3
   17044:	003fca06 	br	16f70 <_realloc_r+0x6c>
   17048:	9829883a 	mov	r20,r19
   1704c:	a447c83a 	sub	r3,r20,r17
   17050:	010003c4 	movi	r4,15
   17054:	1080004c 	andi	r2,r2,1
   17058:	20c02336 	bltu	r4,r3,170e8 <_realloc_r+0x1e4>
   1705c:	1504b03a 	or	r2,r2,r20
   17060:	b0800115 	stw	r2,4(r22)
   17064:	b52d883a 	add	r22,r22,r20
   17068:	b0800117 	ldw	r2,4(r22)
   1706c:	10800054 	ori	r2,r2,1
   17070:	b0800115 	stw	r2,4(r22)
   17074:	a809883a 	mov	r4,r21
   17078:	001a2140 	call	1a214 <__malloc_unlock>
   1707c:	8025883a 	mov	r18,r16
   17080:	9005883a 	mov	r2,r18
   17084:	dfc00a17 	ldw	ra,40(sp)
   17088:	df000917 	ldw	fp,36(sp)
   1708c:	ddc00817 	ldw	r23,32(sp)
   17090:	dd800717 	ldw	r22,28(sp)
   17094:	dd400617 	ldw	r21,24(sp)
   17098:	dd000517 	ldw	r20,20(sp)
   1709c:	dcc00417 	ldw	r19,16(sp)
   170a0:	dc800317 	ldw	r18,12(sp)
   170a4:	dc400217 	ldw	r17,8(sp)
   170a8:	dc000117 	ldw	r16,4(sp)
   170ac:	dec00b04 	addi	sp,sp,44
   170b0:	f800283a 	ret
   170b4:	01ffff04 	movi	r7,-4
   170b8:	31cc703a 	and	r6,r6,r7
   170bc:	34e9883a 	add	r20,r6,r19
   170c0:	a0ffbb16 	blt	r20,r3,16fb0 <_realloc_r+0xac>
   170c4:	20c00317 	ldw	r3,12(r4)
   170c8:	21000217 	ldw	r4,8(r4)
   170cc:	20c00315 	stw	r3,12(r4)
   170d0:	19000215 	stw	r4,8(r3)
   170d4:	003fdd06 	br	1704c <_realloc_r+0x148>
   170d8:	00800304 	movi	r2,12
   170dc:	a8800015 	stw	r2,0(r21)
   170e0:	0025883a 	mov	r18,zero
   170e4:	003fe606 	br	17080 <_realloc_r+0x17c>
   170e8:	1444b03a 	or	r2,r2,r17
   170ec:	b0800115 	stw	r2,4(r22)
   170f0:	b44b883a 	add	r5,r22,r17
   170f4:	18800054 	ori	r2,r3,1
   170f8:	28800115 	stw	r2,4(r5)
   170fc:	28c7883a 	add	r3,r5,r3
   17100:	18800117 	ldw	r2,4(r3)
   17104:	a809883a 	mov	r4,r21
   17108:	29400204 	addi	r5,r5,8
   1710c:	10800054 	ori	r2,r2,1
   17110:	18800115 	stw	r2,4(r3)
   17114:	00146f80 	call	146f8 <_free_r>
   17118:	003fd606 	br	17074 <_realloc_r+0x170>
   1711c:	38c0330e 	bge	r7,r3,171ec <_realloc_r+0x2e8>
   17120:	900b883a 	mov	r5,r18
   17124:	a809883a 	mov	r4,r21
   17128:	00152900 	call	15290 <_malloc_r>
   1712c:	1025883a 	mov	r18,r2
   17130:	10001626 	beq	r2,zero,1718c <_realloc_r+0x288>
   17134:	80bfff17 	ldw	r2,-4(r16)
   17138:	00ffff84 	movi	r3,-2
   1713c:	913ffe04 	addi	r4,r18,-8
   17140:	10c6703a 	and	r3,r2,r3
   17144:	b0c7883a 	add	r3,r22,r3
   17148:	20c09926 	beq	r4,r3,173b0 <_realloc_r+0x4ac>
   1714c:	99bfff04 	addi	r6,r19,-4
   17150:	00800904 	movi	r2,36
   17154:	11806436 	bltu	r2,r6,172e8 <_realloc_r+0x3e4>
   17158:	00c004c4 	movi	r3,19
   1715c:	19804036 	bltu	r3,r6,17260 <_realloc_r+0x35c>
   17160:	9005883a 	mov	r2,r18
   17164:	8007883a 	mov	r3,r16
   17168:	19000017 	ldw	r4,0(r3)
   1716c:	11000015 	stw	r4,0(r2)
   17170:	19000117 	ldw	r4,4(r3)
   17174:	11000115 	stw	r4,4(r2)
   17178:	18c00217 	ldw	r3,8(r3)
   1717c:	10c00215 	stw	r3,8(r2)
   17180:	a809883a 	mov	r4,r21
   17184:	800b883a 	mov	r5,r16
   17188:	00146f80 	call	146f8 <_free_r>
   1718c:	a809883a 	mov	r4,r21
   17190:	001a2140 	call	1a214 <__malloc_unlock>
   17194:	003fba06 	br	17080 <_realloc_r+0x17c>
   17198:	300b883a 	mov	r5,r6
   1719c:	dfc00a17 	ldw	ra,40(sp)
   171a0:	df000917 	ldw	fp,36(sp)
   171a4:	ddc00817 	ldw	r23,32(sp)
   171a8:	dd800717 	ldw	r22,28(sp)
   171ac:	dd400617 	ldw	r21,24(sp)
   171b0:	dd000517 	ldw	r20,20(sp)
   171b4:	dcc00417 	ldw	r19,16(sp)
   171b8:	dc800317 	ldw	r18,12(sp)
   171bc:	dc400217 	ldw	r17,8(sp)
   171c0:	dc000117 	ldw	r16,4(sp)
   171c4:	dec00b04 	addi	sp,sp,44
   171c8:	00152901 	jmpi	15290 <_malloc_r>
   171cc:	29800117 	ldw	r6,4(r5)
   171d0:	013fff04 	movi	r4,-4
   171d4:	89c00404 	addi	r7,r17,16
   171d8:	310c703a 	and	r6,r6,r4
   171dc:	34c9883a 	add	r4,r6,r19
   171e0:	21c0340e 	bge	r4,r7,172b4 <_realloc_r+0x3b0>
   171e4:	2809883a 	mov	r4,r5
   171e8:	003f7106 	br	16fb0 <_realloc_r+0xac>
   171ec:	b8800317 	ldw	r2,12(r23)
   171f0:	b8c00217 	ldw	r3,8(r23)
   171f4:	99bfff04 	addi	r6,r19,-4
   171f8:	01000904 	movi	r4,36
   171fc:	18800315 	stw	r2,12(r3)
   17200:	10c00215 	stw	r3,8(r2)
   17204:	bc800204 	addi	r18,r23,8
   17208:	21807836 	bltu	r4,r6,173ec <_realloc_r+0x4e8>
   1720c:	008004c4 	movi	r2,19
   17210:	1180732e 	bgeu	r2,r6,173e0 <_realloc_r+0x4dc>
   17214:	80800017 	ldw	r2,0(r16)
   17218:	b8800215 	stw	r2,8(r23)
   1721c:	80800117 	ldw	r2,4(r16)
   17220:	b8800315 	stw	r2,12(r23)
   17224:	008006c4 	movi	r2,27
   17228:	11808936 	bltu	r2,r6,17450 <_realloc_r+0x54c>
   1722c:	b8800404 	addi	r2,r23,16
   17230:	80c00204 	addi	r3,r16,8
   17234:	19000017 	ldw	r4,0(r3)
   17238:	9021883a 	mov	r16,r18
   1723c:	3829883a 	mov	r20,r7
   17240:	11000015 	stw	r4,0(r2)
   17244:	19000117 	ldw	r4,4(r3)
   17248:	b82d883a 	mov	r22,r23
   1724c:	11000115 	stw	r4,4(r2)
   17250:	18c00217 	ldw	r3,8(r3)
   17254:	10c00215 	stw	r3,8(r2)
   17258:	b8800117 	ldw	r2,4(r23)
   1725c:	003f7b06 	br	1704c <_realloc_r+0x148>
   17260:	80c00017 	ldw	r3,0(r16)
   17264:	90c00015 	stw	r3,0(r18)
   17268:	80c00117 	ldw	r3,4(r16)
   1726c:	90c00115 	stw	r3,4(r18)
   17270:	00c006c4 	movi	r3,27
   17274:	19804636 	bltu	r3,r6,17390 <_realloc_r+0x48c>
   17278:	90800204 	addi	r2,r18,8
   1727c:	80c00204 	addi	r3,r16,8
   17280:	003fb906 	br	17168 <_realloc_r+0x264>
   17284:	9005883a 	mov	r2,r18
   17288:	8007883a 	mov	r3,r16
   1728c:	19000017 	ldw	r4,0(r3)
   17290:	9021883a 	mov	r16,r18
   17294:	b82d883a 	mov	r22,r23
   17298:	11000015 	stw	r4,0(r2)
   1729c:	19000117 	ldw	r4,4(r3)
   172a0:	11000115 	stw	r4,4(r2)
   172a4:	18c00217 	ldw	r3,8(r3)
   172a8:	10c00215 	stw	r3,8(r2)
   172ac:	b8800117 	ldw	r2,4(r23)
   172b0:	003f6606 	br	1704c <_realloc_r+0x148>
   172b4:	2445c83a 	sub	r2,r4,r17
   172b8:	b46d883a 	add	r22,r22,r17
   172bc:	10800054 	ori	r2,r2,1
   172c0:	b0800115 	stw	r2,4(r22)
   172c4:	80bfff17 	ldw	r2,-4(r16)
   172c8:	a809883a 	mov	r4,r21
   172cc:	e5800215 	stw	r22,8(fp)
   172d0:	1080004c 	andi	r2,r2,1
   172d4:	88a2b03a 	or	r17,r17,r2
   172d8:	847fff15 	stw	r17,-4(r16)
   172dc:	001a2140 	call	1a214 <__malloc_unlock>
   172e0:	8025883a 	mov	r18,r16
   172e4:	003f6606 	br	17080 <_realloc_r+0x17c>
   172e8:	9009883a 	mov	r4,r18
   172ec:	800b883a 	mov	r5,r16
   172f0:	0015c4c0 	call	15c4c <memmove>
   172f4:	003fa206 	br	17180 <_realloc_r+0x27c>
   172f8:	88800404 	addi	r2,r17,16
   172fc:	a0bf8716 	blt	r20,r2,1711c <_realloc_r+0x218>
   17300:	b8800317 	ldw	r2,12(r23)
   17304:	b8c00217 	ldw	r3,8(r23)
   17308:	99bfff04 	addi	r6,r19,-4
   1730c:	01000904 	movi	r4,36
   17310:	18800315 	stw	r2,12(r3)
   17314:	10c00215 	stw	r3,8(r2)
   17318:	bc800204 	addi	r18,r23,8
   1731c:	21806536 	bltu	r4,r6,174b4 <_realloc_r+0x5b0>
   17320:	008004c4 	movi	r2,19
   17324:	1180592e 	bgeu	r2,r6,1748c <_realloc_r+0x588>
   17328:	80800017 	ldw	r2,0(r16)
   1732c:	b8800215 	stw	r2,8(r23)
   17330:	80800117 	ldw	r2,4(r16)
   17334:	b8800315 	stw	r2,12(r23)
   17338:	008006c4 	movi	r2,27
   1733c:	11806136 	bltu	r2,r6,174c4 <_realloc_r+0x5c0>
   17340:	b8800404 	addi	r2,r23,16
   17344:	80c00204 	addi	r3,r16,8
   17348:	19000017 	ldw	r4,0(r3)
   1734c:	11000015 	stw	r4,0(r2)
   17350:	19000117 	ldw	r4,4(r3)
   17354:	11000115 	stw	r4,4(r2)
   17358:	18c00217 	ldw	r3,8(r3)
   1735c:	10c00215 	stw	r3,8(r2)
   17360:	a447c83a 	sub	r3,r20,r17
   17364:	bc45883a 	add	r2,r23,r17
   17368:	18c00054 	ori	r3,r3,1
   1736c:	10c00115 	stw	r3,4(r2)
   17370:	b8c00117 	ldw	r3,4(r23)
   17374:	e0800215 	stw	r2,8(fp)
   17378:	a809883a 	mov	r4,r21
   1737c:	1880004c 	andi	r2,r3,1
   17380:	88a2b03a 	or	r17,r17,r2
   17384:	bc400115 	stw	r17,4(r23)
   17388:	001a2140 	call	1a214 <__malloc_unlock>
   1738c:	003f3c06 	br	17080 <_realloc_r+0x17c>
   17390:	80c00217 	ldw	r3,8(r16)
   17394:	90c00215 	stw	r3,8(r18)
   17398:	80c00317 	ldw	r3,12(r16)
   1739c:	90c00315 	stw	r3,12(r18)
   173a0:	30802426 	beq	r6,r2,17434 <_realloc_r+0x530>
   173a4:	90800404 	addi	r2,r18,16
   173a8:	80c00404 	addi	r3,r16,16
   173ac:	003f6e06 	br	17168 <_realloc_r+0x264>
   173b0:	953fff17 	ldw	r20,-4(r18)
   173b4:	00ffff04 	movi	r3,-4
   173b8:	a0e8703a 	and	r20,r20,r3
   173bc:	a4e9883a 	add	r20,r20,r19
   173c0:	003f2206 	br	1704c <_realloc_r+0x148>
   173c4:	800b883a 	mov	r5,r16
   173c8:	9009883a 	mov	r4,r18
   173cc:	0015c4c0 	call	15c4c <memmove>
   173d0:	9021883a 	mov	r16,r18
   173d4:	b8800117 	ldw	r2,4(r23)
   173d8:	b82d883a 	mov	r22,r23
   173dc:	003f1b06 	br	1704c <_realloc_r+0x148>
   173e0:	9005883a 	mov	r2,r18
   173e4:	8007883a 	mov	r3,r16
   173e8:	003f9206 	br	17234 <_realloc_r+0x330>
   173ec:	800b883a 	mov	r5,r16
   173f0:	9009883a 	mov	r4,r18
   173f4:	d9c00015 	stw	r7,0(sp)
   173f8:	0015c4c0 	call	15c4c <memmove>
   173fc:	d9c00017 	ldw	r7,0(sp)
   17400:	9021883a 	mov	r16,r18
   17404:	b8800117 	ldw	r2,4(r23)
   17408:	3829883a 	mov	r20,r7
   1740c:	b82d883a 	mov	r22,r23
   17410:	003f0e06 	br	1704c <_realloc_r+0x148>
   17414:	80800217 	ldw	r2,8(r16)
   17418:	b8800415 	stw	r2,16(r23)
   1741c:	80800317 	ldw	r2,12(r16)
   17420:	b8800515 	stw	r2,20(r23)
   17424:	31001226 	beq	r6,r4,17470 <_realloc_r+0x56c>
   17428:	b8800604 	addi	r2,r23,24
   1742c:	80c00404 	addi	r3,r16,16
   17430:	003f9606 	br	1728c <_realloc_r+0x388>
   17434:	81000417 	ldw	r4,16(r16)
   17438:	90800604 	addi	r2,r18,24
   1743c:	80c00604 	addi	r3,r16,24
   17440:	91000415 	stw	r4,16(r18)
   17444:	81000517 	ldw	r4,20(r16)
   17448:	91000515 	stw	r4,20(r18)
   1744c:	003f4606 	br	17168 <_realloc_r+0x264>
   17450:	80800217 	ldw	r2,8(r16)
   17454:	b8800415 	stw	r2,16(r23)
   17458:	80800317 	ldw	r2,12(r16)
   1745c:	b8800515 	stw	r2,20(r23)
   17460:	31000d26 	beq	r6,r4,17498 <_realloc_r+0x594>
   17464:	b8800604 	addi	r2,r23,24
   17468:	80c00404 	addi	r3,r16,16
   1746c:	003f7106 	br	17234 <_realloc_r+0x330>
   17470:	81000417 	ldw	r4,16(r16)
   17474:	b8800804 	addi	r2,r23,32
   17478:	80c00604 	addi	r3,r16,24
   1747c:	b9000615 	stw	r4,24(r23)
   17480:	81000517 	ldw	r4,20(r16)
   17484:	b9000715 	stw	r4,28(r23)
   17488:	003f8006 	br	1728c <_realloc_r+0x388>
   1748c:	9005883a 	mov	r2,r18
   17490:	8007883a 	mov	r3,r16
   17494:	003fac06 	br	17348 <_realloc_r+0x444>
   17498:	81000417 	ldw	r4,16(r16)
   1749c:	b8800804 	addi	r2,r23,32
   174a0:	80c00604 	addi	r3,r16,24
   174a4:	b9000615 	stw	r4,24(r23)
   174a8:	81000517 	ldw	r4,20(r16)
   174ac:	b9000715 	stw	r4,28(r23)
   174b0:	003f6006 	br	17234 <_realloc_r+0x330>
   174b4:	9009883a 	mov	r4,r18
   174b8:	800b883a 	mov	r5,r16
   174bc:	0015c4c0 	call	15c4c <memmove>
   174c0:	003fa706 	br	17360 <_realloc_r+0x45c>
   174c4:	80800217 	ldw	r2,8(r16)
   174c8:	b8800415 	stw	r2,16(r23)
   174cc:	80800317 	ldw	r2,12(r16)
   174d0:	b8800515 	stw	r2,20(r23)
   174d4:	31000326 	beq	r6,r4,174e4 <_realloc_r+0x5e0>
   174d8:	b8800604 	addi	r2,r23,24
   174dc:	80c00404 	addi	r3,r16,16
   174e0:	003f9906 	br	17348 <_realloc_r+0x444>
   174e4:	81000417 	ldw	r4,16(r16)
   174e8:	b8800804 	addi	r2,r23,32
   174ec:	80c00604 	addi	r3,r16,24
   174f0:	b9000615 	stw	r4,24(r23)
   174f4:	81000517 	ldw	r4,20(r16)
   174f8:	b9000715 	stw	r4,28(r23)
   174fc:	003f9206 	br	17348 <_realloc_r+0x444>

00017500 <__isinfd>:
   17500:	0105c83a 	sub	r2,zero,r4
   17504:	1108b03a 	or	r4,r2,r4
   17508:	2004d7fa 	srli	r2,r4,31
   1750c:	00e00034 	movhi	r3,32768
   17510:	18ffffc4 	addi	r3,r3,-1
   17514:	28ca703a 	and	r5,r5,r3
   17518:	1144b03a 	or	r2,r2,r5
   1751c:	00dffc34 	movhi	r3,32752
   17520:	1885c83a 	sub	r2,r3,r2
   17524:	0087c83a 	sub	r3,zero,r2
   17528:	1884b03a 	or	r2,r3,r2
   1752c:	1005d7fa 	srai	r2,r2,31
   17530:	10800044 	addi	r2,r2,1
   17534:	f800283a 	ret

00017538 <__isnand>:
   17538:	0105c83a 	sub	r2,zero,r4
   1753c:	1108b03a 	or	r4,r2,r4
   17540:	2004d7fa 	srli	r2,r4,31
   17544:	00e00034 	movhi	r3,32768
   17548:	18ffffc4 	addi	r3,r3,-1
   1754c:	28ca703a 	and	r5,r5,r3
   17550:	1144b03a 	or	r2,r2,r5
   17554:	00dffc34 	movhi	r3,32752
   17558:	1885c83a 	sub	r2,r3,r2
   1755c:	1004d7fa 	srli	r2,r2,31
   17560:	f800283a 	ret

00017564 <_sbrk_r>:
   17564:	defffd04 	addi	sp,sp,-12
   17568:	dc400115 	stw	r17,4(sp)
   1756c:	dc000015 	stw	r16,0(sp)
   17570:	2023883a 	mov	r17,r4
   17574:	040000f4 	movhi	r16,3
   17578:	8427b304 	addi	r16,r16,-24884
   1757c:	2809883a 	mov	r4,r5
   17580:	dfc00215 	stw	ra,8(sp)
   17584:	80000015 	stw	zero,0(r16)
   17588:	001a3f80 	call	1a3f8 <sbrk>
   1758c:	00ffffc4 	movi	r3,-1
   17590:	10c00526 	beq	r2,r3,175a8 <_sbrk_r+0x44>
   17594:	dfc00217 	ldw	ra,8(sp)
   17598:	dc400117 	ldw	r17,4(sp)
   1759c:	dc000017 	ldw	r16,0(sp)
   175a0:	dec00304 	addi	sp,sp,12
   175a4:	f800283a 	ret
   175a8:	80c00017 	ldw	r3,0(r16)
   175ac:	183ff926 	beq	r3,zero,17594 <_sbrk_r+0x30>
   175b0:	88c00015 	stw	r3,0(r17)
   175b4:	dfc00217 	ldw	ra,8(sp)
   175b8:	dc400117 	ldw	r17,4(sp)
   175bc:	dc000017 	ldw	r16,0(sp)
   175c0:	dec00304 	addi	sp,sp,12
   175c4:	f800283a 	ret

000175c8 <__sread>:
   175c8:	defffe04 	addi	sp,sp,-8
   175cc:	dc000015 	stw	r16,0(sp)
   175d0:	2821883a 	mov	r16,r5
   175d4:	2940038f 	ldh	r5,14(r5)
   175d8:	dfc00115 	stw	ra,4(sp)
   175dc:	0017bd00 	call	17bd0 <_read_r>
   175e0:	10000716 	blt	r2,zero,17600 <__sread+0x38>
   175e4:	80c01417 	ldw	r3,80(r16)
   175e8:	1887883a 	add	r3,r3,r2
   175ec:	80c01415 	stw	r3,80(r16)
   175f0:	dfc00117 	ldw	ra,4(sp)
   175f4:	dc000017 	ldw	r16,0(sp)
   175f8:	dec00204 	addi	sp,sp,8
   175fc:	f800283a 	ret
   17600:	80c0030b 	ldhu	r3,12(r16)
   17604:	18fbffcc 	andi	r3,r3,61439
   17608:	80c0030d 	sth	r3,12(r16)
   1760c:	dfc00117 	ldw	ra,4(sp)
   17610:	dc000017 	ldw	r16,0(sp)
   17614:	dec00204 	addi	sp,sp,8
   17618:	f800283a 	ret

0001761c <__swrite>:
   1761c:	2880030b 	ldhu	r2,12(r5)
   17620:	defffb04 	addi	sp,sp,-20
   17624:	dcc00315 	stw	r19,12(sp)
   17628:	10c0400c 	andi	r3,r2,256
   1762c:	18ffffcc 	andi	r3,r3,65535
   17630:	18e0001c 	xori	r3,r3,32768
   17634:	dc800215 	stw	r18,8(sp)
   17638:	dc400115 	stw	r17,4(sp)
   1763c:	dc000015 	stw	r16,0(sp)
   17640:	dfc00415 	stw	ra,16(sp)
   17644:	18e00004 	addi	r3,r3,-32768
   17648:	2821883a 	mov	r16,r5
   1764c:	2027883a 	mov	r19,r4
   17650:	3025883a 	mov	r18,r6
   17654:	3823883a 	mov	r17,r7
   17658:	18000526 	beq	r3,zero,17670 <__swrite+0x54>
   1765c:	2940038f 	ldh	r5,14(r5)
   17660:	000d883a 	mov	r6,zero
   17664:	01c00084 	movi	r7,2
   17668:	0017b640 	call	17b64 <_lseek_r>
   1766c:	8080030b 	ldhu	r2,12(r16)
   17670:	8140038f 	ldh	r5,14(r16)
   17674:	10bbffcc 	andi	r2,r2,61439
   17678:	9809883a 	mov	r4,r19
   1767c:	900d883a 	mov	r6,r18
   17680:	880f883a 	mov	r7,r17
   17684:	8080030d 	sth	r2,12(r16)
   17688:	dfc00417 	ldw	ra,16(sp)
   1768c:	dcc00317 	ldw	r19,12(sp)
   17690:	dc800217 	ldw	r18,8(sp)
   17694:	dc400117 	ldw	r17,4(sp)
   17698:	dc000017 	ldw	r16,0(sp)
   1769c:	dec00504 	addi	sp,sp,20
   176a0:	00177ac1 	jmpi	177ac <_write_r>

000176a4 <__sseek>:
   176a4:	defffe04 	addi	sp,sp,-8
   176a8:	dc000015 	stw	r16,0(sp)
   176ac:	2821883a 	mov	r16,r5
   176b0:	2940038f 	ldh	r5,14(r5)
   176b4:	dfc00115 	stw	ra,4(sp)
   176b8:	0017b640 	call	17b64 <_lseek_r>
   176bc:	00ffffc4 	movi	r3,-1
   176c0:	10c00826 	beq	r2,r3,176e4 <__sseek+0x40>
   176c4:	80c0030b 	ldhu	r3,12(r16)
   176c8:	80801415 	stw	r2,80(r16)
   176cc:	18c40014 	ori	r3,r3,4096
   176d0:	80c0030d 	sth	r3,12(r16)
   176d4:	dfc00117 	ldw	ra,4(sp)
   176d8:	dc000017 	ldw	r16,0(sp)
   176dc:	dec00204 	addi	sp,sp,8
   176e0:	f800283a 	ret
   176e4:	80c0030b 	ldhu	r3,12(r16)
   176e8:	18fbffcc 	andi	r3,r3,61439
   176ec:	80c0030d 	sth	r3,12(r16)
   176f0:	dfc00117 	ldw	ra,4(sp)
   176f4:	dc000017 	ldw	r16,0(sp)
   176f8:	dec00204 	addi	sp,sp,8
   176fc:	f800283a 	ret

00017700 <__sclose>:
   17700:	2940038f 	ldh	r5,14(r5)
   17704:	00178e41 	jmpi	178e4 <_close_r>

00017708 <strcmp>:
   17708:	2904b03a 	or	r2,r5,r4
   1770c:	108000cc 	andi	r2,r2,3
   17710:	1000171e 	bne	r2,zero,17770 <strcmp+0x68>
   17714:	20800017 	ldw	r2,0(r4)
   17718:	28c00017 	ldw	r3,0(r5)
   1771c:	10c0141e 	bne	r2,r3,17770 <strcmp+0x68>
   17720:	027fbff4 	movhi	r9,65279
   17724:	4a7fbfc4 	addi	r9,r9,-257
   17728:	1247883a 	add	r3,r2,r9
   1772c:	0084303a 	nor	r2,zero,r2
   17730:	1884703a 	and	r2,r3,r2
   17734:	02202074 	movhi	r8,32897
   17738:	42202004 	addi	r8,r8,-32640
   1773c:	1204703a 	and	r2,r2,r8
   17740:	10000226 	beq	r2,zero,1774c <strcmp+0x44>
   17744:	00001706 	br	177a4 <strcmp+0x9c>
   17748:	3000161e 	bne	r6,zero,177a4 <strcmp+0x9c>
   1774c:	21000104 	addi	r4,r4,4
   17750:	20800017 	ldw	r2,0(r4)
   17754:	29400104 	addi	r5,r5,4
   17758:	28c00017 	ldw	r3,0(r5)
   1775c:	124f883a 	add	r7,r2,r9
   17760:	008c303a 	nor	r6,zero,r2
   17764:	398c703a 	and	r6,r7,r6
   17768:	320c703a 	and	r6,r6,r8
   1776c:	10fff626 	beq	r2,r3,17748 <strcmp+0x40>
   17770:	20800007 	ldb	r2,0(r4)
   17774:	1000051e 	bne	r2,zero,1778c <strcmp+0x84>
   17778:	00000606 	br	17794 <strcmp+0x8c>
   1777c:	21000044 	addi	r4,r4,1
   17780:	20800007 	ldb	r2,0(r4)
   17784:	29400044 	addi	r5,r5,1
   17788:	10000226 	beq	r2,zero,17794 <strcmp+0x8c>
   1778c:	28c00007 	ldb	r3,0(r5)
   17790:	10fffa26 	beq	r2,r3,1777c <strcmp+0x74>
   17794:	20c00003 	ldbu	r3,0(r4)
   17798:	28800003 	ldbu	r2,0(r5)
   1779c:	1885c83a 	sub	r2,r3,r2
   177a0:	f800283a 	ret
   177a4:	0005883a 	mov	r2,zero
   177a8:	f800283a 	ret

000177ac <_write_r>:
   177ac:	defffd04 	addi	sp,sp,-12
   177b0:	dc400115 	stw	r17,4(sp)
   177b4:	dc000015 	stw	r16,0(sp)
   177b8:	2023883a 	mov	r17,r4
   177bc:	040000f4 	movhi	r16,3
   177c0:	8427b304 	addi	r16,r16,-24884
   177c4:	2809883a 	mov	r4,r5
   177c8:	300b883a 	mov	r5,r6
   177cc:	380d883a 	mov	r6,r7
   177d0:	dfc00215 	stw	ra,8(sp)
   177d4:	80000015 	stw	zero,0(r16)
   177d8:	001a4f80 	call	1a4f8 <write>
   177dc:	00ffffc4 	movi	r3,-1
   177e0:	10c00526 	beq	r2,r3,177f8 <_write_r+0x4c>
   177e4:	dfc00217 	ldw	ra,8(sp)
   177e8:	dc400117 	ldw	r17,4(sp)
   177ec:	dc000017 	ldw	r16,0(sp)
   177f0:	dec00304 	addi	sp,sp,12
   177f4:	f800283a 	ret
   177f8:	80c00017 	ldw	r3,0(r16)
   177fc:	183ff926 	beq	r3,zero,177e4 <_write_r+0x38>
   17800:	88c00015 	stw	r3,0(r17)
   17804:	dfc00217 	ldw	ra,8(sp)
   17808:	dc400117 	ldw	r17,4(sp)
   1780c:	dc000017 	ldw	r16,0(sp)
   17810:	dec00304 	addi	sp,sp,12
   17814:	f800283a 	ret

00017818 <_calloc_r>:
   17818:	defffe04 	addi	sp,sp,-8
   1781c:	dc000015 	stw	r16,0(sp)
   17820:	2021883a 	mov	r16,r4
   17824:	3009883a 	mov	r4,r6
   17828:	dfc00115 	stw	ra,4(sp)
   1782c:	00106640 	call	10664 <__mulsi3>
   17830:	8009883a 	mov	r4,r16
   17834:	100b883a 	mov	r5,r2
   17838:	00152900 	call	15290 <_malloc_r>
   1783c:	1021883a 	mov	r16,r2
   17840:	10000c26 	beq	r2,zero,17874 <_calloc_r+0x5c>
   17844:	11bfff17 	ldw	r6,-4(r2)
   17848:	00ffff04 	movi	r3,-4
   1784c:	00800904 	movi	r2,36
   17850:	30cc703a 	and	r6,r6,r3
   17854:	30cd883a 	add	r6,r6,r3
   17858:	11801436 	bltu	r2,r6,178ac <_calloc_r+0x94>
   1785c:	00c004c4 	movi	r3,19
   17860:	19800936 	bltu	r3,r6,17888 <_calloc_r+0x70>
   17864:	8005883a 	mov	r2,r16
   17868:	10000015 	stw	zero,0(r2)
   1786c:	10000115 	stw	zero,4(r2)
   17870:	10000215 	stw	zero,8(r2)
   17874:	8005883a 	mov	r2,r16
   17878:	dfc00117 	ldw	ra,4(sp)
   1787c:	dc000017 	ldw	r16,0(sp)
   17880:	dec00204 	addi	sp,sp,8
   17884:	f800283a 	ret
   17888:	80000015 	stw	zero,0(r16)
   1788c:	80000115 	stw	zero,4(r16)
   17890:	00c006c4 	movi	r3,27
   17894:	19800d2e 	bgeu	r3,r6,178cc <_calloc_r+0xb4>
   17898:	80000215 	stw	zero,8(r16)
   1789c:	80000315 	stw	zero,12(r16)
   178a0:	30800c26 	beq	r6,r2,178d4 <_calloc_r+0xbc>
   178a4:	80800404 	addi	r2,r16,16
   178a8:	003fef06 	br	17868 <_calloc_r+0x50>
   178ac:	8009883a 	mov	r4,r16
   178b0:	000b883a 	mov	r5,zero
   178b4:	0015dd80 	call	15dd8 <memset>
   178b8:	8005883a 	mov	r2,r16
   178bc:	dfc00117 	ldw	ra,4(sp)
   178c0:	dc000017 	ldw	r16,0(sp)
   178c4:	dec00204 	addi	sp,sp,8
   178c8:	f800283a 	ret
   178cc:	80800204 	addi	r2,r16,8
   178d0:	003fe506 	br	17868 <_calloc_r+0x50>
   178d4:	80000415 	stw	zero,16(r16)
   178d8:	80000515 	stw	zero,20(r16)
   178dc:	80800604 	addi	r2,r16,24
   178e0:	003fe106 	br	17868 <_calloc_r+0x50>

000178e4 <_close_r>:
   178e4:	defffd04 	addi	sp,sp,-12
   178e8:	dc400115 	stw	r17,4(sp)
   178ec:	dc000015 	stw	r16,0(sp)
   178f0:	2023883a 	mov	r17,r4
   178f4:	040000f4 	movhi	r16,3
   178f8:	8427b304 	addi	r16,r16,-24884
   178fc:	2809883a 	mov	r4,r5
   17900:	dfc00215 	stw	ra,8(sp)
   17904:	80000015 	stw	zero,0(r16)
   17908:	0019c800 	call	19c80 <close>
   1790c:	00ffffc4 	movi	r3,-1
   17910:	10c00526 	beq	r2,r3,17928 <_close_r+0x44>
   17914:	dfc00217 	ldw	ra,8(sp)
   17918:	dc400117 	ldw	r17,4(sp)
   1791c:	dc000017 	ldw	r16,0(sp)
   17920:	dec00304 	addi	sp,sp,12
   17924:	f800283a 	ret
   17928:	80c00017 	ldw	r3,0(r16)
   1792c:	183ff926 	beq	r3,zero,17914 <_close_r+0x30>
   17930:	88c00015 	stw	r3,0(r17)
   17934:	dfc00217 	ldw	ra,8(sp)
   17938:	dc400117 	ldw	r17,4(sp)
   1793c:	dc000017 	ldw	r16,0(sp)
   17940:	dec00304 	addi	sp,sp,12
   17944:	f800283a 	ret

00017948 <_fclose_r>:
   17948:	defffc04 	addi	sp,sp,-16
   1794c:	dc400115 	stw	r17,4(sp)
   17950:	dc000015 	stw	r16,0(sp)
   17954:	dfc00315 	stw	ra,12(sp)
   17958:	dc800215 	stw	r18,8(sp)
   1795c:	2821883a 	mov	r16,r5
   17960:	2023883a 	mov	r17,r4
   17964:	28003426 	beq	r5,zero,17a38 <_fclose_r+0xf0>
   17968:	001457c0 	call	1457c <__sfp_lock_acquire>
   1796c:	88000226 	beq	r17,zero,17978 <_fclose_r+0x30>
   17970:	88800e17 	ldw	r2,56(r17)
   17974:	10003826 	beq	r2,zero,17a58 <_fclose_r+0x110>
   17978:	8080030f 	ldh	r2,12(r16)
   1797c:	10002526 	beq	r2,zero,17a14 <_fclose_r+0xcc>
   17980:	8809883a 	mov	r4,r17
   17984:	800b883a 	mov	r5,r16
   17988:	00140b80 	call	140b8 <_fflush_r>
   1798c:	1025883a 	mov	r18,r2
   17990:	80800b17 	ldw	r2,44(r16)
   17994:	10000426 	beq	r2,zero,179a8 <_fclose_r+0x60>
   17998:	81400717 	ldw	r5,28(r16)
   1799c:	8809883a 	mov	r4,r17
   179a0:	103ee83a 	callr	r2
   179a4:	10003516 	blt	r2,zero,17a7c <_fclose_r+0x134>
   179a8:	8080030b 	ldhu	r2,12(r16)
   179ac:	1080200c 	andi	r2,r2,128
   179b0:	10bfffcc 	andi	r2,r2,65535
   179b4:	10a0001c 	xori	r2,r2,32768
   179b8:	10a00004 	addi	r2,r2,-32768
   179bc:	10002b1e 	bne	r2,zero,17a6c <_fclose_r+0x124>
   179c0:	81400c17 	ldw	r5,48(r16)
   179c4:	28000526 	beq	r5,zero,179dc <_fclose_r+0x94>
   179c8:	80801004 	addi	r2,r16,64
   179cc:	28800226 	beq	r5,r2,179d8 <_fclose_r+0x90>
   179d0:	8809883a 	mov	r4,r17
   179d4:	00146f80 	call	146f8 <_free_r>
   179d8:	80000c15 	stw	zero,48(r16)
   179dc:	81401117 	ldw	r5,68(r16)
   179e0:	28000326 	beq	r5,zero,179f0 <_fclose_r+0xa8>
   179e4:	8809883a 	mov	r4,r17
   179e8:	00146f80 	call	146f8 <_free_r>
   179ec:	80001115 	stw	zero,68(r16)
   179f0:	8000030d 	sth	zero,12(r16)
   179f4:	00145800 	call	14580 <__sfp_lock_release>
   179f8:	9005883a 	mov	r2,r18
   179fc:	dfc00317 	ldw	ra,12(sp)
   17a00:	dc800217 	ldw	r18,8(sp)
   17a04:	dc400117 	ldw	r17,4(sp)
   17a08:	dc000017 	ldw	r16,0(sp)
   17a0c:	dec00404 	addi	sp,sp,16
   17a10:	f800283a 	ret
   17a14:	00145800 	call	14580 <__sfp_lock_release>
   17a18:	0025883a 	mov	r18,zero
   17a1c:	9005883a 	mov	r2,r18
   17a20:	dfc00317 	ldw	ra,12(sp)
   17a24:	dc800217 	ldw	r18,8(sp)
   17a28:	dc400117 	ldw	r17,4(sp)
   17a2c:	dc000017 	ldw	r16,0(sp)
   17a30:	dec00404 	addi	sp,sp,16
   17a34:	f800283a 	ret
   17a38:	0025883a 	mov	r18,zero
   17a3c:	9005883a 	mov	r2,r18
   17a40:	dfc00317 	ldw	ra,12(sp)
   17a44:	dc800217 	ldw	r18,8(sp)
   17a48:	dc400117 	ldw	r17,4(sp)
   17a4c:	dc000017 	ldw	r16,0(sp)
   17a50:	dec00404 	addi	sp,sp,16
   17a54:	f800283a 	ret
   17a58:	8809883a 	mov	r4,r17
   17a5c:	00143740 	call	14374 <__sinit>
   17a60:	8080030f 	ldh	r2,12(r16)
   17a64:	103fc61e 	bne	r2,zero,17980 <_fclose_r+0x38>
   17a68:	003fea06 	br	17a14 <_fclose_r+0xcc>
   17a6c:	81400417 	ldw	r5,16(r16)
   17a70:	8809883a 	mov	r4,r17
   17a74:	00146f80 	call	146f8 <_free_r>
   17a78:	003fd106 	br	179c0 <_fclose_r+0x78>
   17a7c:	04bfffc4 	movi	r18,-1
   17a80:	003fc906 	br	179a8 <_fclose_r+0x60>

00017a84 <fclose>:
   17a84:	008000f4 	movhi	r2,3
   17a88:	10a79a04 	addi	r2,r2,-24984
   17a8c:	200b883a 	mov	r5,r4
   17a90:	11000017 	ldw	r4,0(r2)
   17a94:	00179481 	jmpi	17948 <_fclose_r>

00017a98 <_fstat_r>:
   17a98:	defffd04 	addi	sp,sp,-12
   17a9c:	dc400115 	stw	r17,4(sp)
   17aa0:	dc000015 	stw	r16,0(sp)
   17aa4:	2023883a 	mov	r17,r4
   17aa8:	040000f4 	movhi	r16,3
   17aac:	8427b304 	addi	r16,r16,-24884
   17ab0:	2809883a 	mov	r4,r5
   17ab4:	300b883a 	mov	r5,r6
   17ab8:	dfc00215 	stw	ra,8(sp)
   17abc:	80000015 	stw	zero,0(r16)
   17ac0:	0019dc80 	call	19dc8 <fstat>
   17ac4:	00ffffc4 	movi	r3,-1
   17ac8:	10c00526 	beq	r2,r3,17ae0 <_fstat_r+0x48>
   17acc:	dfc00217 	ldw	ra,8(sp)
   17ad0:	dc400117 	ldw	r17,4(sp)
   17ad4:	dc000017 	ldw	r16,0(sp)
   17ad8:	dec00304 	addi	sp,sp,12
   17adc:	f800283a 	ret
   17ae0:	80c00017 	ldw	r3,0(r16)
   17ae4:	183ff926 	beq	r3,zero,17acc <_fstat_r+0x34>
   17ae8:	88c00015 	stw	r3,0(r17)
   17aec:	dfc00217 	ldw	ra,8(sp)
   17af0:	dc400117 	ldw	r17,4(sp)
   17af4:	dc000017 	ldw	r16,0(sp)
   17af8:	dec00304 	addi	sp,sp,12
   17afc:	f800283a 	ret

00017b00 <_isatty_r>:
   17b00:	defffd04 	addi	sp,sp,-12
   17b04:	dc400115 	stw	r17,4(sp)
   17b08:	dc000015 	stw	r16,0(sp)
   17b0c:	2023883a 	mov	r17,r4
   17b10:	040000f4 	movhi	r16,3
   17b14:	8427b304 	addi	r16,r16,-24884
   17b18:	2809883a 	mov	r4,r5
   17b1c:	dfc00215 	stw	ra,8(sp)
   17b20:	80000015 	stw	zero,0(r16)
   17b24:	0019ec80 	call	19ec8 <isatty>
   17b28:	00ffffc4 	movi	r3,-1
   17b2c:	10c00526 	beq	r2,r3,17b44 <_isatty_r+0x44>
   17b30:	dfc00217 	ldw	ra,8(sp)
   17b34:	dc400117 	ldw	r17,4(sp)
   17b38:	dc000017 	ldw	r16,0(sp)
   17b3c:	dec00304 	addi	sp,sp,12
   17b40:	f800283a 	ret
   17b44:	80c00017 	ldw	r3,0(r16)
   17b48:	183ff926 	beq	r3,zero,17b30 <_isatty_r+0x30>
   17b4c:	88c00015 	stw	r3,0(r17)
   17b50:	dfc00217 	ldw	ra,8(sp)
   17b54:	dc400117 	ldw	r17,4(sp)
   17b58:	dc000017 	ldw	r16,0(sp)
   17b5c:	dec00304 	addi	sp,sp,12
   17b60:	f800283a 	ret

00017b64 <_lseek_r>:
   17b64:	defffd04 	addi	sp,sp,-12
   17b68:	dc400115 	stw	r17,4(sp)
   17b6c:	dc000015 	stw	r16,0(sp)
   17b70:	2023883a 	mov	r17,r4
   17b74:	040000f4 	movhi	r16,3
   17b78:	8427b304 	addi	r16,r16,-24884
   17b7c:	2809883a 	mov	r4,r5
   17b80:	300b883a 	mov	r5,r6
   17b84:	380d883a 	mov	r6,r7
   17b88:	dfc00215 	stw	ra,8(sp)
   17b8c:	80000015 	stw	zero,0(r16)
   17b90:	001a0a80 	call	1a0a8 <lseek>
   17b94:	00ffffc4 	movi	r3,-1
   17b98:	10c00526 	beq	r2,r3,17bb0 <_lseek_r+0x4c>
   17b9c:	dfc00217 	ldw	ra,8(sp)
   17ba0:	dc400117 	ldw	r17,4(sp)
   17ba4:	dc000017 	ldw	r16,0(sp)
   17ba8:	dec00304 	addi	sp,sp,12
   17bac:	f800283a 	ret
   17bb0:	80c00017 	ldw	r3,0(r16)
   17bb4:	183ff926 	beq	r3,zero,17b9c <_lseek_r+0x38>
   17bb8:	88c00015 	stw	r3,0(r17)
   17bbc:	dfc00217 	ldw	ra,8(sp)
   17bc0:	dc400117 	ldw	r17,4(sp)
   17bc4:	dc000017 	ldw	r16,0(sp)
   17bc8:	dec00304 	addi	sp,sp,12
   17bcc:	f800283a 	ret

00017bd0 <_read_r>:
   17bd0:	defffd04 	addi	sp,sp,-12
   17bd4:	dc400115 	stw	r17,4(sp)
   17bd8:	dc000015 	stw	r16,0(sp)
   17bdc:	2023883a 	mov	r17,r4
   17be0:	040000f4 	movhi	r16,3
   17be4:	8427b304 	addi	r16,r16,-24884
   17be8:	2809883a 	mov	r4,r5
   17bec:	300b883a 	mov	r5,r6
   17bf0:	380d883a 	mov	r6,r7
   17bf4:	dfc00215 	stw	ra,8(sp)
   17bf8:	80000015 	stw	zero,0(r16)
   17bfc:	001a2840 	call	1a284 <read>
   17c00:	00ffffc4 	movi	r3,-1
   17c04:	10c00526 	beq	r2,r3,17c1c <_read_r+0x4c>
   17c08:	dfc00217 	ldw	ra,8(sp)
   17c0c:	dc400117 	ldw	r17,4(sp)
   17c10:	dc000017 	ldw	r16,0(sp)
   17c14:	dec00304 	addi	sp,sp,12
   17c18:	f800283a 	ret
   17c1c:	80c00017 	ldw	r3,0(r16)
   17c20:	183ff926 	beq	r3,zero,17c08 <_read_r+0x38>
   17c24:	88c00015 	stw	r3,0(r17)
   17c28:	dfc00217 	ldw	ra,8(sp)
   17c2c:	dc400117 	ldw	r17,4(sp)
   17c30:	dc000017 	ldw	r16,0(sp)
   17c34:	dec00304 	addi	sp,sp,12
   17c38:	f800283a 	ret

00017c3c <__udivdi3>:
   17c3c:	defff504 	addi	sp,sp,-44
   17c40:	dd000515 	stw	r20,20(sp)
   17c44:	dcc00415 	stw	r19,16(sp)
   17c48:	dc800315 	stw	r18,12(sp)
   17c4c:	dc400215 	stw	r17,8(sp)
   17c50:	dc000115 	stw	r16,4(sp)
   17c54:	dfc00a15 	stw	ra,40(sp)
   17c58:	df000915 	stw	fp,36(sp)
   17c5c:	ddc00815 	stw	r23,32(sp)
   17c60:	dd800715 	stw	r22,28(sp)
   17c64:	dd400615 	stw	r21,24(sp)
   17c68:	2025883a 	mov	r18,r4
   17c6c:	2823883a 	mov	r17,r5
   17c70:	3021883a 	mov	r16,r6
   17c74:	2027883a 	mov	r19,r4
   17c78:	2829883a 	mov	r20,r5
   17c7c:	3800451e 	bne	r7,zero,17d94 <__udivdi3+0x158>
   17c80:	2980652e 	bgeu	r5,r6,17e18 <__udivdi3+0x1dc>
   17c84:	00bfffd4 	movui	r2,65535
   17c88:	1180b436 	bltu	r2,r6,17f5c <__udivdi3+0x320>
   17c8c:	00803fc4 	movi	r2,255
   17c90:	11816636 	bltu	r2,r6,1822c <__udivdi3+0x5f0>
   17c94:	0005883a 	mov	r2,zero
   17c98:	0007883a 	mov	r3,zero
   17c9c:	3084d83a 	srl	r2,r6,r2
   17ca0:	010000f4 	movhi	r4,3
   17ca4:	2120c504 	addi	r4,r4,-31980
   17ca8:	2085883a 	add	r2,r4,r2
   17cac:	10800003 	ldbu	r2,0(r2)
   17cb0:	10c7883a 	add	r3,r2,r3
   17cb4:	00800804 	movi	r2,32
   17cb8:	10c5c83a 	sub	r2,r2,r3
   17cbc:	10000526 	beq	r2,zero,17cd4 <__udivdi3+0x98>
   17cc0:	88a2983a 	sll	r17,r17,r2
   17cc4:	90c6d83a 	srl	r3,r18,r3
   17cc8:	30a0983a 	sll	r16,r6,r2
   17ccc:	90a6983a 	sll	r19,r18,r2
   17cd0:	88e8b03a 	or	r20,r17,r3
   17cd4:	8022d43a 	srli	r17,r16,16
   17cd8:	a009883a 	mov	r4,r20
   17cdc:	857fffcc 	andi	r21,r16,65535
   17ce0:	880b883a 	mov	r5,r17
   17ce4:	001065c0 	call	1065c <__umodsi3>
   17ce8:	a009883a 	mov	r4,r20
   17cec:	880b883a 	mov	r5,r17
   17cf0:	102d883a 	mov	r22,r2
   17cf4:	00106540 	call	10654 <__udivsi3>
   17cf8:	1009883a 	mov	r4,r2
   17cfc:	a80b883a 	mov	r5,r21
   17d00:	1025883a 	mov	r18,r2
   17d04:	00106640 	call	10664 <__mulsi3>
   17d08:	1009883a 	mov	r4,r2
   17d0c:	b006943a 	slli	r3,r22,16
   17d10:	9804d43a 	srli	r2,r19,16
   17d14:	1886b03a 	or	r3,r3,r2
   17d18:	1900052e 	bgeu	r3,r4,17d30 <__udivdi3+0xf4>
   17d1c:	1c07883a 	add	r3,r3,r16
   17d20:	90bfffc4 	addi	r2,r18,-1
   17d24:	1c000136 	bltu	r3,r16,17d2c <__udivdi3+0xf0>
   17d28:	19015536 	bltu	r3,r4,18280 <__udivdi3+0x644>
   17d2c:	1025883a 	mov	r18,r2
   17d30:	1929c83a 	sub	r20,r3,r4
   17d34:	880b883a 	mov	r5,r17
   17d38:	a009883a 	mov	r4,r20
   17d3c:	001065c0 	call	1065c <__umodsi3>
   17d40:	102d883a 	mov	r22,r2
   17d44:	880b883a 	mov	r5,r17
   17d48:	a009883a 	mov	r4,r20
   17d4c:	b02c943a 	slli	r22,r22,16
   17d50:	00106540 	call	10654 <__udivsi3>
   17d54:	1009883a 	mov	r4,r2
   17d58:	a80b883a 	mov	r5,r21
   17d5c:	9cffffcc 	andi	r19,r19,65535
   17d60:	1023883a 	mov	r17,r2
   17d64:	b4e6b03a 	or	r19,r22,r19
   17d68:	00106640 	call	10664 <__mulsi3>
   17d6c:	9880052e 	bgeu	r19,r2,17d84 <__udivdi3+0x148>
   17d70:	9c27883a 	add	r19,r19,r16
   17d74:	88ffffc4 	addi	r3,r17,-1
   17d78:	9c011436 	bltu	r19,r16,181cc <__udivdi3+0x590>
   17d7c:	9881132e 	bgeu	r19,r2,181cc <__udivdi3+0x590>
   17d80:	8c7fff84 	addi	r17,r17,-2
   17d84:	9004943a 	slli	r2,r18,16
   17d88:	0007883a 	mov	r3,zero
   17d8c:	8884b03a 	or	r2,r17,r2
   17d90:	00001506 	br	17de8 <__udivdi3+0x1ac>
   17d94:	29c06a36 	bltu	r5,r7,17f40 <__udivdi3+0x304>
   17d98:	00bfffd4 	movui	r2,65535
   17d9c:	11c06a2e 	bgeu	r2,r7,17f48 <__udivdi3+0x30c>
   17da0:	00804034 	movhi	r2,256
   17da4:	10bfffc4 	addi	r2,r2,-1
   17da8:	11c11436 	bltu	r2,r7,181fc <__udivdi3+0x5c0>
   17dac:	00c00404 	movi	r3,16
   17db0:	180b883a 	mov	r5,r3
   17db4:	38c6d83a 	srl	r3,r7,r3
   17db8:	010000f4 	movhi	r4,3
   17dbc:	2120c504 	addi	r4,r4,-31980
   17dc0:	04000804 	movi	r16,32
   17dc4:	20c7883a 	add	r3,r4,r3
   17dc8:	18800003 	ldbu	r2,0(r3)
   17dcc:	1145883a 	add	r2,r2,r5
   17dd0:	80a1c83a 	sub	r16,r16,r2
   17dd4:	80006e1e 	bne	r16,zero,17f90 <__udivdi3+0x354>
   17dd8:	0007883a 	mov	r3,zero
   17ddc:	3c406a36 	bltu	r7,r17,17f88 <__udivdi3+0x34c>
   17de0:	9180692e 	bgeu	r18,r6,17f88 <__udivdi3+0x34c>
   17de4:	0005883a 	mov	r2,zero
   17de8:	dfc00a17 	ldw	ra,40(sp)
   17dec:	df000917 	ldw	fp,36(sp)
   17df0:	ddc00817 	ldw	r23,32(sp)
   17df4:	dd800717 	ldw	r22,28(sp)
   17df8:	dd400617 	ldw	r21,24(sp)
   17dfc:	dd000517 	ldw	r20,20(sp)
   17e00:	dcc00417 	ldw	r19,16(sp)
   17e04:	dc800317 	ldw	r18,12(sp)
   17e08:	dc400217 	ldw	r17,8(sp)
   17e0c:	dc000117 	ldw	r16,4(sp)
   17e10:	dec00b04 	addi	sp,sp,44
   17e14:	f800283a 	ret
   17e18:	3000041e 	bne	r6,zero,17e2c <__udivdi3+0x1f0>
   17e1c:	01000044 	movi	r4,1
   17e20:	000b883a 	mov	r5,zero
   17e24:	00106540 	call	10654 <__udivsi3>
   17e28:	1021883a 	mov	r16,r2
   17e2c:	00bfffd4 	movui	r2,65535
   17e30:	1400502e 	bgeu	r2,r16,17f74 <__udivdi3+0x338>
   17e34:	00804034 	movhi	r2,256
   17e38:	10bfffc4 	addi	r2,r2,-1
   17e3c:	1400f536 	bltu	r2,r16,18214 <__udivdi3+0x5d8>
   17e40:	00800404 	movi	r2,16
   17e44:	1007883a 	mov	r3,r2
   17e48:	8084d83a 	srl	r2,r16,r2
   17e4c:	010000f4 	movhi	r4,3
   17e50:	2120c504 	addi	r4,r4,-31980
   17e54:	2085883a 	add	r2,r4,r2
   17e58:	10800003 	ldbu	r2,0(r2)
   17e5c:	10c7883a 	add	r3,r2,r3
   17e60:	00800804 	movi	r2,32
   17e64:	10c5c83a 	sub	r2,r2,r3
   17e68:	1000a01e 	bne	r2,zero,180ec <__udivdi3+0x4b0>
   17e6c:	8028d43a 	srli	r20,r16,16
   17e70:	8c23c83a 	sub	r17,r17,r16
   17e74:	857fffcc 	andi	r21,r16,65535
   17e78:	00c00044 	movi	r3,1
   17e7c:	8809883a 	mov	r4,r17
   17e80:	a00b883a 	mov	r5,r20
   17e84:	d8c00015 	stw	r3,0(sp)
   17e88:	001065c0 	call	1065c <__umodsi3>
   17e8c:	8809883a 	mov	r4,r17
   17e90:	a00b883a 	mov	r5,r20
   17e94:	102d883a 	mov	r22,r2
   17e98:	00106540 	call	10654 <__udivsi3>
   17e9c:	1009883a 	mov	r4,r2
   17ea0:	a80b883a 	mov	r5,r21
   17ea4:	1025883a 	mov	r18,r2
   17ea8:	00106640 	call	10664 <__mulsi3>
   17eac:	1009883a 	mov	r4,r2
   17eb0:	b00c943a 	slli	r6,r22,16
   17eb4:	9804d43a 	srli	r2,r19,16
   17eb8:	d8c00017 	ldw	r3,0(sp)
   17ebc:	308cb03a 	or	r6,r6,r2
   17ec0:	3100052e 	bgeu	r6,r4,17ed8 <__udivdi3+0x29c>
   17ec4:	340d883a 	add	r6,r6,r16
   17ec8:	90bfffc4 	addi	r2,r18,-1
   17ecc:	34000136 	bltu	r6,r16,17ed4 <__udivdi3+0x298>
   17ed0:	3100e836 	bltu	r6,r4,18274 <__udivdi3+0x638>
   17ed4:	1025883a 	mov	r18,r2
   17ed8:	3123c83a 	sub	r17,r6,r4
   17edc:	8809883a 	mov	r4,r17
   17ee0:	a00b883a 	mov	r5,r20
   17ee4:	d8c00015 	stw	r3,0(sp)
   17ee8:	001065c0 	call	1065c <__umodsi3>
   17eec:	102d883a 	mov	r22,r2
   17ef0:	8809883a 	mov	r4,r17
   17ef4:	a00b883a 	mov	r5,r20
   17ef8:	b02c943a 	slli	r22,r22,16
   17efc:	00106540 	call	10654 <__udivsi3>
   17f00:	1009883a 	mov	r4,r2
   17f04:	a80b883a 	mov	r5,r21
   17f08:	9cffffcc 	andi	r19,r19,65535
   17f0c:	1023883a 	mov	r17,r2
   17f10:	b4e6b03a 	or	r19,r22,r19
   17f14:	00106640 	call	10664 <__mulsi3>
   17f18:	d8c00017 	ldw	r3,0(sp)
   17f1c:	9880052e 	bgeu	r19,r2,17f34 <__udivdi3+0x2f8>
   17f20:	9c27883a 	add	r19,r19,r16
   17f24:	893fffc4 	addi	r4,r17,-1
   17f28:	9c00aa36 	bltu	r19,r16,181d4 <__udivdi3+0x598>
   17f2c:	9880a92e 	bgeu	r19,r2,181d4 <__udivdi3+0x598>
   17f30:	8c7fff84 	addi	r17,r17,-2
   17f34:	9004943a 	slli	r2,r18,16
   17f38:	8884b03a 	or	r2,r17,r2
   17f3c:	003faa06 	br	17de8 <__udivdi3+0x1ac>
   17f40:	0007883a 	mov	r3,zero
   17f44:	003fa706 	br	17de4 <__udivdi3+0x1a8>
   17f48:	00803fc4 	movi	r2,255
   17f4c:	11c0ae36 	bltu	r2,r7,18208 <__udivdi3+0x5cc>
   17f50:	0007883a 	mov	r3,zero
   17f54:	000b883a 	mov	r5,zero
   17f58:	003f9606 	br	17db4 <__udivdi3+0x178>
   17f5c:	00804034 	movhi	r2,256
   17f60:	10bfffc4 	addi	r2,r2,-1
   17f64:	1180ae36 	bltu	r2,r6,18220 <__udivdi3+0x5e4>
   17f68:	00800404 	movi	r2,16
   17f6c:	1007883a 	mov	r3,r2
   17f70:	003f4a06 	br	17c9c <__udivdi3+0x60>
   17f74:	00803fc4 	movi	r2,255
   17f78:	1400af36 	bltu	r2,r16,18238 <__udivdi3+0x5fc>
   17f7c:	0005883a 	mov	r2,zero
   17f80:	0007883a 	mov	r3,zero
   17f84:	003fb006 	br	17e48 <__udivdi3+0x20c>
   17f88:	00800044 	movi	r2,1
   17f8c:	003f9606 	br	17de8 <__udivdi3+0x1ac>
   17f90:	3c0e983a 	sll	r7,r7,r16
   17f94:	3086d83a 	srl	r3,r6,r2
   17f98:	88aed83a 	srl	r23,r17,r2
   17f9c:	9084d83a 	srl	r2,r18,r2
   17fa0:	38e6b03a 	or	r19,r7,r3
   17fa4:	9828d43a 	srli	r20,r19,16
   17fa8:	8c22983a 	sll	r17,r17,r16
   17fac:	b809883a 	mov	r4,r23
   17fb0:	a00b883a 	mov	r5,r20
   17fb4:	342a983a 	sll	r21,r6,r16
   17fb8:	88a2b03a 	or	r17,r17,r2
   17fbc:	001065c0 	call	1065c <__umodsi3>
   17fc0:	b809883a 	mov	r4,r23
   17fc4:	a00b883a 	mov	r5,r20
   17fc8:	1039883a 	mov	fp,r2
   17fcc:	9dbfffcc 	andi	r22,r19,65535
   17fd0:	00106540 	call	10654 <__udivsi3>
   17fd4:	1009883a 	mov	r4,r2
   17fd8:	b00b883a 	mov	r5,r22
   17fdc:	102f883a 	mov	r23,r2
   17fe0:	00106640 	call	10664 <__mulsi3>
   17fe4:	1009883a 	mov	r4,r2
   17fe8:	e00e943a 	slli	r7,fp,16
   17fec:	8804d43a 	srli	r2,r17,16
   17ff0:	388eb03a 	or	r7,r7,r2
   17ff4:	3900042e 	bgeu	r7,r4,18008 <__udivdi3+0x3cc>
   17ff8:	3ccf883a 	add	r7,r7,r19
   17ffc:	b8bfffc4 	addi	r2,r23,-1
   18000:	3cc0942e 	bgeu	r7,r19,18254 <__udivdi3+0x618>
   18004:	102f883a 	mov	r23,r2
   18008:	3939c83a 	sub	fp,r7,r4
   1800c:	a00b883a 	mov	r5,r20
   18010:	e009883a 	mov	r4,fp
   18014:	001065c0 	call	1065c <__umodsi3>
   18018:	a00b883a 	mov	r5,r20
   1801c:	e009883a 	mov	r4,fp
   18020:	d8800015 	stw	r2,0(sp)
   18024:	00106540 	call	10654 <__udivsi3>
   18028:	1009883a 	mov	r4,r2
   1802c:	b00b883a 	mov	r5,r22
   18030:	1029883a 	mov	r20,r2
   18034:	00106640 	call	10664 <__mulsi3>
   18038:	d8c00017 	ldw	r3,0(sp)
   1803c:	8c7fffcc 	andi	r17,r17,65535
   18040:	1806943a 	slli	r3,r3,16
   18044:	1c46b03a 	or	r3,r3,r17
   18048:	1880042e 	bgeu	r3,r2,1805c <__udivdi3+0x420>
   1804c:	1cc7883a 	add	r3,r3,r19
   18050:	a13fffc4 	addi	r4,r20,-1
   18054:	1cc07b2e 	bgeu	r3,r19,18244 <__udivdi3+0x608>
   18058:	2029883a 	mov	r20,r4
   1805c:	b82e943a 	slli	r23,r23,16
   18060:	a822d43a 	srli	r17,r21,16
   18064:	ad7fffcc 	andi	r21,r21,65535
   18068:	a5e8b03a 	or	r20,r20,r23
   1806c:	a5bfffcc 	andi	r22,r20,65535
   18070:	b009883a 	mov	r4,r22
   18074:	a80b883a 	mov	r5,r21
   18078:	18afc83a 	sub	r23,r3,r2
   1807c:	a026d43a 	srli	r19,r20,16
   18080:	00106640 	call	10664 <__mulsi3>
   18084:	b009883a 	mov	r4,r22
   18088:	880b883a 	mov	r5,r17
   1808c:	1039883a 	mov	fp,r2
   18090:	00106640 	call	10664 <__mulsi3>
   18094:	a80b883a 	mov	r5,r21
   18098:	9809883a 	mov	r4,r19
   1809c:	102d883a 	mov	r22,r2
   180a0:	00106640 	call	10664 <__mulsi3>
   180a4:	9809883a 	mov	r4,r19
   180a8:	880b883a 	mov	r5,r17
   180ac:	102b883a 	mov	r21,r2
   180b0:	00106640 	call	10664 <__mulsi3>
   180b4:	100b883a 	mov	r5,r2
   180b8:	e004d43a 	srli	r2,fp,16
   180bc:	ad89883a 	add	r4,r21,r22
   180c0:	2089883a 	add	r4,r4,r2
   180c4:	2540022e 	bgeu	r4,r21,180d0 <__udivdi3+0x494>
   180c8:	00800074 	movhi	r2,1
   180cc:	288b883a 	add	r5,r5,r2
   180d0:	2004d43a 	srli	r2,r4,16
   180d4:	288b883a 	add	r5,r5,r2
   180d8:	b9404536 	bltu	r23,r5,181f0 <__udivdi3+0x5b4>
   180dc:	b9403f26 	beq	r23,r5,181dc <__udivdi3+0x5a0>
   180e0:	a005883a 	mov	r2,r20
   180e4:	0007883a 	mov	r3,zero
   180e8:	003f3f06 	br	17de8 <__udivdi3+0x1ac>
   180ec:	80a0983a 	sll	r16,r16,r2
   180f0:	88eed83a 	srl	r23,r17,r3
   180f4:	90c6d83a 	srl	r3,r18,r3
   180f8:	8028d43a 	srli	r20,r16,16
   180fc:	88a2983a 	sll	r17,r17,r2
   18100:	b809883a 	mov	r4,r23
   18104:	a00b883a 	mov	r5,r20
   18108:	88ecb03a 	or	r22,r17,r3
   1810c:	90a6983a 	sll	r19,r18,r2
   18110:	001065c0 	call	1065c <__umodsi3>
   18114:	b809883a 	mov	r4,r23
   18118:	a00b883a 	mov	r5,r20
   1811c:	1023883a 	mov	r17,r2
   18120:	857fffcc 	andi	r21,r16,65535
   18124:	00106540 	call	10654 <__udivsi3>
   18128:	1009883a 	mov	r4,r2
   1812c:	a80b883a 	mov	r5,r21
   18130:	102f883a 	mov	r23,r2
   18134:	00106640 	call	10664 <__mulsi3>
   18138:	1009883a 	mov	r4,r2
   1813c:	880a943a 	slli	r5,r17,16
   18140:	b004d43a 	srli	r2,r22,16
   18144:	288ab03a 	or	r5,r5,r2
   18148:	2900062e 	bgeu	r5,r4,18164 <__udivdi3+0x528>
   1814c:	2c0b883a 	add	r5,r5,r16
   18150:	b8bfffc4 	addi	r2,r23,-1
   18154:	2c004536 	bltu	r5,r16,1826c <__udivdi3+0x630>
   18158:	2900442e 	bgeu	r5,r4,1826c <__udivdi3+0x630>
   1815c:	bdffff84 	addi	r23,r23,-2
   18160:	2c0b883a 	add	r5,r5,r16
   18164:	2925c83a 	sub	r18,r5,r4
   18168:	9009883a 	mov	r4,r18
   1816c:	a00b883a 	mov	r5,r20
   18170:	001065c0 	call	1065c <__umodsi3>
   18174:	1023883a 	mov	r17,r2
   18178:	9009883a 	mov	r4,r18
   1817c:	a00b883a 	mov	r5,r20
   18180:	8822943a 	slli	r17,r17,16
   18184:	00106540 	call	10654 <__udivsi3>
   18188:	1009883a 	mov	r4,r2
   1818c:	a80b883a 	mov	r5,r21
   18190:	b5bfffcc 	andi	r22,r22,65535
   18194:	1025883a 	mov	r18,r2
   18198:	8da2b03a 	or	r17,r17,r22
   1819c:	00106640 	call	10664 <__mulsi3>
   181a0:	8880062e 	bgeu	r17,r2,181bc <__udivdi3+0x580>
   181a4:	8c23883a 	add	r17,r17,r16
   181a8:	90ffffc4 	addi	r3,r18,-1
   181ac:	8c002d36 	bltu	r17,r16,18264 <__udivdi3+0x628>
   181b0:	88802c2e 	bgeu	r17,r2,18264 <__udivdi3+0x628>
   181b4:	94bfff84 	addi	r18,r18,-2
   181b8:	8c23883a 	add	r17,r17,r16
   181bc:	b806943a 	slli	r3,r23,16
   181c0:	88a3c83a 	sub	r17,r17,r2
   181c4:	90c6b03a 	or	r3,r18,r3
   181c8:	003f2c06 	br	17e7c <__udivdi3+0x240>
   181cc:	1823883a 	mov	r17,r3
   181d0:	003eec06 	br	17d84 <__udivdi3+0x148>
   181d4:	2023883a 	mov	r17,r4
   181d8:	003f5606 	br	17f34 <__udivdi3+0x2f8>
   181dc:	2008943a 	slli	r4,r4,16
   181e0:	9420983a 	sll	r16,r18,r16
   181e4:	e73fffcc 	andi	fp,fp,65535
   181e8:	2709883a 	add	r4,r4,fp
   181ec:	813fbc2e 	bgeu	r16,r4,180e0 <__udivdi3+0x4a4>
   181f0:	a0bfffc4 	addi	r2,r20,-1
   181f4:	0007883a 	mov	r3,zero
   181f8:	003efb06 	br	17de8 <__udivdi3+0x1ac>
   181fc:	00c00604 	movi	r3,24
   18200:	180b883a 	mov	r5,r3
   18204:	003eeb06 	br	17db4 <__udivdi3+0x178>
   18208:	00c00204 	movi	r3,8
   1820c:	180b883a 	mov	r5,r3
   18210:	003ee806 	br	17db4 <__udivdi3+0x178>
   18214:	00800604 	movi	r2,24
   18218:	1007883a 	mov	r3,r2
   1821c:	003f0a06 	br	17e48 <__udivdi3+0x20c>
   18220:	00800604 	movi	r2,24
   18224:	1007883a 	mov	r3,r2
   18228:	003e9c06 	br	17c9c <__udivdi3+0x60>
   1822c:	00800204 	movi	r2,8
   18230:	1007883a 	mov	r3,r2
   18234:	003e9906 	br	17c9c <__udivdi3+0x60>
   18238:	00800204 	movi	r2,8
   1823c:	1007883a 	mov	r3,r2
   18240:	003f0106 	br	17e48 <__udivdi3+0x20c>
   18244:	18bf842e 	bgeu	r3,r2,18058 <__udivdi3+0x41c>
   18248:	a53fff84 	addi	r20,r20,-2
   1824c:	1cc7883a 	add	r3,r3,r19
   18250:	003f8206 	br	1805c <__udivdi3+0x420>
   18254:	393f6b2e 	bgeu	r7,r4,18004 <__udivdi3+0x3c8>
   18258:	bdffff84 	addi	r23,r23,-2
   1825c:	3ccf883a 	add	r7,r7,r19
   18260:	003f6906 	br	18008 <__udivdi3+0x3cc>
   18264:	1825883a 	mov	r18,r3
   18268:	003fd406 	br	181bc <__udivdi3+0x580>
   1826c:	102f883a 	mov	r23,r2
   18270:	003fbc06 	br	18164 <__udivdi3+0x528>
   18274:	94bfff84 	addi	r18,r18,-2
   18278:	340d883a 	add	r6,r6,r16
   1827c:	003f1606 	br	17ed8 <__udivdi3+0x29c>
   18280:	94bfff84 	addi	r18,r18,-2
   18284:	1c07883a 	add	r3,r3,r16
   18288:	003ea906 	br	17d30 <__udivdi3+0xf4>

0001828c <__umoddi3>:
   1828c:	defff304 	addi	sp,sp,-52
   18290:	dd000715 	stw	r20,28(sp)
   18294:	dcc00615 	stw	r19,24(sp)
   18298:	dc800515 	stw	r18,20(sp)
   1829c:	dc400415 	stw	r17,16(sp)
   182a0:	dc000315 	stw	r16,12(sp)
   182a4:	dfc00c15 	stw	ra,48(sp)
   182a8:	df000b15 	stw	fp,44(sp)
   182ac:	ddc00a15 	stw	r23,40(sp)
   182b0:	dd800915 	stw	r22,36(sp)
   182b4:	dd400815 	stw	r21,32(sp)
   182b8:	2025883a 	mov	r18,r4
   182bc:	2823883a 	mov	r17,r5
   182c0:	3021883a 	mov	r16,r6
   182c4:	2027883a 	mov	r19,r4
   182c8:	2829883a 	mov	r20,r5
   182cc:	38003a1e 	bne	r7,zero,183b8 <__umoddi3+0x12c>
   182d0:	2980522e 	bgeu	r5,r6,1841c <__umoddi3+0x190>
   182d4:	00bfffd4 	movui	r2,65535
   182d8:	1180a436 	bltu	r2,r6,1856c <__umoddi3+0x2e0>
   182dc:	00803fc4 	movi	r2,255
   182e0:	11816036 	bltu	r2,r6,18864 <__umoddi3+0x5d8>
   182e4:	0005883a 	mov	r2,zero
   182e8:	0009883a 	mov	r4,zero
   182ec:	3084d83a 	srl	r2,r6,r2
   182f0:	00c000f4 	movhi	r3,3
   182f4:	18e0c504 	addi	r3,r3,-31980
   182f8:	05400804 	movi	r21,32
   182fc:	1885883a 	add	r2,r3,r2
   18300:	10800003 	ldbu	r2,0(r2)
   18304:	1109883a 	add	r4,r2,r4
   18308:	a92bc83a 	sub	r21,r21,r4
   1830c:	a8010e26 	beq	r21,zero,18748 <__umoddi3+0x4bc>
   18310:	8d62983a 	sll	r17,r17,r21
   18314:	9108d83a 	srl	r4,r18,r4
   18318:	3560983a 	sll	r16,r6,r21
   1831c:	9566983a 	sll	r19,r18,r21
   18320:	8928b03a 	or	r20,r17,r4
   18324:	8022d43a 	srli	r17,r16,16
   18328:	a009883a 	mov	r4,r20
   1832c:	84bfffcc 	andi	r18,r16,65535
   18330:	880b883a 	mov	r5,r17
   18334:	001065c0 	call	1065c <__umodsi3>
   18338:	a009883a 	mov	r4,r20
   1833c:	880b883a 	mov	r5,r17
   18340:	102d883a 	mov	r22,r2
   18344:	00106540 	call	10654 <__udivsi3>
   18348:	1009883a 	mov	r4,r2
   1834c:	900b883a 	mov	r5,r18
   18350:	00106640 	call	10664 <__mulsi3>
   18354:	1009883a 	mov	r4,r2
   18358:	b006943a 	slli	r3,r22,16
   1835c:	9804d43a 	srli	r2,r19,16
   18360:	1886b03a 	or	r3,r3,r2
   18364:	1900042e 	bgeu	r3,r4,18378 <__umoddi3+0xec>
   18368:	1c07883a 	add	r3,r3,r16
   1836c:	1c000236 	bltu	r3,r16,18378 <__umoddi3+0xec>
   18370:	1900012e 	bgeu	r3,r4,18378 <__umoddi3+0xec>
   18374:	1c07883a 	add	r3,r3,r16
   18378:	1929c83a 	sub	r20,r3,r4
   1837c:	a009883a 	mov	r4,r20
   18380:	880b883a 	mov	r5,r17
   18384:	001065c0 	call	1065c <__umodsi3>
   18388:	102d883a 	mov	r22,r2
   1838c:	a009883a 	mov	r4,r20
   18390:	880b883a 	mov	r5,r17
   18394:	b02c943a 	slli	r22,r22,16
   18398:	00106540 	call	10654 <__udivsi3>
   1839c:	1009883a 	mov	r4,r2
   183a0:	900b883a 	mov	r5,r18
   183a4:	9cffffcc 	andi	r19,r19,65535
   183a8:	00106640 	call	10664 <__mulsi3>
   183ac:	b4e6b03a 	or	r19,r22,r19
   183b0:	9880572e 	bgeu	r19,r2,18510 <__umoddi3+0x284>
   183b4:	00005206 	br	18500 <__umoddi3+0x274>
   183b8:	29c05936 	bltu	r5,r7,18520 <__umoddi3+0x294>
   183bc:	00bfffd4 	movui	r2,65535
   183c0:	11c0652e 	bgeu	r2,r7,18558 <__umoddi3+0x2cc>
   183c4:	00804034 	movhi	r2,256
   183c8:	10bfffc4 	addi	r2,r2,-1
   183cc:	11c11936 	bltu	r2,r7,18834 <__umoddi3+0x5a8>
   183d0:	00c00404 	movi	r3,16
   183d4:	1827883a 	mov	r19,r3
   183d8:	38c6d83a 	srl	r3,r7,r3
   183dc:	010000f4 	movhi	r4,3
   183e0:	2120c504 	addi	r4,r4,-31980
   183e4:	04000804 	movi	r16,32
   183e8:	20c7883a 	add	r3,r4,r3
   183ec:	18800003 	ldbu	r2,0(r3)
   183f0:	14e7883a 	add	r19,r2,r19
   183f4:	84e1c83a 	sub	r16,r16,r19
   183f8:	8000671e 	bne	r16,zero,18598 <__umoddi3+0x30c>
   183fc:	3c400136 	bltu	r7,r17,18404 <__umoddi3+0x178>
   18400:	91812536 	bltu	r18,r6,18898 <__umoddi3+0x60c>
   18404:	9185c83a 	sub	r2,r18,r6
   18408:	89e3c83a 	sub	r17,r17,r7
   1840c:	90a5803a 	cmpltu	r18,r18,r2
   18410:	8ca9c83a 	sub	r20,r17,r18
   18414:	a007883a 	mov	r3,r20
   18418:	00004306 	br	18528 <__umoddi3+0x29c>
   1841c:	3000041e 	bne	r6,zero,18430 <__umoddi3+0x1a4>
   18420:	01000044 	movi	r4,1
   18424:	000b883a 	mov	r5,zero
   18428:	00106540 	call	10654 <__udivsi3>
   1842c:	1021883a 	mov	r16,r2
   18430:	00bfffd4 	movui	r2,65535
   18434:	1400532e 	bgeu	r2,r16,18584 <__umoddi3+0x2f8>
   18438:	00804034 	movhi	r2,256
   1843c:	10bfffc4 	addi	r2,r2,-1
   18440:	14010536 	bltu	r2,r16,18858 <__umoddi3+0x5cc>
   18444:	00800404 	movi	r2,16
   18448:	1007883a 	mov	r3,r2
   1844c:	8084d83a 	srl	r2,r16,r2
   18450:	010000f4 	movhi	r4,3
   18454:	2120c504 	addi	r4,r4,-31980
   18458:	05400804 	movi	r21,32
   1845c:	2085883a 	add	r2,r4,r2
   18460:	10800003 	ldbu	r2,0(r2)
   18464:	10c7883a 	add	r3,r2,r3
   18468:	a8ebc83a 	sub	r21,r21,r3
   1846c:	a800b81e 	bne	r21,zero,18750 <__umoddi3+0x4c4>
   18470:	8028d43a 	srli	r20,r16,16
   18474:	8c23c83a 	sub	r17,r17,r16
   18478:	85bfffcc 	andi	r22,r16,65535
   1847c:	8809883a 	mov	r4,r17
   18480:	a00b883a 	mov	r5,r20
   18484:	001065c0 	call	1065c <__umodsi3>
   18488:	8809883a 	mov	r4,r17
   1848c:	a00b883a 	mov	r5,r20
   18490:	1025883a 	mov	r18,r2
   18494:	00106540 	call	10654 <__udivsi3>
   18498:	1009883a 	mov	r4,r2
   1849c:	b00b883a 	mov	r5,r22
   184a0:	00106640 	call	10664 <__mulsi3>
   184a4:	1009883a 	mov	r4,r2
   184a8:	9006943a 	slli	r3,r18,16
   184ac:	9804d43a 	srli	r2,r19,16
   184b0:	1886b03a 	or	r3,r3,r2
   184b4:	1900032e 	bgeu	r3,r4,184c4 <__umoddi3+0x238>
   184b8:	1c07883a 	add	r3,r3,r16
   184bc:	1c000136 	bltu	r3,r16,184c4 <__umoddi3+0x238>
   184c0:	1900f336 	bltu	r3,r4,18890 <__umoddi3+0x604>
   184c4:	1923c83a 	sub	r17,r3,r4
   184c8:	8809883a 	mov	r4,r17
   184cc:	a00b883a 	mov	r5,r20
   184d0:	001065c0 	call	1065c <__umodsi3>
   184d4:	102f883a 	mov	r23,r2
   184d8:	8809883a 	mov	r4,r17
   184dc:	a00b883a 	mov	r5,r20
   184e0:	b82e943a 	slli	r23,r23,16
   184e4:	00106540 	call	10654 <__udivsi3>
   184e8:	1009883a 	mov	r4,r2
   184ec:	b00b883a 	mov	r5,r22
   184f0:	9cffffcc 	andi	r19,r19,65535
   184f4:	00106640 	call	10664 <__mulsi3>
   184f8:	bce6b03a 	or	r19,r23,r19
   184fc:	9880042e 	bgeu	r19,r2,18510 <__umoddi3+0x284>
   18500:	9c27883a 	add	r19,r19,r16
   18504:	9c000236 	bltu	r19,r16,18510 <__umoddi3+0x284>
   18508:	9880012e 	bgeu	r19,r2,18510 <__umoddi3+0x284>
   1850c:	9c27883a 	add	r19,r19,r16
   18510:	9885c83a 	sub	r2,r19,r2
   18514:	1544d83a 	srl	r2,r2,r21
   18518:	0007883a 	mov	r3,zero
   1851c:	00000206 	br	18528 <__umoddi3+0x29c>
   18520:	2005883a 	mov	r2,r4
   18524:	2807883a 	mov	r3,r5
   18528:	dfc00c17 	ldw	ra,48(sp)
   1852c:	df000b17 	ldw	fp,44(sp)
   18530:	ddc00a17 	ldw	r23,40(sp)
   18534:	dd800917 	ldw	r22,36(sp)
   18538:	dd400817 	ldw	r21,32(sp)
   1853c:	dd000717 	ldw	r20,28(sp)
   18540:	dcc00617 	ldw	r19,24(sp)
   18544:	dc800517 	ldw	r18,20(sp)
   18548:	dc400417 	ldw	r17,16(sp)
   1854c:	dc000317 	ldw	r16,12(sp)
   18550:	dec00d04 	addi	sp,sp,52
   18554:	f800283a 	ret
   18558:	00803fc4 	movi	r2,255
   1855c:	11c0b236 	bltu	r2,r7,18828 <__umoddi3+0x59c>
   18560:	0007883a 	mov	r3,zero
   18564:	0027883a 	mov	r19,zero
   18568:	003f9b06 	br	183d8 <__umoddi3+0x14c>
   1856c:	00804034 	movhi	r2,256
   18570:	10bfffc4 	addi	r2,r2,-1
   18574:	1180b236 	bltu	r2,r6,18840 <__umoddi3+0x5b4>
   18578:	00800404 	movi	r2,16
   1857c:	1009883a 	mov	r4,r2
   18580:	003f5a06 	br	182ec <__umoddi3+0x60>
   18584:	00803fc4 	movi	r2,255
   18588:	1400b036 	bltu	r2,r16,1884c <__umoddi3+0x5c0>
   1858c:	0005883a 	mov	r2,zero
   18590:	0007883a 	mov	r3,zero
   18594:	003fad06 	br	1844c <__umoddi3+0x1c0>
   18598:	34c4d83a 	srl	r2,r6,r19
   1859c:	3c0e983a 	sll	r7,r7,r16
   185a0:	8cf8d83a 	srl	fp,r17,r19
   185a4:	8c22983a 	sll	r17,r17,r16
   185a8:	38a8b03a 	or	r20,r7,r2
   185ac:	a02ad43a 	srli	r21,r20,16
   185b0:	94c4d83a 	srl	r2,r18,r19
   185b4:	e009883a 	mov	r4,fp
   185b8:	a80b883a 	mov	r5,r21
   185bc:	342c983a 	sll	r22,r6,r16
   185c0:	88a2b03a 	or	r17,r17,r2
   185c4:	001065c0 	call	1065c <__umodsi3>
   185c8:	e009883a 	mov	r4,fp
   185cc:	a80b883a 	mov	r5,r21
   185d0:	a5ffffcc 	andi	r23,r20,65535
   185d4:	d8800215 	stw	r2,8(sp)
   185d8:	00106540 	call	10654 <__udivsi3>
   185dc:	1009883a 	mov	r4,r2
   185e0:	b80b883a 	mov	r5,r23
   185e4:	1039883a 	mov	fp,r2
   185e8:	00106640 	call	10664 <__mulsi3>
   185ec:	d8c00217 	ldw	r3,8(sp)
   185f0:	1009883a 	mov	r4,r2
   185f4:	8804d43a 	srli	r2,r17,16
   185f8:	1806943a 	slli	r3,r3,16
   185fc:	9424983a 	sll	r18,r18,r16
   18600:	1886b03a 	or	r3,r3,r2
   18604:	1900042e 	bgeu	r3,r4,18618 <__umoddi3+0x38c>
   18608:	1d07883a 	add	r3,r3,r20
   1860c:	e0bfffc4 	addi	r2,fp,-1
   18610:	1d009b2e 	bgeu	r3,r20,18880 <__umoddi3+0x5f4>
   18614:	1039883a 	mov	fp,r2
   18618:	1907c83a 	sub	r3,r3,r4
   1861c:	1809883a 	mov	r4,r3
   18620:	a80b883a 	mov	r5,r21
   18624:	d8c00215 	stw	r3,8(sp)
   18628:	001065c0 	call	1065c <__umodsi3>
   1862c:	d8c00217 	ldw	r3,8(sp)
   18630:	a80b883a 	mov	r5,r21
   18634:	d8800015 	stw	r2,0(sp)
   18638:	1809883a 	mov	r4,r3
   1863c:	00106540 	call	10654 <__udivsi3>
   18640:	1009883a 	mov	r4,r2
   18644:	b80b883a 	mov	r5,r23
   18648:	102b883a 	mov	r21,r2
   1864c:	00106640 	call	10664 <__mulsi3>
   18650:	d9c00017 	ldw	r7,0(sp)
   18654:	8c7fffcc 	andi	r17,r17,65535
   18658:	380e943a 	slli	r7,r7,16
   1865c:	3c4eb03a 	or	r7,r7,r17
   18660:	3880042e 	bgeu	r7,r2,18674 <__umoddi3+0x3e8>
   18664:	3d0f883a 	add	r7,r7,r20
   18668:	a8ffffc4 	addi	r3,r21,-1
   1866c:	3d00802e 	bgeu	r7,r20,18870 <__umoddi3+0x5e4>
   18670:	182b883a 	mov	r21,r3
   18674:	e038943a 	slli	fp,fp,16
   18678:	b010d43a 	srli	r8,r22,16
   1867c:	b1bfffcc 	andi	r6,r22,65535
   18680:	af2ab03a 	or	r21,r21,fp
   18684:	a82ed43a 	srli	r23,r21,16
   18688:	ad7fffcc 	andi	r21,r21,65535
   1868c:	300b883a 	mov	r5,r6
   18690:	a809883a 	mov	r4,r21
   18694:	38a3c83a 	sub	r17,r7,r2
   18698:	d9800115 	stw	r6,4(sp)
   1869c:	da000015 	stw	r8,0(sp)
   186a0:	00106640 	call	10664 <__mulsi3>
   186a4:	da000017 	ldw	r8,0(sp)
   186a8:	a809883a 	mov	r4,r21
   186ac:	1039883a 	mov	fp,r2
   186b0:	400b883a 	mov	r5,r8
   186b4:	da000215 	stw	r8,8(sp)
   186b8:	00106640 	call	10664 <__mulsi3>
   186bc:	d9800117 	ldw	r6,4(sp)
   186c0:	b809883a 	mov	r4,r23
   186c4:	d8800015 	stw	r2,0(sp)
   186c8:	300b883a 	mov	r5,r6
   186cc:	00106640 	call	10664 <__mulsi3>
   186d0:	d8c00217 	ldw	r3,8(sp)
   186d4:	b809883a 	mov	r4,r23
   186d8:	102b883a 	mov	r21,r2
   186dc:	180b883a 	mov	r5,r3
   186e0:	00106640 	call	10664 <__mulsi3>
   186e4:	d9c00017 	ldw	r7,0(sp)
   186e8:	1007883a 	mov	r3,r2
   186ec:	e004d43a 	srli	r2,fp,16
   186f0:	a9c9883a 	add	r4,r21,r7
   186f4:	2089883a 	add	r4,r4,r2
   186f8:	2540022e 	bgeu	r4,r21,18704 <__umoddi3+0x478>
   186fc:	00800074 	movhi	r2,1
   18700:	1887883a 	add	r3,r3,r2
   18704:	2004d43a 	srli	r2,r4,16
   18708:	2008943a 	slli	r4,r4,16
   1870c:	e73fffcc 	andi	fp,fp,65535
   18710:	1887883a 	add	r3,r3,r2
   18714:	2709883a 	add	r4,r4,fp
   18718:	88c03d36 	bltu	r17,r3,18810 <__umoddi3+0x584>
   1871c:	88c06126 	beq	r17,r3,188a4 <__umoddi3+0x618>
   18720:	88c7c83a 	sub	r3,r17,r3
   18724:	202d883a 	mov	r22,r4
   18728:	95adc83a 	sub	r22,r18,r22
   1872c:	95a5803a 	cmpltu	r18,r18,r22
   18730:	1c87c83a 	sub	r3,r3,r18
   18734:	1cc4983a 	sll	r2,r3,r19
   18738:	b42cd83a 	srl	r22,r22,r16
   1873c:	1c06d83a 	srl	r3,r3,r16
   18740:	1584b03a 	or	r2,r2,r22
   18744:	003f7806 	br	18528 <__umoddi3+0x29c>
   18748:	002b883a 	mov	r21,zero
   1874c:	003ef506 	br	18324 <__umoddi3+0x98>
   18750:	8560983a 	sll	r16,r16,r21
   18754:	88e6d83a 	srl	r19,r17,r3
   18758:	90c6d83a 	srl	r3,r18,r3
   1875c:	8028d43a 	srli	r20,r16,16
   18760:	8d62983a 	sll	r17,r17,r21
   18764:	9809883a 	mov	r4,r19
   18768:	a00b883a 	mov	r5,r20
   1876c:	88eeb03a 	or	r23,r17,r3
   18770:	001065c0 	call	1065c <__umodsi3>
   18774:	9809883a 	mov	r4,r19
   18778:	a00b883a 	mov	r5,r20
   1877c:	1023883a 	mov	r17,r2
   18780:	85bfffcc 	andi	r22,r16,65535
   18784:	00106540 	call	10654 <__udivsi3>
   18788:	1009883a 	mov	r4,r2
   1878c:	b00b883a 	mov	r5,r22
   18790:	00106640 	call	10664 <__mulsi3>
   18794:	1007883a 	mov	r3,r2
   18798:	8808943a 	slli	r4,r17,16
   1879c:	b804d43a 	srli	r2,r23,16
   187a0:	9566983a 	sll	r19,r18,r21
   187a4:	2088b03a 	or	r4,r4,r2
   187a8:	20c0042e 	bgeu	r4,r3,187bc <__umoddi3+0x530>
   187ac:	2409883a 	add	r4,r4,r16
   187b0:	24000236 	bltu	r4,r16,187bc <__umoddi3+0x530>
   187b4:	20c0012e 	bgeu	r4,r3,187bc <__umoddi3+0x530>
   187b8:	2409883a 	add	r4,r4,r16
   187bc:	20e5c83a 	sub	r18,r4,r3
   187c0:	9009883a 	mov	r4,r18
   187c4:	a00b883a 	mov	r5,r20
   187c8:	001065c0 	call	1065c <__umodsi3>
   187cc:	1023883a 	mov	r17,r2
   187d0:	9009883a 	mov	r4,r18
   187d4:	a00b883a 	mov	r5,r20
   187d8:	8822943a 	slli	r17,r17,16
   187dc:	00106540 	call	10654 <__udivsi3>
   187e0:	1009883a 	mov	r4,r2
   187e4:	b00b883a 	mov	r5,r22
   187e8:	bdffffcc 	andi	r23,r23,65535
   187ec:	00106640 	call	10664 <__mulsi3>
   187f0:	8de2b03a 	or	r17,r17,r23
   187f4:	8880042e 	bgeu	r17,r2,18808 <__umoddi3+0x57c>
   187f8:	8c23883a 	add	r17,r17,r16
   187fc:	8c000236 	bltu	r17,r16,18808 <__umoddi3+0x57c>
   18800:	8880012e 	bgeu	r17,r2,18808 <__umoddi3+0x57c>
   18804:	8c23883a 	add	r17,r17,r16
   18808:	88a3c83a 	sub	r17,r17,r2
   1880c:	003f1b06 	br	1847c <__umoddi3+0x1f0>
   18810:	25adc83a 	sub	r22,r4,r22
   18814:	1d07c83a 	sub	r3,r3,r20
   18818:	2589803a 	cmpltu	r4,r4,r22
   1881c:	1907c83a 	sub	r3,r3,r4
   18820:	88c7c83a 	sub	r3,r17,r3
   18824:	003fc006 	br	18728 <__umoddi3+0x49c>
   18828:	00c00204 	movi	r3,8
   1882c:	1827883a 	mov	r19,r3
   18830:	003ee906 	br	183d8 <__umoddi3+0x14c>
   18834:	00c00604 	movi	r3,24
   18838:	1827883a 	mov	r19,r3
   1883c:	003ee606 	br	183d8 <__umoddi3+0x14c>
   18840:	00800604 	movi	r2,24
   18844:	1009883a 	mov	r4,r2
   18848:	003ea806 	br	182ec <__umoddi3+0x60>
   1884c:	00800204 	movi	r2,8
   18850:	1007883a 	mov	r3,r2
   18854:	003efd06 	br	1844c <__umoddi3+0x1c0>
   18858:	00800604 	movi	r2,24
   1885c:	1007883a 	mov	r3,r2
   18860:	003efa06 	br	1844c <__umoddi3+0x1c0>
   18864:	00800204 	movi	r2,8
   18868:	1009883a 	mov	r4,r2
   1886c:	003e9f06 	br	182ec <__umoddi3+0x60>
   18870:	38bf7f2e 	bgeu	r7,r2,18670 <__umoddi3+0x3e4>
   18874:	ad7fff84 	addi	r21,r21,-2
   18878:	3d0f883a 	add	r7,r7,r20
   1887c:	003f7d06 	br	18674 <__umoddi3+0x3e8>
   18880:	193f642e 	bgeu	r3,r4,18614 <__umoddi3+0x388>
   18884:	e73fff84 	addi	fp,fp,-2
   18888:	1d07883a 	add	r3,r3,r20
   1888c:	003f6206 	br	18618 <__umoddi3+0x38c>
   18890:	1c07883a 	add	r3,r3,r16
   18894:	003f0b06 	br	184c4 <__umoddi3+0x238>
   18898:	9005883a 	mov	r2,r18
   1889c:	a007883a 	mov	r3,r20
   188a0:	003f2106 	br	18528 <__umoddi3+0x29c>
   188a4:	913fda36 	bltu	r18,r4,18810 <__umoddi3+0x584>
   188a8:	202d883a 	mov	r22,r4
   188ac:	0007883a 	mov	r3,zero
   188b0:	003f9d06 	br	18728 <__umoddi3+0x49c>

000188b4 <_fpadd_parts>:
   188b4:	2005883a 	mov	r2,r4
   188b8:	21000017 	ldw	r4,0(r4)
   188bc:	01c00044 	movi	r7,1
   188c0:	3900622e 	bgeu	r7,r4,18a4c <_fpadd_parts+0x198>
   188c4:	28c00017 	ldw	r3,0(r5)
   188c8:	38c05f2e 	bgeu	r7,r3,18a48 <_fpadd_parts+0x194>
   188cc:	01c00104 	movi	r7,4
   188d0:	21c0c626 	beq	r4,r7,18bec <_fpadd_parts+0x338>
   188d4:	19c05c26 	beq	r3,r7,18a48 <_fpadd_parts+0x194>
   188d8:	01c00084 	movi	r7,2
   188dc:	19c06b26 	beq	r3,r7,18a8c <_fpadd_parts+0x1d8>
   188e0:	21c05926 	beq	r4,r7,18a48 <_fpadd_parts+0x194>
   188e4:	11c00217 	ldw	r7,8(r2)
   188e8:	2ac00217 	ldw	r11,8(r5)
   188ec:	13000317 	ldw	r12,12(r2)
   188f0:	13400417 	ldw	r13,16(r2)
   188f4:	3ac9c83a 	sub	r4,r7,r11
   188f8:	2a000317 	ldw	r8,12(r5)
   188fc:	2a400417 	ldw	r9,16(r5)
   18900:	2015883a 	mov	r10,r4
   18904:	20007516 	blt	r4,zero,18adc <_fpadd_parts+0x228>
   18908:	00c00fc4 	movi	r3,63
   1890c:	1a805016 	blt	r3,r10,18a50 <_fpadd_parts+0x19c>
   18910:	0100870e 	bge	zero,r4,18b30 <_fpadd_parts+0x27c>
   18914:	50fff804 	addi	r3,r10,-32
   18918:	18009916 	blt	r3,zero,18b80 <_fpadd_parts+0x2cc>
   1891c:	48d6d83a 	srl	r11,r9,r3
   18920:	001d883a 	mov	r14,zero
   18924:	18009e16 	blt	r3,zero,18ba0 <_fpadd_parts+0x2ec>
   18928:	01000044 	movi	r4,1
   1892c:	20c6983a 	sll	r3,r4,r3
   18930:	0015883a 	mov	r10,zero
   18934:	513fffc4 	addi	r4,r10,-1
   18938:	2295403a 	cmpgeu	r10,r4,r10
   1893c:	1a87c83a 	sub	r3,r3,r10
   18940:	1a52703a 	and	r9,r3,r9
   18944:	2210703a 	and	r8,r4,r8
   18948:	4250b03a 	or	r8,r8,r9
   1894c:	4010c03a 	cmpne	r8,r8,zero
   18950:	42d0b03a 	or	r8,r8,r11
   18954:	7013883a 	mov	r9,r14
   18958:	11000117 	ldw	r4,4(r2)
   1895c:	28800117 	ldw	r2,4(r5)
   18960:	20804126 	beq	r4,r2,18a68 <_fpadd_parts+0x1b4>
   18964:	20006326 	beq	r4,zero,18af4 <_fpadd_parts+0x240>
   18968:	4305c83a 	sub	r2,r8,r12
   1896c:	4091803a 	cmpltu	r8,r8,r2
   18970:	4b47c83a 	sub	r3,r9,r13
   18974:	1a07c83a 	sub	r3,r3,r8
   18978:	18006316 	blt	r3,zero,18b08 <_fpadd_parts+0x254>
   1897c:	30000115 	stw	zero,4(r6)
   18980:	31c00215 	stw	r7,8(r6)
   18984:	30800315 	stw	r2,12(r6)
   18988:	30c00415 	stw	r3,16(r6)
   1898c:	11ffffc4 	addi	r7,r2,-1
   18990:	388b403a 	cmpgeu	r5,r7,r2
   18994:	194bc83a 	sub	r5,r3,r5
   18998:	01040034 	movhi	r4,4096
   1899c:	213fffc4 	addi	r4,r4,-1
   189a0:	21401736 	bltu	r4,r5,18a00 <_fpadd_parts+0x14c>
   189a4:	29008226 	beq	r5,r4,18bb0 <_fpadd_parts+0x2fc>
   189a8:	31400217 	ldw	r5,8(r6)
   189ac:	02840034 	movhi	r10,4096
   189b0:	52bfffc4 	addi	r10,r10,-1
   189b4:	033fff84 	movi	r12,-2
   189b8:	297fffc4 	addi	r5,r5,-1
   189bc:	00000106 	br	189c4 <_fpadd_parts+0x110>
   189c0:	3a804a26 	beq	r7,r10,18aec <_fpadd_parts+0x238>
   189c4:	1089883a 	add	r4,r2,r2
   189c8:	2091803a 	cmpltu	r8,r4,r2
   189cc:	18c7883a 	add	r3,r3,r3
   189d0:	227fffc4 	addi	r9,r4,-1
   189d4:	40d1883a 	add	r8,r8,r3
   189d8:	490f403a 	cmpgeu	r7,r9,r4
   189dc:	41cfc83a 	sub	r7,r8,r7
   189e0:	2817883a 	mov	r11,r5
   189e4:	2005883a 	mov	r2,r4
   189e8:	4007883a 	mov	r3,r8
   189ec:	297fffc4 	addi	r5,r5,-1
   189f0:	51fff32e 	bgeu	r10,r7,189c0 <_fpadd_parts+0x10c>
   189f4:	31000315 	stw	r4,12(r6)
   189f8:	32000415 	stw	r8,16(r6)
   189fc:	32c00215 	stw	r11,8(r6)
   18a00:	010000c4 	movi	r4,3
   18a04:	31000015 	stw	r4,0(r6)
   18a08:	01080034 	movhi	r4,8192
   18a0c:	213fffc4 	addi	r4,r4,-1
   18a10:	20c00b2e 	bgeu	r4,r3,18a40 <_fpadd_parts+0x18c>
   18a14:	180e97fa 	slli	r7,r3,31
   18a18:	1008d07a 	srli	r4,r2,1
   18a1c:	31400217 	ldw	r5,8(r6)
   18a20:	1806d07a 	srli	r3,r3,1
   18a24:	1080004c 	andi	r2,r2,1
   18a28:	3908b03a 	or	r4,r7,r4
   18a2c:	1108b03a 	or	r4,r2,r4
   18a30:	29400044 	addi	r5,r5,1
   18a34:	31000315 	stw	r4,12(r6)
   18a38:	30c00415 	stw	r3,16(r6)
   18a3c:	31400215 	stw	r5,8(r6)
   18a40:	3005883a 	mov	r2,r6
   18a44:	f800283a 	ret
   18a48:	2805883a 	mov	r2,r5
   18a4c:	f800283a 	ret
   18a50:	59c01e0e 	bge	r11,r7,18acc <_fpadd_parts+0x218>
   18a54:	11000117 	ldw	r4,4(r2)
   18a58:	28800117 	ldw	r2,4(r5)
   18a5c:	0011883a 	mov	r8,zero
   18a60:	0013883a 	mov	r9,zero
   18a64:	20bfbf1e 	bne	r4,r2,18964 <_fpadd_parts+0xb0>
   18a68:	4305883a 	add	r2,r8,r12
   18a6c:	1207803a 	cmpltu	r3,r2,r8
   18a70:	4b53883a 	add	r9,r9,r13
   18a74:	1a47883a 	add	r3,r3,r9
   18a78:	31000115 	stw	r4,4(r6)
   18a7c:	31c00215 	stw	r7,8(r6)
   18a80:	30800315 	stw	r2,12(r6)
   18a84:	30c00415 	stw	r3,16(r6)
   18a88:	003fdd06 	br	18a00 <_fpadd_parts+0x14c>
   18a8c:	20ffef1e 	bne	r4,r3,18a4c <_fpadd_parts+0x198>
   18a90:	31000015 	stw	r4,0(r6)
   18a94:	10c00117 	ldw	r3,4(r2)
   18a98:	30c00115 	stw	r3,4(r6)
   18a9c:	10c00217 	ldw	r3,8(r2)
   18aa0:	11000117 	ldw	r4,4(r2)
   18aa4:	29400117 	ldw	r5,4(r5)
   18aa8:	30c00215 	stw	r3,8(r6)
   18aac:	10c00317 	ldw	r3,12(r2)
   18ab0:	2908703a 	and	r4,r5,r4
   18ab4:	30c00315 	stw	r3,12(r6)
   18ab8:	10c00417 	ldw	r3,16(r2)
   18abc:	31000115 	stw	r4,4(r6)
   18ac0:	3005883a 	mov	r2,r6
   18ac4:	30c00415 	stw	r3,16(r6)
   18ac8:	f800283a 	ret
   18acc:	580f883a 	mov	r7,r11
   18ad0:	0019883a 	mov	r12,zero
   18ad4:	001b883a 	mov	r13,zero
   18ad8:	003f9f06 	br	18958 <_fpadd_parts+0xa4>
   18adc:	0115c83a 	sub	r10,zero,r4
   18ae0:	00c00fc4 	movi	r3,63
   18ae4:	1abfda16 	blt	r3,r10,18a50 <_fpadd_parts+0x19c>
   18ae8:	003f8906 	br	18910 <_fpadd_parts+0x5c>
   18aec:	627fb52e 	bgeu	r12,r9,189c4 <_fpadd_parts+0x110>
   18af0:	003fc006 	br	189f4 <_fpadd_parts+0x140>
   18af4:	6205c83a 	sub	r2,r12,r8
   18af8:	6099803a 	cmpltu	r12,r12,r2
   18afc:	6a47c83a 	sub	r3,r13,r9
   18b00:	1b07c83a 	sub	r3,r3,r12
   18b04:	183f9d0e 	bge	r3,zero,1897c <_fpadd_parts+0xc8>
   18b08:	0085c83a 	sub	r2,zero,r2
   18b0c:	1008c03a 	cmpne	r4,r2,zero
   18b10:	00c7c83a 	sub	r3,zero,r3
   18b14:	1907c83a 	sub	r3,r3,r4
   18b18:	01000044 	movi	r4,1
   18b1c:	31000115 	stw	r4,4(r6)
   18b20:	31c00215 	stw	r7,8(r6)
   18b24:	30800315 	stw	r2,12(r6)
   18b28:	30c00415 	stw	r3,16(r6)
   18b2c:	003f9706 	br	1898c <_fpadd_parts+0xd8>
   18b30:	203f8926 	beq	r4,zero,18958 <_fpadd_parts+0xa4>
   18b34:	50fff804 	addi	r3,r10,-32
   18b38:	3a8f883a 	add	r7,r7,r10
   18b3c:	18002316 	blt	r3,zero,18bcc <_fpadd_parts+0x318>
   18b40:	68d6d83a 	srl	r11,r13,r3
   18b44:	001d883a 	mov	r14,zero
   18b48:	18001c16 	blt	r3,zero,18bbc <_fpadd_parts+0x308>
   18b4c:	01000044 	movi	r4,1
   18b50:	20c6983a 	sll	r3,r4,r3
   18b54:	0015883a 	mov	r10,zero
   18b58:	513fffc4 	addi	r4,r10,-1
   18b5c:	2295403a 	cmpgeu	r10,r4,r10
   18b60:	1a87c83a 	sub	r3,r3,r10
   18b64:	1b5a703a 	and	r13,r3,r13
   18b68:	2318703a 	and	r12,r4,r12
   18b6c:	6358b03a 	or	r12,r12,r13
   18b70:	6018c03a 	cmpne	r12,r12,zero
   18b74:	62d8b03a 	or	r12,r12,r11
   18b78:	701b883a 	mov	r13,r14
   18b7c:	003f7606 	br	18958 <_fpadd_parts+0xa4>
   18b80:	4808907a 	slli	r4,r9,1
   18b84:	02c007c4 	movi	r11,31
   18b88:	5a97c83a 	sub	r11,r11,r10
   18b8c:	22c8983a 	sll	r4,r4,r11
   18b90:	4296d83a 	srl	r11,r8,r10
   18b94:	4a9cd83a 	srl	r14,r9,r10
   18b98:	22d6b03a 	or	r11,r4,r11
   18b9c:	003f6106 	br	18924 <_fpadd_parts+0x70>
   18ba0:	00c00044 	movi	r3,1
   18ba4:	1a94983a 	sll	r10,r3,r10
   18ba8:	0007883a 	mov	r3,zero
   18bac:	003f6106 	br	18934 <_fpadd_parts+0x80>
   18bb0:	013fff84 	movi	r4,-2
   18bb4:	21ff7c2e 	bgeu	r4,r7,189a8 <_fpadd_parts+0xf4>
   18bb8:	003f9106 	br	18a00 <_fpadd_parts+0x14c>
   18bbc:	00c00044 	movi	r3,1
   18bc0:	1a94983a 	sll	r10,r3,r10
   18bc4:	0007883a 	mov	r3,zero
   18bc8:	003fe306 	br	18b58 <_fpadd_parts+0x2a4>
   18bcc:	6816907a 	slli	r11,r13,1
   18bd0:	010007c4 	movi	r4,31
   18bd4:	2289c83a 	sub	r4,r4,r10
   18bd8:	5908983a 	sll	r4,r11,r4
   18bdc:	6296d83a 	srl	r11,r12,r10
   18be0:	6a9cd83a 	srl	r14,r13,r10
   18be4:	22d6b03a 	or	r11,r4,r11
   18be8:	003fd706 	br	18b48 <_fpadd_parts+0x294>
   18bec:	193f971e 	bne	r3,r4,18a4c <_fpadd_parts+0x198>
   18bf0:	11000117 	ldw	r4,4(r2)
   18bf4:	28c00117 	ldw	r3,4(r5)
   18bf8:	20ff9426 	beq	r4,r3,18a4c <_fpadd_parts+0x198>
   18bfc:	008000f4 	movhi	r2,3
   18c00:	10a0c004 	addi	r2,r2,-32000
   18c04:	f800283a 	ret

00018c08 <__adddf3>:
   18c08:	deffec04 	addi	sp,sp,-80
   18c0c:	d9001115 	stw	r4,68(sp)
   18c10:	d9401215 	stw	r5,72(sp)
   18c14:	d9001104 	addi	r4,sp,68
   18c18:	d9400a04 	addi	r5,sp,40
   18c1c:	dfc01315 	stw	ra,76(sp)
   18c20:	d9c01015 	stw	r7,64(sp)
   18c24:	d9800f15 	stw	r6,60(sp)
   18c28:	00199d40 	call	199d4 <__unpack_d>
   18c2c:	d9000f04 	addi	r4,sp,60
   18c30:	d9400504 	addi	r5,sp,20
   18c34:	00199d40 	call	199d4 <__unpack_d>
   18c38:	d9000a04 	addi	r4,sp,40
   18c3c:	d9400504 	addi	r5,sp,20
   18c40:	d80d883a 	mov	r6,sp
   18c44:	00188b40 	call	188b4 <_fpadd_parts>
   18c48:	1009883a 	mov	r4,r2
   18c4c:	00197b00 	call	197b0 <__pack_d>
   18c50:	dfc01317 	ldw	ra,76(sp)
   18c54:	dec01404 	addi	sp,sp,80
   18c58:	f800283a 	ret

00018c5c <__subdf3>:
   18c5c:	deffec04 	addi	sp,sp,-80
   18c60:	d9001115 	stw	r4,68(sp)
   18c64:	d9401215 	stw	r5,72(sp)
   18c68:	d9001104 	addi	r4,sp,68
   18c6c:	d9400a04 	addi	r5,sp,40
   18c70:	dfc01315 	stw	ra,76(sp)
   18c74:	d9c01015 	stw	r7,64(sp)
   18c78:	d9800f15 	stw	r6,60(sp)
   18c7c:	00199d40 	call	199d4 <__unpack_d>
   18c80:	d9000f04 	addi	r4,sp,60
   18c84:	d9400504 	addi	r5,sp,20
   18c88:	00199d40 	call	199d4 <__unpack_d>
   18c8c:	d8800617 	ldw	r2,24(sp)
   18c90:	d9000a04 	addi	r4,sp,40
   18c94:	d9400504 	addi	r5,sp,20
   18c98:	d80d883a 	mov	r6,sp
   18c9c:	1080005c 	xori	r2,r2,1
   18ca0:	d8800615 	stw	r2,24(sp)
   18ca4:	00188b40 	call	188b4 <_fpadd_parts>
   18ca8:	1009883a 	mov	r4,r2
   18cac:	00197b00 	call	197b0 <__pack_d>
   18cb0:	dfc01317 	ldw	ra,76(sp)
   18cb4:	dec01404 	addi	sp,sp,80
   18cb8:	f800283a 	ret

00018cbc <__muldf3>:
   18cbc:	deffe404 	addi	sp,sp,-112
   18cc0:	d9001115 	stw	r4,68(sp)
   18cc4:	d9401215 	stw	r5,72(sp)
   18cc8:	d9001104 	addi	r4,sp,68
   18ccc:	d9400a04 	addi	r5,sp,40
   18cd0:	dfc01b15 	stw	ra,108(sp)
   18cd4:	d9800f15 	stw	r6,60(sp)
   18cd8:	d9c01015 	stw	r7,64(sp)
   18cdc:	ddc01a15 	stw	r23,104(sp)
   18ce0:	dd801915 	stw	r22,100(sp)
   18ce4:	dd401815 	stw	r21,96(sp)
   18ce8:	dd001715 	stw	r20,92(sp)
   18cec:	dcc01615 	stw	r19,88(sp)
   18cf0:	dc801515 	stw	r18,84(sp)
   18cf4:	dc401415 	stw	r17,80(sp)
   18cf8:	dc001315 	stw	r16,76(sp)
   18cfc:	00199d40 	call	199d4 <__unpack_d>
   18d00:	d9000f04 	addi	r4,sp,60
   18d04:	d9400504 	addi	r5,sp,20
   18d08:	00199d40 	call	199d4 <__unpack_d>
   18d0c:	d8c00a17 	ldw	r3,40(sp)
   18d10:	00800044 	movi	r2,1
   18d14:	10c01136 	bltu	r2,r3,18d5c <__muldf3+0xa0>
   18d18:	d8c00b17 	ldw	r3,44(sp)
   18d1c:	d8800617 	ldw	r2,24(sp)
   18d20:	d9000a04 	addi	r4,sp,40
   18d24:	1884c03a 	cmpne	r2,r3,r2
   18d28:	d8800b15 	stw	r2,44(sp)
   18d2c:	00197b00 	call	197b0 <__pack_d>
   18d30:	dfc01b17 	ldw	ra,108(sp)
   18d34:	ddc01a17 	ldw	r23,104(sp)
   18d38:	dd801917 	ldw	r22,100(sp)
   18d3c:	dd401817 	ldw	r21,96(sp)
   18d40:	dd001717 	ldw	r20,92(sp)
   18d44:	dcc01617 	ldw	r19,88(sp)
   18d48:	dc801517 	ldw	r18,84(sp)
   18d4c:	dc401417 	ldw	r17,80(sp)
   18d50:	dc001317 	ldw	r16,76(sp)
   18d54:	dec01c04 	addi	sp,sp,112
   18d58:	f800283a 	ret
   18d5c:	d9000517 	ldw	r4,20(sp)
   18d60:	11000636 	bltu	r2,r4,18d7c <__muldf3+0xc0>
   18d64:	d8800617 	ldw	r2,24(sp)
   18d68:	d8c00b17 	ldw	r3,44(sp)
   18d6c:	d9000504 	addi	r4,sp,20
   18d70:	1884c03a 	cmpne	r2,r3,r2
   18d74:	d8800615 	stw	r2,24(sp)
   18d78:	003fec06 	br	18d2c <__muldf3+0x70>
   18d7c:	00800104 	movi	r2,4
   18d80:	1880051e 	bne	r3,r2,18d98 <__muldf3+0xdc>
   18d84:	00800084 	movi	r2,2
   18d88:	20bfe31e 	bne	r4,r2,18d18 <__muldf3+0x5c>
   18d8c:	010000f4 	movhi	r4,3
   18d90:	2120c004 	addi	r4,r4,-32000
   18d94:	003fe506 	br	18d2c <__muldf3+0x70>
   18d98:	2080031e 	bne	r4,r2,18da8 <__muldf3+0xec>
   18d9c:	00800084 	movi	r2,2
   18da0:	18bffa26 	beq	r3,r2,18d8c <__muldf3+0xd0>
   18da4:	003fef06 	br	18d64 <__muldf3+0xa8>
   18da8:	00800084 	movi	r2,2
   18dac:	18bfda26 	beq	r3,r2,18d18 <__muldf3+0x5c>
   18db0:	20bfec26 	beq	r4,r2,18d64 <__muldf3+0xa8>
   18db4:	dc000d17 	ldw	r16,52(sp)
   18db8:	dd000817 	ldw	r20,32(sp)
   18dbc:	dc800917 	ldw	r18,36(sp)
   18dc0:	8009883a 	mov	r4,r16
   18dc4:	000b883a 	mov	r5,zero
   18dc8:	a00d883a 	mov	r6,r20
   18dcc:	000f883a 	mov	r7,zero
   18dd0:	00195f40 	call	195f4 <__muldi3>
   18dd4:	dc400e17 	ldw	r17,56(sp)
   18dd8:	9009883a 	mov	r4,r18
   18ddc:	800d883a 	mov	r6,r16
   18de0:	000b883a 	mov	r5,zero
   18de4:	000f883a 	mov	r7,zero
   18de8:	102f883a 	mov	r23,r2
   18dec:	1827883a 	mov	r19,r3
   18df0:	00195f40 	call	195f4 <__muldi3>
   18df4:	900d883a 	mov	r6,r18
   18df8:	8809883a 	mov	r4,r17
   18dfc:	000b883a 	mov	r5,zero
   18e00:	000f883a 	mov	r7,zero
   18e04:	102b883a 	mov	r21,r2
   18e08:	1821883a 	mov	r16,r3
   18e0c:	00195f40 	call	195f4 <__muldi3>
   18e10:	8809883a 	mov	r4,r17
   18e14:	000b883a 	mov	r5,zero
   18e18:	a00d883a 	mov	r6,r20
   18e1c:	000f883a 	mov	r7,zero
   18e20:	102d883a 	mov	r22,r2
   18e24:	1825883a 	mov	r18,r3
   18e28:	00195f40 	call	195f4 <__muldi3>
   18e2c:	154b883a 	add	r5,r2,r21
   18e30:	2889803a 	cmpltu	r4,r5,r2
   18e34:	1c07883a 	add	r3,r3,r16
   18e38:	20c9883a 	add	r4,r4,r3
   18e3c:	24004b36 	bltu	r4,r16,18f6c <__muldf3+0x2b0>
   18e40:	8100011e 	bne	r16,r4,18e48 <__muldf3+0x18c>
   18e44:	2d404936 	bltu	r5,r21,18f6c <__muldf3+0x2b0>
   18e48:	0011883a 	mov	r8,zero
   18e4c:	0007883a 	mov	r3,zero
   18e50:	2ccb883a 	add	r5,r5,r19
   18e54:	b80d883a 	mov	r6,r23
   18e58:	2cc0012e 	bgeu	r5,r19,18e60 <__muldf3+0x1a4>
   18e5c:	02000044 	movi	r8,1
   18e60:	258f883a 	add	r7,r4,r22
   18e64:	3909803a 	cmpltu	r4,r7,r4
   18e68:	da400c17 	ldw	r9,48(sp)
   18e6c:	2489883a 	add	r4,r4,r18
   18e70:	d8800717 	ldw	r2,28(sp)
   18e74:	20c9883a 	add	r4,r4,r3
   18e78:	da800b17 	ldw	r10,44(sp)
   18e7c:	d8c00617 	ldw	r3,24(sp)
   18e80:	3a11883a 	add	r8,r7,r8
   18e84:	4885883a 	add	r2,r9,r2
   18e88:	50c6c03a 	cmpne	r3,r10,r3
   18e8c:	41cf803a 	cmpltu	r7,r8,r7
   18e90:	12400104 	addi	r9,r2,4
   18e94:	d8c00115 	stw	r3,4(sp)
   18e98:	3909883a 	add	r4,r7,r4
   18e9c:	da400215 	stw	r9,8(sp)
   18ea0:	03480034 	movhi	r13,8192
   18ea4:	6b7fffc4 	addi	r13,r13,-1
   18ea8:	4007883a 	mov	r3,r8
   18eac:	6900102e 	bgeu	r13,r4,18ef0 <__muldf3+0x234>
   18eb0:	10800144 	addi	r2,r2,5
   18eb4:	180ed07a 	srli	r7,r3,1
   18eb8:	18c0004c 	andi	r3,r3,1
   18ebc:	201097fa 	slli	r8,r4,31
   18ec0:	281697fa 	slli	r11,r5,31
   18ec4:	2008d07a 	srli	r4,r4,1
   18ec8:	3014d07a 	srli	r10,r6,1
   18ecc:	2812d07a 	srli	r9,r5,1
   18ed0:	1019883a 	mov	r12,r2
   18ed4:	18000226 	beq	r3,zero,18ee0 <__muldf3+0x224>
   18ed8:	5a8cb03a 	or	r6,r11,r10
   18edc:	49600034 	orhi	r5,r9,32768
   18ee0:	41c6b03a 	or	r3,r8,r7
   18ee4:	10800044 	addi	r2,r2,1
   18ee8:	693ff236 	bltu	r13,r4,18eb4 <__muldf3+0x1f8>
   18eec:	db000215 	stw	r12,8(sp)
   18ef0:	03440034 	movhi	r13,4096
   18ef4:	6b7fffc4 	addi	r13,r13,-1
   18ef8:	69001336 	bltu	r13,r4,18f48 <__muldf3+0x28c>
   18efc:	d8800217 	ldw	r2,8(sp)
   18f00:	10bfffc4 	addi	r2,r2,-1
   18f04:	18d3883a 	add	r9,r3,r3
   18f08:	48c7803a 	cmpltu	r3,r9,r3
   18f0c:	2109883a 	add	r4,r4,r4
   18f10:	190f883a 	add	r7,r3,r4
   18f14:	3191883a 	add	r8,r6,r6
   18f18:	4197803a 	cmpltu	r11,r8,r6
   18f1c:	2955883a 	add	r10,r5,r5
   18f20:	1019883a 	mov	r12,r2
   18f24:	4807883a 	mov	r3,r9
   18f28:	3809883a 	mov	r4,r7
   18f2c:	2800010e 	bge	r5,zero,18f34 <__muldf3+0x278>
   18f30:	48c00054 	ori	r3,r9,1
   18f34:	400d883a 	mov	r6,r8
   18f38:	5a8b883a 	add	r5,r11,r10
   18f3c:	10bfffc4 	addi	r2,r2,-1
   18f40:	69fff02e 	bgeu	r13,r7,18f04 <__muldf3+0x248>
   18f44:	db000215 	stw	r12,8(sp)
   18f48:	18803fcc 	andi	r2,r3,255
   18f4c:	01c02004 	movi	r7,128
   18f50:	11c00926 	beq	r2,r7,18f78 <__muldf3+0x2bc>
   18f54:	008000c4 	movi	r2,3
   18f58:	d9000415 	stw	r4,16(sp)
   18f5c:	d8c00315 	stw	r3,12(sp)
   18f60:	d8800015 	stw	r2,0(sp)
   18f64:	d809883a 	mov	r4,sp
   18f68:	003f7006 	br	18d2c <__muldf3+0x70>
   18f6c:	0011883a 	mov	r8,zero
   18f70:	00c00044 	movi	r3,1
   18f74:	003fb606 	br	18e50 <__muldf3+0x194>
   18f78:	19c0400c 	andi	r7,r3,256
   18f7c:	383ff51e 	bne	r7,zero,18f54 <__muldf3+0x298>
   18f80:	314ab03a 	or	r5,r6,r5
   18f84:	283ff326 	beq	r5,zero,18f54 <__muldf3+0x298>
   18f88:	1885883a 	add	r2,r3,r2
   18f8c:	10cb803a 	cmpltu	r5,r2,r3
   18f90:	00ffc004 	movi	r3,-256
   18f94:	10c6703a 	and	r3,r2,r3
   18f98:	2909883a 	add	r4,r5,r4
   18f9c:	003fed06 	br	18f54 <__muldf3+0x298>

00018fa0 <__divdf3>:
   18fa0:	defff104 	addi	sp,sp,-60
   18fa4:	d9000c15 	stw	r4,48(sp)
   18fa8:	d9400d15 	stw	r5,52(sp)
   18fac:	d9000c04 	addi	r4,sp,48
   18fb0:	d9400504 	addi	r5,sp,20
   18fb4:	dfc00e15 	stw	ra,56(sp)
   18fb8:	d9800a15 	stw	r6,40(sp)
   18fbc:	d9c00b15 	stw	r7,44(sp)
   18fc0:	00199d40 	call	199d4 <__unpack_d>
   18fc4:	d9000a04 	addi	r4,sp,40
   18fc8:	d80b883a 	mov	r5,sp
   18fcc:	00199d40 	call	199d4 <__unpack_d>
   18fd0:	d8c00517 	ldw	r3,20(sp)
   18fd4:	00800044 	movi	r2,1
   18fd8:	10c00536 	bltu	r2,r3,18ff0 <__divdf3+0x50>
   18fdc:	d9000504 	addi	r4,sp,20
   18fe0:	00197b00 	call	197b0 <__pack_d>
   18fe4:	dfc00e17 	ldw	ra,56(sp)
   18fe8:	dec00f04 	addi	sp,sp,60
   18fec:	f800283a 	ret
   18ff0:	d9000017 	ldw	r4,0(sp)
   18ff4:	11000536 	bltu	r2,r4,1900c <__divdf3+0x6c>
   18ff8:	d809883a 	mov	r4,sp
   18ffc:	00197b00 	call	197b0 <__pack_d>
   19000:	dfc00e17 	ldw	ra,56(sp)
   19004:	dec00f04 	addi	sp,sp,60
   19008:	f800283a 	ret
   1900c:	d9800617 	ldw	r6,24(sp)
   19010:	d9400117 	ldw	r5,4(sp)
   19014:	00800104 	movi	r2,4
   19018:	314af03a 	xor	r5,r6,r5
   1901c:	d9400615 	stw	r5,24(sp)
   19020:	18800226 	beq	r3,r2,1902c <__divdf3+0x8c>
   19024:	01400084 	movi	r5,2
   19028:	1940041e 	bne	r3,r5,1903c <__divdf3+0x9c>
   1902c:	193feb1e 	bne	r3,r4,18fdc <__divdf3+0x3c>
   19030:	010000f4 	movhi	r4,3
   19034:	2120c004 	addi	r4,r4,-32000
   19038:	003fe906 	br	18fe0 <__divdf3+0x40>
   1903c:	20803326 	beq	r4,r2,1910c <__divdf3+0x16c>
   19040:	21403726 	beq	r4,r5,19120 <__divdf3+0x180>
   19044:	d8800217 	ldw	r2,8(sp)
   19048:	d9000717 	ldw	r4,28(sp)
   1904c:	d8c00917 	ldw	r3,36(sp)
   19050:	da000417 	ldw	r8,16(sp)
   19054:	2089c83a 	sub	r4,r4,r2
   19058:	d9000715 	stw	r4,28(sp)
   1905c:	d8800817 	ldw	r2,32(sp)
   19060:	dbc00317 	ldw	r15,12(sp)
   19064:	1a000236 	bltu	r3,r8,19070 <__divdf3+0xd0>
   19068:	40c0081e 	bne	r8,r3,1908c <__divdf3+0xec>
   1906c:	13c0072e 	bgeu	r2,r15,1908c <__divdf3+0xec>
   19070:	108b883a 	add	r5,r2,r2
   19074:	288d803a 	cmpltu	r6,r5,r2
   19078:	18c7883a 	add	r3,r3,r3
   1907c:	213fffc4 	addi	r4,r4,-1
   19080:	2805883a 	mov	r2,r5
   19084:	30c7883a 	add	r3,r6,r3
   19088:	d9000715 	stw	r4,28(sp)
   1908c:	01400f44 	movi	r5,61
   19090:	000f883a 	mov	r7,zero
   19094:	01040034 	movhi	r4,4096
   19098:	0019883a 	mov	r12,zero
   1909c:	001b883a 	mov	r13,zero
   190a0:	201697fa 	slli	r11,r4,31
   190a4:	3814d07a 	srli	r10,r7,1
   190a8:	297fffc4 	addi	r5,r5,-1
   190ac:	1a000936 	bltu	r3,r8,190d4 <__divdf3+0x134>
   190b0:	13cdc83a 	sub	r6,r2,r15
   190b4:	1193803a 	cmpltu	r9,r2,r6
   190b8:	1a1dc83a 	sub	r14,r3,r8
   190bc:	40c0011e 	bne	r8,r3,190c4 <__divdf3+0x124>
   190c0:	13c00436 	bltu	r2,r15,190d4 <__divdf3+0x134>
   190c4:	3005883a 	mov	r2,r6
   190c8:	7247c83a 	sub	r3,r14,r9
   190cc:	61d8b03a 	or	r12,r12,r7
   190d0:	691ab03a 	or	r13,r13,r4
   190d4:	108d883a 	add	r6,r2,r2
   190d8:	3093803a 	cmpltu	r9,r6,r2
   190dc:	18c7883a 	add	r3,r3,r3
   190e0:	5a8eb03a 	or	r7,r11,r10
   190e4:	2008d07a 	srli	r4,r4,1
   190e8:	3005883a 	mov	r2,r6
   190ec:	48c7883a 	add	r3,r9,r3
   190f0:	283feb1e 	bne	r5,zero,190a0 <__divdf3+0x100>
   190f4:	61003fcc 	andi	r4,r12,255
   190f8:	01402004 	movi	r5,128
   190fc:	21400b26 	beq	r4,r5,1912c <__divdf3+0x18c>
   19100:	db000815 	stw	r12,32(sp)
   19104:	db400915 	stw	r13,36(sp)
   19108:	003fb406 	br	18fdc <__divdf3+0x3c>
   1910c:	d8000815 	stw	zero,32(sp)
   19110:	d8000915 	stw	zero,36(sp)
   19114:	d8000715 	stw	zero,28(sp)
   19118:	d9000504 	addi	r4,sp,20
   1911c:	003fb006 	br	18fe0 <__divdf3+0x40>
   19120:	d8800515 	stw	r2,20(sp)
   19124:	d9000504 	addi	r4,sp,20
   19128:	003fad06 	br	18fe0 <__divdf3+0x40>
   1912c:	6140400c 	andi	r5,r12,256
   19130:	283ff31e 	bne	r5,zero,19100 <__divdf3+0x160>
   19134:	30c4b03a 	or	r2,r6,r3
   19138:	103ff126 	beq	r2,zero,19100 <__divdf3+0x160>
   1913c:	6109883a 	add	r4,r12,r4
   19140:	2305803a 	cmpltu	r2,r4,r12
   19144:	033fc004 	movi	r12,-256
   19148:	2318703a 	and	r12,r4,r12
   1914c:	135b883a 	add	r13,r2,r13
   19150:	003feb06 	br	19100 <__divdf3+0x160>

00019154 <__eqdf2>:
   19154:	defff104 	addi	sp,sp,-60
   19158:	d9000c15 	stw	r4,48(sp)
   1915c:	d9400d15 	stw	r5,52(sp)
   19160:	d9000c04 	addi	r4,sp,48
   19164:	d9400504 	addi	r5,sp,20
   19168:	dfc00e15 	stw	ra,56(sp)
   1916c:	d9800a15 	stw	r6,40(sp)
   19170:	d9c00b15 	stw	r7,44(sp)
   19174:	00199d40 	call	199d4 <__unpack_d>
   19178:	d9000a04 	addi	r4,sp,40
   1917c:	d80b883a 	mov	r5,sp
   19180:	00199d40 	call	199d4 <__unpack_d>
   19184:	d8c00517 	ldw	r3,20(sp)
   19188:	00800044 	movi	r2,1
   1918c:	10c0052e 	bgeu	r2,r3,191a4 <__eqdf2+0x50>
   19190:	d8c00017 	ldw	r3,0(sp)
   19194:	10c0032e 	bgeu	r2,r3,191a4 <__eqdf2+0x50>
   19198:	d9000504 	addi	r4,sp,20
   1919c:	d80b883a 	mov	r5,sp
   191a0:	0019ad80 	call	19ad8 <__fpcmp_parts_d>
   191a4:	dfc00e17 	ldw	ra,56(sp)
   191a8:	dec00f04 	addi	sp,sp,60
   191ac:	f800283a 	ret

000191b0 <__nedf2>:
   191b0:	defff104 	addi	sp,sp,-60
   191b4:	d9000c15 	stw	r4,48(sp)
   191b8:	d9400d15 	stw	r5,52(sp)
   191bc:	d9000c04 	addi	r4,sp,48
   191c0:	d9400504 	addi	r5,sp,20
   191c4:	dfc00e15 	stw	ra,56(sp)
   191c8:	d9800a15 	stw	r6,40(sp)
   191cc:	d9c00b15 	stw	r7,44(sp)
   191d0:	00199d40 	call	199d4 <__unpack_d>
   191d4:	d9000a04 	addi	r4,sp,40
   191d8:	d80b883a 	mov	r5,sp
   191dc:	00199d40 	call	199d4 <__unpack_d>
   191e0:	d8c00517 	ldw	r3,20(sp)
   191e4:	00800044 	movi	r2,1
   191e8:	10c0052e 	bgeu	r2,r3,19200 <__nedf2+0x50>
   191ec:	d8c00017 	ldw	r3,0(sp)
   191f0:	10c0032e 	bgeu	r2,r3,19200 <__nedf2+0x50>
   191f4:	d9000504 	addi	r4,sp,20
   191f8:	d80b883a 	mov	r5,sp
   191fc:	0019ad80 	call	19ad8 <__fpcmp_parts_d>
   19200:	dfc00e17 	ldw	ra,56(sp)
   19204:	dec00f04 	addi	sp,sp,60
   19208:	f800283a 	ret

0001920c <__gtdf2>:
   1920c:	defff104 	addi	sp,sp,-60
   19210:	d9000c15 	stw	r4,48(sp)
   19214:	d9400d15 	stw	r5,52(sp)
   19218:	d9000c04 	addi	r4,sp,48
   1921c:	d9400504 	addi	r5,sp,20
   19220:	dfc00e15 	stw	ra,56(sp)
   19224:	d9800a15 	stw	r6,40(sp)
   19228:	d9c00b15 	stw	r7,44(sp)
   1922c:	00199d40 	call	199d4 <__unpack_d>
   19230:	d9000a04 	addi	r4,sp,40
   19234:	d80b883a 	mov	r5,sp
   19238:	00199d40 	call	199d4 <__unpack_d>
   1923c:	d8c00517 	ldw	r3,20(sp)
   19240:	00800044 	movi	r2,1
   19244:	10c0082e 	bgeu	r2,r3,19268 <__gtdf2+0x5c>
   19248:	d8c00017 	ldw	r3,0(sp)
   1924c:	10c0062e 	bgeu	r2,r3,19268 <__gtdf2+0x5c>
   19250:	d9000504 	addi	r4,sp,20
   19254:	d80b883a 	mov	r5,sp
   19258:	0019ad80 	call	19ad8 <__fpcmp_parts_d>
   1925c:	dfc00e17 	ldw	ra,56(sp)
   19260:	dec00f04 	addi	sp,sp,60
   19264:	f800283a 	ret
   19268:	00bfffc4 	movi	r2,-1
   1926c:	003ffb06 	br	1925c <__gtdf2+0x50>

00019270 <__gedf2>:
   19270:	defff104 	addi	sp,sp,-60
   19274:	d9000c15 	stw	r4,48(sp)
   19278:	d9400d15 	stw	r5,52(sp)
   1927c:	d9000c04 	addi	r4,sp,48
   19280:	d9400504 	addi	r5,sp,20
   19284:	dfc00e15 	stw	ra,56(sp)
   19288:	d9800a15 	stw	r6,40(sp)
   1928c:	d9c00b15 	stw	r7,44(sp)
   19290:	00199d40 	call	199d4 <__unpack_d>
   19294:	d9000a04 	addi	r4,sp,40
   19298:	d80b883a 	mov	r5,sp
   1929c:	00199d40 	call	199d4 <__unpack_d>
   192a0:	d8c00517 	ldw	r3,20(sp)
   192a4:	00800044 	movi	r2,1
   192a8:	10c0082e 	bgeu	r2,r3,192cc <__gedf2+0x5c>
   192ac:	d8c00017 	ldw	r3,0(sp)
   192b0:	10c0062e 	bgeu	r2,r3,192cc <__gedf2+0x5c>
   192b4:	d9000504 	addi	r4,sp,20
   192b8:	d80b883a 	mov	r5,sp
   192bc:	0019ad80 	call	19ad8 <__fpcmp_parts_d>
   192c0:	dfc00e17 	ldw	ra,56(sp)
   192c4:	dec00f04 	addi	sp,sp,60
   192c8:	f800283a 	ret
   192cc:	00bfffc4 	movi	r2,-1
   192d0:	003ffb06 	br	192c0 <__gedf2+0x50>

000192d4 <__ltdf2>:
   192d4:	defff104 	addi	sp,sp,-60
   192d8:	d9000c15 	stw	r4,48(sp)
   192dc:	d9400d15 	stw	r5,52(sp)
   192e0:	d9000c04 	addi	r4,sp,48
   192e4:	d9400504 	addi	r5,sp,20
   192e8:	dfc00e15 	stw	ra,56(sp)
   192ec:	d9800a15 	stw	r6,40(sp)
   192f0:	d9c00b15 	stw	r7,44(sp)
   192f4:	00199d40 	call	199d4 <__unpack_d>
   192f8:	d9000a04 	addi	r4,sp,40
   192fc:	d80b883a 	mov	r5,sp
   19300:	00199d40 	call	199d4 <__unpack_d>
   19304:	d8c00517 	ldw	r3,20(sp)
   19308:	00800044 	movi	r2,1
   1930c:	10c0052e 	bgeu	r2,r3,19324 <__ltdf2+0x50>
   19310:	d8c00017 	ldw	r3,0(sp)
   19314:	10c0032e 	bgeu	r2,r3,19324 <__ltdf2+0x50>
   19318:	d9000504 	addi	r4,sp,20
   1931c:	d80b883a 	mov	r5,sp
   19320:	0019ad80 	call	19ad8 <__fpcmp_parts_d>
   19324:	dfc00e17 	ldw	ra,56(sp)
   19328:	dec00f04 	addi	sp,sp,60
   1932c:	f800283a 	ret

00019330 <__floatsidf>:
   19330:	2004d7fa 	srli	r2,r4,31
   19334:	defff904 	addi	sp,sp,-28
   19338:	00c000c4 	movi	r3,3
   1933c:	dfc00615 	stw	ra,24(sp)
   19340:	dc000515 	stw	r16,20(sp)
   19344:	d8c00015 	stw	r3,0(sp)
   19348:	d8800115 	stw	r2,4(sp)
   1934c:	2000081e 	bne	r4,zero,19370 <__floatsidf+0x40>
   19350:	00800084 	movi	r2,2
   19354:	d8800015 	stw	r2,0(sp)
   19358:	d809883a 	mov	r4,sp
   1935c:	00197b00 	call	197b0 <__pack_d>
   19360:	dfc00617 	ldw	ra,24(sp)
   19364:	dc000517 	ldw	r16,20(sp)
   19368:	dec00704 	addi	sp,sp,28
   1936c:	f800283a 	ret
   19370:	00c00f04 	movi	r3,60
   19374:	d8c00215 	stw	r3,8(sp)
   19378:	10000f1e 	bne	r2,zero,193b8 <__floatsidf+0x88>
   1937c:	2021883a 	mov	r16,r4
   19380:	8009883a 	mov	r4,r16
   19384:	00197040 	call	19704 <__clzsi2>
   19388:	11000744 	addi	r4,r2,29
   1938c:	0100110e 	bge	zero,r4,193d4 <__floatsidf+0xa4>
   19390:	10ffff44 	addi	r3,r2,-3
   19394:	18001216 	blt	r3,zero,193e0 <__floatsidf+0xb0>
   19398:	80c6983a 	sll	r3,r16,r3
   1939c:	0009883a 	mov	r4,zero
   193a0:	014007c4 	movi	r5,31
   193a4:	2885c83a 	sub	r2,r5,r2
   193a8:	d9000315 	stw	r4,12(sp)
   193ac:	d8c00415 	stw	r3,16(sp)
   193b0:	d8800215 	stw	r2,8(sp)
   193b4:	003fe806 	br	19358 <__floatsidf+0x28>
   193b8:	00a00034 	movhi	r2,32768
   193bc:	20800e26 	beq	r4,r2,193f8 <__floatsidf+0xc8>
   193c0:	0121c83a 	sub	r16,zero,r4
   193c4:	8009883a 	mov	r4,r16
   193c8:	00197040 	call	19704 <__clzsi2>
   193cc:	11000744 	addi	r4,r2,29
   193d0:	013fef16 	blt	zero,r4,19390 <__floatsidf+0x60>
   193d4:	dc000315 	stw	r16,12(sp)
   193d8:	d8000415 	stw	zero,16(sp)
   193dc:	003fde06 	br	19358 <__floatsidf+0x28>
   193e0:	800ad07a 	srli	r5,r16,1
   193e4:	00c007c4 	movi	r3,31
   193e8:	1907c83a 	sub	r3,r3,r4
   193ec:	28c6d83a 	srl	r3,r5,r3
   193f0:	8108983a 	sll	r4,r16,r4
   193f4:	003fea06 	br	193a0 <__floatsidf+0x70>
   193f8:	0005883a 	mov	r2,zero
   193fc:	00f07834 	movhi	r3,49632
   19400:	003fd706 	br	19360 <__floatsidf+0x30>

00019404 <__fixdfsi>:
   19404:	defff804 	addi	sp,sp,-32
   19408:	d9000515 	stw	r4,20(sp)
   1940c:	d9400615 	stw	r5,24(sp)
   19410:	d9000504 	addi	r4,sp,20
   19414:	d80b883a 	mov	r5,sp
   19418:	dfc00715 	stw	ra,28(sp)
   1941c:	00199d40 	call	199d4 <__unpack_d>
   19420:	d8800017 	ldw	r2,0(sp)
   19424:	00c00084 	movi	r3,2
   19428:	10c01c26 	beq	r2,r3,1949c <__fixdfsi+0x98>
   1942c:	00c00044 	movi	r3,1
   19430:	18801a2e 	bgeu	r3,r2,1949c <__fixdfsi+0x98>
   19434:	00c00104 	movi	r3,4
   19438:	10c01126 	beq	r2,r3,19480 <__fixdfsi+0x7c>
   1943c:	d8800217 	ldw	r2,8(sp)
   19440:	10001616 	blt	r2,zero,1949c <__fixdfsi+0x98>
   19444:	00c00784 	movi	r3,30
   19448:	18800d16 	blt	r3,r2,19480 <__fixdfsi+0x7c>
   1944c:	00c00f04 	movi	r3,60
   19450:	1885c83a 	sub	r2,r3,r2
   19454:	10fff804 	addi	r3,r2,-32
   19458:	d9400317 	ldw	r5,12(sp)
   1945c:	d9000417 	ldw	r4,16(sp)
   19460:	18001616 	blt	r3,zero,194bc <__fixdfsi+0xb8>
   19464:	20c4d83a 	srl	r2,r4,r3
   19468:	d8c00117 	ldw	r3,4(sp)
   1946c:	18000126 	beq	r3,zero,19474 <__fixdfsi+0x70>
   19470:	0085c83a 	sub	r2,zero,r2
   19474:	dfc00717 	ldw	ra,28(sp)
   19478:	dec00804 	addi	sp,sp,32
   1947c:	f800283a 	ret
   19480:	d8800117 	ldw	r2,4(sp)
   19484:	1000091e 	bne	r2,zero,194ac <__fixdfsi+0xa8>
   19488:	00a00034 	movhi	r2,32768
   1948c:	10bfffc4 	addi	r2,r2,-1
   19490:	dfc00717 	ldw	ra,28(sp)
   19494:	dec00804 	addi	sp,sp,32
   19498:	f800283a 	ret
   1949c:	0005883a 	mov	r2,zero
   194a0:	dfc00717 	ldw	ra,28(sp)
   194a4:	dec00804 	addi	sp,sp,32
   194a8:	f800283a 	ret
   194ac:	00a00034 	movhi	r2,32768
   194b0:	dfc00717 	ldw	ra,28(sp)
   194b4:	dec00804 	addi	sp,sp,32
   194b8:	f800283a 	ret
   194bc:	2008907a 	slli	r4,r4,1
   194c0:	018007c4 	movi	r6,31
   194c4:	308dc83a 	sub	r6,r6,r2
   194c8:	2188983a 	sll	r4,r4,r6
   194cc:	2884d83a 	srl	r2,r5,r2
   194d0:	2084b03a 	or	r2,r4,r2
   194d4:	003fe406 	br	19468 <__fixdfsi+0x64>

000194d8 <__floatunsidf>:
   194d8:	defff904 	addi	sp,sp,-28
   194dc:	dc000515 	stw	r16,20(sp)
   194e0:	dfc00615 	stw	ra,24(sp)
   194e4:	d8000115 	stw	zero,4(sp)
   194e8:	2021883a 	mov	r16,r4
   194ec:	20001726 	beq	r4,zero,1954c <__floatunsidf+0x74>
   194f0:	008000c4 	movi	r2,3
   194f4:	d8800015 	stw	r2,0(sp)
   194f8:	00800f04 	movi	r2,60
   194fc:	d8800215 	stw	r2,8(sp)
   19500:	00197040 	call	19704 <__clzsi2>
   19504:	10c00744 	addi	r3,r2,29
   19508:	18001816 	blt	r3,zero,1956c <__floatunsidf+0x94>
   1950c:	18002d26 	beq	r3,zero,195c4 <__floatunsidf+0xec>
   19510:	113fff44 	addi	r4,r2,-3
   19514:	20002e16 	blt	r4,zero,195d0 <__floatunsidf+0xf8>
   19518:	8108983a 	sll	r4,r16,r4
   1951c:	0021883a 	mov	r16,zero
   19520:	014007c4 	movi	r5,31
   19524:	2885c83a 	sub	r2,r5,r2
   19528:	dc000315 	stw	r16,12(sp)
   1952c:	d9000415 	stw	r4,16(sp)
   19530:	d8800215 	stw	r2,8(sp)
   19534:	d809883a 	mov	r4,sp
   19538:	00197b00 	call	197b0 <__pack_d>
   1953c:	dfc00617 	ldw	ra,24(sp)
   19540:	dc000517 	ldw	r16,20(sp)
   19544:	dec00704 	addi	sp,sp,28
   19548:	f800283a 	ret
   1954c:	00800084 	movi	r2,2
   19550:	d809883a 	mov	r4,sp
   19554:	d8800015 	stw	r2,0(sp)
   19558:	00197b00 	call	197b0 <__pack_d>
   1955c:	dfc00617 	ldw	ra,24(sp)
   19560:	dc000517 	ldw	r16,20(sp)
   19564:	dec00704 	addi	sp,sp,28
   19568:	f800283a 	ret
   1956c:	00c7c83a 	sub	r3,zero,r3
   19570:	193ff804 	addi	r4,r3,-32
   19574:	20001c16 	blt	r4,zero,195e8 <__floatunsidf+0x110>
   19578:	000b883a 	mov	r5,zero
   1957c:	2009d7fa 	srai	r4,r4,31
   19580:	80c6d83a 	srl	r3,r16,r3
   19584:	297fffc4 	addi	r5,r5,-1
   19588:	2c20703a 	and	r16,r5,r16
   1958c:	8020c03a 	cmpne	r16,r16,zero
   19590:	1906703a 	and	r3,r3,r4
   19594:	010007c4 	movi	r4,31
   19598:	80c6b03a 	or	r3,r16,r3
   1959c:	2085c83a 	sub	r2,r4,r2
   195a0:	d809883a 	mov	r4,sp
   195a4:	d8c00315 	stw	r3,12(sp)
   195a8:	d8000415 	stw	zero,16(sp)
   195ac:	d8800215 	stw	r2,8(sp)
   195b0:	00197b00 	call	197b0 <__pack_d>
   195b4:	dfc00617 	ldw	ra,24(sp)
   195b8:	dc000517 	ldw	r16,20(sp)
   195bc:	dec00704 	addi	sp,sp,28
   195c0:	f800283a 	ret
   195c4:	dc000315 	stw	r16,12(sp)
   195c8:	d8000415 	stw	zero,16(sp)
   195cc:	003fd906 	br	19534 <__floatunsidf+0x5c>
   195d0:	800ad07a 	srli	r5,r16,1
   195d4:	010007c4 	movi	r4,31
   195d8:	20c9c83a 	sub	r4,r4,r3
   195dc:	2908d83a 	srl	r4,r5,r4
   195e0:	80e0983a 	sll	r16,r16,r3
   195e4:	003fce06 	br	19520 <__floatunsidf+0x48>
   195e8:	01400044 	movi	r5,1
   195ec:	28ca983a 	sll	r5,r5,r3
   195f0:	003fe206 	br	1957c <__floatunsidf+0xa4>

000195f4 <__muldi3>:
   195f4:	defff604 	addi	sp,sp,-40
   195f8:	dd400515 	stw	r21,20(sp)
   195fc:	dd000415 	stw	r20,16(sp)
   19600:	257fffcc 	andi	r21,r4,65535
   19604:	353fffcc 	andi	r20,r6,65535
   19608:	dcc00315 	stw	r19,12(sp)
   1960c:	3026d43a 	srli	r19,r6,16
   19610:	dd800615 	stw	r22,24(sp)
   19614:	dc800215 	stw	r18,8(sp)
   19618:	dc400115 	stw	r17,4(sp)
   1961c:	2024d43a 	srli	r18,r4,16
   19620:	2023883a 	mov	r17,r4
   19624:	282d883a 	mov	r22,r5
   19628:	a009883a 	mov	r4,r20
   1962c:	a80b883a 	mov	r5,r21
   19630:	dfc00915 	stw	ra,36(sp)
   19634:	df000815 	stw	fp,32(sp)
   19638:	ddc00715 	stw	r23,28(sp)
   1963c:	3839883a 	mov	fp,r7
   19640:	dc000015 	stw	r16,0(sp)
   19644:	3021883a 	mov	r16,r6
   19648:	00106640 	call	10664 <__mulsi3>
   1964c:	a80b883a 	mov	r5,r21
   19650:	9809883a 	mov	r4,r19
   19654:	102f883a 	mov	r23,r2
   19658:	00106640 	call	10664 <__mulsi3>
   1965c:	a009883a 	mov	r4,r20
   19660:	900b883a 	mov	r5,r18
   19664:	102b883a 	mov	r21,r2
   19668:	00106640 	call	10664 <__mulsi3>
   1966c:	9809883a 	mov	r4,r19
   19670:	900b883a 	mov	r5,r18
   19674:	1029883a 	mov	r20,r2
   19678:	00106640 	call	10664 <__mulsi3>
   1967c:	1007883a 	mov	r3,r2
   19680:	b804d43a 	srli	r2,r23,16
   19684:	a549883a 	add	r4,r20,r21
   19688:	2089883a 	add	r4,r4,r2
   1968c:	2500022e 	bgeu	r4,r20,19698 <__muldi3+0xa4>
   19690:	00800074 	movhi	r2,1
   19694:	1887883a 	add	r3,r3,r2
   19698:	200cd43a 	srli	r6,r4,16
   1969c:	2004943a 	slli	r2,r4,16
   196a0:	e00b883a 	mov	r5,fp
   196a4:	8809883a 	mov	r4,r17
   196a8:	bdffffcc 	andi	r23,r23,65535
   196ac:	19a3883a 	add	r17,r3,r6
   196b0:	15ef883a 	add	r23,r2,r23
   196b4:	00106640 	call	10664 <__mulsi3>
   196b8:	8009883a 	mov	r4,r16
   196bc:	b00b883a 	mov	r5,r22
   196c0:	1025883a 	mov	r18,r2
   196c4:	00106640 	call	10664 <__mulsi3>
   196c8:	9085883a 	add	r2,r18,r2
   196cc:	1447883a 	add	r3,r2,r17
   196d0:	b805883a 	mov	r2,r23
   196d4:	dfc00917 	ldw	ra,36(sp)
   196d8:	df000817 	ldw	fp,32(sp)
   196dc:	ddc00717 	ldw	r23,28(sp)
   196e0:	dd800617 	ldw	r22,24(sp)
   196e4:	dd400517 	ldw	r21,20(sp)
   196e8:	dd000417 	ldw	r20,16(sp)
   196ec:	dcc00317 	ldw	r19,12(sp)
   196f0:	dc800217 	ldw	r18,8(sp)
   196f4:	dc400117 	ldw	r17,4(sp)
   196f8:	dc000017 	ldw	r16,0(sp)
   196fc:	dec00a04 	addi	sp,sp,40
   19700:	f800283a 	ret

00019704 <__clzsi2>:
   19704:	00bfffd4 	movui	r2,65535
   19708:	11000b36 	bltu	r2,r4,19738 <__clzsi2+0x34>
   1970c:	00803fc4 	movi	r2,255
   19710:	11001e2e 	bgeu	r2,r4,1978c <__clzsi2+0x88>
   19714:	00c00204 	movi	r3,8
   19718:	20c8d83a 	srl	r4,r4,r3
   1971c:	00c000f4 	movhi	r3,3
   19720:	18e0c504 	addi	r3,r3,-31980
   19724:	00800604 	movi	r2,24
   19728:	1909883a 	add	r4,r3,r4
   1972c:	20c00003 	ldbu	r3,0(r4)
   19730:	10c5c83a 	sub	r2,r2,r3
   19734:	f800283a 	ret
   19738:	00804034 	movhi	r2,256
   1973c:	10bfffc4 	addi	r2,r2,-1
   19740:	11000936 	bltu	r2,r4,19768 <__clzsi2+0x64>
   19744:	00800404 	movi	r2,16
   19748:	1007883a 	mov	r3,r2
   1974c:	20c8d83a 	srl	r4,r4,r3
   19750:	00c000f4 	movhi	r3,3
   19754:	18e0c504 	addi	r3,r3,-31980
   19758:	1909883a 	add	r4,r3,r4
   1975c:	20c00003 	ldbu	r3,0(r4)
   19760:	10c5c83a 	sub	r2,r2,r3
   19764:	f800283a 	ret
   19768:	00c00604 	movi	r3,24
   1976c:	20c8d83a 	srl	r4,r4,r3
   19770:	00c000f4 	movhi	r3,3
   19774:	18e0c504 	addi	r3,r3,-31980
   19778:	00800204 	movi	r2,8
   1977c:	1909883a 	add	r4,r3,r4
   19780:	20c00003 	ldbu	r3,0(r4)
   19784:	10c5c83a 	sub	r2,r2,r3
   19788:	f800283a 	ret
   1978c:	0007883a 	mov	r3,zero
   19790:	20c8d83a 	srl	r4,r4,r3
   19794:	00c000f4 	movhi	r3,3
   19798:	18e0c504 	addi	r3,r3,-31980
   1979c:	00800804 	movi	r2,32
   197a0:	1909883a 	add	r4,r3,r4
   197a4:	20c00003 	ldbu	r3,0(r4)
   197a8:	10c5c83a 	sub	r2,r2,r3
   197ac:	f800283a 	ret

000197b0 <__pack_d>:
   197b0:	20800017 	ldw	r2,0(r4)
   197b4:	defff804 	addi	sp,sp,-32
   197b8:	dcc00315 	stw	r19,12(sp)
   197bc:	dc800215 	stw	r18,8(sp)
   197c0:	dfc00715 	stw	ra,28(sp)
   197c4:	dd800615 	stw	r22,24(sp)
   197c8:	dd400515 	stw	r21,20(sp)
   197cc:	dd000415 	stw	r20,16(sp)
   197d0:	dc400115 	stw	r17,4(sp)
   197d4:	dc000015 	stw	r16,0(sp)
   197d8:	04800044 	movi	r18,1
   197dc:	24400317 	ldw	r17,12(r4)
   197e0:	24000417 	ldw	r16,16(r4)
   197e4:	24c00117 	ldw	r19,4(r4)
   197e8:	9080422e 	bgeu	r18,r2,198f4 <__pack_d+0x144>
   197ec:	00c00104 	movi	r3,4
   197f0:	10c03c26 	beq	r2,r3,198e4 <__pack_d+0x134>
   197f4:	00c00084 	movi	r3,2
   197f8:	10c01926 	beq	r2,r3,19860 <__pack_d+0xb0>
   197fc:	8c04b03a 	or	r2,r17,r16
   19800:	10001726 	beq	r2,zero,19860 <__pack_d+0xb0>
   19804:	21000217 	ldw	r4,8(r4)
   19808:	00bf0084 	movi	r2,-1022
   1980c:	20804016 	blt	r4,r2,19910 <__pack_d+0x160>
   19810:	0080ffc4 	movi	r2,1023
   19814:	11003316 	blt	r2,r4,198e4 <__pack_d+0x134>
   19818:	88803fcc 	andi	r2,r17,255
   1981c:	00c02004 	movi	r3,128
   19820:	10c02926 	beq	r2,r3,198c8 <__pack_d+0x118>
   19824:	88801fc4 	addi	r2,r17,127
   19828:	1463803a 	cmpltu	r17,r2,r17
   1982c:	8c21883a 	add	r16,r17,r16
   19830:	1023883a 	mov	r17,r2
   19834:	00880034 	movhi	r2,8192
   19838:	10bfffc4 	addi	r2,r2,-1
   1983c:	14001c36 	bltu	r2,r16,198b0 <__pack_d+0x100>
   19840:	2100ffc4 	addi	r4,r4,1023
   19844:	8006963a 	slli	r3,r16,24
   19848:	8804d23a 	srli	r2,r17,8
   1984c:	8020913a 	slli	r16,r16,4
   19850:	2101ffcc 	andi	r4,r4,2047
   19854:	1884b03a 	or	r2,r3,r2
   19858:	8020d33a 	srli	r16,r16,12
   1985c:	00000306 	br	1986c <__pack_d+0xbc>
   19860:	0009883a 	mov	r4,zero
   19864:	0005883a 	mov	r2,zero
   19868:	0021883a 	mov	r16,zero
   1986c:	2008953a 	slli	r4,r4,20
   19870:	982697fa 	slli	r19,r19,31
   19874:	00c00434 	movhi	r3,16
   19878:	18ffffc4 	addi	r3,r3,-1
   1987c:	80e0703a 	and	r16,r16,r3
   19880:	8106b03a 	or	r3,r16,r4
   19884:	1cc6b03a 	or	r3,r3,r19
   19888:	dfc00717 	ldw	ra,28(sp)
   1988c:	dd800617 	ldw	r22,24(sp)
   19890:	dd400517 	ldw	r21,20(sp)
   19894:	dd000417 	ldw	r20,16(sp)
   19898:	dcc00317 	ldw	r19,12(sp)
   1989c:	dc800217 	ldw	r18,8(sp)
   198a0:	dc400117 	ldw	r17,4(sp)
   198a4:	dc000017 	ldw	r16,0(sp)
   198a8:	dec00804 	addi	sp,sp,32
   198ac:	f800283a 	ret
   198b0:	800697fa 	slli	r3,r16,31
   198b4:	8804d07a 	srli	r2,r17,1
   198b8:	21010004 	addi	r4,r4,1024
   198bc:	8020d07a 	srli	r16,r16,1
   198c0:	18a2b03a 	or	r17,r3,r2
   198c4:	003fdf06 	br	19844 <__pack_d+0x94>
   198c8:	88c0400c 	andi	r3,r17,256
   198cc:	183fd926 	beq	r3,zero,19834 <__pack_d+0x84>
   198d0:	8885883a 	add	r2,r17,r2
   198d4:	1463803a 	cmpltu	r17,r2,r17
   198d8:	8c21883a 	add	r16,r17,r16
   198dc:	1023883a 	mov	r17,r2
   198e0:	003fd406 	br	19834 <__pack_d+0x84>
   198e4:	0101ffc4 	movi	r4,2047
   198e8:	0005883a 	mov	r2,zero
   198ec:	0021883a 	mov	r16,zero
   198f0:	003fde06 	br	1986c <__pack_d+0xbc>
   198f4:	84000234 	orhi	r16,r16,8
   198f8:	00c00434 	movhi	r3,16
   198fc:	18ffffc4 	addi	r3,r3,-1
   19900:	8805883a 	mov	r2,r17
   19904:	80e0703a 	and	r16,r16,r3
   19908:	0101ffc4 	movi	r4,2047
   1990c:	003fd706 	br	1986c <__pack_d+0xbc>
   19910:	1129c83a 	sub	r20,r2,r4
   19914:	00800e04 	movi	r2,56
   19918:	15002716 	blt	r2,r20,199b8 <__pack_d+0x208>
   1991c:	800b883a 	mov	r5,r16
   19920:	a00d883a 	mov	r6,r20
   19924:	8809883a 	mov	r4,r17
   19928:	0019ba80 	call	19ba8 <__lshrdi3>
   1992c:	9009883a 	mov	r4,r18
   19930:	000b883a 	mov	r5,zero
   19934:	a00d883a 	mov	r6,r20
   19938:	102d883a 	mov	r22,r2
   1993c:	182b883a 	mov	r21,r3
   19940:	0019bec0 	call	19bec <__ashldi3>
   19944:	1009003a 	cmpeq	r4,r2,zero
   19948:	1907c83a 	sub	r3,r3,r4
   1994c:	10bfffc4 	addi	r2,r2,-1
   19950:	1c20703a 	and	r16,r3,r16
   19954:	1444703a 	and	r2,r2,r17
   19958:	1404b03a 	or	r2,r2,r16
   1995c:	1004c03a 	cmpne	r2,r2,zero
   19960:	1584b03a 	or	r2,r2,r22
   19964:	11003fcc 	andi	r4,r2,255
   19968:	01402004 	movi	r5,128
   1996c:	a807883a 	mov	r3,r21
   19970:	2140131e 	bne	r4,r5,199c0 <__pack_d+0x210>
   19974:	1140400c 	andi	r5,r2,256
   19978:	28000426 	beq	r5,zero,1998c <__pack_d+0x1dc>
   1997c:	1109883a 	add	r4,r2,r4
   19980:	2085803a 	cmpltu	r2,r4,r2
   19984:	1547883a 	add	r3,r2,r21
   19988:	2005883a 	mov	r2,r4
   1998c:	1808963a 	slli	r4,r3,24
   19990:	1004d23a 	srli	r2,r2,8
   19994:	1820913a 	slli	r16,r3,4
   19998:	01440034 	movhi	r5,4096
   1999c:	297fffc4 	addi	r5,r5,-1
   199a0:	2084b03a 	or	r2,r4,r2
   199a4:	8020d33a 	srli	r16,r16,12
   199a8:	01000044 	movi	r4,1
   199ac:	28ffaf36 	bltu	r5,r3,1986c <__pack_d+0xbc>
   199b0:	0009883a 	mov	r4,zero
   199b4:	003fad06 	br	1986c <__pack_d+0xbc>
   199b8:	0005883a 	mov	r2,zero
   199bc:	0007883a 	mov	r3,zero
   199c0:	11001fc4 	addi	r4,r2,127
   199c4:	2085803a 	cmpltu	r2,r4,r2
   199c8:	10c7883a 	add	r3,r2,r3
   199cc:	2005883a 	mov	r2,r4
   199d0:	003fee06 	br	1998c <__pack_d+0x1dc>

000199d4 <__unpack_d>:
   199d4:	21800117 	ldw	r6,4(r4)
   199d8:	20c00017 	ldw	r3,0(r4)
   199dc:	3004d7fa 	srli	r2,r6,31
   199e0:	3008d53a 	srli	r4,r6,20
   199e4:	28800115 	stw	r2,4(r5)
   199e8:	2101ffcc 	andi	r4,r4,2047
   199ec:	00800434 	movhi	r2,16
   199f0:	10bfffc4 	addi	r2,r2,-1
   199f4:	3084703a 	and	r2,r6,r2
   199f8:	20001a1e 	bne	r4,zero,19a64 <__unpack_d+0x90>
   199fc:	1888b03a 	or	r4,r3,r2
   19a00:	20002626 	beq	r4,zero,19a9c <__unpack_d+0xc8>
   19a04:	1808d63a 	srli	r4,r3,24
   19a08:	1004923a 	slli	r2,r2,8
   19a0c:	01bf0084 	movi	r6,-1022
   19a10:	29800215 	stw	r6,8(r5)
   19a14:	2084b03a 	or	r2,r4,r2
   19a18:	010000c4 	movi	r4,3
   19a1c:	29000015 	stw	r4,0(r5)
   19a20:	02040034 	movhi	r8,4096
   19a24:	423fffc4 	addi	r8,r8,-1
   19a28:	1806923a 	slli	r3,r3,8
   19a2c:	40801836 	bltu	r8,r2,19a90 <__unpack_d+0xbc>
   19a30:	013f0044 	movi	r4,-1023
   19a34:	18cd883a 	add	r6,r3,r3
   19a38:	30c7803a 	cmpltu	r3,r6,r3
   19a3c:	1085883a 	add	r2,r2,r2
   19a40:	1885883a 	add	r2,r3,r2
   19a44:	200f883a 	mov	r7,r4
   19a48:	3007883a 	mov	r3,r6
   19a4c:	213fffc4 	addi	r4,r4,-1
   19a50:	40bff82e 	bgeu	r8,r2,19a34 <__unpack_d+0x60>
   19a54:	29c00215 	stw	r7,8(r5)
   19a58:	28c00315 	stw	r3,12(r5)
   19a5c:	28800415 	stw	r2,16(r5)
   19a60:	f800283a 	ret
   19a64:	01c1ffc4 	movi	r7,2047
   19a68:	21c00f26 	beq	r4,r7,19aa8 <__unpack_d+0xd4>
   19a6c:	180cd63a 	srli	r6,r3,24
   19a70:	1004923a 	slli	r2,r2,8
   19a74:	213f0044 	addi	r4,r4,-1023
   19a78:	1806923a 	slli	r3,r3,8
   19a7c:	3084b03a 	or	r2,r6,r2
   19a80:	29000215 	stw	r4,8(r5)
   19a84:	010000c4 	movi	r4,3
   19a88:	10840034 	orhi	r2,r2,4096
   19a8c:	29000015 	stw	r4,0(r5)
   19a90:	28c00315 	stw	r3,12(r5)
   19a94:	28800415 	stw	r2,16(r5)
   19a98:	f800283a 	ret
   19a9c:	00800084 	movi	r2,2
   19aa0:	28800015 	stw	r2,0(r5)
   19aa4:	f800283a 	ret
   19aa8:	1888b03a 	or	r4,r3,r2
   19aac:	20000526 	beq	r4,zero,19ac4 <__unpack_d+0xf0>
   19ab0:	3180022c 	andhi	r6,r6,8
   19ab4:	30000626 	beq	r6,zero,19ad0 <__unpack_d+0xfc>
   19ab8:	01000044 	movi	r4,1
   19abc:	29000015 	stw	r4,0(r5)
   19ac0:	003ff306 	br	19a90 <__unpack_d+0xbc>
   19ac4:	00800104 	movi	r2,4
   19ac8:	28800015 	stw	r2,0(r5)
   19acc:	f800283a 	ret
   19ad0:	28000015 	stw	zero,0(r5)
   19ad4:	003fee06 	br	19a90 <__unpack_d+0xbc>

00019ad8 <__fpcmp_parts_d>:
   19ad8:	20c00017 	ldw	r3,0(r4)
   19adc:	00800044 	movi	r2,1
   19ae0:	10c0142e 	bgeu	r2,r3,19b34 <__fpcmp_parts_d+0x5c>
   19ae4:	29800017 	ldw	r6,0(r5)
   19ae8:	1180122e 	bgeu	r2,r6,19b34 <__fpcmp_parts_d+0x5c>
   19aec:	01c00104 	movi	r7,4
   19af0:	19c02826 	beq	r3,r7,19b94 <__fpcmp_parts_d+0xbc>
   19af4:	31c00926 	beq	r6,r7,19b1c <__fpcmp_parts_d+0x44>
   19af8:	01c00084 	movi	r7,2
   19afc:	19c00626 	beq	r3,r7,19b18 <__fpcmp_parts_d+0x40>
   19b00:	31c00a26 	beq	r6,r7,19b2c <__fpcmp_parts_d+0x54>
   19b04:	20c00117 	ldw	r3,4(r4)
   19b08:	29800117 	ldw	r6,4(r5)
   19b0c:	19800b26 	beq	r3,r6,19b3c <__fpcmp_parts_d+0x64>
   19b10:	1800041e 	bne	r3,zero,19b24 <__fpcmp_parts_d+0x4c>
   19b14:	f800283a 	ret
   19b18:	30c01a26 	beq	r6,r3,19b84 <__fpcmp_parts_d+0xac>
   19b1c:	28800117 	ldw	r2,4(r5)
   19b20:	1000041e 	bne	r2,zero,19b34 <__fpcmp_parts_d+0x5c>
   19b24:	00bfffc4 	movi	r2,-1
   19b28:	f800283a 	ret
   19b2c:	20800117 	ldw	r2,4(r4)
   19b30:	103ffc1e 	bne	r2,zero,19b24 <__fpcmp_parts_d+0x4c>
   19b34:	00800044 	movi	r2,1
   19b38:	f800283a 	ret
   19b3c:	21c00217 	ldw	r7,8(r4)
   19b40:	29800217 	ldw	r6,8(r5)
   19b44:	31c0020e 	bge	r6,r7,19b50 <__fpcmp_parts_d+0x78>
   19b48:	183ff61e 	bne	r3,zero,19b24 <__fpcmp_parts_d+0x4c>
   19b4c:	f800283a 	ret
   19b50:	39800a16 	blt	r7,r6,19b7c <__fpcmp_parts_d+0xa4>
   19b54:	20800417 	ldw	r2,16(r4)
   19b58:	29800417 	ldw	r6,16(r5)
   19b5c:	21c00317 	ldw	r7,12(r4)
   19b60:	29000317 	ldw	r4,12(r5)
   19b64:	30800936 	bltu	r6,r2,19b8c <__fpcmp_parts_d+0xb4>
   19b68:	1180011e 	bne	r2,r6,19b70 <__fpcmp_parts_d+0x98>
   19b6c:	21c00736 	bltu	r4,r7,19b8c <__fpcmp_parts_d+0xb4>
   19b70:	11800236 	bltu	r2,r6,19b7c <__fpcmp_parts_d+0xa4>
   19b74:	3080031e 	bne	r6,r2,19b84 <__fpcmp_parts_d+0xac>
   19b78:	3900022e 	bgeu	r7,r4,19b84 <__fpcmp_parts_d+0xac>
   19b7c:	183fe926 	beq	r3,zero,19b24 <__fpcmp_parts_d+0x4c>
   19b80:	003fec06 	br	19b34 <__fpcmp_parts_d+0x5c>
   19b84:	0005883a 	mov	r2,zero
   19b88:	f800283a 	ret
   19b8c:	183fe926 	beq	r3,zero,19b34 <__fpcmp_parts_d+0x5c>
   19b90:	003fe406 	br	19b24 <__fpcmp_parts_d+0x4c>
   19b94:	30ffe51e 	bne	r6,r3,19b2c <__fpcmp_parts_d+0x54>
   19b98:	28c00117 	ldw	r3,4(r5)
   19b9c:	20800117 	ldw	r2,4(r4)
   19ba0:	1885c83a 	sub	r2,r3,r2
   19ba4:	f800283a 	ret

00019ba8 <__lshrdi3>:
   19ba8:	2005883a 	mov	r2,r4
   19bac:	2807883a 	mov	r3,r5
   19bb0:	30000826 	beq	r6,zero,19bd4 <__lshrdi3+0x2c>
   19bb4:	01000804 	movi	r4,32
   19bb8:	2189c83a 	sub	r4,r4,r6
   19bbc:	0100060e 	bge	zero,r4,19bd8 <__lshrdi3+0x30>
   19bc0:	1184d83a 	srl	r2,r2,r6
   19bc4:	2908983a 	sll	r4,r5,r4
   19bc8:	298cd83a 	srl	r6,r5,r6
   19bcc:	2084b03a 	or	r2,r4,r2
   19bd0:	3007883a 	mov	r3,r6
   19bd4:	f800283a 	ret
   19bd8:	0105c83a 	sub	r2,zero,r4
   19bdc:	000d883a 	mov	r6,zero
   19be0:	2884d83a 	srl	r2,r5,r2
   19be4:	3007883a 	mov	r3,r6
   19be8:	003ffa06 	br	19bd4 <__lshrdi3+0x2c>

00019bec <__ashldi3>:
   19bec:	2005883a 	mov	r2,r4
   19bf0:	2807883a 	mov	r3,r5
   19bf4:	30000826 	beq	r6,zero,19c18 <__ashldi3+0x2c>
   19bf8:	01000804 	movi	r4,32
   19bfc:	2189c83a 	sub	r4,r4,r6
   19c00:	0100060e 	bge	zero,r4,19c1c <__ashldi3+0x30>
   19c04:	1108d83a 	srl	r4,r2,r4
   19c08:	2986983a 	sll	r3,r5,r6
   19c0c:	118c983a 	sll	r6,r2,r6
   19c10:	20c6b03a 	or	r3,r4,r3
   19c14:	3005883a 	mov	r2,r6
   19c18:	f800283a 	ret
   19c1c:	0107c83a 	sub	r3,zero,r4
   19c20:	000d883a 	mov	r6,zero
   19c24:	10c6983a 	sll	r3,r2,r3
   19c28:	3005883a 	mov	r2,r6
   19c2c:	003ffa06 	br	19c18 <__ashldi3+0x2c>

00019c30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19c30:	defffe04 	addi	sp,sp,-8
   19c34:	dfc00115 	stw	ra,4(sp)
   19c38:	df000015 	stw	fp,0(sp)
   19c3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19c40:	008000f4 	movhi	r2,3
   19c44:	10a7a304 	addi	r2,r2,-24948
   19c48:	10800017 	ldw	r2,0(r2)
   19c4c:	10000526 	beq	r2,zero,19c64 <alt_get_errno+0x34>
   19c50:	008000f4 	movhi	r2,3
   19c54:	10a7a304 	addi	r2,r2,-24948
   19c58:	10800017 	ldw	r2,0(r2)
   19c5c:	103ee83a 	callr	r2
   19c60:	00000206 	br	19c6c <alt_get_errno+0x3c>
   19c64:	008000f4 	movhi	r2,3
   19c68:	10a7b304 	addi	r2,r2,-24884
}
   19c6c:	e037883a 	mov	sp,fp
   19c70:	dfc00117 	ldw	ra,4(sp)
   19c74:	df000017 	ldw	fp,0(sp)
   19c78:	dec00204 	addi	sp,sp,8
   19c7c:	f800283a 	ret

00019c80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19c80:	defffb04 	addi	sp,sp,-20
   19c84:	dfc00415 	stw	ra,16(sp)
   19c88:	df000315 	stw	fp,12(sp)
   19c8c:	df000304 	addi	fp,sp,12
   19c90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19c94:	e0bfff17 	ldw	r2,-4(fp)
   19c98:	10000716 	blt	r2,zero,19cb8 <close+0x38>
   19c9c:	e13fff17 	ldw	r4,-4(fp)
   19ca0:	01400304 	movi	r5,12
   19ca4:	00106640 	call	10664 <__mulsi3>
   19ca8:	00c000f4 	movhi	r3,3
   19cac:	18e32104 	addi	r3,r3,-29564
   19cb0:	10c5883a 	add	r2,r2,r3
   19cb4:	00000106 	br	19cbc <close+0x3c>
   19cb8:	0005883a 	mov	r2,zero
   19cbc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   19cc0:	e0bffd17 	ldw	r2,-12(fp)
   19cc4:	10001826 	beq	r2,zero,19d28 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19cc8:	e0bffd17 	ldw	r2,-12(fp)
   19ccc:	10800017 	ldw	r2,0(r2)
   19cd0:	10800417 	ldw	r2,16(r2)
   19cd4:	10000626 	beq	r2,zero,19cf0 <close+0x70>
   19cd8:	e0bffd17 	ldw	r2,-12(fp)
   19cdc:	10800017 	ldw	r2,0(r2)
   19ce0:	10800417 	ldw	r2,16(r2)
   19ce4:	e13ffd17 	ldw	r4,-12(fp)
   19ce8:	103ee83a 	callr	r2
   19cec:	00000106 	br	19cf4 <close+0x74>
   19cf0:	0005883a 	mov	r2,zero
   19cf4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19cf8:	e13fff17 	ldw	r4,-4(fp)
   19cfc:	001a3780 	call	1a378 <alt_release_fd>
    if (rval < 0)
   19d00:	e0bffe17 	ldw	r2,-8(fp)
   19d04:	1000060e 	bge	r2,zero,19d20 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   19d08:	0019c300 	call	19c30 <alt_get_errno>
   19d0c:	e0fffe17 	ldw	r3,-8(fp)
   19d10:	00c7c83a 	sub	r3,zero,r3
   19d14:	10c00015 	stw	r3,0(r2)
      return -1;
   19d18:	00bfffc4 	movi	r2,-1
   19d1c:	00000606 	br	19d38 <close+0xb8>
    }
    return 0;
   19d20:	0005883a 	mov	r2,zero
   19d24:	00000406 	br	19d38 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19d28:	0019c300 	call	19c30 <alt_get_errno>
   19d2c:	00c01444 	movi	r3,81
   19d30:	10c00015 	stw	r3,0(r2)
    return -1;
   19d34:	00bfffc4 	movi	r2,-1
  }
}
   19d38:	e037883a 	mov	sp,fp
   19d3c:	dfc00117 	ldw	ra,4(sp)
   19d40:	df000017 	ldw	fp,0(sp)
   19d44:	dec00204 	addi	sp,sp,8
   19d48:	f800283a 	ret

00019d4c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19d4c:	defffc04 	addi	sp,sp,-16
   19d50:	df000315 	stw	fp,12(sp)
   19d54:	df000304 	addi	fp,sp,12
   19d58:	e13ffd15 	stw	r4,-12(fp)
   19d5c:	e17ffe15 	stw	r5,-8(fp)
   19d60:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19d64:	e0bfff17 	ldw	r2,-4(fp)
}
   19d68:	e037883a 	mov	sp,fp
   19d6c:	df000017 	ldw	fp,0(sp)
   19d70:	dec00104 	addi	sp,sp,4
   19d74:	f800283a 	ret

00019d78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19d78:	defffe04 	addi	sp,sp,-8
   19d7c:	dfc00115 	stw	ra,4(sp)
   19d80:	df000015 	stw	fp,0(sp)
   19d84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19d88:	008000f4 	movhi	r2,3
   19d8c:	10a7a304 	addi	r2,r2,-24948
   19d90:	10800017 	ldw	r2,0(r2)
   19d94:	10000526 	beq	r2,zero,19dac <alt_get_errno+0x34>
   19d98:	008000f4 	movhi	r2,3
   19d9c:	10a7a304 	addi	r2,r2,-24948
   19da0:	10800017 	ldw	r2,0(r2)
   19da4:	103ee83a 	callr	r2
   19da8:	00000206 	br	19db4 <alt_get_errno+0x3c>
   19dac:	008000f4 	movhi	r2,3
   19db0:	10a7b304 	addi	r2,r2,-24884
}
   19db4:	e037883a 	mov	sp,fp
   19db8:	dfc00117 	ldw	ra,4(sp)
   19dbc:	df000017 	ldw	fp,0(sp)
   19dc0:	dec00204 	addi	sp,sp,8
   19dc4:	f800283a 	ret

00019dc8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19dc8:	defffb04 	addi	sp,sp,-20
   19dcc:	dfc00415 	stw	ra,16(sp)
   19dd0:	df000315 	stw	fp,12(sp)
   19dd4:	df000304 	addi	fp,sp,12
   19dd8:	e13ffe15 	stw	r4,-8(fp)
   19ddc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19de0:	e0bffe17 	ldw	r2,-8(fp)
   19de4:	10000716 	blt	r2,zero,19e04 <fstat+0x3c>
   19de8:	e13ffe17 	ldw	r4,-8(fp)
   19dec:	01400304 	movi	r5,12
   19df0:	00106640 	call	10664 <__mulsi3>
   19df4:	00c000f4 	movhi	r3,3
   19df8:	18e32104 	addi	r3,r3,-29564
   19dfc:	10c5883a 	add	r2,r2,r3
   19e00:	00000106 	br	19e08 <fstat+0x40>
   19e04:	0005883a 	mov	r2,zero
   19e08:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   19e0c:	e0bffd17 	ldw	r2,-12(fp)
   19e10:	10001026 	beq	r2,zero,19e54 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   19e14:	e0bffd17 	ldw	r2,-12(fp)
   19e18:	10800017 	ldw	r2,0(r2)
   19e1c:	10800817 	ldw	r2,32(r2)
   19e20:	10000726 	beq	r2,zero,19e40 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   19e24:	e0bffd17 	ldw	r2,-12(fp)
   19e28:	10800017 	ldw	r2,0(r2)
   19e2c:	10800817 	ldw	r2,32(r2)
   19e30:	e13ffd17 	ldw	r4,-12(fp)
   19e34:	e17fff17 	ldw	r5,-4(fp)
   19e38:	103ee83a 	callr	r2
   19e3c:	00000906 	br	19e64 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19e40:	e0bfff17 	ldw	r2,-4(fp)
   19e44:	00c80004 	movi	r3,8192
   19e48:	10c00115 	stw	r3,4(r2)
      return 0;
   19e4c:	0005883a 	mov	r2,zero
   19e50:	00000406 	br	19e64 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19e54:	0019d780 	call	19d78 <alt_get_errno>
   19e58:	00c01444 	movi	r3,81
   19e5c:	10c00015 	stw	r3,0(r2)
    return -1;
   19e60:	00bfffc4 	movi	r2,-1
  }
}
   19e64:	e037883a 	mov	sp,fp
   19e68:	dfc00117 	ldw	ra,4(sp)
   19e6c:	df000017 	ldw	fp,0(sp)
   19e70:	dec00204 	addi	sp,sp,8
   19e74:	f800283a 	ret

00019e78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19e78:	defffe04 	addi	sp,sp,-8
   19e7c:	dfc00115 	stw	ra,4(sp)
   19e80:	df000015 	stw	fp,0(sp)
   19e84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19e88:	008000f4 	movhi	r2,3
   19e8c:	10a7a304 	addi	r2,r2,-24948
   19e90:	10800017 	ldw	r2,0(r2)
   19e94:	10000526 	beq	r2,zero,19eac <alt_get_errno+0x34>
   19e98:	008000f4 	movhi	r2,3
   19e9c:	10a7a304 	addi	r2,r2,-24948
   19ea0:	10800017 	ldw	r2,0(r2)
   19ea4:	103ee83a 	callr	r2
   19ea8:	00000206 	br	19eb4 <alt_get_errno+0x3c>
   19eac:	008000f4 	movhi	r2,3
   19eb0:	10a7b304 	addi	r2,r2,-24884
}
   19eb4:	e037883a 	mov	sp,fp
   19eb8:	dfc00117 	ldw	ra,4(sp)
   19ebc:	df000017 	ldw	fp,0(sp)
   19ec0:	dec00204 	addi	sp,sp,8
   19ec4:	f800283a 	ret

00019ec8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   19ec8:	deffed04 	addi	sp,sp,-76
   19ecc:	dfc01215 	stw	ra,72(sp)
   19ed0:	df001115 	stw	fp,68(sp)
   19ed4:	df001104 	addi	fp,sp,68
   19ed8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19edc:	e0bfff17 	ldw	r2,-4(fp)
   19ee0:	10000716 	blt	r2,zero,19f00 <isatty+0x38>
   19ee4:	e13fff17 	ldw	r4,-4(fp)
   19ee8:	01400304 	movi	r5,12
   19eec:	00106640 	call	10664 <__mulsi3>
   19ef0:	00c000f4 	movhi	r3,3
   19ef4:	18e32104 	addi	r3,r3,-29564
   19ef8:	10c5883a 	add	r2,r2,r3
   19efc:	00000106 	br	19f04 <isatty+0x3c>
   19f00:	0005883a 	mov	r2,zero
   19f04:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   19f08:	e0bfef17 	ldw	r2,-68(fp)
   19f0c:	10000e26 	beq	r2,zero,19f48 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   19f10:	e0bfef17 	ldw	r2,-68(fp)
   19f14:	10800017 	ldw	r2,0(r2)
   19f18:	10800817 	ldw	r2,32(r2)
   19f1c:	1000021e 	bne	r2,zero,19f28 <isatty+0x60>
    {
      return 1;
   19f20:	00800044 	movi	r2,1
   19f24:	00000c06 	br	19f58 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   19f28:	e0bff004 	addi	r2,fp,-64
   19f2c:	e13fff17 	ldw	r4,-4(fp)
   19f30:	100b883a 	mov	r5,r2
   19f34:	0019dc80 	call	19dc8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   19f38:	e0bff117 	ldw	r2,-60(fp)
   19f3c:	10880020 	cmpeqi	r2,r2,8192
   19f40:	10803fcc 	andi	r2,r2,255
   19f44:	00000406 	br	19f58 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19f48:	0019e780 	call	19e78 <alt_get_errno>
   19f4c:	00c01444 	movi	r3,81
   19f50:	10c00015 	stw	r3,0(r2)
    return 0;
   19f54:	0005883a 	mov	r2,zero
  }
}
   19f58:	e037883a 	mov	sp,fp
   19f5c:	dfc00117 	ldw	ra,4(sp)
   19f60:	df000017 	ldw	fp,0(sp)
   19f64:	dec00204 	addi	sp,sp,8
   19f68:	f800283a 	ret

00019f6c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   19f6c:	defffc04 	addi	sp,sp,-16
   19f70:	df000315 	stw	fp,12(sp)
   19f74:	df000304 	addi	fp,sp,12
   19f78:	e13ffd15 	stw	r4,-12(fp)
   19f7c:	e17ffe15 	stw	r5,-8(fp)
   19f80:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   19f84:	e0fffe17 	ldw	r3,-8(fp)
   19f88:	e0bffd17 	ldw	r2,-12(fp)
   19f8c:	18800e26 	beq	r3,r2,19fc8 <alt_load_section+0x5c>
  {
    while( to != end )
   19f90:	00000a06 	br	19fbc <alt_load_section+0x50>
    {
      *to++ = *from++;
   19f94:	e0bffd17 	ldw	r2,-12(fp)
   19f98:	10c00017 	ldw	r3,0(r2)
   19f9c:	e0bffe17 	ldw	r2,-8(fp)
   19fa0:	10c00015 	stw	r3,0(r2)
   19fa4:	e0bffe17 	ldw	r2,-8(fp)
   19fa8:	10800104 	addi	r2,r2,4
   19fac:	e0bffe15 	stw	r2,-8(fp)
   19fb0:	e0bffd17 	ldw	r2,-12(fp)
   19fb4:	10800104 	addi	r2,r2,4
   19fb8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   19fbc:	e0fffe17 	ldw	r3,-8(fp)
   19fc0:	e0bfff17 	ldw	r2,-4(fp)
   19fc4:	18bff31e 	bne	r3,r2,19f94 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   19fc8:	e037883a 	mov	sp,fp
   19fcc:	df000017 	ldw	fp,0(sp)
   19fd0:	dec00104 	addi	sp,sp,4
   19fd4:	f800283a 	ret

00019fd8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   19fd8:	defffe04 	addi	sp,sp,-8
   19fdc:	dfc00115 	stw	ra,4(sp)
   19fe0:	df000015 	stw	fp,0(sp)
   19fe4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   19fe8:	010000b4 	movhi	r4,2
   19fec:	2132ba04 	addi	r4,r4,-13592
   19ff0:	014000f4 	movhi	r5,3
   19ff4:	29611204 	addi	r5,r5,-31672
   19ff8:	018000f4 	movhi	r6,3
   19ffc:	31a7a804 	addi	r6,r6,-24928
   1a000:	0019f6c0 	call	19f6c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a004:	01000074 	movhi	r4,1
   1a008:	21000804 	addi	r4,r4,32
   1a00c:	01400074 	movhi	r5,1
   1a010:	29400804 	addi	r5,r5,32
   1a014:	01800074 	movhi	r6,1
   1a018:	31806e04 	addi	r6,r6,440
   1a01c:	0019f6c0 	call	19f6c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a020:	010000f4 	movhi	r4,3
   1a024:	21200004 	addi	r4,r4,-32768
   1a028:	014000f4 	movhi	r5,3
   1a02c:	29600004 	addi	r5,r5,-32768
   1a030:	018000f4 	movhi	r6,3
   1a034:	31a11204 	addi	r6,r6,-31672
   1a038:	0019f6c0 	call	19f6c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a03c:	001b9a80 	call	1b9a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a040:	001bb6c0 	call	1bb6c <alt_icache_flush_all>
}
   1a044:	e037883a 	mov	sp,fp
   1a048:	dfc00117 	ldw	ra,4(sp)
   1a04c:	df000017 	ldw	fp,0(sp)
   1a050:	dec00204 	addi	sp,sp,8
   1a054:	f800283a 	ret

0001a058 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a058:	defffe04 	addi	sp,sp,-8
   1a05c:	dfc00115 	stw	ra,4(sp)
   1a060:	df000015 	stw	fp,0(sp)
   1a064:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a068:	008000f4 	movhi	r2,3
   1a06c:	10a7a304 	addi	r2,r2,-24948
   1a070:	10800017 	ldw	r2,0(r2)
   1a074:	10000526 	beq	r2,zero,1a08c <alt_get_errno+0x34>
   1a078:	008000f4 	movhi	r2,3
   1a07c:	10a7a304 	addi	r2,r2,-24948
   1a080:	10800017 	ldw	r2,0(r2)
   1a084:	103ee83a 	callr	r2
   1a088:	00000206 	br	1a094 <alt_get_errno+0x3c>
   1a08c:	008000f4 	movhi	r2,3
   1a090:	10a7b304 	addi	r2,r2,-24884
}
   1a094:	e037883a 	mov	sp,fp
   1a098:	dfc00117 	ldw	ra,4(sp)
   1a09c:	df000017 	ldw	fp,0(sp)
   1a0a0:	dec00204 	addi	sp,sp,8
   1a0a4:	f800283a 	ret

0001a0a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a0a8:	defff904 	addi	sp,sp,-28
   1a0ac:	dfc00615 	stw	ra,24(sp)
   1a0b0:	df000515 	stw	fp,20(sp)
   1a0b4:	df000504 	addi	fp,sp,20
   1a0b8:	e13ffd15 	stw	r4,-12(fp)
   1a0bc:	e17ffe15 	stw	r5,-8(fp)
   1a0c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a0c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a0c8:	e0bffd17 	ldw	r2,-12(fp)
   1a0cc:	10000716 	blt	r2,zero,1a0ec <lseek+0x44>
   1a0d0:	e13ffd17 	ldw	r4,-12(fp)
   1a0d4:	01400304 	movi	r5,12
   1a0d8:	00106640 	call	10664 <__mulsi3>
   1a0dc:	00c000f4 	movhi	r3,3
   1a0e0:	18e32104 	addi	r3,r3,-29564
   1a0e4:	10c5883a 	add	r2,r2,r3
   1a0e8:	00000106 	br	1a0f0 <lseek+0x48>
   1a0ec:	0005883a 	mov	r2,zero
   1a0f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1a0f4:	e0bffc17 	ldw	r2,-16(fp)
   1a0f8:	10001026 	beq	r2,zero,1a13c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a0fc:	e0bffc17 	ldw	r2,-16(fp)
   1a100:	10800017 	ldw	r2,0(r2)
   1a104:	10800717 	ldw	r2,28(r2)
   1a108:	10000926 	beq	r2,zero,1a130 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a10c:	e0bffc17 	ldw	r2,-16(fp)
   1a110:	10800017 	ldw	r2,0(r2)
   1a114:	10800717 	ldw	r2,28(r2)
   1a118:	e13ffc17 	ldw	r4,-16(fp)
   1a11c:	e17ffe17 	ldw	r5,-8(fp)
   1a120:	e1bfff17 	ldw	r6,-4(fp)
   1a124:	103ee83a 	callr	r2
   1a128:	e0bffb15 	stw	r2,-20(fp)
   1a12c:	00000506 	br	1a144 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a130:	00bfde84 	movi	r2,-134
   1a134:	e0bffb15 	stw	r2,-20(fp)
   1a138:	00000206 	br	1a144 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a13c:	00bfebc4 	movi	r2,-81
   1a140:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1a144:	e0bffb17 	ldw	r2,-20(fp)
   1a148:	1000060e 	bge	r2,zero,1a164 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1a14c:	001a0580 	call	1a058 <alt_get_errno>
   1a150:	e0fffb17 	ldw	r3,-20(fp)
   1a154:	00c7c83a 	sub	r3,zero,r3
   1a158:	10c00015 	stw	r3,0(r2)
    rc = -1;
   1a15c:	00bfffc4 	movi	r2,-1
   1a160:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1a164:	e0bffb17 	ldw	r2,-20(fp)
}
   1a168:	e037883a 	mov	sp,fp
   1a16c:	dfc00117 	ldw	ra,4(sp)
   1a170:	df000017 	ldw	fp,0(sp)
   1a174:	dec00204 	addi	sp,sp,8
   1a178:	f800283a 	ret

0001a17c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a17c:	defffd04 	addi	sp,sp,-12
   1a180:	dfc00215 	stw	ra,8(sp)
   1a184:	df000115 	stw	fp,4(sp)
   1a188:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a18c:	0009883a 	mov	r4,zero
   1a190:	001a6200 	call	1a620 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1a194:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a198:	001a6540 	call	1a654 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a19c:	010000f4 	movhi	r4,3
   1a1a0:	21210804 	addi	r4,r4,-31712
   1a1a4:	014000f4 	movhi	r5,3
   1a1a8:	29610804 	addi	r5,r5,-31712
   1a1ac:	018000f4 	movhi	r6,3
   1a1b0:	31a10804 	addi	r6,r6,-31712
   1a1b4:	001bf440 	call	1bf44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a1b8:	001bab40 	call	1bab4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a1bc:	010000b4 	movhi	r4,2
   1a1c0:	212ec404 	addi	r4,r4,-17648
   1a1c4:	001c7140 	call	1c714 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a1c8:	d1201b17 	ldw	r4,-32660(gp)
   1a1cc:	d0e01c17 	ldw	r3,-32656(gp)
   1a1d0:	d0a01d17 	ldw	r2,-32652(gp)
   1a1d4:	180b883a 	mov	r5,r3
   1a1d8:	100d883a 	mov	r6,r2
   1a1dc:	00103e00 	call	103e0 <main>
   1a1e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a1e4:	01000044 	movi	r4,1
   1a1e8:	0019c800 	call	19c80 <close>
  exit (result);
   1a1ec:	e13fff17 	ldw	r4,-4(fp)
   1a1f0:	001c7280 	call	1c728 <exit>

0001a1f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a1f4:	defffe04 	addi	sp,sp,-8
   1a1f8:	df000115 	stw	fp,4(sp)
   1a1fc:	df000104 	addi	fp,sp,4
   1a200:	e13fff15 	stw	r4,-4(fp)
}
   1a204:	e037883a 	mov	sp,fp
   1a208:	df000017 	ldw	fp,0(sp)
   1a20c:	dec00104 	addi	sp,sp,4
   1a210:	f800283a 	ret

0001a214 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a214:	defffe04 	addi	sp,sp,-8
   1a218:	df000115 	stw	fp,4(sp)
   1a21c:	df000104 	addi	fp,sp,4
   1a220:	e13fff15 	stw	r4,-4(fp)
}
   1a224:	e037883a 	mov	sp,fp
   1a228:	df000017 	ldw	fp,0(sp)
   1a22c:	dec00104 	addi	sp,sp,4
   1a230:	f800283a 	ret

0001a234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a234:	defffe04 	addi	sp,sp,-8
   1a238:	dfc00115 	stw	ra,4(sp)
   1a23c:	df000015 	stw	fp,0(sp)
   1a240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a244:	008000f4 	movhi	r2,3
   1a248:	10a7a304 	addi	r2,r2,-24948
   1a24c:	10800017 	ldw	r2,0(r2)
   1a250:	10000526 	beq	r2,zero,1a268 <alt_get_errno+0x34>
   1a254:	008000f4 	movhi	r2,3
   1a258:	10a7a304 	addi	r2,r2,-24948
   1a25c:	10800017 	ldw	r2,0(r2)
   1a260:	103ee83a 	callr	r2
   1a264:	00000206 	br	1a270 <alt_get_errno+0x3c>
   1a268:	008000f4 	movhi	r2,3
   1a26c:	10a7b304 	addi	r2,r2,-24884
}
   1a270:	e037883a 	mov	sp,fp
   1a274:	dfc00117 	ldw	ra,4(sp)
   1a278:	df000017 	ldw	fp,0(sp)
   1a27c:	dec00204 	addi	sp,sp,8
   1a280:	f800283a 	ret

0001a284 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a284:	defff904 	addi	sp,sp,-28
   1a288:	dfc00615 	stw	ra,24(sp)
   1a28c:	df000515 	stw	fp,20(sp)
   1a290:	df000504 	addi	fp,sp,20
   1a294:	e13ffd15 	stw	r4,-12(fp)
   1a298:	e17ffe15 	stw	r5,-8(fp)
   1a29c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a2a0:	e0bffd17 	ldw	r2,-12(fp)
   1a2a4:	10000716 	blt	r2,zero,1a2c4 <read+0x40>
   1a2a8:	e13ffd17 	ldw	r4,-12(fp)
   1a2ac:	01400304 	movi	r5,12
   1a2b0:	00106640 	call	10664 <__mulsi3>
   1a2b4:	00c000f4 	movhi	r3,3
   1a2b8:	18e32104 	addi	r3,r3,-29564
   1a2bc:	10c5883a 	add	r2,r2,r3
   1a2c0:	00000106 	br	1a2c8 <read+0x44>
   1a2c4:	0005883a 	mov	r2,zero
   1a2c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a2cc:	e0bffb17 	ldw	r2,-20(fp)
   1a2d0:	10002026 	beq	r2,zero,1a354 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a2d4:	e0bffb17 	ldw	r2,-20(fp)
   1a2d8:	10800217 	ldw	r2,8(r2)
   1a2dc:	108000cc 	andi	r2,r2,3
   1a2e0:	10800060 	cmpeqi	r2,r2,1
   1a2e4:	1000171e 	bne	r2,zero,1a344 <read+0xc0>
        (fd->dev->read))
   1a2e8:	e0bffb17 	ldw	r2,-20(fp)
   1a2ec:	10800017 	ldw	r2,0(r2)
   1a2f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a2f4:	10001326 	beq	r2,zero,1a344 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a2f8:	e0bffb17 	ldw	r2,-20(fp)
   1a2fc:	10800017 	ldw	r2,0(r2)
   1a300:	10c00517 	ldw	r3,20(r2)
   1a304:	e0bfff17 	ldw	r2,-4(fp)
   1a308:	e13ffb17 	ldw	r4,-20(fp)
   1a30c:	e17ffe17 	ldw	r5,-8(fp)
   1a310:	100d883a 	mov	r6,r2
   1a314:	183ee83a 	callr	r3
   1a318:	e0bffc15 	stw	r2,-16(fp)
   1a31c:	e0bffc17 	ldw	r2,-16(fp)
   1a320:	1000060e 	bge	r2,zero,1a33c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1a324:	001a2340 	call	1a234 <alt_get_errno>
   1a328:	e0fffc17 	ldw	r3,-16(fp)
   1a32c:	00c7c83a 	sub	r3,zero,r3
   1a330:	10c00015 	stw	r3,0(r2)
          return -1;
   1a334:	00bfffc4 	movi	r2,-1
   1a338:	00000a06 	br	1a364 <read+0xe0>
        }
        return rval;
   1a33c:	e0bffc17 	ldw	r2,-16(fp)
   1a340:	00000806 	br	1a364 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a344:	001a2340 	call	1a234 <alt_get_errno>
   1a348:	00c00344 	movi	r3,13
   1a34c:	10c00015 	stw	r3,0(r2)
   1a350:	00000306 	br	1a360 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a354:	001a2340 	call	1a234 <alt_get_errno>
   1a358:	00c01444 	movi	r3,81
   1a35c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a360:	00bfffc4 	movi	r2,-1
}
   1a364:	e037883a 	mov	sp,fp
   1a368:	dfc00117 	ldw	ra,4(sp)
   1a36c:	df000017 	ldw	fp,0(sp)
   1a370:	dec00204 	addi	sp,sp,8
   1a374:	f800283a 	ret

0001a378 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a378:	defffc04 	addi	sp,sp,-16
   1a37c:	dfc00315 	stw	ra,12(sp)
   1a380:	df000215 	stw	fp,8(sp)
   1a384:	dc000115 	stw	r16,4(sp)
   1a388:	df000104 	addi	fp,sp,4
   1a38c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a390:	e0bfff17 	ldw	r2,-4(fp)
   1a394:	108000d0 	cmplti	r2,r2,3
   1a398:	1000111e 	bne	r2,zero,1a3e0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a39c:	040000f4 	movhi	r16,3
   1a3a0:	84232104 	addi	r16,r16,-29564
   1a3a4:	e0bfff17 	ldw	r2,-4(fp)
   1a3a8:	1009883a 	mov	r4,r2
   1a3ac:	01400304 	movi	r5,12
   1a3b0:	00106640 	call	10664 <__mulsi3>
   1a3b4:	8085883a 	add	r2,r16,r2
   1a3b8:	10800204 	addi	r2,r2,8
   1a3bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a3c0:	040000f4 	movhi	r16,3
   1a3c4:	84232104 	addi	r16,r16,-29564
   1a3c8:	e0bfff17 	ldw	r2,-4(fp)
   1a3cc:	1009883a 	mov	r4,r2
   1a3d0:	01400304 	movi	r5,12
   1a3d4:	00106640 	call	10664 <__mulsi3>
   1a3d8:	8085883a 	add	r2,r16,r2
   1a3dc:	10000015 	stw	zero,0(r2)
  }
}
   1a3e0:	e037883a 	mov	sp,fp
   1a3e4:	dfc00217 	ldw	ra,8(sp)
   1a3e8:	df000117 	ldw	fp,4(sp)
   1a3ec:	dc000017 	ldw	r16,0(sp)
   1a3f0:	dec00304 	addi	sp,sp,12
   1a3f4:	f800283a 	ret

0001a3f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a3f8:	defff904 	addi	sp,sp,-28
   1a3fc:	df000615 	stw	fp,24(sp)
   1a400:	df000604 	addi	fp,sp,24
   1a404:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a408:	0005303a 	rdctl	r2,status
   1a40c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a410:	e0fffc17 	ldw	r3,-16(fp)
   1a414:	00bfff84 	movi	r2,-2
   1a418:	1884703a 	and	r2,r3,r2
   1a41c:	1001703a 	wrctl	status,r2
  
  return context;
   1a420:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a424:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a428:	d0a00b17 	ldw	r2,-32724(gp)
   1a42c:	10c000c4 	addi	r3,r2,3
   1a430:	00bfff04 	movi	r2,-4
   1a434:	1884703a 	and	r2,r3,r2
   1a438:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a43c:	d0e00b17 	ldw	r3,-32724(gp)
   1a440:	e0bfff17 	ldw	r2,-4(fp)
   1a444:	1885883a 	add	r2,r3,r2
   1a448:	00c000f4 	movhi	r3,3
   1a44c:	18c00004 	addi	r3,r3,0
   1a450:	1880062e 	bgeu	r3,r2,1a46c <sbrk+0x74>
   1a454:	e0bffa17 	ldw	r2,-24(fp)
   1a458:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a45c:	e0bffd17 	ldw	r2,-12(fp)
   1a460:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a464:	00bfffc4 	movi	r2,-1
   1a468:	00000b06 	br	1a498 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1a46c:	d0a00b17 	ldw	r2,-32724(gp)
   1a470:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1a474:	d0e00b17 	ldw	r3,-32724(gp)
   1a478:	e0bfff17 	ldw	r2,-4(fp)
   1a47c:	1885883a 	add	r2,r3,r2
   1a480:	d0a00b15 	stw	r2,-32724(gp)
   1a484:	e0bffa17 	ldw	r2,-24(fp)
   1a488:	e0bffe15 	stw	r2,-8(fp)
   1a48c:	e0bffe17 	ldw	r2,-8(fp)
   1a490:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a494:	e0bffb17 	ldw	r2,-20(fp)
} 
   1a498:	e037883a 	mov	sp,fp
   1a49c:	df000017 	ldw	fp,0(sp)
   1a4a0:	dec00104 	addi	sp,sp,4
   1a4a4:	f800283a 	ret

0001a4a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a4a8:	defffe04 	addi	sp,sp,-8
   1a4ac:	dfc00115 	stw	ra,4(sp)
   1a4b0:	df000015 	stw	fp,0(sp)
   1a4b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a4b8:	008000f4 	movhi	r2,3
   1a4bc:	10a7a304 	addi	r2,r2,-24948
   1a4c0:	10800017 	ldw	r2,0(r2)
   1a4c4:	10000526 	beq	r2,zero,1a4dc <alt_get_errno+0x34>
   1a4c8:	008000f4 	movhi	r2,3
   1a4cc:	10a7a304 	addi	r2,r2,-24948
   1a4d0:	10800017 	ldw	r2,0(r2)
   1a4d4:	103ee83a 	callr	r2
   1a4d8:	00000206 	br	1a4e4 <alt_get_errno+0x3c>
   1a4dc:	008000f4 	movhi	r2,3
   1a4e0:	10a7b304 	addi	r2,r2,-24884
}
   1a4e4:	e037883a 	mov	sp,fp
   1a4e8:	dfc00117 	ldw	ra,4(sp)
   1a4ec:	df000017 	ldw	fp,0(sp)
   1a4f0:	dec00204 	addi	sp,sp,8
   1a4f4:	f800283a 	ret

0001a4f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a4f8:	defff904 	addi	sp,sp,-28
   1a4fc:	dfc00615 	stw	ra,24(sp)
   1a500:	df000515 	stw	fp,20(sp)
   1a504:	df000504 	addi	fp,sp,20
   1a508:	e13ffd15 	stw	r4,-12(fp)
   1a50c:	e17ffe15 	stw	r5,-8(fp)
   1a510:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a514:	e0bffd17 	ldw	r2,-12(fp)
   1a518:	10000716 	blt	r2,zero,1a538 <write+0x40>
   1a51c:	e13ffd17 	ldw	r4,-12(fp)
   1a520:	01400304 	movi	r5,12
   1a524:	00106640 	call	10664 <__mulsi3>
   1a528:	00c000f4 	movhi	r3,3
   1a52c:	18e32104 	addi	r3,r3,-29564
   1a530:	10c5883a 	add	r2,r2,r3
   1a534:	00000106 	br	1a53c <write+0x44>
   1a538:	0005883a 	mov	r2,zero
   1a53c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a540:	e0bffb17 	ldw	r2,-20(fp)
   1a544:	10001f26 	beq	r2,zero,1a5c4 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a548:	e0bffb17 	ldw	r2,-20(fp)
   1a54c:	10800217 	ldw	r2,8(r2)
   1a550:	108000cc 	andi	r2,r2,3
   1a554:	10001726 	beq	r2,zero,1a5b4 <write+0xbc>
   1a558:	e0bffb17 	ldw	r2,-20(fp)
   1a55c:	10800017 	ldw	r2,0(r2)
   1a560:	10800617 	ldw	r2,24(r2)
   1a564:	10001326 	beq	r2,zero,1a5b4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a568:	e0bffb17 	ldw	r2,-20(fp)
   1a56c:	10800017 	ldw	r2,0(r2)
   1a570:	10c00617 	ldw	r3,24(r2)
   1a574:	e0bfff17 	ldw	r2,-4(fp)
   1a578:	e13ffb17 	ldw	r4,-20(fp)
   1a57c:	e17ffe17 	ldw	r5,-8(fp)
   1a580:	100d883a 	mov	r6,r2
   1a584:	183ee83a 	callr	r3
   1a588:	e0bffc15 	stw	r2,-16(fp)
   1a58c:	e0bffc17 	ldw	r2,-16(fp)
   1a590:	1000060e 	bge	r2,zero,1a5ac <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1a594:	001a4a80 	call	1a4a8 <alt_get_errno>
   1a598:	e0fffc17 	ldw	r3,-16(fp)
   1a59c:	00c7c83a 	sub	r3,zero,r3
   1a5a0:	10c00015 	stw	r3,0(r2)
        return -1;
   1a5a4:	00bfffc4 	movi	r2,-1
   1a5a8:	00000a06 	br	1a5d4 <write+0xdc>
      }
      return rval;
   1a5ac:	e0bffc17 	ldw	r2,-16(fp)
   1a5b0:	00000806 	br	1a5d4 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a5b4:	001a4a80 	call	1a4a8 <alt_get_errno>
   1a5b8:	00c00344 	movi	r3,13
   1a5bc:	10c00015 	stw	r3,0(r2)
   1a5c0:	00000306 	br	1a5d0 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a5c4:	001a4a80 	call	1a4a8 <alt_get_errno>
   1a5c8:	00c01444 	movi	r3,81
   1a5cc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a5d0:	00bfffc4 	movi	r2,-1
}
   1a5d4:	e037883a 	mov	sp,fp
   1a5d8:	dfc00117 	ldw	ra,4(sp)
   1a5dc:	df000017 	ldw	fp,0(sp)
   1a5e0:	dec00204 	addi	sp,sp,8
   1a5e4:	f800283a 	ret

0001a5e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a5e8:	defffd04 	addi	sp,sp,-12
   1a5ec:	dfc00215 	stw	ra,8(sp)
   1a5f0:	df000115 	stw	fp,4(sp)
   1a5f4:	df000104 	addi	fp,sp,4
   1a5f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a5fc:	e13fff17 	ldw	r4,-4(fp)
   1a600:	014000f4 	movhi	r5,3
   1a604:	2967a004 	addi	r5,r5,-24960
   1a608:	001ba140 	call	1ba14 <alt_dev_llist_insert>
}
   1a60c:	e037883a 	mov	sp,fp
   1a610:	dfc00117 	ldw	ra,4(sp)
   1a614:	df000017 	ldw	fp,0(sp)
   1a618:	dec00204 	addi	sp,sp,8
   1a61c:	f800283a 	ret

0001a620 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a620:	defffd04 	addi	sp,sp,-12
   1a624:	dfc00215 	stw	ra,8(sp)
   1a628:	df000115 	stw	fp,4(sp)
   1a62c:	df000104 	addi	fp,sp,4
   1a630:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   1a634:	001c3f00 	call	1c3f0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a638:	00800044 	movi	r2,1
   1a63c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a640:	e037883a 	mov	sp,fp
   1a644:	dfc00117 	ldw	ra,4(sp)
   1a648:	df000017 	ldw	fp,0(sp)
   1a64c:	dec00204 	addi	sp,sp,8
   1a650:	f800283a 	ret

0001a654 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a654:	defffe04 	addi	sp,sp,-8
   1a658:	dfc00115 	stw	ra,4(sp)
   1a65c:	df000015 	stw	fp,0(sp)
   1a660:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHSCALE_TIMER_0, highscale_timer_0);
   1a664:	008000f4 	movhi	r2,3
   1a668:	10a7b704 	addi	r2,r2,-24868
   1a66c:	10000015 	stw	zero,0(r2)
   1a670:	008000f4 	movhi	r2,3
   1a674:	10a7b804 	addi	r2,r2,-24864
   1a678:	00c0bef4 	movhi	r3,763
   1a67c:	18fc2004 	addi	r3,r3,-3968
   1a680:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1a684:	010000f4 	movhi	r4,3
   1a688:	21041004 	addi	r4,r4,4160
   1a68c:	000b883a 	mov	r5,zero
   1a690:	01800044 	movi	r6,1
   1a694:	01c0fa04 	movi	r7,1000
   1a698:	001b6a00 	call	1b6a0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO, FIFO);
   1a69c:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1a6a0:	010000f4 	movhi	r4,3
   1a6a4:	21238b04 	addi	r4,r4,-29140
   1a6a8:	000b883a 	mov	r5,zero
   1a6ac:	01800404 	movi	r6,16
   1a6b0:	001ad2c0 	call	1ad2c <altera_avalon_jtag_uart_init>
   1a6b4:	010000f4 	movhi	r4,3
   1a6b8:	21238104 	addi	r4,r4,-29180
   1a6bc:	001a5e80 	call	1a5e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
   1a6c0:	0001883a 	nop
}
   1a6c4:	e037883a 	mov	sp,fp
   1a6c8:	dfc00117 	ldw	ra,4(sp)
   1a6cc:	df000017 	ldw	fp,0(sp)
   1a6d0:	dec00204 	addi	sp,sp,8
   1a6d4:	f800283a 	ret

0001a6d8 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1a6d8:	defffa04 	addi	sp,sp,-24
   1a6dc:	dfc00515 	stw	ra,20(sp)
   1a6e0:	df000415 	stw	fp,16(sp)
   1a6e4:	df000404 	addi	fp,sp,16
   1a6e8:	e13ffc15 	stw	r4,-16(fp)
   1a6ec:	e17ffd15 	stw	r5,-12(fp)
   1a6f0:	e1bffe15 	stw	r6,-8(fp)
   1a6f4:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   1a6f8:	e13ffc17 	ldw	r4,-16(fp)
   1a6fc:	01400fc4 	movi	r5,63
   1a700:	001a8a40 	call	1a8a4 <altera_avalon_fifo_clear_event>
   1a704:	10000226 	beq	r2,zero,1a710 <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1a708:	00bfffc4 	movi	r2,-1
   1a70c:	00001306 	br	1a75c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   1a710:	e13ffc17 	ldw	r4,-16(fp)
   1a714:	e17ffd17 	ldw	r5,-12(fp)
   1a718:	001a9000 	call	1a900 <altera_avalon_fifo_write_ienable>
   1a71c:	10000226 	beq	r2,zero,1a728 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1a720:	00bfff84 	movi	r2,-2
   1a724:	00000d06 	br	1a75c <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   1a728:	e13ffc17 	ldw	r4,-16(fp)
   1a72c:	e17fff17 	ldw	r5,-4(fp)
   1a730:	001a9580 	call	1a958 <altera_avalon_fifo_write_almostfull>
   1a734:	10000226 	beq	r2,zero,1a740 <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a738:	00bfff44 	movi	r2,-3
   1a73c:	00000706 	br	1a75c <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   1a740:	e13ffc17 	ldw	r4,-16(fp)
   1a744:	e17ffe17 	ldw	r5,-8(fp)
   1a748:	001a9b00 	call	1a9b0 <altera_avalon_fifo_write_almostempty>
   1a74c:	10000226 	beq	r2,zero,1a758 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a750:	00bfff44 	movi	r2,-3
   1a754:	00000106 	br	1a75c <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   1a758:	0005883a 	mov	r2,zero
}
   1a75c:	e037883a 	mov	sp,fp
   1a760:	dfc00117 	ldw	ra,4(sp)
   1a764:	df000017 	ldw	fp,0(sp)
   1a768:	dec00204 	addi	sp,sp,8
   1a76c:	f800283a 	ret

0001a770 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   1a770:	defffd04 	addi	sp,sp,-12
   1a774:	df000215 	stw	fp,8(sp)
   1a778:	df000204 	addi	fp,sp,8
   1a77c:	e13ffe15 	stw	r4,-8(fp)
   1a780:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a784:	e0bffe17 	ldw	r2,-8(fp)
   1a788:	10800104 	addi	r2,r2,4
   1a78c:	10800037 	ldwio	r2,0(r2)
   1a790:	1007883a 	mov	r3,r2
   1a794:	e0bfff17 	ldw	r2,-4(fp)
   1a798:	1884703a 	and	r2,r3,r2
}
   1a79c:	e037883a 	mov	sp,fp
   1a7a0:	df000017 	ldw	fp,0(sp)
   1a7a4:	dec00104 	addi	sp,sp,4
   1a7a8:	f800283a 	ret

0001a7ac <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   1a7ac:	defffd04 	addi	sp,sp,-12
   1a7b0:	df000215 	stw	fp,8(sp)
   1a7b4:	df000204 	addi	fp,sp,8
   1a7b8:	e13ffe15 	stw	r4,-8(fp)
   1a7bc:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   1a7c0:	e0bffe17 	ldw	r2,-8(fp)
   1a7c4:	10800304 	addi	r2,r2,12
   1a7c8:	10800037 	ldwio	r2,0(r2)
   1a7cc:	1007883a 	mov	r3,r2
   1a7d0:	e0bfff17 	ldw	r2,-4(fp)
   1a7d4:	1884703a 	and	r2,r3,r2
}
   1a7d8:	e037883a 	mov	sp,fp
   1a7dc:	df000017 	ldw	fp,0(sp)
   1a7e0:	dec00104 	addi	sp,sp,4
   1a7e4:	f800283a 	ret

0001a7e8 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   1a7e8:	defffe04 	addi	sp,sp,-8
   1a7ec:	df000115 	stw	fp,4(sp)
   1a7f0:	df000104 	addi	fp,sp,4
   1a7f4:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   1a7f8:	e0bfff17 	ldw	r2,-4(fp)
   1a7fc:	10800404 	addi	r2,r2,16
   1a800:	10800037 	ldwio	r2,0(r2)
}
   1a804:	e037883a 	mov	sp,fp
   1a808:	df000017 	ldw	fp,0(sp)
   1a80c:	dec00104 	addi	sp,sp,4
   1a810:	f800283a 	ret

0001a814 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   1a814:	defffe04 	addi	sp,sp,-8
   1a818:	df000115 	stw	fp,4(sp)
   1a81c:	df000104 	addi	fp,sp,4
   1a820:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   1a824:	e0bfff17 	ldw	r2,-4(fp)
   1a828:	10800504 	addi	r2,r2,20
   1a82c:	10800037 	ldwio	r2,0(r2)
}
   1a830:	e037883a 	mov	sp,fp
   1a834:	df000017 	ldw	fp,0(sp)
   1a838:	dec00104 	addi	sp,sp,4
   1a83c:	f800283a 	ret

0001a840 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   1a840:	defffd04 	addi	sp,sp,-12
   1a844:	df000215 	stw	fp,8(sp)
   1a848:	df000204 	addi	fp,sp,8
   1a84c:	e13ffe15 	stw	r4,-8(fp)
   1a850:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   1a854:	e0bffe17 	ldw	r2,-8(fp)
   1a858:	10800204 	addi	r2,r2,8
   1a85c:	10800037 	ldwio	r2,0(r2)
   1a860:	1007883a 	mov	r3,r2
   1a864:	e0bfff17 	ldw	r2,-4(fp)
   1a868:	1884703a 	and	r2,r3,r2
}
   1a86c:	e037883a 	mov	sp,fp
   1a870:	df000017 	ldw	fp,0(sp)
   1a874:	dec00104 	addi	sp,sp,4
   1a878:	f800283a 	ret

0001a87c <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   1a87c:	defffe04 	addi	sp,sp,-8
   1a880:	df000115 	stw	fp,4(sp)
   1a884:	df000104 	addi	fp,sp,4
   1a888:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   1a88c:	e0bfff17 	ldw	r2,-4(fp)
   1a890:	10800037 	ldwio	r2,0(r2)
}
   1a894:	e037883a 	mov	sp,fp
   1a898:	df000017 	ldw	fp,0(sp)
   1a89c:	dec00104 	addi	sp,sp,4
   1a8a0:	f800283a 	ret

0001a8a4 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   1a8a4:	defffd04 	addi	sp,sp,-12
   1a8a8:	df000215 	stw	fp,8(sp)
   1a8ac:	df000204 	addi	fp,sp,8
   1a8b0:	e13ffe15 	stw	r4,-8(fp)
   1a8b4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   1a8b8:	e0bffe17 	ldw	r2,-8(fp)
   1a8bc:	10800204 	addi	r2,r2,8
   1a8c0:	e0ffff17 	ldw	r3,-4(fp)
   1a8c4:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   1a8c8:	e0bffe17 	ldw	r2,-8(fp)
   1a8cc:	10800204 	addi	r2,r2,8
   1a8d0:	10800037 	ldwio	r2,0(r2)
   1a8d4:	1007883a 	mov	r3,r2
   1a8d8:	e0bfff17 	ldw	r2,-4(fp)
   1a8dc:	1884703a 	and	r2,r3,r2
   1a8e0:	1000021e 	bne	r2,zero,1a8ec <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   1a8e4:	0005883a 	mov	r2,zero
   1a8e8:	00000106 	br	1a8f0 <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1a8ec:	00bfffc4 	movi	r2,-1
}
   1a8f0:	e037883a 	mov	sp,fp
   1a8f4:	df000017 	ldw	fp,0(sp)
   1a8f8:	dec00104 	addi	sp,sp,4
   1a8fc:	f800283a 	ret

0001a900 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   1a900:	defffd04 	addi	sp,sp,-12
   1a904:	df000215 	stw	fp,8(sp)
   1a908:	df000204 	addi	fp,sp,8
   1a90c:	e13ffe15 	stw	r4,-8(fp)
   1a910:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   1a914:	e0bffe17 	ldw	r2,-8(fp)
   1a918:	10800304 	addi	r2,r2,12
   1a91c:	e0ffff17 	ldw	r3,-4(fp)
   1a920:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   1a924:	e0bffe17 	ldw	r2,-8(fp)
   1a928:	10800304 	addi	r2,r2,12
   1a92c:	10800037 	ldwio	r2,0(r2)
   1a930:	1007883a 	mov	r3,r2
   1a934:	e0bfff17 	ldw	r2,-4(fp)
   1a938:	1880021e 	bne	r3,r2,1a944 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1a93c:	0005883a 	mov	r2,zero
   1a940:	00000106 	br	1a948 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1a944:	00bfff84 	movi	r2,-2
}
   1a948:	e037883a 	mov	sp,fp
   1a94c:	df000017 	ldw	fp,0(sp)
   1a950:	dec00104 	addi	sp,sp,4
   1a954:	f800283a 	ret

0001a958 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   1a958:	defffd04 	addi	sp,sp,-12
   1a95c:	df000215 	stw	fp,8(sp)
   1a960:	df000204 	addi	fp,sp,8
   1a964:	e13ffe15 	stw	r4,-8(fp)
   1a968:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   1a96c:	e0bffe17 	ldw	r2,-8(fp)
   1a970:	10800404 	addi	r2,r2,16
   1a974:	e0ffff17 	ldw	r3,-4(fp)
   1a978:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   1a97c:	e0bffe17 	ldw	r2,-8(fp)
   1a980:	10800404 	addi	r2,r2,16
   1a984:	10800037 	ldwio	r2,0(r2)
   1a988:	1007883a 	mov	r3,r2
   1a98c:	e0bfff17 	ldw	r2,-4(fp)
   1a990:	1880021e 	bne	r3,r2,1a99c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1a994:	0005883a 	mov	r2,zero
   1a998:	00000106 	br	1a9a0 <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a99c:	00bfff44 	movi	r2,-3
}
   1a9a0:	e037883a 	mov	sp,fp
   1a9a4:	df000017 	ldw	fp,0(sp)
   1a9a8:	dec00104 	addi	sp,sp,4
   1a9ac:	f800283a 	ret

0001a9b0 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   1a9b0:	defffd04 	addi	sp,sp,-12
   1a9b4:	df000215 	stw	fp,8(sp)
   1a9b8:	df000204 	addi	fp,sp,8
   1a9bc:	e13ffe15 	stw	r4,-8(fp)
   1a9c0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   1a9c4:	e0bffe17 	ldw	r2,-8(fp)
   1a9c8:	10800504 	addi	r2,r2,20
   1a9cc:	e0ffff17 	ldw	r3,-4(fp)
   1a9d0:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   1a9d4:	e0bffe17 	ldw	r2,-8(fp)
   1a9d8:	10800504 	addi	r2,r2,20
   1a9dc:	10800037 	ldwio	r2,0(r2)
   1a9e0:	1007883a 	mov	r3,r2
   1a9e4:	e0bfff17 	ldw	r2,-4(fp)
   1a9e8:	1880021e 	bne	r3,r2,1a9f4 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1a9ec:	0005883a 	mov	r2,zero
   1a9f0:	00000106 	br	1a9f8 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a9f4:	00bfff44 	movi	r2,-3
}
   1a9f8:	e037883a 	mov	sp,fp
   1a9fc:	df000017 	ldw	fp,0(sp)
   1aa00:	dec00104 	addi	sp,sp,4
   1aa04:	f800283a 	ret

0001aa08 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   1aa08:	defffb04 	addi	sp,sp,-20
   1aa0c:	dfc00415 	stw	ra,16(sp)
   1aa10:	df000315 	stw	fp,12(sp)
   1aa14:	df000304 	addi	fp,sp,12
   1aa18:	e13ffd15 	stw	r4,-12(fp)
   1aa1c:	e17ffe15 	stw	r5,-8(fp)
   1aa20:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1aa24:	e13ffe17 	ldw	r4,-8(fp)
   1aa28:	01400044 	movi	r5,1
   1aa2c:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   1aa30:	1000051e 	bne	r2,zero,1aa48 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   1aa34:	e0bffd17 	ldw	r2,-12(fp)
   1aa38:	e0ffff17 	ldw	r3,-4(fp)
   1aa3c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   1aa40:	0005883a 	mov	r2,zero
   1aa44:	00000106 	br	1aa4c <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   1aa48:	00bfff04 	movi	r2,-4
    }
}
   1aa4c:	e037883a 	mov	sp,fp
   1aa50:	dfc00117 	ldw	ra,4(sp)
   1aa54:	df000017 	ldw	fp,0(sp)
   1aa58:	dec00204 	addi	sp,sp,8
   1aa5c:	f800283a 	ret

0001aa60 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   1aa60:	defffa04 	addi	sp,sp,-24
   1aa64:	dfc00515 	stw	ra,20(sp)
   1aa68:	df000415 	stw	fp,16(sp)
   1aa6c:	df000404 	addi	fp,sp,16
   1aa70:	e13ffd15 	stw	r4,-12(fp)
   1aa74:	e17ffe15 	stw	r5,-8(fp)
   1aa78:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   1aa7c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   1aa80:	e0bfff17 	ldw	r2,-4(fp)
   1aa84:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1aa88:	e13ffe17 	ldw	r4,-8(fp)
   1aa8c:	01400084 	movi	r5,2
   1aa90:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   1aa94:	1000071e 	bne	r2,zero,1aab4 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   1aa98:	e13ffe17 	ldw	r4,-8(fp)
   1aa9c:	001a87c0 	call	1a87c <altera_avalon_fifo_read_level>
   1aaa0:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1aaa4:	e0bffd17 	ldw	r2,-12(fp)
   1aaa8:	10c00037 	ldwio	r3,0(r2)
   1aaac:	e0bfff17 	ldw	r2,-4(fp)
   1aab0:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   1aab4:	e0bffc17 	ldw	r2,-16(fp)
}
   1aab8:	e037883a 	mov	sp,fp
   1aabc:	dfc00117 	ldw	ra,4(sp)
   1aac0:	df000017 	ldw	fp,0(sp)
   1aac4:	dec00204 	addi	sp,sp,8
   1aac8:	f800283a 	ret

0001aacc <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   1aacc:	defffc04 	addi	sp,sp,-16
   1aad0:	dfc00315 	stw	ra,12(sp)
   1aad4:	df000215 	stw	fp,8(sp)
   1aad8:	df000204 	addi	fp,sp,8
   1aadc:	e13ffe15 	stw	r4,-8(fp)
   1aae0:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1aae4:	e13fff17 	ldw	r4,-4(fp)
   1aae8:	01400084 	movi	r5,2
   1aaec:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   1aaf0:	1000031e 	bne	r2,zero,1ab00 <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1aaf4:	e0bffe17 	ldw	r2,-8(fp)
   1aaf8:	10800037 	ldwio	r2,0(r2)
   1aafc:	00000106 	br	1ab04 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   1ab00:	0005883a 	mov	r2,zero
}
   1ab04:	e037883a 	mov	sp,fp
   1ab08:	dfc00117 	ldw	ra,4(sp)
   1ab0c:	df000017 	ldw	fp,0(sp)
   1ab10:	dec00204 	addi	sp,sp,8
   1ab14:	f800283a 	ret

0001ab18 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   1ab18:	defffb04 	addi	sp,sp,-20
   1ab1c:	dfc00415 	stw	ra,16(sp)
   1ab20:	df000315 	stw	fp,12(sp)
   1ab24:	df000304 	addi	fp,sp,12
   1ab28:	e13ffd15 	stw	r4,-12(fp)
   1ab2c:	e17ffe15 	stw	r5,-8(fp)
   1ab30:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1ab34:	e13ffe17 	ldw	r4,-8(fp)
   1ab38:	01400044 	movi	r5,1
   1ab3c:	001a7700 	call	1a770 <altera_avalon_fifo_read_status>
   1ab40:	1000061e 	bne	r2,zero,1ab5c <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   1ab44:	e0bffd17 	ldw	r2,-12(fp)
   1ab48:	10800104 	addi	r2,r2,4
   1ab4c:	e0ffff17 	ldw	r3,-4(fp)
   1ab50:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   1ab54:	0005883a 	mov	r2,zero
   1ab58:	00000106 	br	1ab60 <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   1ab5c:	00bfff04 	movi	r2,-4
    }
}
   1ab60:	e037883a 	mov	sp,fp
   1ab64:	dfc00117 	ldw	ra,4(sp)
   1ab68:	df000017 	ldw	fp,0(sp)
   1ab6c:	dec00204 	addi	sp,sp,8
   1ab70:	f800283a 	ret

0001ab74 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   1ab74:	defffe04 	addi	sp,sp,-8
   1ab78:	df000115 	stw	fp,4(sp)
   1ab7c:	df000104 	addi	fp,sp,4
   1ab80:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   1ab84:	e0bfff17 	ldw	r2,-4(fp)
   1ab88:	10800104 	addi	r2,r2,4
   1ab8c:	10800037 	ldwio	r2,0(r2)
}
   1ab90:	e037883a 	mov	sp,fp
   1ab94:	df000017 	ldw	fp,0(sp)
   1ab98:	dec00104 	addi	sp,sp,4
   1ab9c:	f800283a 	ret

0001aba0 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   1aba0:	defffe04 	addi	sp,sp,-8
   1aba4:	df000115 	stw	fp,4(sp)
   1aba8:	df000104 	addi	fp,sp,4
   1abac:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   1abb0:	e0bfff17 	ldw	r2,-4(fp)
   1abb4:	10800037 	ldwio	r2,0(r2)
}
   1abb8:	e037883a 	mov	sp,fp
   1abbc:	df000017 	ldw	fp,0(sp)
   1abc0:	dec00104 	addi	sp,sp,4
   1abc4:	f800283a 	ret

0001abc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1abc8:	defffa04 	addi	sp,sp,-24
   1abcc:	dfc00515 	stw	ra,20(sp)
   1abd0:	df000415 	stw	fp,16(sp)
   1abd4:	df000404 	addi	fp,sp,16
   1abd8:	e13ffd15 	stw	r4,-12(fp)
   1abdc:	e17ffe15 	stw	r5,-8(fp)
   1abe0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1abe4:	e0bffd17 	ldw	r2,-12(fp)
   1abe8:	10800017 	ldw	r2,0(r2)
   1abec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1abf0:	e0bffc17 	ldw	r2,-16(fp)
   1abf4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1abf8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1abfc:	10800217 	ldw	r2,8(r2)
   1ac00:	1809883a 	mov	r4,r3
   1ac04:	e17ffe17 	ldw	r5,-8(fp)
   1ac08:	e1bfff17 	ldw	r6,-4(fp)
   1ac0c:	100f883a 	mov	r7,r2
   1ac10:	001b1f00 	call	1b1f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1ac14:	e037883a 	mov	sp,fp
   1ac18:	dfc00117 	ldw	ra,4(sp)
   1ac1c:	df000017 	ldw	fp,0(sp)
   1ac20:	dec00204 	addi	sp,sp,8
   1ac24:	f800283a 	ret

0001ac28 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1ac28:	defffa04 	addi	sp,sp,-24
   1ac2c:	dfc00515 	stw	ra,20(sp)
   1ac30:	df000415 	stw	fp,16(sp)
   1ac34:	df000404 	addi	fp,sp,16
   1ac38:	e13ffd15 	stw	r4,-12(fp)
   1ac3c:	e17ffe15 	stw	r5,-8(fp)
   1ac40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ac44:	e0bffd17 	ldw	r2,-12(fp)
   1ac48:	10800017 	ldw	r2,0(r2)
   1ac4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1ac50:	e0bffc17 	ldw	r2,-16(fp)
   1ac54:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1ac58:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1ac5c:	10800217 	ldw	r2,8(r2)
   1ac60:	1809883a 	mov	r4,r3
   1ac64:	e17ffe17 	ldw	r5,-8(fp)
   1ac68:	e1bfff17 	ldw	r6,-4(fp)
   1ac6c:	100f883a 	mov	r7,r2
   1ac70:	001b4080 	call	1b408 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1ac74:	e037883a 	mov	sp,fp
   1ac78:	dfc00117 	ldw	ra,4(sp)
   1ac7c:	df000017 	ldw	fp,0(sp)
   1ac80:	dec00204 	addi	sp,sp,8
   1ac84:	f800283a 	ret

0001ac88 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1ac88:	defffc04 	addi	sp,sp,-16
   1ac8c:	dfc00315 	stw	ra,12(sp)
   1ac90:	df000215 	stw	fp,8(sp)
   1ac94:	df000204 	addi	fp,sp,8
   1ac98:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ac9c:	e0bfff17 	ldw	r2,-4(fp)
   1aca0:	10800017 	ldw	r2,0(r2)
   1aca4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1aca8:	e0bffe17 	ldw	r2,-8(fp)
   1acac:	10c00a04 	addi	r3,r2,40
   1acb0:	e0bfff17 	ldw	r2,-4(fp)
   1acb4:	10800217 	ldw	r2,8(r2)
   1acb8:	1809883a 	mov	r4,r3
   1acbc:	100b883a 	mov	r5,r2
   1acc0:	001b0940 	call	1b094 <altera_avalon_jtag_uart_close>
}
   1acc4:	e037883a 	mov	sp,fp
   1acc8:	dfc00117 	ldw	ra,4(sp)
   1accc:	df000017 	ldw	fp,0(sp)
   1acd0:	dec00204 	addi	sp,sp,8
   1acd4:	f800283a 	ret

0001acd8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1acd8:	defffa04 	addi	sp,sp,-24
   1acdc:	dfc00515 	stw	ra,20(sp)
   1ace0:	df000415 	stw	fp,16(sp)
   1ace4:	df000404 	addi	fp,sp,16
   1ace8:	e13ffd15 	stw	r4,-12(fp)
   1acec:	e17ffe15 	stw	r5,-8(fp)
   1acf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1acf4:	e0bffd17 	ldw	r2,-12(fp)
   1acf8:	10800017 	ldw	r2,0(r2)
   1acfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1ad00:	e0bffc17 	ldw	r2,-16(fp)
   1ad04:	10800a04 	addi	r2,r2,40
   1ad08:	1009883a 	mov	r4,r2
   1ad0c:	e17ffe17 	ldw	r5,-8(fp)
   1ad10:	e1bfff17 	ldw	r6,-4(fp)
   1ad14:	001b0fc0 	call	1b0fc <altera_avalon_jtag_uart_ioctl>
}
   1ad18:	e037883a 	mov	sp,fp
   1ad1c:	dfc00117 	ldw	ra,4(sp)
   1ad20:	df000017 	ldw	fp,0(sp)
   1ad24:	dec00204 	addi	sp,sp,8
   1ad28:	f800283a 	ret

0001ad2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1ad2c:	defffa04 	addi	sp,sp,-24
   1ad30:	dfc00515 	stw	ra,20(sp)
   1ad34:	df000415 	stw	fp,16(sp)
   1ad38:	df000404 	addi	fp,sp,16
   1ad3c:	e13ffd15 	stw	r4,-12(fp)
   1ad40:	e17ffe15 	stw	r5,-8(fp)
   1ad44:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ad48:	e0bffd17 	ldw	r2,-12(fp)
   1ad4c:	00c00044 	movi	r3,1
   1ad50:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1ad54:	e0bffd17 	ldw	r2,-12(fp)
   1ad58:	10800017 	ldw	r2,0(r2)
   1ad5c:	10800104 	addi	r2,r2,4
   1ad60:	e0fffd17 	ldw	r3,-12(fp)
   1ad64:	18c00817 	ldw	r3,32(r3)
   1ad68:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1ad6c:	e0fffe17 	ldw	r3,-8(fp)
   1ad70:	e0bfff17 	ldw	r2,-4(fp)
   1ad74:	d8000015 	stw	zero,0(sp)
   1ad78:	1809883a 	mov	r4,r3
   1ad7c:	100b883a 	mov	r5,r2
   1ad80:	018000b4 	movhi	r6,2
   1ad84:	31ab7b04 	addi	r6,r6,-21012
   1ad88:	e1fffd17 	ldw	r7,-12(fp)
   1ad8c:	001bb9c0 	call	1bb9c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1ad90:	e0bffd17 	ldw	r2,-12(fp)
   1ad94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1ad98:	e0bffd17 	ldw	r2,-12(fp)
   1ad9c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ada0:	008000f4 	movhi	r2,3
   1ada4:	10a7ba04 	addi	r2,r2,-24856
   1ada8:	10800017 	ldw	r2,0(r2)
   1adac:	1809883a 	mov	r4,r3
   1adb0:	100b883a 	mov	r5,r2
   1adb4:	018000b4 	movhi	r6,2
   1adb8:	31abfc04 	addi	r6,r6,-20496
   1adbc:	e1fffd17 	ldw	r7,-12(fp)
   1adc0:	001b8680 	call	1b868 <alt_alarm_start>
   1adc4:	1000040e 	bge	r2,zero,1add8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1adc8:	e0bffd17 	ldw	r2,-12(fp)
   1adcc:	00e00034 	movhi	r3,32768
   1add0:	18ffffc4 	addi	r3,r3,-1
   1add4:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1add8:	e037883a 	mov	sp,fp
   1addc:	dfc00117 	ldw	ra,4(sp)
   1ade0:	df000017 	ldw	fp,0(sp)
   1ade4:	dec00204 	addi	sp,sp,8
   1ade8:	f800283a 	ret

0001adec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1adec:	defff804 	addi	sp,sp,-32
   1adf0:	df000715 	stw	fp,28(sp)
   1adf4:	df000704 	addi	fp,sp,28
   1adf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1adfc:	e0bfff17 	ldw	r2,-4(fp)
   1ae00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1ae04:	e0bffb17 	ldw	r2,-20(fp)
   1ae08:	10800017 	ldw	r2,0(r2)
   1ae0c:	e0bffc15 	stw	r2,-16(fp)
   1ae10:	00000106 	br	1ae18 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   1ae14:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ae18:	e0bffc17 	ldw	r2,-16(fp)
   1ae1c:	10800104 	addi	r2,r2,4
   1ae20:	10800037 	ldwio	r2,0(r2)
   1ae24:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1ae28:	e0bffd17 	ldw	r2,-12(fp)
   1ae2c:	1080c00c 	andi	r2,r2,768
   1ae30:	10006a26 	beq	r2,zero,1afdc <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1ae34:	e0bffd17 	ldw	r2,-12(fp)
   1ae38:	1080400c 	andi	r2,r2,256
   1ae3c:	10003326 	beq	r2,zero,1af0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1ae40:	00800074 	movhi	r2,1
   1ae44:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ae48:	e0bffb17 	ldw	r2,-20(fp)
   1ae4c:	10800a17 	ldw	r2,40(r2)
   1ae50:	10800044 	addi	r2,r2,1
   1ae54:	1081ffcc 	andi	r2,r2,2047
   1ae58:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1ae5c:	e0bffb17 	ldw	r2,-20(fp)
   1ae60:	10c00b17 	ldw	r3,44(r2)
   1ae64:	e0bffe17 	ldw	r2,-8(fp)
   1ae68:	18801426 	beq	r3,r2,1aebc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1ae6c:	e0bffc17 	ldw	r2,-16(fp)
   1ae70:	10800037 	ldwio	r2,0(r2)
   1ae74:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1ae78:	e0bff917 	ldw	r2,-28(fp)
   1ae7c:	10a0000c 	andi	r2,r2,32768
   1ae80:	10001026 	beq	r2,zero,1aec4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1ae84:	e0bffb17 	ldw	r2,-20(fp)
   1ae88:	10800a17 	ldw	r2,40(r2)
   1ae8c:	e0fff917 	ldw	r3,-28(fp)
   1ae90:	e13ffb17 	ldw	r4,-20(fp)
   1ae94:	2085883a 	add	r2,r4,r2
   1ae98:	10800e04 	addi	r2,r2,56
   1ae9c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1aea0:	e0bffb17 	ldw	r2,-20(fp)
   1aea4:	10800a17 	ldw	r2,40(r2)
   1aea8:	10800044 	addi	r2,r2,1
   1aeac:	10c1ffcc 	andi	r3,r2,2047
   1aeb0:	e0bffb17 	ldw	r2,-20(fp)
   1aeb4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1aeb8:	003fe306 	br	1ae48 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1aebc:	0001883a 	nop
   1aec0:	00000106 	br	1aec8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1aec4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1aec8:	e0bff917 	ldw	r2,-28(fp)
   1aecc:	10bfffec 	andhi	r2,r2,65535
   1aed0:	10000e26 	beq	r2,zero,1af0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1aed4:	e0bffb17 	ldw	r2,-20(fp)
   1aed8:	10c00817 	ldw	r3,32(r2)
   1aedc:	00bfff84 	movi	r2,-2
   1aee0:	1886703a 	and	r3,r3,r2
   1aee4:	e0bffb17 	ldw	r2,-20(fp)
   1aee8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1aeec:	e0bffc17 	ldw	r2,-16(fp)
   1aef0:	10800104 	addi	r2,r2,4
   1aef4:	e0fffb17 	ldw	r3,-20(fp)
   1aef8:	18c00817 	ldw	r3,32(r3)
   1aefc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1af00:	e0bffc17 	ldw	r2,-16(fp)
   1af04:	10800104 	addi	r2,r2,4
   1af08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1af0c:	e0bffd17 	ldw	r2,-12(fp)
   1af10:	1080800c 	andi	r2,r2,512
   1af14:	103fbf26 	beq	r2,zero,1ae14 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1af18:	e0bffd17 	ldw	r2,-12(fp)
   1af1c:	1004d43a 	srli	r2,r2,16
   1af20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1af24:	00001406 	br	1af78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1af28:	e0bffc17 	ldw	r2,-16(fp)
   1af2c:	e0fffb17 	ldw	r3,-20(fp)
   1af30:	18c00d17 	ldw	r3,52(r3)
   1af34:	e13ffb17 	ldw	r4,-20(fp)
   1af38:	20c7883a 	add	r3,r4,r3
   1af3c:	18c20e04 	addi	r3,r3,2104
   1af40:	18c00003 	ldbu	r3,0(r3)
   1af44:	18c03fcc 	andi	r3,r3,255
   1af48:	18c0201c 	xori	r3,r3,128
   1af4c:	18ffe004 	addi	r3,r3,-128
   1af50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1af54:	e0bffb17 	ldw	r2,-20(fp)
   1af58:	10800d17 	ldw	r2,52(r2)
   1af5c:	10800044 	addi	r2,r2,1
   1af60:	10c1ffcc 	andi	r3,r2,2047
   1af64:	e0bffb17 	ldw	r2,-20(fp)
   1af68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1af6c:	e0bffa17 	ldw	r2,-24(fp)
   1af70:	10bfffc4 	addi	r2,r2,-1
   1af74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1af78:	e0bffa17 	ldw	r2,-24(fp)
   1af7c:	10000526 	beq	r2,zero,1af94 <altera_avalon_jtag_uart_irq+0x1a8>
   1af80:	e0bffb17 	ldw	r2,-20(fp)
   1af84:	10c00d17 	ldw	r3,52(r2)
   1af88:	e0bffb17 	ldw	r2,-20(fp)
   1af8c:	10800c17 	ldw	r2,48(r2)
   1af90:	18bfe51e 	bne	r3,r2,1af28 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1af94:	e0bffa17 	ldw	r2,-24(fp)
   1af98:	103f9e26 	beq	r2,zero,1ae14 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1af9c:	e0bffb17 	ldw	r2,-20(fp)
   1afa0:	10c00817 	ldw	r3,32(r2)
   1afa4:	00bfff44 	movi	r2,-3
   1afa8:	1886703a 	and	r3,r3,r2
   1afac:	e0bffb17 	ldw	r2,-20(fp)
   1afb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1afb4:	e0bffb17 	ldw	r2,-20(fp)
   1afb8:	10800017 	ldw	r2,0(r2)
   1afbc:	10800104 	addi	r2,r2,4
   1afc0:	e0fffb17 	ldw	r3,-20(fp)
   1afc4:	18c00817 	ldw	r3,32(r3)
   1afc8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1afcc:	e0bffc17 	ldw	r2,-16(fp)
   1afd0:	10800104 	addi	r2,r2,4
   1afd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1afd8:	003f8e06 	br	1ae14 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1afdc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1afe0:	e037883a 	mov	sp,fp
   1afe4:	df000017 	ldw	fp,0(sp)
   1afe8:	dec00104 	addi	sp,sp,4
   1afec:	f800283a 	ret

0001aff0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1aff0:	defffc04 	addi	sp,sp,-16
   1aff4:	df000315 	stw	fp,12(sp)
   1aff8:	df000304 	addi	fp,sp,12
   1affc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1b000:	e0bfff17 	ldw	r2,-4(fp)
   1b004:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1b008:	e0bffd17 	ldw	r2,-12(fp)
   1b00c:	10800017 	ldw	r2,0(r2)
   1b010:	10800104 	addi	r2,r2,4
   1b014:	10800037 	ldwio	r2,0(r2)
   1b018:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1b01c:	e0bffe17 	ldw	r2,-8(fp)
   1b020:	1081000c 	andi	r2,r2,1024
   1b024:	10000a26 	beq	r2,zero,1b050 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1b028:	e0bffd17 	ldw	r2,-12(fp)
   1b02c:	10800017 	ldw	r2,0(r2)
   1b030:	10800104 	addi	r2,r2,4
   1b034:	e0fffd17 	ldw	r3,-12(fp)
   1b038:	18c00817 	ldw	r3,32(r3)
   1b03c:	18c10014 	ori	r3,r3,1024
   1b040:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1b044:	e0bffd17 	ldw	r2,-12(fp)
   1b048:	10000915 	stw	zero,36(r2)
   1b04c:	00000a06 	br	1b078 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1b050:	e0bffd17 	ldw	r2,-12(fp)
   1b054:	10800917 	ldw	r2,36(r2)
   1b058:	00e00034 	movhi	r3,32768
   1b05c:	18ffff04 	addi	r3,r3,-4
   1b060:	18800536 	bltu	r3,r2,1b078 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   1b064:	e0bffd17 	ldw	r2,-12(fp)
   1b068:	10800917 	ldw	r2,36(r2)
   1b06c:	10c00044 	addi	r3,r2,1
   1b070:	e0bffd17 	ldw	r2,-12(fp)
   1b074:	10c00915 	stw	r3,36(r2)
   1b078:	008000f4 	movhi	r2,3
   1b07c:	10a7ba04 	addi	r2,r2,-24856
   1b080:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1b084:	e037883a 	mov	sp,fp
   1b088:	df000017 	ldw	fp,0(sp)
   1b08c:	dec00104 	addi	sp,sp,4
   1b090:	f800283a 	ret

0001b094 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1b094:	defffd04 	addi	sp,sp,-12
   1b098:	df000215 	stw	fp,8(sp)
   1b09c:	df000204 	addi	fp,sp,8
   1b0a0:	e13ffe15 	stw	r4,-8(fp)
   1b0a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b0a8:	00000506 	br	1b0c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1b0ac:	e0bfff17 	ldw	r2,-4(fp)
   1b0b0:	1090000c 	andi	r2,r2,16384
   1b0b4:	10000226 	beq	r2,zero,1b0c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1b0b8:	00bffd44 	movi	r2,-11
   1b0bc:	00000b06 	br	1b0ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b0c0:	e0bffe17 	ldw	r2,-8(fp)
   1b0c4:	10c00d17 	ldw	r3,52(r2)
   1b0c8:	e0bffe17 	ldw	r2,-8(fp)
   1b0cc:	10800c17 	ldw	r2,48(r2)
   1b0d0:	18800526 	beq	r3,r2,1b0e8 <altera_avalon_jtag_uart_close+0x54>
   1b0d4:	e0bffe17 	ldw	r2,-8(fp)
   1b0d8:	10c00917 	ldw	r3,36(r2)
   1b0dc:	e0bffe17 	ldw	r2,-8(fp)
   1b0e0:	10800117 	ldw	r2,4(r2)
   1b0e4:	18bff136 	bltu	r3,r2,1b0ac <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1b0e8:	0005883a 	mov	r2,zero
}
   1b0ec:	e037883a 	mov	sp,fp
   1b0f0:	df000017 	ldw	fp,0(sp)
   1b0f4:	dec00104 	addi	sp,sp,4
   1b0f8:	f800283a 	ret

0001b0fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1b0fc:	defffa04 	addi	sp,sp,-24
   1b100:	df000515 	stw	fp,20(sp)
   1b104:	df000504 	addi	fp,sp,20
   1b108:	e13ffd15 	stw	r4,-12(fp)
   1b10c:	e17ffe15 	stw	r5,-8(fp)
   1b110:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1b114:	00bff9c4 	movi	r2,-25
   1b118:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1b11c:	e0bffe17 	ldw	r2,-8(fp)
   1b120:	10da8060 	cmpeqi	r3,r2,27137
   1b124:	1800031e 	bne	r3,zero,1b134 <altera_avalon_jtag_uart_ioctl+0x38>
   1b128:	109a80a0 	cmpeqi	r2,r2,27138
   1b12c:	1000181e 	bne	r2,zero,1b190 <altera_avalon_jtag_uart_ioctl+0x94>
   1b130:	00002606 	br	1b1cc <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1b134:	e0bffd17 	ldw	r2,-12(fp)
   1b138:	10c00117 	ldw	r3,4(r2)
   1b13c:	00a00034 	movhi	r2,32768
   1b140:	10bfffc4 	addi	r2,r2,-1
   1b144:	18802226 	beq	r3,r2,1b1d0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   1b148:	e0bfff17 	ldw	r2,-4(fp)
   1b14c:	10800017 	ldw	r2,0(r2)
   1b150:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1b154:	e0bffc17 	ldw	r2,-16(fp)
   1b158:	10800090 	cmplti	r2,r2,2
   1b15c:	1000061e 	bne	r2,zero,1b178 <altera_avalon_jtag_uart_ioctl+0x7c>
   1b160:	e0fffc17 	ldw	r3,-16(fp)
   1b164:	00a00034 	movhi	r2,32768
   1b168:	10bfffc4 	addi	r2,r2,-1
   1b16c:	18800226 	beq	r3,r2,1b178 <altera_avalon_jtag_uart_ioctl+0x7c>
   1b170:	e0bffc17 	ldw	r2,-16(fp)
   1b174:	00000206 	br	1b180 <altera_avalon_jtag_uart_ioctl+0x84>
   1b178:	00a00034 	movhi	r2,32768
   1b17c:	10bfff84 	addi	r2,r2,-2
   1b180:	e0fffd17 	ldw	r3,-12(fp)
   1b184:	18800115 	stw	r2,4(r3)
      rc = 0;
   1b188:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1b18c:	00001006 	br	1b1d0 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1b190:	e0bffd17 	ldw	r2,-12(fp)
   1b194:	10c00117 	ldw	r3,4(r2)
   1b198:	00a00034 	movhi	r2,32768
   1b19c:	10bfffc4 	addi	r2,r2,-1
   1b1a0:	18800d26 	beq	r3,r2,1b1d8 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1b1a4:	e0bffd17 	ldw	r2,-12(fp)
   1b1a8:	10c00917 	ldw	r3,36(r2)
   1b1ac:	e0bffd17 	ldw	r2,-12(fp)
   1b1b0:	10800117 	ldw	r2,4(r2)
   1b1b4:	1885803a 	cmpltu	r2,r3,r2
   1b1b8:	10c03fcc 	andi	r3,r2,255
   1b1bc:	e0bfff17 	ldw	r2,-4(fp)
   1b1c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1b1c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1b1c8:	00000306 	br	1b1d8 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   1b1cc:	00000306 	br	1b1dc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1b1d0:	0001883a 	nop
   1b1d4:	00000106 	br	1b1dc <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1b1d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1b1dc:	e0bffb17 	ldw	r2,-20(fp)
}
   1b1e0:	e037883a 	mov	sp,fp
   1b1e4:	df000017 	ldw	fp,0(sp)
   1b1e8:	dec00104 	addi	sp,sp,4
   1b1ec:	f800283a 	ret

0001b1f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1b1f0:	defff304 	addi	sp,sp,-52
   1b1f4:	dfc00c15 	stw	ra,48(sp)
   1b1f8:	df000b15 	stw	fp,44(sp)
   1b1fc:	df000b04 	addi	fp,sp,44
   1b200:	e13ffc15 	stw	r4,-16(fp)
   1b204:	e17ffd15 	stw	r5,-12(fp)
   1b208:	e1bffe15 	stw	r6,-8(fp)
   1b20c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1b210:	e0bffd17 	ldw	r2,-12(fp)
   1b214:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b218:	00004706 	br	1b338 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1b21c:	e0bffc17 	ldw	r2,-16(fp)
   1b220:	10800a17 	ldw	r2,40(r2)
   1b224:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1b228:	e0bffc17 	ldw	r2,-16(fp)
   1b22c:	10800b17 	ldw	r2,44(r2)
   1b230:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1b234:	e0fff717 	ldw	r3,-36(fp)
   1b238:	e0bff817 	ldw	r2,-32(fp)
   1b23c:	18800536 	bltu	r3,r2,1b254 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1b240:	e0fff717 	ldw	r3,-36(fp)
   1b244:	e0bff817 	ldw	r2,-32(fp)
   1b248:	1885c83a 	sub	r2,r3,r2
   1b24c:	e0bff615 	stw	r2,-40(fp)
   1b250:	00000406 	br	1b264 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1b254:	00c20004 	movi	r3,2048
   1b258:	e0bff817 	ldw	r2,-32(fp)
   1b25c:	1885c83a 	sub	r2,r3,r2
   1b260:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1b264:	e0bff617 	ldw	r2,-40(fp)
   1b268:	10001e26 	beq	r2,zero,1b2e4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1b26c:	e0fffe17 	ldw	r3,-8(fp)
   1b270:	e0bff617 	ldw	r2,-40(fp)
   1b274:	1880022e 	bgeu	r3,r2,1b280 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1b278:	e0bffe17 	ldw	r2,-8(fp)
   1b27c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1b280:	e0bff817 	ldw	r2,-32(fp)
   1b284:	10800e04 	addi	r2,r2,56
   1b288:	e0fffc17 	ldw	r3,-16(fp)
   1b28c:	1885883a 	add	r2,r3,r2
   1b290:	e13ff517 	ldw	r4,-44(fp)
   1b294:	100b883a 	mov	r5,r2
   1b298:	e1bff617 	ldw	r6,-40(fp)
   1b29c:	0015b0c0 	call	15b0c <memcpy>
      ptr   += n;
   1b2a0:	e0fff517 	ldw	r3,-44(fp)
   1b2a4:	e0bff617 	ldw	r2,-40(fp)
   1b2a8:	1885883a 	add	r2,r3,r2
   1b2ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1b2b0:	e0fffe17 	ldw	r3,-8(fp)
   1b2b4:	e0bff617 	ldw	r2,-40(fp)
   1b2b8:	1885c83a 	sub	r2,r3,r2
   1b2bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b2c0:	e0fff817 	ldw	r3,-32(fp)
   1b2c4:	e0bff617 	ldw	r2,-40(fp)
   1b2c8:	1885883a 	add	r2,r3,r2
   1b2cc:	10c1ffcc 	andi	r3,r2,2047
   1b2d0:	e0bffc17 	ldw	r2,-16(fp)
   1b2d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1b2d8:	e0bffe17 	ldw	r2,-8(fp)
   1b2dc:	00bfcf16 	blt	zero,r2,1b21c <altera_avalon_jtag_uart_read+0x2c>
   1b2e0:	00000106 	br	1b2e8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1b2e4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1b2e8:	e0fff517 	ldw	r3,-44(fp)
   1b2ec:	e0bffd17 	ldw	r2,-12(fp)
   1b2f0:	1880141e 	bne	r3,r2,1b344 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1b2f4:	e0bfff17 	ldw	r2,-4(fp)
   1b2f8:	1090000c 	andi	r2,r2,16384
   1b2fc:	1000131e 	bne	r2,zero,1b34c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1b300:	0001883a 	nop
   1b304:	e0bffc17 	ldw	r2,-16(fp)
   1b308:	10c00a17 	ldw	r3,40(r2)
   1b30c:	e0bff717 	ldw	r2,-36(fp)
   1b310:	1880051e 	bne	r3,r2,1b328 <altera_avalon_jtag_uart_read+0x138>
   1b314:	e0bffc17 	ldw	r2,-16(fp)
   1b318:	10c00917 	ldw	r3,36(r2)
   1b31c:	e0bffc17 	ldw	r2,-16(fp)
   1b320:	10800117 	ldw	r2,4(r2)
   1b324:	18bff736 	bltu	r3,r2,1b304 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b328:	e0bffc17 	ldw	r2,-16(fp)
   1b32c:	10c00a17 	ldw	r3,40(r2)
   1b330:	e0bff717 	ldw	r2,-36(fp)
   1b334:	18800726 	beq	r3,r2,1b354 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b338:	e0bffe17 	ldw	r2,-8(fp)
   1b33c:	00bfb716 	blt	zero,r2,1b21c <altera_avalon_jtag_uart_read+0x2c>
   1b340:	00000506 	br	1b358 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1b344:	0001883a 	nop
   1b348:	00000306 	br	1b358 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1b34c:	0001883a 	nop
   1b350:	00000106 	br	1b358 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1b354:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1b358:	e0fff517 	ldw	r3,-44(fp)
   1b35c:	e0bffd17 	ldw	r2,-12(fp)
   1b360:	18801726 	beq	r3,r2,1b3c0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b364:	0005303a 	rdctl	r2,status
   1b368:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b36c:	e0fffa17 	ldw	r3,-24(fp)
   1b370:	00bfff84 	movi	r2,-2
   1b374:	1884703a 	and	r2,r3,r2
   1b378:	1001703a 	wrctl	status,r2
  
  return context;
   1b37c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b380:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b384:	e0bffc17 	ldw	r2,-16(fp)
   1b388:	10800817 	ldw	r2,32(r2)
   1b38c:	10c00054 	ori	r3,r2,1
   1b390:	e0bffc17 	ldw	r2,-16(fp)
   1b394:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b398:	e0bffc17 	ldw	r2,-16(fp)
   1b39c:	10800017 	ldw	r2,0(r2)
   1b3a0:	10800104 	addi	r2,r2,4
   1b3a4:	e0fffc17 	ldw	r3,-16(fp)
   1b3a8:	18c00817 	ldw	r3,32(r3)
   1b3ac:	10c00035 	stwio	r3,0(r2)
   1b3b0:	e0bff917 	ldw	r2,-28(fp)
   1b3b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b3b8:	e0bffb17 	ldw	r2,-20(fp)
   1b3bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b3c0:	e0fff517 	ldw	r3,-44(fp)
   1b3c4:	e0bffd17 	ldw	r2,-12(fp)
   1b3c8:	18800426 	beq	r3,r2,1b3dc <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   1b3cc:	e0fff517 	ldw	r3,-44(fp)
   1b3d0:	e0bffd17 	ldw	r2,-12(fp)
   1b3d4:	1885c83a 	sub	r2,r3,r2
   1b3d8:	00000606 	br	1b3f4 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   1b3dc:	e0bfff17 	ldw	r2,-4(fp)
   1b3e0:	1090000c 	andi	r2,r2,16384
   1b3e4:	10000226 	beq	r2,zero,1b3f0 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   1b3e8:	00bffd44 	movi	r2,-11
   1b3ec:	00000106 	br	1b3f4 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   1b3f0:	00bffec4 	movi	r2,-5
}
   1b3f4:	e037883a 	mov	sp,fp
   1b3f8:	dfc00117 	ldw	ra,4(sp)
   1b3fc:	df000017 	ldw	fp,0(sp)
   1b400:	dec00204 	addi	sp,sp,8
   1b404:	f800283a 	ret

0001b408 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b408:	defff304 	addi	sp,sp,-52
   1b40c:	dfc00c15 	stw	ra,48(sp)
   1b410:	df000b15 	stw	fp,44(sp)
   1b414:	df000b04 	addi	fp,sp,44
   1b418:	e13ffc15 	stw	r4,-16(fp)
   1b41c:	e17ffd15 	stw	r5,-12(fp)
   1b420:	e1bffe15 	stw	r6,-8(fp)
   1b424:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b428:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b42c:	e0bffd17 	ldw	r2,-12(fp)
   1b430:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b434:	00003706 	br	1b514 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b438:	e0bffc17 	ldw	r2,-16(fp)
   1b43c:	10800c17 	ldw	r2,48(r2)
   1b440:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1b444:	e0bffc17 	ldw	r2,-16(fp)
   1b448:	10800d17 	ldw	r2,52(r2)
   1b44c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1b450:	e0fff817 	ldw	r3,-32(fp)
   1b454:	e0bff517 	ldw	r2,-44(fp)
   1b458:	1880062e 	bgeu	r3,r2,1b474 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1b45c:	e0fff517 	ldw	r3,-44(fp)
   1b460:	e0bff817 	ldw	r2,-32(fp)
   1b464:	1885c83a 	sub	r2,r3,r2
   1b468:	10bfffc4 	addi	r2,r2,-1
   1b46c:	e0bff615 	stw	r2,-40(fp)
   1b470:	00000b06 	br	1b4a0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1b474:	e0bff517 	ldw	r2,-44(fp)
   1b478:	10000526 	beq	r2,zero,1b490 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b47c:	00c20004 	movi	r3,2048
   1b480:	e0bff817 	ldw	r2,-32(fp)
   1b484:	1885c83a 	sub	r2,r3,r2
   1b488:	e0bff615 	stw	r2,-40(fp)
   1b48c:	00000406 	br	1b4a0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b490:	00c1ffc4 	movi	r3,2047
   1b494:	e0bff817 	ldw	r2,-32(fp)
   1b498:	1885c83a 	sub	r2,r3,r2
   1b49c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1b4a0:	e0bff617 	ldw	r2,-40(fp)
   1b4a4:	10001e26 	beq	r2,zero,1b520 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1b4a8:	e0fffe17 	ldw	r3,-8(fp)
   1b4ac:	e0bff617 	ldw	r2,-40(fp)
   1b4b0:	1880022e 	bgeu	r3,r2,1b4bc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1b4b4:	e0bffe17 	ldw	r2,-8(fp)
   1b4b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b4bc:	e0bff817 	ldw	r2,-32(fp)
   1b4c0:	10820e04 	addi	r2,r2,2104
   1b4c4:	e0fffc17 	ldw	r3,-16(fp)
   1b4c8:	1885883a 	add	r2,r3,r2
   1b4cc:	1009883a 	mov	r4,r2
   1b4d0:	e17ffd17 	ldw	r5,-12(fp)
   1b4d4:	e1bff617 	ldw	r6,-40(fp)
   1b4d8:	0015b0c0 	call	15b0c <memcpy>
      ptr   += n;
   1b4dc:	e0fffd17 	ldw	r3,-12(fp)
   1b4e0:	e0bff617 	ldw	r2,-40(fp)
   1b4e4:	1885883a 	add	r2,r3,r2
   1b4e8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1b4ec:	e0fffe17 	ldw	r3,-8(fp)
   1b4f0:	e0bff617 	ldw	r2,-40(fp)
   1b4f4:	1885c83a 	sub	r2,r3,r2
   1b4f8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b4fc:	e0fff817 	ldw	r3,-32(fp)
   1b500:	e0bff617 	ldw	r2,-40(fp)
   1b504:	1885883a 	add	r2,r3,r2
   1b508:	10c1ffcc 	andi	r3,r2,2047
   1b50c:	e0bffc17 	ldw	r2,-16(fp)
   1b510:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b514:	e0bffe17 	ldw	r2,-8(fp)
   1b518:	00bfc716 	blt	zero,r2,1b438 <altera_avalon_jtag_uart_write+0x30>
   1b51c:	00000106 	br	1b524 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1b520:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b524:	0005303a 	rdctl	r2,status
   1b528:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b52c:	e0fffa17 	ldw	r3,-24(fp)
   1b530:	00bfff84 	movi	r2,-2
   1b534:	1884703a 	and	r2,r3,r2
   1b538:	1001703a 	wrctl	status,r2
  
  return context;
   1b53c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b540:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b544:	e0bffc17 	ldw	r2,-16(fp)
   1b548:	10800817 	ldw	r2,32(r2)
   1b54c:	10c00094 	ori	r3,r2,2
   1b550:	e0bffc17 	ldw	r2,-16(fp)
   1b554:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b558:	e0bffc17 	ldw	r2,-16(fp)
   1b55c:	10800017 	ldw	r2,0(r2)
   1b560:	10800104 	addi	r2,r2,4
   1b564:	e0fffc17 	ldw	r3,-16(fp)
   1b568:	18c00817 	ldw	r3,32(r3)
   1b56c:	10c00035 	stwio	r3,0(r2)
   1b570:	e0bff917 	ldw	r2,-28(fp)
   1b574:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b578:	e0bffb17 	ldw	r2,-20(fp)
   1b57c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b580:	e0bffe17 	ldw	r2,-8(fp)
   1b584:	0080110e 	bge	zero,r2,1b5cc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1b588:	e0bfff17 	ldw	r2,-4(fp)
   1b58c:	1090000c 	andi	r2,r2,16384
   1b590:	1000111e 	bne	r2,zero,1b5d8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b594:	0001883a 	nop
   1b598:	e0bffc17 	ldw	r2,-16(fp)
   1b59c:	10c00d17 	ldw	r3,52(r2)
   1b5a0:	e0bff517 	ldw	r2,-44(fp)
   1b5a4:	1880051e 	bne	r3,r2,1b5bc <altera_avalon_jtag_uart_write+0x1b4>
   1b5a8:	e0bffc17 	ldw	r2,-16(fp)
   1b5ac:	10c00917 	ldw	r3,36(r2)
   1b5b0:	e0bffc17 	ldw	r2,-16(fp)
   1b5b4:	10800117 	ldw	r2,4(r2)
   1b5b8:	18bff736 	bltu	r3,r2,1b598 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1b5bc:	e0bffc17 	ldw	r2,-16(fp)
   1b5c0:	10c00d17 	ldw	r3,52(r2)
   1b5c4:	e0bff517 	ldw	r2,-44(fp)
   1b5c8:	18800526 	beq	r3,r2,1b5e0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1b5cc:	e0bffe17 	ldw	r2,-8(fp)
   1b5d0:	00bfd016 	blt	zero,r2,1b514 <altera_avalon_jtag_uart_write+0x10c>
   1b5d4:	00000306 	br	1b5e4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1b5d8:	0001883a 	nop
   1b5dc:	00000106 	br	1b5e4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   1b5e0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1b5e4:	e0fffd17 	ldw	r3,-12(fp)
   1b5e8:	e0bff717 	ldw	r2,-36(fp)
   1b5ec:	18800426 	beq	r3,r2,1b600 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1b5f0:	e0fffd17 	ldw	r3,-12(fp)
   1b5f4:	e0bff717 	ldw	r2,-36(fp)
   1b5f8:	1885c83a 	sub	r2,r3,r2
   1b5fc:	00000606 	br	1b618 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1b600:	e0bfff17 	ldw	r2,-4(fp)
   1b604:	1090000c 	andi	r2,r2,16384
   1b608:	10000226 	beq	r2,zero,1b614 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1b60c:	00bffd44 	movi	r2,-11
   1b610:	00000106 	br	1b618 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1b614:	00bffec4 	movi	r2,-5
}
   1b618:	e037883a 	mov	sp,fp
   1b61c:	dfc00117 	ldw	ra,4(sp)
   1b620:	df000017 	ldw	fp,0(sp)
   1b624:	dec00204 	addi	sp,sp,8
   1b628:	f800283a 	ret

0001b62c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b62c:	defffa04 	addi	sp,sp,-24
   1b630:	dfc00515 	stw	ra,20(sp)
   1b634:	df000415 	stw	fp,16(sp)
   1b638:	df000404 	addi	fp,sp,16
   1b63c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b640:	0007883a 	mov	r3,zero
   1b644:	e0bfff17 	ldw	r2,-4(fp)
   1b648:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b64c:	e0bfff17 	ldw	r2,-4(fp)
   1b650:	10800104 	addi	r2,r2,4
   1b654:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b658:	0005303a 	rdctl	r2,status
   1b65c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b660:	e0fffd17 	ldw	r3,-12(fp)
   1b664:	00bfff84 	movi	r2,-2
   1b668:	1884703a 	and	r2,r3,r2
   1b66c:	1001703a 	wrctl	status,r2
  
  return context;
   1b670:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b674:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1b678:	001c2ec0 	call	1c2ec <alt_tick>
   1b67c:	e0bffc17 	ldw	r2,-16(fp)
   1b680:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b684:	e0bffe17 	ldw	r2,-8(fp)
   1b688:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b68c:	e037883a 	mov	sp,fp
   1b690:	dfc00117 	ldw	ra,4(sp)
   1b694:	df000017 	ldw	fp,0(sp)
   1b698:	dec00204 	addi	sp,sp,8
   1b69c:	f800283a 	ret

0001b6a0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b6a0:	defff804 	addi	sp,sp,-32
   1b6a4:	dfc00715 	stw	ra,28(sp)
   1b6a8:	df000615 	stw	fp,24(sp)
   1b6ac:	df000604 	addi	fp,sp,24
   1b6b0:	e13ffc15 	stw	r4,-16(fp)
   1b6b4:	e17ffd15 	stw	r5,-12(fp)
   1b6b8:	e1bffe15 	stw	r6,-8(fp)
   1b6bc:	e1ffff15 	stw	r7,-4(fp)
   1b6c0:	e0bfff17 	ldw	r2,-4(fp)
   1b6c4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b6c8:	008000f4 	movhi	r2,3
   1b6cc:	10a7ba04 	addi	r2,r2,-24856
   1b6d0:	10800017 	ldw	r2,0(r2)
   1b6d4:	1000041e 	bne	r2,zero,1b6e8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1b6d8:	008000f4 	movhi	r2,3
   1b6dc:	10a7ba04 	addi	r2,r2,-24856
   1b6e0:	e0fffb17 	ldw	r3,-20(fp)
   1b6e4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b6e8:	e0bffc17 	ldw	r2,-16(fp)
   1b6ec:	10800104 	addi	r2,r2,4
   1b6f0:	00c001c4 	movi	r3,7
   1b6f4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1b6f8:	d8000015 	stw	zero,0(sp)
   1b6fc:	e13ffd17 	ldw	r4,-12(fp)
   1b700:	e17ffe17 	ldw	r5,-8(fp)
   1b704:	018000b4 	movhi	r6,2
   1b708:	31ad8b04 	addi	r6,r6,-18900
   1b70c:	e1fffc17 	ldw	r7,-16(fp)
   1b710:	001bb9c0 	call	1bb9c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1b714:	e037883a 	mov	sp,fp
   1b718:	dfc00117 	ldw	ra,4(sp)
   1b71c:	df000017 	ldw	fp,0(sp)
   1b720:	dec00204 	addi	sp,sp,8
   1b724:	f800283a 	ret

0001b728 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1b728:	defffe04 	addi	sp,sp,-8
   1b72c:	df000115 	stw	fp,4(sp)
   1b730:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   1b734:	008000f4 	movhi	r2,3
   1b738:	10a7b704 	addi	r2,r2,-24868
   1b73c:	10800017 	ldw	r2,0(r2)
   1b740:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   1b744:	008000f4 	movhi	r2,3
   1b748:	10a7b804 	addi	r2,r2,-24864
   1b74c:	10800017 	ldw	r2,0(r2)
   1b750:	1000021e 	bne	r2,zero,1b75c <alt_timestamp_start+0x34>
  {
    return -1;
   1b754:	00bfffc4 	movi	r2,-1
   1b758:	00001106 	br	1b7a0 <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1b75c:	e0bfff17 	ldw	r2,-4(fp)
   1b760:	10800104 	addi	r2,r2,4
   1b764:	00c00204 	movi	r3,8
   1b768:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1b76c:	e0bfff17 	ldw	r2,-4(fp)
   1b770:	10800204 	addi	r2,r2,8
   1b774:	00ffffd4 	movui	r3,65535
   1b778:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1b77c:	e0bfff17 	ldw	r2,-4(fp)
   1b780:	10800304 	addi	r2,r2,12
   1b784:	00ffffd4 	movui	r3,65535
   1b788:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1b78c:	e0bfff17 	ldw	r2,-4(fp)
   1b790:	10800104 	addi	r2,r2,4
   1b794:	00c00104 	movi	r3,4
   1b798:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   1b79c:	0005883a 	mov	r2,zero
}
   1b7a0:	e037883a 	mov	sp,fp
   1b7a4:	df000017 	ldw	fp,0(sp)
   1b7a8:	dec00104 	addi	sp,sp,4
   1b7ac:	f800283a 	ret

0001b7b0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1b7b0:	defffc04 	addi	sp,sp,-16
   1b7b4:	df000315 	stw	fp,12(sp)
   1b7b8:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   1b7bc:	008000f4 	movhi	r2,3
   1b7c0:	10a7b704 	addi	r2,r2,-24868
   1b7c4:	10800017 	ldw	r2,0(r2)
   1b7c8:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1b7cc:	008000f4 	movhi	r2,3
   1b7d0:	10a7b804 	addi	r2,r2,-24864
   1b7d4:	10800017 	ldw	r2,0(r2)
   1b7d8:	1000021e 	bne	r2,zero,1b7e4 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   1b7dc:	00bfffc4 	movi	r2,-1
   1b7e0:	00001306 	br	1b830 <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1b7e4:	e0bffd17 	ldw	r2,-12(fp)
   1b7e8:	10800404 	addi	r2,r2,16
   1b7ec:	0007883a 	mov	r3,zero
   1b7f0:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1b7f4:	e0bffd17 	ldw	r2,-12(fp)
   1b7f8:	10800404 	addi	r2,r2,16
   1b7fc:	10800037 	ldwio	r2,0(r2)
   1b800:	10bfffcc 	andi	r2,r2,65535
   1b804:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   1b808:	e0bffd17 	ldw	r2,-12(fp)
   1b80c:	10800504 	addi	r2,r2,20
   1b810:	10800037 	ldwio	r2,0(r2)
   1b814:	10bfffcc 	andi	r2,r2,65535
   1b818:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1b81c:	e0bfff17 	ldw	r2,-4(fp)
   1b820:	1006943a 	slli	r3,r2,16
   1b824:	e0bffe17 	ldw	r2,-8(fp)
   1b828:	1884b03a 	or	r2,r3,r2
   1b82c:	0084303a 	nor	r2,zero,r2
    }  
  }
}
   1b830:	e037883a 	mov	sp,fp
   1b834:	df000017 	ldw	fp,0(sp)
   1b838:	dec00104 	addi	sp,sp,4
   1b83c:	f800283a 	ret

0001b840 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1b840:	deffff04 	addi	sp,sp,-4
   1b844:	df000015 	stw	fp,0(sp)
   1b848:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1b84c:	008000f4 	movhi	r2,3
   1b850:	10a7b804 	addi	r2,r2,-24864
   1b854:	10800017 	ldw	r2,0(r2)
}
   1b858:	e037883a 	mov	sp,fp
   1b85c:	df000017 	ldw	fp,0(sp)
   1b860:	dec00104 	addi	sp,sp,4
   1b864:	f800283a 	ret

0001b868 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b868:	defff504 	addi	sp,sp,-44
   1b86c:	df000a15 	stw	fp,40(sp)
   1b870:	df000a04 	addi	fp,sp,40
   1b874:	e13ffc15 	stw	r4,-16(fp)
   1b878:	e17ffd15 	stw	r5,-12(fp)
   1b87c:	e1bffe15 	stw	r6,-8(fp)
   1b880:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b884:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b888:	008000f4 	movhi	r2,3
   1b88c:	10a7ba04 	addi	r2,r2,-24856
   1b890:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b894:	10003f26 	beq	r2,zero,1b994 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1b898:	e0bffc17 	ldw	r2,-16(fp)
   1b89c:	10003b26 	beq	r2,zero,1b98c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1b8a0:	e0bffc17 	ldw	r2,-16(fp)
   1b8a4:	e0fffe17 	ldw	r3,-8(fp)
   1b8a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b8ac:	e0bffc17 	ldw	r2,-16(fp)
   1b8b0:	e0ffff17 	ldw	r3,-4(fp)
   1b8b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b8b8:	0005303a 	rdctl	r2,status
   1b8bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b8c0:	e0fff817 	ldw	r3,-32(fp)
   1b8c4:	00bfff84 	movi	r2,-2
   1b8c8:	1884703a 	and	r2,r3,r2
   1b8cc:	1001703a 	wrctl	status,r2
  
  return context;
   1b8d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b8d4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b8d8:	008000f4 	movhi	r2,3
   1b8dc:	10a7bb04 	addi	r2,r2,-24852
   1b8e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b8e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b8e8:	e0fffd17 	ldw	r3,-12(fp)
   1b8ec:	e0bff617 	ldw	r2,-40(fp)
   1b8f0:	1885883a 	add	r2,r3,r2
   1b8f4:	10c00044 	addi	r3,r2,1
   1b8f8:	e0bffc17 	ldw	r2,-16(fp)
   1b8fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b900:	e0bffc17 	ldw	r2,-16(fp)
   1b904:	10c00217 	ldw	r3,8(r2)
   1b908:	e0bff617 	ldw	r2,-40(fp)
   1b90c:	1880042e 	bgeu	r3,r2,1b920 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1b910:	e0bffc17 	ldw	r2,-16(fp)
   1b914:	00c00044 	movi	r3,1
   1b918:	10c00405 	stb	r3,16(r2)
   1b91c:	00000206 	br	1b928 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1b920:	e0bffc17 	ldw	r2,-16(fp)
   1b924:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b928:	e0bffc17 	ldw	r2,-16(fp)
   1b92c:	00c000f4 	movhi	r3,3
   1b930:	18e7a604 	addi	r3,r3,-24936
   1b934:	e0fff915 	stw	r3,-28(fp)
   1b938:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b93c:	e0bffa17 	ldw	r2,-24(fp)
   1b940:	e0fff917 	ldw	r3,-28(fp)
   1b944:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b948:	e0bff917 	ldw	r2,-28(fp)
   1b94c:	10c00017 	ldw	r3,0(r2)
   1b950:	e0bffa17 	ldw	r2,-24(fp)
   1b954:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b958:	e0bff917 	ldw	r2,-28(fp)
   1b95c:	10800017 	ldw	r2,0(r2)
   1b960:	e0fffa17 	ldw	r3,-24(fp)
   1b964:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b968:	e0bff917 	ldw	r2,-28(fp)
   1b96c:	e0fffa17 	ldw	r3,-24(fp)
   1b970:	10c00015 	stw	r3,0(r2)
   1b974:	e0bff717 	ldw	r2,-36(fp)
   1b978:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b97c:	e0bffb17 	ldw	r2,-20(fp)
   1b980:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b984:	0005883a 	mov	r2,zero
   1b988:	00000306 	br	1b998 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1b98c:	00bffa84 	movi	r2,-22
   1b990:	00000106 	br	1b998 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1b994:	00bfde84 	movi	r2,-134
  }
}
   1b998:	e037883a 	mov	sp,fp
   1b99c:	df000017 	ldw	fp,0(sp)
   1b9a0:	dec00104 	addi	sp,sp,4
   1b9a4:	f800283a 	ret

0001b9a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b9a8:	deffff04 	addi	sp,sp,-4
   1b9ac:	df000015 	stw	fp,0(sp)
   1b9b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b9b4:	e037883a 	mov	sp,fp
   1b9b8:	df000017 	ldw	fp,0(sp)
   1b9bc:	dec00104 	addi	sp,sp,4
   1b9c0:	f800283a 	ret

0001b9c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b9c4:	defffe04 	addi	sp,sp,-8
   1b9c8:	dfc00115 	stw	ra,4(sp)
   1b9cc:	df000015 	stw	fp,0(sp)
   1b9d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b9d4:	008000f4 	movhi	r2,3
   1b9d8:	10a7a304 	addi	r2,r2,-24948
   1b9dc:	10800017 	ldw	r2,0(r2)
   1b9e0:	10000526 	beq	r2,zero,1b9f8 <alt_get_errno+0x34>
   1b9e4:	008000f4 	movhi	r2,3
   1b9e8:	10a7a304 	addi	r2,r2,-24948
   1b9ec:	10800017 	ldw	r2,0(r2)
   1b9f0:	103ee83a 	callr	r2
   1b9f4:	00000206 	br	1ba00 <alt_get_errno+0x3c>
   1b9f8:	008000f4 	movhi	r2,3
   1b9fc:	10a7b304 	addi	r2,r2,-24884
}
   1ba00:	e037883a 	mov	sp,fp
   1ba04:	dfc00117 	ldw	ra,4(sp)
   1ba08:	df000017 	ldw	fp,0(sp)
   1ba0c:	dec00204 	addi	sp,sp,8
   1ba10:	f800283a 	ret

0001ba14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1ba14:	defffa04 	addi	sp,sp,-24
   1ba18:	dfc00515 	stw	ra,20(sp)
   1ba1c:	df000415 	stw	fp,16(sp)
   1ba20:	df000404 	addi	fp,sp,16
   1ba24:	e13ffe15 	stw	r4,-8(fp)
   1ba28:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1ba2c:	e0bffe17 	ldw	r2,-8(fp)
   1ba30:	10000326 	beq	r2,zero,1ba40 <alt_dev_llist_insert+0x2c>
   1ba34:	e0bffe17 	ldw	r2,-8(fp)
   1ba38:	10800217 	ldw	r2,8(r2)
   1ba3c:	1000051e 	bne	r2,zero,1ba54 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   1ba40:	001b9c40 	call	1b9c4 <alt_get_errno>
   1ba44:	00c00584 	movi	r3,22
   1ba48:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1ba4c:	00bffa84 	movi	r2,-22
   1ba50:	00001306 	br	1baa0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1ba54:	e0bffe17 	ldw	r2,-8(fp)
   1ba58:	e0ffff17 	ldw	r3,-4(fp)
   1ba5c:	e0fffc15 	stw	r3,-16(fp)
   1ba60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1ba64:	e0bffd17 	ldw	r2,-12(fp)
   1ba68:	e0fffc17 	ldw	r3,-16(fp)
   1ba6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1ba70:	e0bffc17 	ldw	r2,-16(fp)
   1ba74:	10c00017 	ldw	r3,0(r2)
   1ba78:	e0bffd17 	ldw	r2,-12(fp)
   1ba7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1ba80:	e0bffc17 	ldw	r2,-16(fp)
   1ba84:	10800017 	ldw	r2,0(r2)
   1ba88:	e0fffd17 	ldw	r3,-12(fp)
   1ba8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1ba90:	e0bffc17 	ldw	r2,-16(fp)
   1ba94:	e0fffd17 	ldw	r3,-12(fp)
   1ba98:	10c00015 	stw	r3,0(r2)

  return 0;  
   1ba9c:	0005883a 	mov	r2,zero
}
   1baa0:	e037883a 	mov	sp,fp
   1baa4:	dfc00117 	ldw	ra,4(sp)
   1baa8:	df000017 	ldw	fp,0(sp)
   1baac:	dec00204 	addi	sp,sp,8
   1bab0:	f800283a 	ret

0001bab4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1bab4:	defffd04 	addi	sp,sp,-12
   1bab8:	dfc00215 	stw	ra,8(sp)
   1babc:	df000115 	stw	fp,4(sp)
   1bac0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1bac4:	008000b4 	movhi	r2,2
   1bac8:	10b2b904 	addi	r2,r2,-13596
   1bacc:	e0bfff15 	stw	r2,-4(fp)
   1bad0:	00000606 	br	1baec <_do_ctors+0x38>
        (*ctor) (); 
   1bad4:	e0bfff17 	ldw	r2,-4(fp)
   1bad8:	10800017 	ldw	r2,0(r2)
   1badc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1bae0:	e0bfff17 	ldw	r2,-4(fp)
   1bae4:	10bfff04 	addi	r2,r2,-4
   1bae8:	e0bfff15 	stw	r2,-4(fp)
   1baec:	e0ffff17 	ldw	r3,-4(fp)
   1baf0:	008000b4 	movhi	r2,2
   1baf4:	10b2ba04 	addi	r2,r2,-13592
   1baf8:	18bff62e 	bgeu	r3,r2,1bad4 <_do_ctors+0x20>
        (*ctor) (); 
}
   1bafc:	e037883a 	mov	sp,fp
   1bb00:	dfc00117 	ldw	ra,4(sp)
   1bb04:	df000017 	ldw	fp,0(sp)
   1bb08:	dec00204 	addi	sp,sp,8
   1bb0c:	f800283a 	ret

0001bb10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1bb10:	defffd04 	addi	sp,sp,-12
   1bb14:	dfc00215 	stw	ra,8(sp)
   1bb18:	df000115 	stw	fp,4(sp)
   1bb1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1bb20:	008000b4 	movhi	r2,2
   1bb24:	10b2b904 	addi	r2,r2,-13596
   1bb28:	e0bfff15 	stw	r2,-4(fp)
   1bb2c:	00000606 	br	1bb48 <_do_dtors+0x38>
        (*dtor) (); 
   1bb30:	e0bfff17 	ldw	r2,-4(fp)
   1bb34:	10800017 	ldw	r2,0(r2)
   1bb38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1bb3c:	e0bfff17 	ldw	r2,-4(fp)
   1bb40:	10bfff04 	addi	r2,r2,-4
   1bb44:	e0bfff15 	stw	r2,-4(fp)
   1bb48:	e0ffff17 	ldw	r3,-4(fp)
   1bb4c:	008000b4 	movhi	r2,2
   1bb50:	10b2ba04 	addi	r2,r2,-13592
   1bb54:	18bff62e 	bgeu	r3,r2,1bb30 <_do_dtors+0x20>
        (*dtor) (); 
}
   1bb58:	e037883a 	mov	sp,fp
   1bb5c:	dfc00117 	ldw	ra,4(sp)
   1bb60:	df000017 	ldw	fp,0(sp)
   1bb64:	dec00204 	addi	sp,sp,8
   1bb68:	f800283a 	ret

0001bb6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1bb6c:	defffe04 	addi	sp,sp,-8
   1bb70:	dfc00115 	stw	ra,4(sp)
   1bb74:	df000015 	stw	fp,0(sp)
   1bb78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1bb7c:	0009883a 	mov	r4,zero
   1bb80:	01440004 	movi	r5,4096
   1bb84:	001c6880 	call	1c688 <alt_icache_flush>
#endif
}
   1bb88:	e037883a 	mov	sp,fp
   1bb8c:	dfc00117 	ldw	ra,4(sp)
   1bb90:	df000017 	ldw	fp,0(sp)
   1bb94:	dec00204 	addi	sp,sp,8
   1bb98:	f800283a 	ret

0001bb9c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1bb9c:	defff904 	addi	sp,sp,-28
   1bba0:	dfc00615 	stw	ra,24(sp)
   1bba4:	df000515 	stw	fp,20(sp)
   1bba8:	df000504 	addi	fp,sp,20
   1bbac:	e13ffc15 	stw	r4,-16(fp)
   1bbb0:	e17ffd15 	stw	r5,-12(fp)
   1bbb4:	e1bffe15 	stw	r6,-8(fp)
   1bbb8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1bbbc:	e0800217 	ldw	r2,8(fp)
   1bbc0:	d8800015 	stw	r2,0(sp)
   1bbc4:	e13ffc17 	ldw	r4,-16(fp)
   1bbc8:	e17ffd17 	ldw	r5,-12(fp)
   1bbcc:	e1bffe17 	ldw	r6,-8(fp)
   1bbd0:	e1ffff17 	ldw	r7,-4(fp)
   1bbd4:	001bd740 	call	1bd74 <alt_iic_isr_register>
}  
   1bbd8:	e037883a 	mov	sp,fp
   1bbdc:	dfc00117 	ldw	ra,4(sp)
   1bbe0:	df000017 	ldw	fp,0(sp)
   1bbe4:	dec00204 	addi	sp,sp,8
   1bbe8:	f800283a 	ret

0001bbec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1bbec:	defff904 	addi	sp,sp,-28
   1bbf0:	df000615 	stw	fp,24(sp)
   1bbf4:	df000604 	addi	fp,sp,24
   1bbf8:	e13ffe15 	stw	r4,-8(fp)
   1bbfc:	e17fff15 	stw	r5,-4(fp)
   1bc00:	e0bfff17 	ldw	r2,-4(fp)
   1bc04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bc08:	0005303a 	rdctl	r2,status
   1bc0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bc10:	e0fffb17 	ldw	r3,-20(fp)
   1bc14:	00bfff84 	movi	r2,-2
   1bc18:	1884703a 	and	r2,r3,r2
   1bc1c:	1001703a 	wrctl	status,r2
  
  return context;
   1bc20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bc24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1bc28:	e0bffa17 	ldw	r2,-24(fp)
   1bc2c:	00c00044 	movi	r3,1
   1bc30:	1884983a 	sll	r2,r3,r2
   1bc34:	1007883a 	mov	r3,r2
   1bc38:	008000f4 	movhi	r2,3
   1bc3c:	10a7b904 	addi	r2,r2,-24860
   1bc40:	10800017 	ldw	r2,0(r2)
   1bc44:	1886b03a 	or	r3,r3,r2
   1bc48:	008000f4 	movhi	r2,3
   1bc4c:	10a7b904 	addi	r2,r2,-24860
   1bc50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bc54:	008000f4 	movhi	r2,3
   1bc58:	10a7b904 	addi	r2,r2,-24860
   1bc5c:	10800017 	ldw	r2,0(r2)
   1bc60:	100170fa 	wrctl	ienable,r2
   1bc64:	e0bffc17 	ldw	r2,-16(fp)
   1bc68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc6c:	e0bffd17 	ldw	r2,-12(fp)
   1bc70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bc74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1bc78:	e037883a 	mov	sp,fp
   1bc7c:	df000017 	ldw	fp,0(sp)
   1bc80:	dec00104 	addi	sp,sp,4
   1bc84:	f800283a 	ret

0001bc88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1bc88:	defff904 	addi	sp,sp,-28
   1bc8c:	df000615 	stw	fp,24(sp)
   1bc90:	df000604 	addi	fp,sp,24
   1bc94:	e13ffe15 	stw	r4,-8(fp)
   1bc98:	e17fff15 	stw	r5,-4(fp)
   1bc9c:	e0bfff17 	ldw	r2,-4(fp)
   1bca0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bca4:	0005303a 	rdctl	r2,status
   1bca8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bcac:	e0fffb17 	ldw	r3,-20(fp)
   1bcb0:	00bfff84 	movi	r2,-2
   1bcb4:	1884703a 	and	r2,r3,r2
   1bcb8:	1001703a 	wrctl	status,r2
  
  return context;
   1bcbc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bcc0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1bcc4:	e0bffa17 	ldw	r2,-24(fp)
   1bcc8:	00c00044 	movi	r3,1
   1bccc:	1884983a 	sll	r2,r3,r2
   1bcd0:	0084303a 	nor	r2,zero,r2
   1bcd4:	1007883a 	mov	r3,r2
   1bcd8:	008000f4 	movhi	r2,3
   1bcdc:	10a7b904 	addi	r2,r2,-24860
   1bce0:	10800017 	ldw	r2,0(r2)
   1bce4:	1886703a 	and	r3,r3,r2
   1bce8:	008000f4 	movhi	r2,3
   1bcec:	10a7b904 	addi	r2,r2,-24860
   1bcf0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bcf4:	008000f4 	movhi	r2,3
   1bcf8:	10a7b904 	addi	r2,r2,-24860
   1bcfc:	10800017 	ldw	r2,0(r2)
   1bd00:	100170fa 	wrctl	ienable,r2
   1bd04:	e0bffc17 	ldw	r2,-16(fp)
   1bd08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd0c:	e0bffd17 	ldw	r2,-12(fp)
   1bd10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bd14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1bd18:	e037883a 	mov	sp,fp
   1bd1c:	df000017 	ldw	fp,0(sp)
   1bd20:	dec00104 	addi	sp,sp,4
   1bd24:	f800283a 	ret

0001bd28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1bd28:	defffc04 	addi	sp,sp,-16
   1bd2c:	df000315 	stw	fp,12(sp)
   1bd30:	df000304 	addi	fp,sp,12
   1bd34:	e13ffe15 	stw	r4,-8(fp)
   1bd38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1bd3c:	000530fa 	rdctl	r2,ienable
   1bd40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1bd44:	e0bfff17 	ldw	r2,-4(fp)
   1bd48:	00c00044 	movi	r3,1
   1bd4c:	1884983a 	sll	r2,r3,r2
   1bd50:	1007883a 	mov	r3,r2
   1bd54:	e0bffd17 	ldw	r2,-12(fp)
   1bd58:	1884703a 	and	r2,r3,r2
   1bd5c:	1004c03a 	cmpne	r2,r2,zero
   1bd60:	10803fcc 	andi	r2,r2,255
}
   1bd64:	e037883a 	mov	sp,fp
   1bd68:	df000017 	ldw	fp,0(sp)
   1bd6c:	dec00104 	addi	sp,sp,4
   1bd70:	f800283a 	ret

0001bd74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1bd74:	defff504 	addi	sp,sp,-44
   1bd78:	dfc00a15 	stw	ra,40(sp)
   1bd7c:	df000915 	stw	fp,36(sp)
   1bd80:	df000904 	addi	fp,sp,36
   1bd84:	e13ffc15 	stw	r4,-16(fp)
   1bd88:	e17ffd15 	stw	r5,-12(fp)
   1bd8c:	e1bffe15 	stw	r6,-8(fp)
   1bd90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1bd94:	00bffa84 	movi	r2,-22
   1bd98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1bd9c:	e0bffd17 	ldw	r2,-12(fp)
   1bda0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1bda4:	e0bff817 	ldw	r2,-32(fp)
   1bda8:	10800808 	cmpgei	r2,r2,32
   1bdac:	1000271e 	bne	r2,zero,1be4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bdb0:	0005303a 	rdctl	r2,status
   1bdb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bdb8:	e0fffa17 	ldw	r3,-24(fp)
   1bdbc:	00bfff84 	movi	r2,-2
   1bdc0:	1884703a 	and	r2,r3,r2
   1bdc4:	1001703a 	wrctl	status,r2
  
  return context;
   1bdc8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1bdcc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1bdd0:	00c000f4 	movhi	r3,3
   1bdd4:	18e7c604 	addi	r3,r3,-24808
   1bdd8:	e0bff817 	ldw	r2,-32(fp)
   1bddc:	100490fa 	slli	r2,r2,3
   1bde0:	1885883a 	add	r2,r3,r2
   1bde4:	e0fffe17 	ldw	r3,-8(fp)
   1bde8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1bdec:	00c000f4 	movhi	r3,3
   1bdf0:	18e7c604 	addi	r3,r3,-24808
   1bdf4:	e0bff817 	ldw	r2,-32(fp)
   1bdf8:	100490fa 	slli	r2,r2,3
   1bdfc:	1885883a 	add	r2,r3,r2
   1be00:	10800104 	addi	r2,r2,4
   1be04:	e0ffff17 	ldw	r3,-4(fp)
   1be08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1be0c:	e0bffe17 	ldw	r2,-8(fp)
   1be10:	10000526 	beq	r2,zero,1be28 <alt_iic_isr_register+0xb4>
   1be14:	e0bff817 	ldw	r2,-32(fp)
   1be18:	e13ffc17 	ldw	r4,-16(fp)
   1be1c:	100b883a 	mov	r5,r2
   1be20:	001bbec0 	call	1bbec <alt_ic_irq_enable>
   1be24:	00000406 	br	1be38 <alt_iic_isr_register+0xc4>
   1be28:	e0bff817 	ldw	r2,-32(fp)
   1be2c:	e13ffc17 	ldw	r4,-16(fp)
   1be30:	100b883a 	mov	r5,r2
   1be34:	001bc880 	call	1bc88 <alt_ic_irq_disable>
   1be38:	e0bff715 	stw	r2,-36(fp)
   1be3c:	e0bff917 	ldw	r2,-28(fp)
   1be40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be44:	e0bffb17 	ldw	r2,-20(fp)
   1be48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1be4c:	e0bff717 	ldw	r2,-36(fp)
}
   1be50:	e037883a 	mov	sp,fp
   1be54:	dfc00117 	ldw	ra,4(sp)
   1be58:	df000017 	ldw	fp,0(sp)
   1be5c:	dec00204 	addi	sp,sp,8
   1be60:	f800283a 	ret

0001be64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1be64:	defff804 	addi	sp,sp,-32
   1be68:	dfc00715 	stw	ra,28(sp)
   1be6c:	df000615 	stw	fp,24(sp)
   1be70:	dc000515 	stw	r16,20(sp)
   1be74:	df000504 	addi	fp,sp,20
   1be78:	e13ffc15 	stw	r4,-16(fp)
   1be7c:	e17ffd15 	stw	r5,-12(fp)
   1be80:	e1bffe15 	stw	r6,-8(fp)
   1be84:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1be88:	e13ffd17 	ldw	r4,-12(fp)
   1be8c:	e17ffe17 	ldw	r5,-8(fp)
   1be90:	e1bfff17 	ldw	r6,-4(fp)
   1be94:	001c0fc0 	call	1c0fc <open>
   1be98:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1be9c:	e0bffb17 	ldw	r2,-20(fp)
   1bea0:	10002216 	blt	r2,zero,1bf2c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1bea4:	040000f4 	movhi	r16,3
   1bea8:	84232104 	addi	r16,r16,-29564
   1beac:	e0bffb17 	ldw	r2,-20(fp)
   1beb0:	1009883a 	mov	r4,r2
   1beb4:	01400304 	movi	r5,12
   1beb8:	00106640 	call	10664 <__mulsi3>
   1bebc:	8085883a 	add	r2,r16,r2
   1bec0:	10c00017 	ldw	r3,0(r2)
   1bec4:	e0bffc17 	ldw	r2,-16(fp)
   1bec8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1becc:	040000f4 	movhi	r16,3
   1bed0:	84232104 	addi	r16,r16,-29564
   1bed4:	e0bffb17 	ldw	r2,-20(fp)
   1bed8:	1009883a 	mov	r4,r2
   1bedc:	01400304 	movi	r5,12
   1bee0:	00106640 	call	10664 <__mulsi3>
   1bee4:	8085883a 	add	r2,r16,r2
   1bee8:	10800104 	addi	r2,r2,4
   1beec:	10c00017 	ldw	r3,0(r2)
   1bef0:	e0bffc17 	ldw	r2,-16(fp)
   1bef4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1bef8:	040000f4 	movhi	r16,3
   1befc:	84232104 	addi	r16,r16,-29564
   1bf00:	e0bffb17 	ldw	r2,-20(fp)
   1bf04:	1009883a 	mov	r4,r2
   1bf08:	01400304 	movi	r5,12
   1bf0c:	00106640 	call	10664 <__mulsi3>
   1bf10:	8085883a 	add	r2,r16,r2
   1bf14:	10800204 	addi	r2,r2,8
   1bf18:	10c00017 	ldw	r3,0(r2)
   1bf1c:	e0bffc17 	ldw	r2,-16(fp)
   1bf20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1bf24:	e13ffb17 	ldw	r4,-20(fp)
   1bf28:	001a3780 	call	1a378 <alt_release_fd>
  }
} 
   1bf2c:	e037883a 	mov	sp,fp
   1bf30:	dfc00217 	ldw	ra,8(sp)
   1bf34:	df000117 	ldw	fp,4(sp)
   1bf38:	dc000017 	ldw	r16,0(sp)
   1bf3c:	dec00304 	addi	sp,sp,12
   1bf40:	f800283a 	ret

0001bf44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1bf44:	defffb04 	addi	sp,sp,-20
   1bf48:	dfc00415 	stw	ra,16(sp)
   1bf4c:	df000315 	stw	fp,12(sp)
   1bf50:	df000304 	addi	fp,sp,12
   1bf54:	e13ffd15 	stw	r4,-12(fp)
   1bf58:	e17ffe15 	stw	r5,-8(fp)
   1bf5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1bf60:	010000f4 	movhi	r4,3
   1bf64:	21232404 	addi	r4,r4,-29552
   1bf68:	e17ffd17 	ldw	r5,-12(fp)
   1bf6c:	01800044 	movi	r6,1
   1bf70:	01c07fc4 	movi	r7,511
   1bf74:	001be640 	call	1be64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1bf78:	010000f4 	movhi	r4,3
   1bf7c:	21232104 	addi	r4,r4,-29564
   1bf80:	e17ffe17 	ldw	r5,-8(fp)
   1bf84:	000d883a 	mov	r6,zero
   1bf88:	01c07fc4 	movi	r7,511
   1bf8c:	001be640 	call	1be64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1bf90:	010000f4 	movhi	r4,3
   1bf94:	21232704 	addi	r4,r4,-29540
   1bf98:	e17fff17 	ldw	r5,-4(fp)
   1bf9c:	01800044 	movi	r6,1
   1bfa0:	01c07fc4 	movi	r7,511
   1bfa4:	001be640 	call	1be64 <alt_open_fd>
}  
   1bfa8:	e037883a 	mov	sp,fp
   1bfac:	dfc00117 	ldw	ra,4(sp)
   1bfb0:	df000017 	ldw	fp,0(sp)
   1bfb4:	dec00204 	addi	sp,sp,8
   1bfb8:	f800283a 	ret

0001bfbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bfbc:	defffe04 	addi	sp,sp,-8
   1bfc0:	dfc00115 	stw	ra,4(sp)
   1bfc4:	df000015 	stw	fp,0(sp)
   1bfc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1bfcc:	008000f4 	movhi	r2,3
   1bfd0:	10a7a304 	addi	r2,r2,-24948
   1bfd4:	10800017 	ldw	r2,0(r2)
   1bfd8:	10000526 	beq	r2,zero,1bff0 <alt_get_errno+0x34>
   1bfdc:	008000f4 	movhi	r2,3
   1bfe0:	10a7a304 	addi	r2,r2,-24948
   1bfe4:	10800017 	ldw	r2,0(r2)
   1bfe8:	103ee83a 	callr	r2
   1bfec:	00000206 	br	1bff8 <alt_get_errno+0x3c>
   1bff0:	008000f4 	movhi	r2,3
   1bff4:	10a7b304 	addi	r2,r2,-24884
}
   1bff8:	e037883a 	mov	sp,fp
   1bffc:	dfc00117 	ldw	ra,4(sp)
   1c000:	df000017 	ldw	fp,0(sp)
   1c004:	dec00204 	addi	sp,sp,8
   1c008:	f800283a 	ret

0001c00c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1c00c:	defffb04 	addi	sp,sp,-20
   1c010:	dfc00415 	stw	ra,16(sp)
   1c014:	df000315 	stw	fp,12(sp)
   1c018:	dc000215 	stw	r16,8(sp)
   1c01c:	df000204 	addi	fp,sp,8
   1c020:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1c024:	e0bfff17 	ldw	r2,-4(fp)
   1c028:	10800217 	ldw	r2,8(r2)
   1c02c:	10d00034 	orhi	r3,r2,16384
   1c030:	e0bfff17 	ldw	r2,-4(fp)
   1c034:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1c038:	e03ffe15 	stw	zero,-8(fp)
   1c03c:	00002206 	br	1c0c8 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1c040:	040000f4 	movhi	r16,3
   1c044:	84232104 	addi	r16,r16,-29564
   1c048:	e0bffe17 	ldw	r2,-8(fp)
   1c04c:	1009883a 	mov	r4,r2
   1c050:	01400304 	movi	r5,12
   1c054:	00106640 	call	10664 <__mulsi3>
   1c058:	8085883a 	add	r2,r16,r2
   1c05c:	10c00017 	ldw	r3,0(r2)
   1c060:	e0bfff17 	ldw	r2,-4(fp)
   1c064:	10800017 	ldw	r2,0(r2)
   1c068:	1880141e 	bne	r3,r2,1c0bc <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1c06c:	040000f4 	movhi	r16,3
   1c070:	84232104 	addi	r16,r16,-29564
   1c074:	e0bffe17 	ldw	r2,-8(fp)
   1c078:	1009883a 	mov	r4,r2
   1c07c:	01400304 	movi	r5,12
   1c080:	00106640 	call	10664 <__mulsi3>
   1c084:	8085883a 	add	r2,r16,r2
   1c088:	10800204 	addi	r2,r2,8
   1c08c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1c090:	10000a0e 	bge	r2,zero,1c0bc <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1c094:	e13ffe17 	ldw	r4,-8(fp)
   1c098:	01400304 	movi	r5,12
   1c09c:	00106640 	call	10664 <__mulsi3>
   1c0a0:	00c000f4 	movhi	r3,3
   1c0a4:	18e32104 	addi	r3,r3,-29564
   1c0a8:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1c0ac:	e0bfff17 	ldw	r2,-4(fp)
   1c0b0:	18800226 	beq	r3,r2,1c0bc <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1c0b4:	00bffcc4 	movi	r2,-13
   1c0b8:	00000a06 	br	1c0e4 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1c0bc:	e0bffe17 	ldw	r2,-8(fp)
   1c0c0:	10800044 	addi	r2,r2,1
   1c0c4:	e0bffe15 	stw	r2,-8(fp)
   1c0c8:	008000f4 	movhi	r2,3
   1c0cc:	10a7a204 	addi	r2,r2,-24952
   1c0d0:	10800017 	ldw	r2,0(r2)
   1c0d4:	1007883a 	mov	r3,r2
   1c0d8:	e0bffe17 	ldw	r2,-8(fp)
   1c0dc:	18bfd82e 	bgeu	r3,r2,1c040 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1c0e0:	0005883a 	mov	r2,zero
}
   1c0e4:	e037883a 	mov	sp,fp
   1c0e8:	dfc00217 	ldw	ra,8(sp)
   1c0ec:	df000117 	ldw	fp,4(sp)
   1c0f0:	dc000017 	ldw	r16,0(sp)
   1c0f4:	dec00304 	addi	sp,sp,12
   1c0f8:	f800283a 	ret

0001c0fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1c0fc:	defff604 	addi	sp,sp,-40
   1c100:	dfc00915 	stw	ra,36(sp)
   1c104:	df000815 	stw	fp,32(sp)
   1c108:	df000804 	addi	fp,sp,32
   1c10c:	e13ffd15 	stw	r4,-12(fp)
   1c110:	e17ffe15 	stw	r5,-8(fp)
   1c114:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1c118:	00bfffc4 	movi	r2,-1
   1c11c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1c120:	00bffb44 	movi	r2,-19
   1c124:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1c128:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1c12c:	e13ffd17 	ldw	r4,-12(fp)
   1c130:	014000f4 	movhi	r5,3
   1c134:	2967a004 	addi	r5,r5,-24960
   1c138:	001c4100 	call	1c410 <alt_find_dev>
   1c13c:	e0bff815 	stw	r2,-32(fp)
   1c140:	e0bff817 	ldw	r2,-32(fp)
   1c144:	1000051e 	bne	r2,zero,1c15c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1c148:	e13ffd17 	ldw	r4,-12(fp)
   1c14c:	001c4a00 	call	1c4a0 <alt_find_file>
   1c150:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1c154:	00800044 	movi	r2,1
   1c158:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1c15c:	e0bff817 	ldw	r2,-32(fp)
   1c160:	10002a26 	beq	r2,zero,1c20c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1c164:	e13ff817 	ldw	r4,-32(fp)
   1c168:	001c5b40 	call	1c5b4 <alt_get_fd>
   1c16c:	e0bff915 	stw	r2,-28(fp)
   1c170:	e0bff917 	ldw	r2,-28(fp)
   1c174:	1000030e 	bge	r2,zero,1c184 <open+0x88>
    {
      status = index;
   1c178:	e0bff917 	ldw	r2,-28(fp)
   1c17c:	e0bffa15 	stw	r2,-24(fp)
   1c180:	00002406 	br	1c214 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1c184:	e13ff917 	ldw	r4,-28(fp)
   1c188:	01400304 	movi	r5,12
   1c18c:	00106640 	call	10664 <__mulsi3>
   1c190:	00c000f4 	movhi	r3,3
   1c194:	18e32104 	addi	r3,r3,-29564
   1c198:	10c5883a 	add	r2,r2,r3
   1c19c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1c1a0:	e0fffe17 	ldw	r3,-8(fp)
   1c1a4:	00900034 	movhi	r2,16384
   1c1a8:	10bfffc4 	addi	r2,r2,-1
   1c1ac:	1886703a 	and	r3,r3,r2
   1c1b0:	e0bffc17 	ldw	r2,-16(fp)
   1c1b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1c1b8:	e0bffb17 	ldw	r2,-20(fp)
   1c1bc:	1000051e 	bne	r2,zero,1c1d4 <open+0xd8>
   1c1c0:	e13ffc17 	ldw	r4,-16(fp)
   1c1c4:	001c00c0 	call	1c00c <alt_file_locked>
   1c1c8:	e0bffa15 	stw	r2,-24(fp)
   1c1cc:	e0bffa17 	ldw	r2,-24(fp)
   1c1d0:	10001016 	blt	r2,zero,1c214 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1c1d4:	e0bff817 	ldw	r2,-32(fp)
   1c1d8:	10800317 	ldw	r2,12(r2)
   1c1dc:	10000826 	beq	r2,zero,1c200 <open+0x104>
   1c1e0:	e0bff817 	ldw	r2,-32(fp)
   1c1e4:	10800317 	ldw	r2,12(r2)
   1c1e8:	e13ffc17 	ldw	r4,-16(fp)
   1c1ec:	e17ffd17 	ldw	r5,-12(fp)
   1c1f0:	e1bffe17 	ldw	r6,-8(fp)
   1c1f4:	e1ffff17 	ldw	r7,-4(fp)
   1c1f8:	103ee83a 	callr	r2
   1c1fc:	00000106 	br	1c204 <open+0x108>
   1c200:	0005883a 	mov	r2,zero
   1c204:	e0bffa15 	stw	r2,-24(fp)
   1c208:	00000206 	br	1c214 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1c20c:	00bffb44 	movi	r2,-19
   1c210:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1c214:	e0bffa17 	ldw	r2,-24(fp)
   1c218:	1000080e 	bge	r2,zero,1c23c <open+0x140>
  {
    alt_release_fd (index);  
   1c21c:	e13ff917 	ldw	r4,-28(fp)
   1c220:	001a3780 	call	1a378 <alt_release_fd>
    ALT_ERRNO = -status;
   1c224:	001bfbc0 	call	1bfbc <alt_get_errno>
   1c228:	e0fffa17 	ldw	r3,-24(fp)
   1c22c:	00c7c83a 	sub	r3,zero,r3
   1c230:	10c00015 	stw	r3,0(r2)
    return -1;
   1c234:	00bfffc4 	movi	r2,-1
   1c238:	00000106 	br	1c240 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1c23c:	e0bff917 	ldw	r2,-28(fp)
}
   1c240:	e037883a 	mov	sp,fp
   1c244:	dfc00117 	ldw	ra,4(sp)
   1c248:	df000017 	ldw	fp,0(sp)
   1c24c:	dec00204 	addi	sp,sp,8
   1c250:	f800283a 	ret

0001c254 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1c254:	defffa04 	addi	sp,sp,-24
   1c258:	df000515 	stw	fp,20(sp)
   1c25c:	df000504 	addi	fp,sp,20
   1c260:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c264:	0005303a 	rdctl	r2,status
   1c268:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c26c:	e0fffc17 	ldw	r3,-16(fp)
   1c270:	00bfff84 	movi	r2,-2
   1c274:	1884703a 	and	r2,r3,r2
   1c278:	1001703a 	wrctl	status,r2
  
  return context;
   1c27c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1c280:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1c284:	e0bfff17 	ldw	r2,-4(fp)
   1c288:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1c28c:	e0bffd17 	ldw	r2,-12(fp)
   1c290:	10800017 	ldw	r2,0(r2)
   1c294:	e0fffd17 	ldw	r3,-12(fp)
   1c298:	18c00117 	ldw	r3,4(r3)
   1c29c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1c2a0:	e0bffd17 	ldw	r2,-12(fp)
   1c2a4:	10800117 	ldw	r2,4(r2)
   1c2a8:	e0fffd17 	ldw	r3,-12(fp)
   1c2ac:	18c00017 	ldw	r3,0(r3)
   1c2b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1c2b4:	e0bffd17 	ldw	r2,-12(fp)
   1c2b8:	e0fffd17 	ldw	r3,-12(fp)
   1c2bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1c2c0:	e0bffd17 	ldw	r2,-12(fp)
   1c2c4:	e0fffd17 	ldw	r3,-12(fp)
   1c2c8:	10c00015 	stw	r3,0(r2)
   1c2cc:	e0bffb17 	ldw	r2,-20(fp)
   1c2d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c2d4:	e0bffe17 	ldw	r2,-8(fp)
   1c2d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1c2dc:	e037883a 	mov	sp,fp
   1c2e0:	df000017 	ldw	fp,0(sp)
   1c2e4:	dec00104 	addi	sp,sp,4
   1c2e8:	f800283a 	ret

0001c2ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1c2ec:	defffb04 	addi	sp,sp,-20
   1c2f0:	dfc00415 	stw	ra,16(sp)
   1c2f4:	df000315 	stw	fp,12(sp)
   1c2f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1c2fc:	d0a00d17 	ldw	r2,-32716(gp)
   1c300:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1c304:	d0a02217 	ldw	r2,-32632(gp)
   1c308:	10800044 	addi	r2,r2,1
   1c30c:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c310:	00002e06 	br	1c3cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1c314:	e0bffd17 	ldw	r2,-12(fp)
   1c318:	10800017 	ldw	r2,0(r2)
   1c31c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1c320:	e0bffd17 	ldw	r2,-12(fp)
   1c324:	10800403 	ldbu	r2,16(r2)
   1c328:	10803fcc 	andi	r2,r2,255
   1c32c:	10000426 	beq	r2,zero,1c340 <alt_tick+0x54>
   1c330:	d0a02217 	ldw	r2,-32632(gp)
   1c334:	1000021e 	bne	r2,zero,1c340 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1c338:	e0bffd17 	ldw	r2,-12(fp)
   1c33c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1c340:	e0bffd17 	ldw	r2,-12(fp)
   1c344:	10800217 	ldw	r2,8(r2)
   1c348:	d0e02217 	ldw	r3,-32632(gp)
   1c34c:	18801d36 	bltu	r3,r2,1c3c4 <alt_tick+0xd8>
   1c350:	e0bffd17 	ldw	r2,-12(fp)
   1c354:	10800403 	ldbu	r2,16(r2)
   1c358:	10803fcc 	andi	r2,r2,255
   1c35c:	1000191e 	bne	r2,zero,1c3c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1c360:	e0bffd17 	ldw	r2,-12(fp)
   1c364:	10c00317 	ldw	r3,12(r2)
   1c368:	e0bffd17 	ldw	r2,-12(fp)
   1c36c:	10800517 	ldw	r2,20(r2)
   1c370:	1009883a 	mov	r4,r2
   1c374:	183ee83a 	callr	r3
   1c378:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1c37c:	e0bfff17 	ldw	r2,-4(fp)
   1c380:	1000031e 	bne	r2,zero,1c390 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1c384:	e13ffd17 	ldw	r4,-12(fp)
   1c388:	001c2540 	call	1c254 <alt_alarm_stop>
   1c38c:	00000d06 	br	1c3c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1c390:	e0bffd17 	ldw	r2,-12(fp)
   1c394:	10c00217 	ldw	r3,8(r2)
   1c398:	e0bfff17 	ldw	r2,-4(fp)
   1c39c:	1887883a 	add	r3,r3,r2
   1c3a0:	e0bffd17 	ldw	r2,-12(fp)
   1c3a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1c3a8:	e0bffd17 	ldw	r2,-12(fp)
   1c3ac:	10c00217 	ldw	r3,8(r2)
   1c3b0:	d0a02217 	ldw	r2,-32632(gp)
   1c3b4:	1880032e 	bgeu	r3,r2,1c3c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1c3b8:	e0bffd17 	ldw	r2,-12(fp)
   1c3bc:	00c00044 	movi	r3,1
   1c3c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1c3c4:	e0bffe17 	ldw	r2,-8(fp)
   1c3c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c3cc:	e0fffd17 	ldw	r3,-12(fp)
   1c3d0:	d0a00d04 	addi	r2,gp,-32716
   1c3d4:	18bfcf1e 	bne	r3,r2,1c314 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1c3d8:	0001883a 	nop
}
   1c3dc:	e037883a 	mov	sp,fp
   1c3e0:	dfc00117 	ldw	ra,4(sp)
   1c3e4:	df000017 	ldw	fp,0(sp)
   1c3e8:	dec00204 	addi	sp,sp,8
   1c3ec:	f800283a 	ret

0001c3f0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1c3f0:	deffff04 	addi	sp,sp,-4
   1c3f4:	df000015 	stw	fp,0(sp)
   1c3f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1c3fc:	000170fa 	wrctl	ienable,zero
}
   1c400:	e037883a 	mov	sp,fp
   1c404:	df000017 	ldw	fp,0(sp)
   1c408:	dec00104 	addi	sp,sp,4
   1c40c:	f800283a 	ret

0001c410 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1c410:	defffa04 	addi	sp,sp,-24
   1c414:	dfc00515 	stw	ra,20(sp)
   1c418:	df000415 	stw	fp,16(sp)
   1c41c:	df000404 	addi	fp,sp,16
   1c420:	e13ffe15 	stw	r4,-8(fp)
   1c424:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1c428:	e0bfff17 	ldw	r2,-4(fp)
   1c42c:	10800017 	ldw	r2,0(r2)
   1c430:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1c434:	e13ffe17 	ldw	r4,-8(fp)
   1c438:	001078c0 	call	1078c <strlen>
   1c43c:	10800044 	addi	r2,r2,1
   1c440:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c444:	00000d06 	br	1c47c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1c448:	e0bffc17 	ldw	r2,-16(fp)
   1c44c:	10c00217 	ldw	r3,8(r2)
   1c450:	e0bffd17 	ldw	r2,-12(fp)
   1c454:	1809883a 	mov	r4,r3
   1c458:	e17ffe17 	ldw	r5,-8(fp)
   1c45c:	100d883a 	mov	r6,r2
   1c460:	001c7600 	call	1c760 <memcmp>
   1c464:	1000021e 	bne	r2,zero,1c470 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1c468:	e0bffc17 	ldw	r2,-16(fp)
   1c46c:	00000706 	br	1c48c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1c470:	e0bffc17 	ldw	r2,-16(fp)
   1c474:	10800017 	ldw	r2,0(r2)
   1c478:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c47c:	e0fffc17 	ldw	r3,-16(fp)
   1c480:	e0bfff17 	ldw	r2,-4(fp)
   1c484:	18bff01e 	bne	r3,r2,1c448 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1c488:	0005883a 	mov	r2,zero
}
   1c48c:	e037883a 	mov	sp,fp
   1c490:	dfc00117 	ldw	ra,4(sp)
   1c494:	df000017 	ldw	fp,0(sp)
   1c498:	dec00204 	addi	sp,sp,8
   1c49c:	f800283a 	ret

0001c4a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1c4a0:	defffb04 	addi	sp,sp,-20
   1c4a4:	dfc00415 	stw	ra,16(sp)
   1c4a8:	df000315 	stw	fp,12(sp)
   1c4ac:	df000304 	addi	fp,sp,12
   1c4b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1c4b4:	008000f4 	movhi	r2,3
   1c4b8:	10a79e04 	addi	r2,r2,-24968
   1c4bc:	10800017 	ldw	r2,0(r2)
   1c4c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c4c4:	00003106 	br	1c58c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1c4c8:	e0bffd17 	ldw	r2,-12(fp)
   1c4cc:	10800217 	ldw	r2,8(r2)
   1c4d0:	1009883a 	mov	r4,r2
   1c4d4:	001078c0 	call	1078c <strlen>
   1c4d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1c4dc:	e0bffd17 	ldw	r2,-12(fp)
   1c4e0:	10c00217 	ldw	r3,8(r2)
   1c4e4:	e0bffe17 	ldw	r2,-8(fp)
   1c4e8:	10bfffc4 	addi	r2,r2,-1
   1c4ec:	1885883a 	add	r2,r3,r2
   1c4f0:	10800003 	ldbu	r2,0(r2)
   1c4f4:	10803fcc 	andi	r2,r2,255
   1c4f8:	1080201c 	xori	r2,r2,128
   1c4fc:	10bfe004 	addi	r2,r2,-128
   1c500:	10800bd8 	cmpnei	r2,r2,47
   1c504:	1000031e 	bne	r2,zero,1c514 <alt_find_file+0x74>
    {
      len -= 1;
   1c508:	e0bffe17 	ldw	r2,-8(fp)
   1c50c:	10bfffc4 	addi	r2,r2,-1
   1c510:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c514:	e0bffe17 	ldw	r2,-8(fp)
   1c518:	e0ffff17 	ldw	r3,-4(fp)
   1c51c:	1885883a 	add	r2,r3,r2
   1c520:	10800003 	ldbu	r2,0(r2)
   1c524:	10803fcc 	andi	r2,r2,255
   1c528:	1080201c 	xori	r2,r2,128
   1c52c:	10bfe004 	addi	r2,r2,-128
   1c530:	10800be0 	cmpeqi	r2,r2,47
   1c534:	1000081e 	bne	r2,zero,1c558 <alt_find_file+0xb8>
   1c538:	e0bffe17 	ldw	r2,-8(fp)
   1c53c:	e0ffff17 	ldw	r3,-4(fp)
   1c540:	1885883a 	add	r2,r3,r2
   1c544:	10800003 	ldbu	r2,0(r2)
   1c548:	10803fcc 	andi	r2,r2,255
   1c54c:	1080201c 	xori	r2,r2,128
   1c550:	10bfe004 	addi	r2,r2,-128
   1c554:	10000a1e 	bne	r2,zero,1c580 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1c558:	e0bffd17 	ldw	r2,-12(fp)
   1c55c:	10c00217 	ldw	r3,8(r2)
   1c560:	e0bffe17 	ldw	r2,-8(fp)
   1c564:	1809883a 	mov	r4,r3
   1c568:	e17fff17 	ldw	r5,-4(fp)
   1c56c:	100d883a 	mov	r6,r2
   1c570:	001c7600 	call	1c760 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c574:	1000021e 	bne	r2,zero,1c580 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1c578:	e0bffd17 	ldw	r2,-12(fp)
   1c57c:	00000806 	br	1c5a0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1c580:	e0bffd17 	ldw	r2,-12(fp)
   1c584:	10800017 	ldw	r2,0(r2)
   1c588:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c58c:	e0fffd17 	ldw	r3,-12(fp)
   1c590:	008000f4 	movhi	r2,3
   1c594:	10a79e04 	addi	r2,r2,-24968
   1c598:	18bfcb1e 	bne	r3,r2,1c4c8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c59c:	0005883a 	mov	r2,zero
}
   1c5a0:	e037883a 	mov	sp,fp
   1c5a4:	dfc00117 	ldw	ra,4(sp)
   1c5a8:	df000017 	ldw	fp,0(sp)
   1c5ac:	dec00204 	addi	sp,sp,8
   1c5b0:	f800283a 	ret

0001c5b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c5b4:	defffa04 	addi	sp,sp,-24
   1c5b8:	dfc00515 	stw	ra,20(sp)
   1c5bc:	df000415 	stw	fp,16(sp)
   1c5c0:	dc000315 	stw	r16,12(sp)
   1c5c4:	df000304 	addi	fp,sp,12
   1c5c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c5cc:	00bffa04 	movi	r2,-24
   1c5d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c5d4:	e03ffd15 	stw	zero,-12(fp)
   1c5d8:	00002106 	br	1c660 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1c5dc:	040000f4 	movhi	r16,3
   1c5e0:	84232104 	addi	r16,r16,-29564
   1c5e4:	e0bffd17 	ldw	r2,-12(fp)
   1c5e8:	1009883a 	mov	r4,r2
   1c5ec:	01400304 	movi	r5,12
   1c5f0:	00106640 	call	10664 <__mulsi3>
   1c5f4:	8085883a 	add	r2,r16,r2
   1c5f8:	10800017 	ldw	r2,0(r2)
   1c5fc:	1000151e 	bne	r2,zero,1c654 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1c600:	040000f4 	movhi	r16,3
   1c604:	84232104 	addi	r16,r16,-29564
   1c608:	e0bffd17 	ldw	r2,-12(fp)
   1c60c:	1009883a 	mov	r4,r2
   1c610:	01400304 	movi	r5,12
   1c614:	00106640 	call	10664 <__mulsi3>
   1c618:	8085883a 	add	r2,r16,r2
   1c61c:	e0ffff17 	ldw	r3,-4(fp)
   1c620:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1c624:	008000f4 	movhi	r2,3
   1c628:	10a7a204 	addi	r2,r2,-24952
   1c62c:	10c00017 	ldw	r3,0(r2)
   1c630:	e0bffd17 	ldw	r2,-12(fp)
   1c634:	1880040e 	bge	r3,r2,1c648 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1c638:	008000f4 	movhi	r2,3
   1c63c:	10a7a204 	addi	r2,r2,-24952
   1c640:	e0fffd17 	ldw	r3,-12(fp)
   1c644:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1c648:	e0bffd17 	ldw	r2,-12(fp)
   1c64c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1c650:	00000606 	br	1c66c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c654:	e0bffd17 	ldw	r2,-12(fp)
   1c658:	10800044 	addi	r2,r2,1
   1c65c:	e0bffd15 	stw	r2,-12(fp)
   1c660:	e0bffd17 	ldw	r2,-12(fp)
   1c664:	10800810 	cmplti	r2,r2,32
   1c668:	103fdc1e 	bne	r2,zero,1c5dc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1c66c:	e0bffe17 	ldw	r2,-8(fp)
}
   1c670:	e037883a 	mov	sp,fp
   1c674:	dfc00217 	ldw	ra,8(sp)
   1c678:	df000117 	ldw	fp,4(sp)
   1c67c:	dc000017 	ldw	r16,0(sp)
   1c680:	dec00304 	addi	sp,sp,12
   1c684:	f800283a 	ret

0001c688 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c688:	defffb04 	addi	sp,sp,-20
   1c68c:	df000415 	stw	fp,16(sp)
   1c690:	df000404 	addi	fp,sp,16
   1c694:	e13ffe15 	stw	r4,-8(fp)
   1c698:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c69c:	e0bfff17 	ldw	r2,-4(fp)
   1c6a0:	10840070 	cmpltui	r2,r2,4097
   1c6a4:	1000021e 	bne	r2,zero,1c6b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c6a8:	00840004 	movi	r2,4096
   1c6ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c6b0:	e0fffe17 	ldw	r3,-8(fp)
   1c6b4:	e0bfff17 	ldw	r2,-4(fp)
   1c6b8:	1885883a 	add	r2,r3,r2
   1c6bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c6c0:	e0bffe17 	ldw	r2,-8(fp)
   1c6c4:	e0bffc15 	stw	r2,-16(fp)
   1c6c8:	00000506 	br	1c6e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c6cc:	e0bffc17 	ldw	r2,-16(fp)
   1c6d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c6d4:	e0bffc17 	ldw	r2,-16(fp)
   1c6d8:	10800804 	addi	r2,r2,32
   1c6dc:	e0bffc15 	stw	r2,-16(fp)
   1c6e0:	e0fffc17 	ldw	r3,-16(fp)
   1c6e4:	e0bffd17 	ldw	r2,-12(fp)
   1c6e8:	18bff836 	bltu	r3,r2,1c6cc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c6ec:	e0bffe17 	ldw	r2,-8(fp)
   1c6f0:	108007cc 	andi	r2,r2,31
   1c6f4:	10000226 	beq	r2,zero,1c700 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c6f8:	e0bffc17 	ldw	r2,-16(fp)
   1c6fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c700:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c704:	e037883a 	mov	sp,fp
   1c708:	df000017 	ldw	fp,0(sp)
   1c70c:	dec00104 	addi	sp,sp,4
   1c710:	f800283a 	ret

0001c714 <atexit>:
   1c714:	200b883a 	mov	r5,r4
   1c718:	000d883a 	mov	r6,zero
   1c71c:	0009883a 	mov	r4,zero
   1c720:	000f883a 	mov	r7,zero
   1c724:	001c7dc1 	jmpi	1c7dc <__register_exitproc>

0001c728 <exit>:
   1c728:	defffe04 	addi	sp,sp,-8
   1c72c:	000b883a 	mov	r5,zero
   1c730:	dc000015 	stw	r16,0(sp)
   1c734:	dfc00115 	stw	ra,4(sp)
   1c738:	2021883a 	mov	r16,r4
   1c73c:	001c90c0 	call	1c90c <__call_exitprocs>
   1c740:	008000f4 	movhi	r2,3
   1c744:	10a79904 	addi	r2,r2,-24988
   1c748:	11000017 	ldw	r4,0(r2)
   1c74c:	20800f17 	ldw	r2,60(r4)
   1c750:	10000126 	beq	r2,zero,1c758 <exit+0x30>
   1c754:	103ee83a 	callr	r2
   1c758:	8009883a 	mov	r4,r16
   1c75c:	001caac0 	call	1caac <_exit>

0001c760 <memcmp>:
   1c760:	01c000c4 	movi	r7,3
   1c764:	3980192e 	bgeu	r7,r6,1c7cc <memcmp+0x6c>
   1c768:	2904b03a 	or	r2,r5,r4
   1c76c:	11c4703a 	and	r2,r2,r7
   1c770:	10000f26 	beq	r2,zero,1c7b0 <memcmp+0x50>
   1c774:	20c00003 	ldbu	r3,0(r4)
   1c778:	28800003 	ldbu	r2,0(r5)
   1c77c:	1880151e 	bne	r3,r2,1c7d4 <memcmp+0x74>
   1c780:	31bfff84 	addi	r6,r6,-2
   1c784:	01ffffc4 	movi	r7,-1
   1c788:	00000406 	br	1c79c <memcmp+0x3c>
   1c78c:	20c00003 	ldbu	r3,0(r4)
   1c790:	28800003 	ldbu	r2,0(r5)
   1c794:	31bfffc4 	addi	r6,r6,-1
   1c798:	18800e1e 	bne	r3,r2,1c7d4 <memcmp+0x74>
   1c79c:	21000044 	addi	r4,r4,1
   1c7a0:	29400044 	addi	r5,r5,1
   1c7a4:	31fff91e 	bne	r6,r7,1c78c <memcmp+0x2c>
   1c7a8:	0005883a 	mov	r2,zero
   1c7ac:	f800283a 	ret
   1c7b0:	20c00017 	ldw	r3,0(r4)
   1c7b4:	28800017 	ldw	r2,0(r5)
   1c7b8:	1880041e 	bne	r3,r2,1c7cc <memcmp+0x6c>
   1c7bc:	31bfff04 	addi	r6,r6,-4
   1c7c0:	21000104 	addi	r4,r4,4
   1c7c4:	29400104 	addi	r5,r5,4
   1c7c8:	39bff936 	bltu	r7,r6,1c7b0 <memcmp+0x50>
   1c7cc:	303fe91e 	bne	r6,zero,1c774 <memcmp+0x14>
   1c7d0:	003ff506 	br	1c7a8 <memcmp+0x48>
   1c7d4:	1885c83a 	sub	r2,r3,r2
   1c7d8:	f800283a 	ret

0001c7dc <__register_exitproc>:
   1c7dc:	defffa04 	addi	sp,sp,-24
   1c7e0:	008000f4 	movhi	r2,3
   1c7e4:	10a79904 	addi	r2,r2,-24988
   1c7e8:	dc000315 	stw	r16,12(sp)
   1c7ec:	14000017 	ldw	r16,0(r2)
   1c7f0:	dc400415 	stw	r17,16(sp)
   1c7f4:	dfc00515 	stw	ra,20(sp)
   1c7f8:	80805217 	ldw	r2,328(r16)
   1c7fc:	2023883a 	mov	r17,r4
   1c800:	10003e26 	beq	r2,zero,1c8fc <__register_exitproc+0x120>
   1c804:	10c00117 	ldw	r3,4(r2)
   1c808:	020007c4 	movi	r8,31
   1c80c:	40c0180e 	bge	r8,r3,1c870 <__register_exitproc+0x94>
   1c810:	00800034 	movhi	r2,0
   1c814:	10800004 	addi	r2,r2,0
   1c818:	1000061e 	bne	r2,zero,1c834 <__register_exitproc+0x58>
   1c81c:	00bfffc4 	movi	r2,-1
   1c820:	dfc00517 	ldw	ra,20(sp)
   1c824:	dc400417 	ldw	r17,16(sp)
   1c828:	dc000317 	ldw	r16,12(sp)
   1c82c:	dec00604 	addi	sp,sp,24
   1c830:	f800283a 	ret
   1c834:	01006404 	movi	r4,400
   1c838:	d9400015 	stw	r5,0(sp)
   1c83c:	d9800115 	stw	r6,4(sp)
   1c840:	d9c00215 	stw	r7,8(sp)
   1c844:	00000000 	call	0 <__alt_mem_instruction_memory_0-0x10000>
   1c848:	d9400017 	ldw	r5,0(sp)
   1c84c:	d9800117 	ldw	r6,4(sp)
   1c850:	d9c00217 	ldw	r7,8(sp)
   1c854:	103ff126 	beq	r2,zero,1c81c <__register_exitproc+0x40>
   1c858:	80c05217 	ldw	r3,328(r16)
   1c85c:	10000115 	stw	zero,4(r2)
   1c860:	10c00015 	stw	r3,0(r2)
   1c864:	80805215 	stw	r2,328(r16)
   1c868:	10006215 	stw	zero,392(r2)
   1c86c:	10006315 	stw	zero,396(r2)
   1c870:	10c00117 	ldw	r3,4(r2)
   1c874:	88000d1e 	bne	r17,zero,1c8ac <__register_exitproc+0xd0>
   1c878:	19000084 	addi	r4,r3,2
   1c87c:	2109883a 	add	r4,r4,r4
   1c880:	18c00044 	addi	r3,r3,1
   1c884:	2109883a 	add	r4,r4,r4
   1c888:	1109883a 	add	r4,r2,r4
   1c88c:	10c00115 	stw	r3,4(r2)
   1c890:	0005883a 	mov	r2,zero
   1c894:	21400015 	stw	r5,0(r4)
   1c898:	dfc00517 	ldw	ra,20(sp)
   1c89c:	dc400417 	ldw	r17,16(sp)
   1c8a0:	dc000317 	ldw	r16,12(sp)
   1c8a4:	dec00604 	addi	sp,sp,24
   1c8a8:	f800283a 	ret
   1c8ac:	02400044 	movi	r9,1
   1c8b0:	12806217 	ldw	r10,392(r2)
   1c8b4:	48d2983a 	sll	r9,r9,r3
   1c8b8:	19000804 	addi	r4,r3,32
   1c8bc:	18d1883a 	add	r8,r3,r3
   1c8c0:	2109883a 	add	r4,r4,r4
   1c8c4:	4211883a 	add	r8,r8,r8
   1c8c8:	2109883a 	add	r4,r4,r4
   1c8cc:	1109883a 	add	r4,r2,r4
   1c8d0:	1211883a 	add	r8,r2,r8
   1c8d4:	5254b03a 	or	r10,r10,r9
   1c8d8:	21c02215 	stw	r7,136(r4)
   1c8dc:	41802215 	stw	r6,136(r8)
   1c8e0:	12806215 	stw	r10,392(r2)
   1c8e4:	01000084 	movi	r4,2
   1c8e8:	893fe31e 	bne	r17,r4,1c878 <__register_exitproc+0x9c>
   1c8ec:	11006317 	ldw	r4,396(r2)
   1c8f0:	2252b03a 	or	r9,r4,r9
   1c8f4:	12406315 	stw	r9,396(r2)
   1c8f8:	003fdf06 	br	1c878 <__register_exitproc+0x9c>
   1c8fc:	008000f4 	movhi	r2,3
   1c900:	10a80604 	addi	r2,r2,-24552
   1c904:	80805215 	stw	r2,328(r16)
   1c908:	003fbe06 	br	1c804 <__register_exitproc+0x28>

0001c90c <__call_exitprocs>:
   1c90c:	008000f4 	movhi	r2,3
   1c910:	10a79904 	addi	r2,r2,-24988
   1c914:	10800017 	ldw	r2,0(r2)
   1c918:	defff304 	addi	sp,sp,-52
   1c91c:	df000b15 	stw	fp,44(sp)
   1c920:	d8800015 	stw	r2,0(sp)
   1c924:	10805204 	addi	r2,r2,328
   1c928:	dd400815 	stw	r21,32(sp)
   1c92c:	dfc00c15 	stw	ra,48(sp)
   1c930:	ddc00a15 	stw	r23,40(sp)
   1c934:	dd800915 	stw	r22,36(sp)
   1c938:	dd000715 	stw	r20,28(sp)
   1c93c:	dcc00615 	stw	r19,24(sp)
   1c940:	dc800515 	stw	r18,20(sp)
   1c944:	dc400415 	stw	r17,16(sp)
   1c948:	dc000315 	stw	r16,12(sp)
   1c94c:	d9000115 	stw	r4,4(sp)
   1c950:	2839883a 	mov	fp,r5
   1c954:	d8800215 	stw	r2,8(sp)
   1c958:	057fffc4 	movi	r21,-1
   1c95c:	d8800017 	ldw	r2,0(sp)
   1c960:	ddc00217 	ldw	r23,8(sp)
   1c964:	14805217 	ldw	r18,328(r2)
   1c968:	90001726 	beq	r18,zero,1c9c8 <__call_exitprocs+0xbc>
   1c96c:	94400117 	ldw	r17,4(r18)
   1c970:	8c3fffc4 	addi	r16,r17,-1
   1c974:	80001116 	blt	r16,zero,1c9bc <__call_exitprocs+0xb0>
   1c978:	8c400044 	addi	r17,r17,1
   1c97c:	8427883a 	add	r19,r16,r16
   1c980:	8c63883a 	add	r17,r17,r17
   1c984:	95802204 	addi	r22,r18,136
   1c988:	9ce7883a 	add	r19,r19,r19
   1c98c:	8c63883a 	add	r17,r17,r17
   1c990:	b4e7883a 	add	r19,r22,r19
   1c994:	9463883a 	add	r17,r18,r17
   1c998:	e0001726 	beq	fp,zero,1c9f8 <__call_exitprocs+0xec>
   1c99c:	8c87c83a 	sub	r3,r17,r18
   1c9a0:	b0c7883a 	add	r3,r22,r3
   1c9a4:	18c01e17 	ldw	r3,120(r3)
   1c9a8:	1f001326 	beq	r3,fp,1c9f8 <__call_exitprocs+0xec>
   1c9ac:	843fffc4 	addi	r16,r16,-1
   1c9b0:	9cffff04 	addi	r19,r19,-4
   1c9b4:	8c7fff04 	addi	r17,r17,-4
   1c9b8:	857ff71e 	bne	r16,r21,1c998 <__call_exitprocs+0x8c>
   1c9bc:	00800034 	movhi	r2,0
   1c9c0:	10800004 	addi	r2,r2,0
   1c9c4:	10002a1e 	bne	r2,zero,1ca70 <__call_exitprocs+0x164>
   1c9c8:	dfc00c17 	ldw	ra,48(sp)
   1c9cc:	df000b17 	ldw	fp,44(sp)
   1c9d0:	ddc00a17 	ldw	r23,40(sp)
   1c9d4:	dd800917 	ldw	r22,36(sp)
   1c9d8:	dd400817 	ldw	r21,32(sp)
   1c9dc:	dd000717 	ldw	r20,28(sp)
   1c9e0:	dcc00617 	ldw	r19,24(sp)
   1c9e4:	dc800517 	ldw	r18,20(sp)
   1c9e8:	dc400417 	ldw	r17,16(sp)
   1c9ec:	dc000317 	ldw	r16,12(sp)
   1c9f0:	dec00d04 	addi	sp,sp,52
   1c9f4:	f800283a 	ret
   1c9f8:	91000117 	ldw	r4,4(r18)
   1c9fc:	88c00017 	ldw	r3,0(r17)
   1ca00:	213fffc4 	addi	r4,r4,-1
   1ca04:	24001526 	beq	r4,r16,1ca5c <__call_exitprocs+0x150>
   1ca08:	88000015 	stw	zero,0(r17)
   1ca0c:	183fe726 	beq	r3,zero,1c9ac <__call_exitprocs+0xa0>
   1ca10:	00800044 	movi	r2,1
   1ca14:	1408983a 	sll	r4,r2,r16
   1ca18:	91406217 	ldw	r5,392(r18)
   1ca1c:	95000117 	ldw	r20,4(r18)
   1ca20:	214a703a 	and	r5,r4,r5
   1ca24:	28000b26 	beq	r5,zero,1ca54 <__call_exitprocs+0x148>
   1ca28:	91406317 	ldw	r5,396(r18)
   1ca2c:	2148703a 	and	r4,r4,r5
   1ca30:	20000c1e 	bne	r4,zero,1ca64 <__call_exitprocs+0x158>
   1ca34:	99400017 	ldw	r5,0(r19)
   1ca38:	d9000117 	ldw	r4,4(sp)
   1ca3c:	183ee83a 	callr	r3
   1ca40:	90c00117 	ldw	r3,4(r18)
   1ca44:	1d3fc51e 	bne	r3,r20,1c95c <__call_exitprocs+0x50>
   1ca48:	b8c00017 	ldw	r3,0(r23)
   1ca4c:	1cbfd726 	beq	r3,r18,1c9ac <__call_exitprocs+0xa0>
   1ca50:	003fc206 	br	1c95c <__call_exitprocs+0x50>
   1ca54:	183ee83a 	callr	r3
   1ca58:	003ff906 	br	1ca40 <__call_exitprocs+0x134>
   1ca5c:	94000115 	stw	r16,4(r18)
   1ca60:	003fea06 	br	1ca0c <__call_exitprocs+0x100>
   1ca64:	99000017 	ldw	r4,0(r19)
   1ca68:	183ee83a 	callr	r3
   1ca6c:	003ff406 	br	1ca40 <__call_exitprocs+0x134>
   1ca70:	90c00117 	ldw	r3,4(r18)
   1ca74:	1800071e 	bne	r3,zero,1ca94 <__call_exitprocs+0x188>
   1ca78:	90c00017 	ldw	r3,0(r18)
   1ca7c:	18000926 	beq	r3,zero,1caa4 <__call_exitprocs+0x198>
   1ca80:	9009883a 	mov	r4,r18
   1ca84:	b8c00015 	stw	r3,0(r23)
   1ca88:	00000000 	call	0 <__alt_mem_instruction_memory_0-0x10000>
   1ca8c:	bc800017 	ldw	r18,0(r23)
   1ca90:	003fb506 	br	1c968 <__call_exitprocs+0x5c>
   1ca94:	90c00017 	ldw	r3,0(r18)
   1ca98:	902f883a 	mov	r23,r18
   1ca9c:	1825883a 	mov	r18,r3
   1caa0:	003fb106 	br	1c968 <__call_exitprocs+0x5c>
   1caa4:	0007883a 	mov	r3,zero
   1caa8:	003ffb06 	br	1ca98 <__call_exitprocs+0x18c>

0001caac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1caac:	defffc04 	addi	sp,sp,-16
   1cab0:	df000315 	stw	fp,12(sp)
   1cab4:	df000304 	addi	fp,sp,12
   1cab8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1cabc:	0001883a 	nop
   1cac0:	e0bfff17 	ldw	r2,-4(fp)
   1cac4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   1cac8:	e0bffd17 	ldw	r2,-12(fp)
   1cacc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1cad0:	e0bffe17 	ldw	r2,-8(fp)
   1cad4:	10000226 	beq	r2,zero,1cae0 <_exit+0x34>
    ALT_SIM_FAIL();
   1cad8:	002af070 	cmpltui	zero,zero,43969
   1cadc:	00000106 	br	1cae4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1cae0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1cae4:	003fff06 	br	1cae4 <_exit+0x38>
