
consumer.elf:     file format elf32-littlenios2
consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000cac4 memsz 0x0000cac4 flags r-x
    LOAD off    0x0000e458 vaddr 0x00028458 paddr 0x0001cae4 align 2**12
         filesz 0x00001a58 memsz 0x00001d60 flags rw-
    LOAD off    0x00010000 vaddr 0x00028000 paddr 0x00028000 align 2**12
         filesz 0x00000458 memsz 0x00000458 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c92c  000101b8  000101b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000458  00028000  00028000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  00028458  0001cae4  0000e458  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00029eb0  0001e53c  0000feb0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  00010480  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000231a7  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000918d  00000000  00000000  000343ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a3d3  00000000  00000000  0003d58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001b14  00000000  00000000  00047960  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003111  00000000  00000000  00049474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000110de  00000000  00000000  0004c585  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  0005d664  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005d688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000615da  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000615dd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000615e2  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000615e3  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000615e4  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000615e8  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000615ec  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000615f0  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000615fb  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00061606  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  00061611  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002b  00000000  00000000  00061614  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00087d98  00000000  00000000  0006163f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101b8 l    d  .text	00000000 .text
00028000 l    d  .rodata	00000000 .rodata
00028458 l    d  .rwdata	00000000 .rwdata
00029eb0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../consumer_bsp//obj/HAL/src/crt0.o
000101f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010530 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010814 l     F .text	00000034 __sprint_r
00028176 l     O .rodata	00000010 blanks.3515
00028186 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0001285c l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000142cc l     F .text	00000008 __fp_lock
000142d4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00028458 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000281bc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00028304 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000188b0 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00019c2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019d48 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019d74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00019e74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00019f68 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a054 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a230 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00029ea0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a4a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a5e4 l     F .text	00000038 alt_dev_reg
00028e14 l     O .rwdata	00001060 jtag_uart_1
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001ade8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0001afec l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001b628 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b9c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001be60 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001bfb8 l     F .text	00000050 alt_get_errno
0001c008 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00016d8c g     F .text	00000074 _mprec_log10
00016e7c g     F .text	00000084 __any_on
00017afc g     F .text	00000064 _isatty_r
000281ec g     O .rodata	00000028 __mprec_tinytens
0001a178 g     F .text	00000078 alt_main
00019be8 g     F .text	00000044 __ashldi3
000106f0 g     F .text	00000084 _puts_r
00029eb0 g     O .bss	00000004 writep
00029f28 g     O .bss	00000100 alt_irq
00017b60 g     F .text	0000006c _lseek_r
0001a954 g     F .text	00000058 altera_avalon_fifo_write_almostfull
0001cae4 g       *ABS*	00000000 __flash_rwdata_start
00019150 g     F .text	0000005c __eqdf2
000103a8 g     F .text	00000038 FIFO_1_INIT
0002a1b8 g       *ABS*	00000000 __alt_heap_start
000106b4 g     F .text	0000003c printf
000176a0 g     F .text	0000005c __sseek
00014370 g     F .text	0000010c __sinit
00015008 g     F .text	0000009c _setlocale_r
000142e8 g     F .text	00000078 __sfmoreglue
0001a210 g     F .text	00000020 __malloc_unlock
00029eb4 g     O .bss	00000004 readp
00029ef0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00015c48 g     F .text	0000018c memmove
0001a6d4 g     F .text	00000098 altera_avalon_fifo_init
00014360 g     F .text	00000010 _cleanup
0001aa04 g     F .text	00000058 altera_avalon_fifo_write_fifo
00015eb0 g     F .text	000000a8 _Balloc
00019208 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
0001ab9c g     F .text	00000028 altera_avalon_fifo_read_backpressure
00010020 g       *ABS*	00000000 __flash_exceptions_start
00017a94 g     F .text	00000068 _fstat_r
00029edc g     O .bss	00000004 errno
00029ee4 g     O .bss	00000004 alt_argv
00031e74 g       *ABS*	00000000 _gp
0001a8a0 g     F .text	0000005c altera_avalon_fifo_clear_event
00028c94 g     O .rwdata	00000180 alt_fd_list
0001c40c g     F .text	00000090 alt_find_dev
00015b08 g     F .text	00000140 memcpy
000142dc g     F .text	0000000c _cleanup_r
0001932c g     F .text	000000d4 __floatsidf
0001bf40 g     F .text	00000078 alt_io_redirect
000192d0 g     F .text	0000005c __ltdf2
0001cae4 g       *ABS*	00000000 __DTOR_END__
00010774 g     F .text	00000014 puts
00016ce8 g     F .text	000000a4 __ratio
0001b1ec g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010688 g     F .text	0000002c _printf_r
00010650 g     F .text	00000008 __udivsi3
00019ec4 g     F .text	000000a4 isatty
0002823c g     O .rodata	000000c8 __mprec_tens
000150a4 g     F .text	0000000c __locale_charset
0001c684 g     F .text	0000008c alt_icache_flush
00029ed8 g     O .bss	00000004 __malloc_top_pad
00029e7c g     O .rwdata	00000004 __mb_cur_max
000150b0 g     F .text	0000000c _localeconv_r
000162e0 g     F .text	0000003c __i2b
000149c4 g     F .text	000004e4 __sfvwrite_r
00017560 g     F .text	00000064 _sbrk_r
00010458 g     F .text	00000098 consumer
00029eb8 g     O .bss	00000004 fullp
00017bcc g     F .text	0000006c _read_r
00028858 g     O .rwdata	0000000c __lc_ctype
00029e98 g     O .rwdata	00000004 alt_max_fd
000199d0 g     F .text	00000104 __unpack_d
00017944 g     F .text	0000013c _fclose_r
0001429c g     F .text	00000030 fflush
00029ed4 g     O .bss	00000004 __malloc_max_sbrked_mem
00018c04 g     F .text	00000054 __adddf3
00016a5c g     F .text	00000148 __b2d
00028000 g       *ABS*	00000000 __alt_mem_data_memory_1
00018288 g     F .text	00000628 __umoddi3
0001a0a4 g     F .text	000000d4 lseek
00029e74 g     O .rwdata	00000004 _global_impure_ptr
00016f00 g     F .text	000005fc _realloc_r
0002a1b8 g       *ABS*	00000000 __bss_end
0001bd70 g     F .text	000000f0 alt_iic_isr_register
0001c2e8 g     F .text	00000104 alt_tick
00017c38 g     F .text	00000650 __udivdi3
00028214 g     O .rodata	00000028 __mprec_bigtens
000160c4 g     F .text	00000104 __s2b
000194d4 g     F .text	0000011c __floatunsidf
000167fc g     F .text	00000058 __mcmp
00014588 g     F .text	00000018 __fp_lock_all
0001bd24 g     F .text	0000004c alt_ic_irq_enabled
0001c250 g     F .text	00000098 alt_alarm_stop
00029ef4 g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_instruction_memory_1
000100ec g     F .exceptions	000000cc alt_irq_handler
00028c6c g     O .rwdata	00000028 alt_dev_null
0001b9a4 g     F .text	0000001c alt_dcache_flush_all
000161c8 g     F .text	00000068 __hi0bits
00019400 g     F .text	000000d4 __fixdfsi
0001a8fc g     F .text	00000058 altera_avalon_fifo_write_ienable
00029eb0 g       *ABS*	00000000 __ram_rwdata_end
0001a810 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00029e90 g     O .rwdata	00000008 alt_dev_list
0001a4f4 g     F .text	000000f0 write
0001b83c g     F .text	00000028 alt_timestamp_freq
00028458 g       *ABS*	00000000 __ram_rodata_end
00019dc4 g     F .text	000000b0 fstat
00019ba4 g     F .text	00000044 __lshrdi3
00016574 g     F .text	0000012c __pow5mult
00029ecc g     O .bss	00000004 __nlocale_changed
00010658 g     F .text	00000008 __umodsi3
0002a1b8 g       *ABS*	00000000 end
0001ad28 g     F .text	000000c0 altera_avalon_jtag_uart_init
0001a83c g     F .text	0000003c altera_avalon_fifo_read_event
0001cae4 g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
0001b69c g     F .text	00000088 alt_avalon_timer_sc_init
00019700 g     F .text	000000ac __clzsi2
0001b404 g     F .text	00000224 altera_avalon_jtag_uart_write
00014578 g     F .text	00000004 __sfp_lock_acquire
0001aac8 g     F .text	0000004c altera_avalon_fifo_read_fifo
00015a10 g     F .text	000000f8 memchr
00010848 g     F .text	00001e7c ___vfprintf_internal_r
000146f4 g     F .text	000002d0 _free_r
0001c908 g     F .text	000001a0 __call_exitprocs
00029ec8 g     O .bss	00000004 __mlocale_changed
00029e80 g     O .rwdata	00000004 __malloc_sbrk_base
000101b8 g     F .text	0000003c _start
00029ef8 g     O .bss	00000004 _alt_tick_rate
000166a0 g     F .text	0000015c __lshift
00029efc g     O .bss	00000004 _alt_nticks
0001a280 g     F .text	000000f4 read
0001a650 g     F .text	00000084 alt_sys_init
0001c7d8 g     F .text	00000130 __register_exitproc
0001631c g     F .text	00000258 __multiply
0001b090 g     F .text	00000068 altera_avalon_jtag_uart_close
00010660 g     F .text	00000028 __mulsi3
00028458 g       *ABS*	00000000 __ram_rwdata_start
00028000 g       *ABS*	00000000 __ram_rodata_start
00029f00 g     O .bss	00000028 __malloc_current_mallinfo
00016ba4 g     F .text	00000144 __d2b
0001abc4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001c5b0 g     F .text	000000d4 alt_get_fd
00019ad4 g     F .text	000000d0 __fpcmp_parts_d
000178e0 g     F .text	00000064 _close_r
0001c75c g     F .text	0000007c memcmp
0001ac84 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002a1b8 g       *ABS*	00000000 __alt_stack_base
0001acd4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000101f4 g     F .text	00000108 print_status
000126e8 g     F .text	00000174 __swsetup_r
0001a76c g     F .text	0000003c altera_avalon_fifo_read_status
00018f9c g     F .text	000001b4 __divdf3
0001447c g     F .text	000000fc __sfp
00016e00 g     F .text	0000007c __copybits
00028864 g     O .rwdata	00000408 __malloc_av_
00014584 g     F .text	00000004 __sinit_lock_release
00018cb8 g     F .text	000002e4 __muldf3
000175c4 g     F .text	00000054 __sread
0001ab70 g     F .text	0000002c altera_avalon_fifo_read_other_info
0001c49c g     F .text	00000114 alt_find_file
0001ba10 g     F .text	000000a0 alt_dev_llist_insert
0001a1f0 g     F .text	00000020 __malloc_lock
0001a3f4 g     F .text	000000b0 sbrk
000140b4 g     F .text	000001e8 _fflush_r
00017814 g     F .text	000000cc _calloc_r
00029eb0 g       *ABS*	00000000 __bss_start
00015dd4 g     F .text	000000dc memset
000103e0 g     F .text	00000078 main
00029ee8 g     O .bss	00000004 alt_envp
00029ed0 g     O .bss	00000004 __malloc_max_total_mem
0001ac24 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001a878 g     F .text	00000028 altera_avalon_fifo_read_level
000176fc g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
00017a80 g     F .text	00000014 fclose
0001b724 g     F .text	00000088 alt_timestamp_start
0002a028 g     O .bss	00000190 _atexit0
00012a98 g     F .text	0000161c _dtoa_r
0001528c g     F .text	00000784 _malloc_r
00029e9c g     O .rwdata	00000004 alt_errno
00014ea8 g     F .text	000000a8 _fwalk
000102fc g     F .text	00000058 WRITE_FIFO_1
000105a4 g     F .text	00000050 __divsi3
00028310 g     O .rodata	00000014 __thenan_df
000145b8 g     F .text	0000013c _malloc_trim_r
0001cae4 g       *ABS*	00000000 __CTOR_END__
00017704 g     F .text	000000a4 strcmp
00028000 g       *ABS*	00000000 __flash_rodata_start
0001cae4 g       *ABS*	00000000 __DTOR_LIST__
000104f0 g     F .text	00000040 delay
000191ac g     F .text	0000005c __nedf2
0001a61c g     F .text	00000034 alt_irq_init
0001a374 g     F .text	00000080 alt_release_fd
00028324 g     O .rodata	00000100 __clz_tab
00029ec4 g     O .bss	00000004 _PathLocale
0001c710 g     F .text	00000014 atexit
000177a8 g     F .text	0000006c _write_r
000150bc g     F .text	0000001c setlocale
00029e78 g     O .rwdata	00000004 _impure_ptr
00029ee0 g     O .bss	00000004 alt_argc
00029eec g     O .bss	00000004 altera_avalon_timer_ts_base
0001bb0c g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000169fc g     F .text	00000060 __ulp
000174fc g     F .text	00000038 __isinfd
000145a0 g     F .text	00000018 __fp_unlock_all
00029e88 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000150d8 g     F .text	0000000c localeconv
0001b7ac g     F .text	00000090 alt_timestamp
0001ab14 g     F .text	0000005c altera_avalon_fifo_write_other_info
0001bb98 g     F .text	00000050 alt_ic_isr_register
00029eb0 g       *ABS*	00000000 _edata
0002a1b8 g       *ABS*	00000000 _end
000101b8 g       *ABS*	00000000 __ram_exceptions_end
0001b0f8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001bc84 g     F .text	000000a0 alt_ic_irq_disable
00017618 g     F .text	00000088 __swrite
00029e84 g     O .rwdata	00000004 __malloc_trim_threshold
0001c3ec g     F .text	00000020 altera_nios2_qsys_irq_init
0001c724 g     F .text	00000038 exit
00014f50 g     F .text	000000b8 _fwalk_reent
00016854 g     F .text	000001a8 __mdiff
000105f4 g     F .text	0000005c __modsi3
0001a7a8 g     F .text	0000003c altera_avalon_fifo_read_ienable
00030000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001457c g     F .text	00000004 __sfp_lock_release
0001caa8 g     F .text	0000003c _exit
00017534 g     F .text	0000002c __isnand
0001b864 g     F .text	00000140 alt_alarm_start
000195f0 g     F .text	00000110 __muldi3
0001a7e4 g     F .text	0000002c altera_avalon_fifo_read_almostfull
000150e4 g     F .text	000001a8 __smakebuf_r
00010788 g     F .text	0000008c strlen
0001c0f8 g     F .text	00000158 open
0001aa5c g     F .text	0000006c altera_avalon_read_fifo
0001926c g     F .text	00000064 __gedf2
00010354 g     F .text	00000054 READ_FIFO_1
0001bb68 g     F .text	00000030 alt_icache_flush_all
00029ea4 g     O .rwdata	00000004 alt_priority_mask
00029ebc g     O .bss	00000004 emptyp
0001bbe8 g     F .text	0000009c alt_ic_irq_enable
000126c4 g     F .text	00000024 __vfprintf_internal
00018c58 g     F .text	00000060 __subdf3
00016230 g     F .text	000000b0 __lo0bits
0001a9ac g     F .text	00000058 altera_avalon_fifo_write_almostempty
00029ea8 g     O .rwdata	00000008 alt_alarm_list
0001bab0 g     F .text	0000005c _do_ctors
00029ec0 g     O .bss	00000004 countp
00019c7c g     F .text	000000cc close
00019fd4 g     F .text	00000080 alt_load
000197ac g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
00014580 g     F .text	00000004 __sinit_lock_acquire
00015f80 g     F .text	00000144 __multadd
00015f58 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406e14 	ori	at,at,440
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_instruction_memory_1-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001726 	beq	r2,zero,10188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00c000f4 	movhi	r3,3
   10130:	18e7ca04 	addi	r3,r3,-24792
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	100490fa 	slli	r2,r2,3
   1013c:	1885883a 	add	r2,r3,r2
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	010000f4 	movhi	r4,3
   10148:	2127ca04 	addi	r4,r4,-24792
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	100490fa 	slli	r2,r2,3
   10154:	2085883a 	add	r2,r4,r2
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   10178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	103fe31e 	bne	r2,zero,10110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   10184:	00000706 	br	101a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10188:	e0bffc17 	ldw	r2,-16(fp)
   1018c:	1085883a 	add	r2,r2,r2
   10190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	10800044 	addi	r2,r2,1
   1019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a0:	003fde06 	br	1011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101a4:	e037883a 	mov	sp,fp
   101a8:	dfc00117 	ldw	ra,4(sp)
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00204 	addi	sp,sp,8
   101b4:	f800283a 	ret

Disassembly of section .text:

000101b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101b8:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   101bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101c0:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   101c4:	d6879d14 	ori	gp,gp,7796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101c8:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   101cc:	10a7ac14 	ori	r2,r2,40624

    movhi r3, %hi(__bss_end)
   101d0:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   101d4:	18e86e14 	ori	r3,r3,41400

    beq r2, r3, 1f
   101d8:	10c00326 	beq	r2,r3,101e8 <_start+0x30>

0:
    stw zero, (r2)
   101dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101e4:	10fffd36 	bltu	r2,r3,101dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101e8:	0019fd40 	call	19fd4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101ec:	001a1780 	call	1a178 <alt_main>

000101f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f0:	003fff06 	br	101f0 <alt_after_alt_main>

000101f4 <print_status>:
*/


#include "FIFO_1.h"
void print_status(alt_u32 control_base_address)
{
   101f4:	defffd04 	addi	sp,sp,-12
   101f8:	dfc00215 	stw	ra,8(sp)
   101fc:	df000115 	stw	fp,4(sp)
   10200:	df000104 	addi	fp,sp,4
   10204:	e13fff15 	stw	r4,-4(fp)
	printf("--------------------------------------\n");
   10208:	010000f4 	movhi	r4,3
   1020c:	21200004 	addi	r4,r4,-32768
   10210:	00107740 	call	10774 <puts>
	printf("LEVEL = %u\n", altera_avalon_fifo_read_level(control_base_address) );
   10214:	e13fff17 	ldw	r4,-4(fp)
   10218:	001a8780 	call	1a878 <altera_avalon_fifo_read_level>
   1021c:	010000f4 	movhi	r4,3
   10220:	21200a04 	addi	r4,r4,-32728
   10224:	100b883a 	mov	r5,r2
   10228:	00106b40 	call	106b4 <printf>
	printf("STATUS = %u\n", altera_avalon_fifo_read_status(control_base_address,
   1022c:	e13fff17 	ldw	r4,-4(fp)
   10230:	01400fc4 	movi	r5,63
   10234:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   10238:	010000f4 	movhi	r4,3
   1023c:	21200d04 	addi	r4,r4,-32716
   10240:	100b883a 	mov	r5,r2
   10244:	00106b40 	call	106b4 <printf>
	ALTERA_AVALON_FIFO_STATUS_ALL) );
	printf("EVENT = %u\n", altera_avalon_fifo_read_event(control_base_address,
   10248:	e13fff17 	ldw	r4,-4(fp)
   1024c:	01400fc4 	movi	r5,63
   10250:	001a83c0 	call	1a83c <altera_avalon_fifo_read_event>
   10254:	010000f4 	movhi	r4,3
   10258:	21201104 	addi	r4,r4,-32700
   1025c:	100b883a 	mov	r5,r2
   10260:	00106b40 	call	106b4 <printf>
	ALTERA_AVALON_FIFO_EVENT_ALL) );
	printf("IENABLE = %u\n", altera_avalon_fifo_read_ienable(control_base_address,
   10264:	e13fff17 	ldw	r4,-4(fp)
   10268:	01400fc4 	movi	r5,63
   1026c:	001a7a80 	call	1a7a8 <altera_avalon_fifo_read_ienable>
   10270:	010000f4 	movhi	r4,3
   10274:	21201404 	addi	r4,r4,-32688
   10278:	100b883a 	mov	r5,r2
   1027c:	00106b40 	call	106b4 <printf>
	ALTERA_AVALON_FIFO_IENABLE_ALL) );
	printf("ALMOSTEMPTY = %u\n",
   10280:	e13fff17 	ldw	r4,-4(fp)
   10284:	001a8100 	call	1a810 <altera_avalon_fifo_read_almostempty>
   10288:	010000f4 	movhi	r4,3
   1028c:	21201804 	addi	r4,r4,-32672
   10290:	100b883a 	mov	r5,r2
   10294:	00106b40 	call	106b4 <printf>
	altera_avalon_fifo_read_almostempty(control_base_address) );
	printf("ALMOSTFULL = %u\n\n",
   10298:	e13fff17 	ldw	r4,-4(fp)
   1029c:	001a7e40 	call	1a7e4 <altera_avalon_fifo_read_almostfull>
   102a0:	010000f4 	movhi	r4,3
   102a4:	21201d04 	addi	r4,r4,-32652
   102a8:	100b883a 	mov	r5,r2
   102ac:	00106b40 	call	106b4 <printf>
	altera_avalon_fifo_read_almostfull(control_base_address));
	//full
	printf("FULL = %u\n\n",
   102b0:	e13fff17 	ldw	r4,-4(fp)
   102b4:	01400044 	movi	r5,1
   102b8:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   102bc:	010000f4 	movhi	r4,3
   102c0:	21202204 	addi	r4,r4,-32632
   102c4:	100b883a 	mov	r5,r2
   102c8:	00106b40 	call	106b4 <printf>
	altera_avalon_fifo_read_status(control_base_address,0x01));
	//empty
	printf("EMPTY = %u\n\n",
   102cc:	e13fff17 	ldw	r4,-4(fp)
   102d0:	01400084 	movi	r5,2
   102d4:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   102d8:	010000f4 	movhi	r4,3
   102dc:	21202504 	addi	r4,r4,-32620
   102e0:	100b883a 	mov	r5,r2
   102e4:	00106b40 	call	106b4 <printf>
	altera_avalon_fifo_read_status(control_base_address,0x02));
}
   102e8:	e037883a 	mov	sp,fp
   102ec:	dfc00117 	ldw	ra,4(sp)
   102f0:	df000017 	ldw	fp,0(sp)
   102f4:	dec00204 	addi	sp,sp,8
   102f8:	f800283a 	ret

000102fc <WRITE_FIFO_1>:


void WRITE_FIFO_1(int *buffer)
{
   102fc:	defffd04 	addi	sp,sp,-12
   10300:	dfc00215 	stw	ra,8(sp)
   10304:	df000115 	stw	fp,4(sp)
   10308:	df000104 	addi	fp,sp,4
   1030c:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is full
	while(altera_avalon_fifo_read_status(CTRL_MEMORY, 0x01)){}
   10310:	0001883a 	nop
   10314:	0009883a 	mov	r4,zero
   10318:	01400044 	movi	r5,1
   1031c:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   10320:	103ffc1e 	bne	r2,zero,10314 <WRITE_FIFO_1+0x18>

	// Write the data to FIFO
	altera_avalon_fifo_write_fifo(IN_BASE, CTRL_MEMORY, *buffer);
   10324:	e0bfff17 	ldw	r2,-4(fp)
   10328:	10800017 	ldw	r2,0(r2)
   1032c:	010000f4 	movhi	r4,3
   10330:	21041d04 	addi	r4,r4,4212
   10334:	000b883a 	mov	r5,zero
   10338:	100d883a 	mov	r6,r2
   1033c:	001aa040 	call	1aa04 <altera_avalon_fifo_write_fifo>


}
   10340:	e037883a 	mov	sp,fp
   10344:	dfc00117 	ldw	ra,4(sp)
   10348:	df000017 	ldw	fp,0(sp)
   1034c:	dec00204 	addi	sp,sp,8
   10350:	f800283a 	ret

00010354 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   10354:	defffd04 	addi	sp,sp,-12
   10358:	dfc00215 	stw	ra,8(sp)
   1035c:	df000115 	stw	fp,4(sp)
   10360:	df000104 	addi	fp,sp,4
   10364:	e13fff15 	stw	r4,-4(fp)
	// Wait if the fifo is empty
	while(altera_avalon_fifo_read_status(CTRL_MEMORY, 0x02)){}
   10368:	0001883a 	nop
   1036c:	0009883a 	mov	r4,zero
   10370:	01400084 	movi	r5,2
   10374:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   10378:	103ffc1e 	bne	r2,zero,1036c <READ_FIFO_1+0x18>

	// Read the data
	*buffer = altera_avalon_fifo_read_fifo(OUT_BASE, CTRL_MEMORY);
   1037c:	010000f4 	movhi	r4,3
   10380:	21041304 	addi	r4,r4,4172
   10384:	000b883a 	mov	r5,zero
   10388:	001aac80 	call	1aac8 <altera_avalon_fifo_read_fifo>
   1038c:	e0ffff17 	ldw	r3,-4(fp)
   10390:	18800015 	stw	r2,0(r3)


}
   10394:	e037883a 	mov	sp,fp
   10398:	dfc00117 	ldw	ra,4(sp)
   1039c:	df000017 	ldw	fp,0(sp)
   103a0:	dec00204 	addi	sp,sp,8
   103a4:	f800283a 	ret

000103a8 <FIFO_1_INIT>:

//Initialization
void FIFO_1_INIT()
{
   103a8:	defffe04 	addi	sp,sp,-8
   103ac:	dfc00115 	stw	ra,4(sp)
   103b0:	df000015 	stw	fp,0(sp)
   103b4:	d839883a 	mov	fp,sp
	altera_avalon_fifo_init(CTRL_MEMORY, 0x000000, ALMOST_EMPTY, ALMOST_FULL);
   103b8:	0009883a 	mov	r4,zero
   103bc:	000b883a 	mov	r5,zero
   103c0:	01800084 	movi	r6,2
   103c4:	01c002c4 	movi	r7,11
   103c8:	001a6d40 	call	1a6d4 <altera_avalon_fifo_init>
	 *
	 * */



}
   103cc:	e037883a 	mov	sp,fp
   103d0:	dfc00117 	ldw	ra,4(sp)
   103d4:	df000017 	ldw	fp,0(sp)
   103d8:	dec00204 	addi	sp,sp,8
   103dc:	f800283a 	ret

000103e0 <main>:
void delay(int n);
int consumer();


int main()
{
   103e0:	defffb04 	addi	sp,sp,-20
   103e4:	dfc00415 	stw	ra,16(sp)
   103e8:	df000315 	stw	fp,12(sp)
   103ec:	dc000215 	stw	r16,8(sp)
   103f0:	df000204 	addi	fp,sp,8
	printf("Starting main....\n");
   103f4:	010000f4 	movhi	r4,3
   103f8:	21202904 	addi	r4,r4,-32604
   103fc:	00107740 	call	10774 <puts>

	alt_u32 start_time, end_time;

	alt_timestamp_start();
   10400:	001b7240 	call	1b724 <alt_timestamp_start>

	start_time = alt_timestamp();
   10404:	001b7ac0 	call	1b7ac <alt_timestamp>
   10408:	e0bffe15 	stw	r2,-8(fp)

	consumer();
   1040c:	00104580 	call	10458 <consumer>

	end_time = alt_timestamp();
   10410:	001b7ac0 	call	1b7ac <alt_timestamp>
   10414:	e0bfff15 	stw	r2,-4(fp)

	printf("Time taken for Read Operation: %.2lu ms\n", 1000*((unsigned long)(end_time-start_time))/((unsigned long)alt_timestamp_freq()));
   10418:	e0ffff17 	ldw	r3,-4(fp)
   1041c:	e0bffe17 	ldw	r2,-8(fp)
   10420:	1885c83a 	sub	r2,r3,r2
   10424:	1009883a 	mov	r4,r2
   10428:	0140fa04 	movi	r5,1000
   1042c:	00106600 	call	10660 <__mulsi3>
   10430:	1021883a 	mov	r16,r2
   10434:	001b83c0 	call	1b83c <alt_timestamp_freq>
   10438:	8009883a 	mov	r4,r16
   1043c:	100b883a 	mov	r5,r2
   10440:	00106500 	call	10650 <__udivsi3>
   10444:	010000f4 	movhi	r4,3
   10448:	21202e04 	addi	r4,r4,-32584
   1044c:	100b883a 	mov	r5,r2
   10450:	00106b40 	call	106b4 <printf>
	while(1) { }
   10454:	003fff06 	br	10454 <main+0x74>

00010458 <consumer>:
	return 0;
}


int consumer()
{
   10458:	defffc04 	addi	sp,sp,-16
   1045c:	dfc00315 	stw	ra,12(sp)
   10460:	df000215 	stw	fp,8(sp)
   10464:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   10468:	010000f4 	movhi	r4,3
   1046c:	21203904 	addi	r4,r4,-32540
   10470:	00107740 	call	10774 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   10474:	00103a80 	call	103a8 <FIFO_1_INIT>

	int j = 0;
   10478:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   1047c:	00800144 	movi	r2,5
   10480:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   10484:	00000e06 	br	104c0 <consumer+0x68>
	{
		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   10488:	e0bfff04 	addi	r2,fp,-4
   1048c:	1009883a 	mov	r4,r2
   10490:	00103540 	call	10354 <READ_FIFO_1>
		if(j==k)
   10494:	e0ffff17 	ldw	r3,-4(fp)
   10498:	e0bffe17 	ldw	r2,-8(fp)
   1049c:	1880051e 	bne	r3,r2,104b4 <consumer+0x5c>
			printf("Consumer succefully received [%i]\n",j);
   104a0:	e0bfff17 	ldw	r2,-4(fp)
   104a4:	010000f4 	movhi	r4,3
   104a8:	21203e04 	addi	r4,r4,-32520
   104ac:	100b883a 	mov	r5,r2
   104b0:	00106b40 	call	106b4 <printf>

		k+=10;
   104b4:	e0bffe17 	ldw	r2,-8(fp)
   104b8:	10800284 	addi	r2,r2,10
   104bc:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   104c0:	e0bffe17 	ldw	r2,-8(fp)
   104c4:	10807d10 	cmplti	r2,r2,500
   104c8:	103fef1e 	bne	r2,zero,10488 <consumer+0x30>
			printf("Consumer succefully received [%i]\n",j);

		k+=10;
	}

	printf("Consumer finished..\n");
   104cc:	010000f4 	movhi	r4,3
   104d0:	21204704 	addi	r4,r4,-32484
   104d4:	00107740 	call	10774 <puts>
	return 0;
   104d8:	0005883a 	mov	r2,zero
}
   104dc:	e037883a 	mov	sp,fp
   104e0:	dfc00117 	ldw	ra,4(sp)
   104e4:	df000017 	ldw	fp,0(sp)
   104e8:	dec00204 	addi	sp,sp,8
   104ec:	f800283a 	ret

000104f0 <delay>:


void delay(int n)
{
   104f0:	defffd04 	addi	sp,sp,-12
   104f4:	df000215 	stw	fp,8(sp)
   104f8:	df000204 	addi	fp,sp,8
   104fc:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   10500:	e0bfff17 	ldw	r2,-4(fp)
   10504:	e0bffe15 	stw	r2,-8(fp)
   10508:	00000306 	br	10518 <delay+0x28>
   1050c:	e0bffe17 	ldw	r2,-8(fp)
   10510:	10bfffc4 	addi	r2,r2,-1
   10514:	e0bffe15 	stw	r2,-8(fp)
   10518:	e0bffe17 	ldw	r2,-8(fp)
   1051c:	00bffb16 	blt	zero,r2,1050c <delay+0x1c>
	{
		continue;
	}
}
   10520:	e037883a 	mov	sp,fp
   10524:	df000017 	ldw	fp,0(sp)
   10528:	dec00104 	addi	sp,sp,4
   1052c:	f800283a 	ret

00010530 <udivmodsi4>:
   10530:	2005883a 	mov	r2,r4
   10534:	2900182e 	bgeu	r5,r4,10598 <udivmodsi4+0x68>
   10538:	28001716 	blt	r5,zero,10598 <udivmodsi4+0x68>
   1053c:	01000804 	movi	r4,32
   10540:	00c00044 	movi	r3,1
   10544:	00000206 	br	10550 <udivmodsi4+0x20>
   10548:	20001126 	beq	r4,zero,10590 <udivmodsi4+0x60>
   1054c:	28000516 	blt	r5,zero,10564 <udivmodsi4+0x34>
   10550:	294b883a 	add	r5,r5,r5
   10554:	213fffc4 	addi	r4,r4,-1
   10558:	18c7883a 	add	r3,r3,r3
   1055c:	28bffa36 	bltu	r5,r2,10548 <udivmodsi4+0x18>
   10560:	18000b26 	beq	r3,zero,10590 <udivmodsi4+0x60>
   10564:	0009883a 	mov	r4,zero
   10568:	11400236 	bltu	r2,r5,10574 <udivmodsi4+0x44>
   1056c:	1145c83a 	sub	r2,r2,r5
   10570:	20c8b03a 	or	r4,r4,r3
   10574:	1806d07a 	srli	r3,r3,1
   10578:	280ad07a 	srli	r5,r5,1
   1057c:	183ffa1e 	bne	r3,zero,10568 <udivmodsi4+0x38>
   10580:	3000021e 	bne	r6,zero,1058c <udivmodsi4+0x5c>
   10584:	2005883a 	mov	r2,r4
   10588:	f800283a 	ret
   1058c:	f800283a 	ret
   10590:	0009883a 	mov	r4,zero
   10594:	003ffa06 	br	10580 <udivmodsi4+0x50>
   10598:	00c00044 	movi	r3,1
   1059c:	0009883a 	mov	r4,zero
   105a0:	003ff106 	br	10568 <udivmodsi4+0x38>

000105a4 <__divsi3>:
   105a4:	defffe04 	addi	sp,sp,-8
   105a8:	dfc00115 	stw	ra,4(sp)
   105ac:	dc000015 	stw	r16,0(sp)
   105b0:	20000a16 	blt	r4,zero,105dc <__divsi3+0x38>
   105b4:	0021883a 	mov	r16,zero
   105b8:	28000b16 	blt	r5,zero,105e8 <__divsi3+0x44>
   105bc:	000d883a 	mov	r6,zero
   105c0:	00105300 	call	10530 <udivmodsi4>
   105c4:	80000126 	beq	r16,zero,105cc <__divsi3+0x28>
   105c8:	0085c83a 	sub	r2,zero,r2
   105cc:	dfc00117 	ldw	ra,4(sp)
   105d0:	dc000017 	ldw	r16,0(sp)
   105d4:	dec00204 	addi	sp,sp,8
   105d8:	f800283a 	ret
   105dc:	0109c83a 	sub	r4,zero,r4
   105e0:	04000044 	movi	r16,1
   105e4:	283ff50e 	bge	r5,zero,105bc <__divsi3+0x18>
   105e8:	014bc83a 	sub	r5,zero,r5
   105ec:	8400005c 	xori	r16,r16,1
   105f0:	003ff206 	br	105bc <__divsi3+0x18>

000105f4 <__modsi3>:
   105f4:	deffff04 	addi	sp,sp,-4
   105f8:	dfc00015 	stw	ra,0(sp)
   105fc:	20000516 	blt	r4,zero,10614 <__modsi3+0x20>
   10600:	28000c16 	blt	r5,zero,10634 <__modsi3+0x40>
   10604:	01800044 	movi	r6,1
   10608:	dfc00017 	ldw	ra,0(sp)
   1060c:	dec00104 	addi	sp,sp,4
   10610:	00105301 	jmpi	10530 <udivmodsi4>
   10614:	0109c83a 	sub	r4,zero,r4
   10618:	28000b16 	blt	r5,zero,10648 <__modsi3+0x54>
   1061c:	01800044 	movi	r6,1
   10620:	00105300 	call	10530 <udivmodsi4>
   10624:	0085c83a 	sub	r2,zero,r2
   10628:	dfc00017 	ldw	ra,0(sp)
   1062c:	dec00104 	addi	sp,sp,4
   10630:	f800283a 	ret
   10634:	014bc83a 	sub	r5,zero,r5
   10638:	01800044 	movi	r6,1
   1063c:	dfc00017 	ldw	ra,0(sp)
   10640:	dec00104 	addi	sp,sp,4
   10644:	00105301 	jmpi	10530 <udivmodsi4>
   10648:	014bc83a 	sub	r5,zero,r5
   1064c:	003ff306 	br	1061c <__modsi3+0x28>

00010650 <__udivsi3>:
   10650:	000d883a 	mov	r6,zero
   10654:	00105301 	jmpi	10530 <udivmodsi4>

00010658 <__umodsi3>:
   10658:	01800044 	movi	r6,1
   1065c:	00105301 	jmpi	10530 <udivmodsi4>

00010660 <__mulsi3>:
   10660:	0005883a 	mov	r2,zero
   10664:	20000726 	beq	r4,zero,10684 <__mulsi3+0x24>
   10668:	20c0004c 	andi	r3,r4,1
   1066c:	2008d07a 	srli	r4,r4,1
   10670:	18000126 	beq	r3,zero,10678 <__mulsi3+0x18>
   10674:	1145883a 	add	r2,r2,r5
   10678:	294b883a 	add	r5,r5,r5
   1067c:	203ffa1e 	bne	r4,zero,10668 <__mulsi3+0x8>
   10680:	f800283a 	ret
   10684:	f800283a 	ret

00010688 <_printf_r>:
   10688:	defffd04 	addi	sp,sp,-12
   1068c:	dfc00015 	stw	ra,0(sp)
   10690:	d9800115 	stw	r6,4(sp)
   10694:	d9c00215 	stw	r7,8(sp)
   10698:	280d883a 	mov	r6,r5
   1069c:	21400217 	ldw	r5,8(r4)
   106a0:	d9c00104 	addi	r7,sp,4
   106a4:	00108480 	call	10848 <___vfprintf_internal_r>
   106a8:	dfc00017 	ldw	ra,0(sp)
   106ac:	dec00304 	addi	sp,sp,12
   106b0:	f800283a 	ret

000106b4 <printf>:
   106b4:	defffc04 	addi	sp,sp,-16
   106b8:	dfc00015 	stw	ra,0(sp)
   106bc:	d9400115 	stw	r5,4(sp)
   106c0:	d9800215 	stw	r6,8(sp)
   106c4:	d9c00315 	stw	r7,12(sp)
   106c8:	008000f4 	movhi	r2,3
   106cc:	10a79e04 	addi	r2,r2,-24968
   106d0:	10800017 	ldw	r2,0(r2)
   106d4:	200b883a 	mov	r5,r4
   106d8:	d9800104 	addi	r6,sp,4
   106dc:	11000217 	ldw	r4,8(r2)
   106e0:	00126c40 	call	126c4 <__vfprintf_internal>
   106e4:	dfc00017 	ldw	ra,0(sp)
   106e8:	dec00404 	addi	sp,sp,16
   106ec:	f800283a 	ret

000106f0 <_puts_r>:
   106f0:	defff604 	addi	sp,sp,-40
   106f4:	dc400815 	stw	r17,32(sp)
   106f8:	2023883a 	mov	r17,r4
   106fc:	2809883a 	mov	r4,r5
   10700:	dc000715 	stw	r16,28(sp)
   10704:	dfc00915 	stw	ra,36(sp)
   10708:	2821883a 	mov	r16,r5
   1070c:	00107880 	call	10788 <strlen>
   10710:	10c00044 	addi	r3,r2,1
   10714:	d8800115 	stw	r2,4(sp)
   10718:	89400217 	ldw	r5,8(r17)
   1071c:	008000f4 	movhi	r2,3
   10720:	10a04c04 	addi	r2,r2,-32464
   10724:	d8800215 	stw	r2,8(sp)
   10728:	00800044 	movi	r2,1
   1072c:	d8800315 	stw	r2,12(sp)
   10730:	8809883a 	mov	r4,r17
   10734:	00800084 	movi	r2,2
   10738:	d9800404 	addi	r6,sp,16
   1073c:	dc000015 	stw	r16,0(sp)
   10740:	d8c00615 	stw	r3,24(sp)
   10744:	dec00415 	stw	sp,16(sp)
   10748:	d8800515 	stw	r2,20(sp)
   1074c:	00149c40 	call	149c4 <__sfvwrite_r>
   10750:	1000061e 	bne	r2,zero,1076c <_puts_r+0x7c>
   10754:	00800284 	movi	r2,10
   10758:	dfc00917 	ldw	ra,36(sp)
   1075c:	dc400817 	ldw	r17,32(sp)
   10760:	dc000717 	ldw	r16,28(sp)
   10764:	dec00a04 	addi	sp,sp,40
   10768:	f800283a 	ret
   1076c:	00bfffc4 	movi	r2,-1
   10770:	003ff906 	br	10758 <_puts_r+0x68>

00010774 <puts>:
   10774:	008000f4 	movhi	r2,3
   10778:	10a79e04 	addi	r2,r2,-24968
   1077c:	200b883a 	mov	r5,r4
   10780:	11000017 	ldw	r4,0(r2)
   10784:	00106f01 	jmpi	106f0 <_puts_r>

00010788 <strlen>:
   10788:	208000cc 	andi	r2,r4,3
   1078c:	10001f1e 	bne	r2,zero,1080c <strlen+0x84>
   10790:	20800017 	ldw	r2,0(r4)
   10794:	01ffbff4 	movhi	r7,65279
   10798:	39ffbfc4 	addi	r7,r7,-257
   1079c:	01a02074 	movhi	r6,32897
   107a0:	31a02004 	addi	r6,r6,-32640
   107a4:	11c7883a 	add	r3,r2,r7
   107a8:	0084303a 	nor	r2,zero,r2
   107ac:	1886703a 	and	r3,r3,r2
   107b0:	1986703a 	and	r3,r3,r6
   107b4:	2005883a 	mov	r2,r4
   107b8:	1800101e 	bne	r3,zero,107fc <strlen+0x74>
   107bc:	10800104 	addi	r2,r2,4
   107c0:	10c00017 	ldw	r3,0(r2)
   107c4:	19cb883a 	add	r5,r3,r7
   107c8:	00c6303a 	nor	r3,zero,r3
   107cc:	28c6703a 	and	r3,r5,r3
   107d0:	1986703a 	and	r3,r3,r6
   107d4:	1800091e 	bne	r3,zero,107fc <strlen+0x74>
   107d8:	10800104 	addi	r2,r2,4
   107dc:	10c00017 	ldw	r3,0(r2)
   107e0:	19cb883a 	add	r5,r3,r7
   107e4:	00c6303a 	nor	r3,zero,r3
   107e8:	28c6703a 	and	r3,r5,r3
   107ec:	1986703a 	and	r3,r3,r6
   107f0:	183ff226 	beq	r3,zero,107bc <strlen+0x34>
   107f4:	00000106 	br	107fc <strlen+0x74>
   107f8:	10800044 	addi	r2,r2,1
   107fc:	10c00007 	ldb	r3,0(r2)
   10800:	183ffd1e 	bne	r3,zero,107f8 <strlen+0x70>
   10804:	1105c83a 	sub	r2,r2,r4
   10808:	f800283a 	ret
   1080c:	2005883a 	mov	r2,r4
   10810:	003ffa06 	br	107fc <strlen+0x74>

00010814 <__sprint_r>:
   10814:	30800217 	ldw	r2,8(r6)
   10818:	defffe04 	addi	sp,sp,-8
   1081c:	dc000015 	stw	r16,0(sp)
   10820:	dfc00115 	stw	ra,4(sp)
   10824:	3021883a 	mov	r16,r6
   10828:	10000226 	beq	r2,zero,10834 <__sprint_r+0x20>
   1082c:	00149c40 	call	149c4 <__sfvwrite_r>
   10830:	80000215 	stw	zero,8(r16)
   10834:	80000115 	stw	zero,4(r16)
   10838:	dfc00117 	ldw	ra,4(sp)
   1083c:	dc000017 	ldw	r16,0(sp)
   10840:	dec00204 	addi	sp,sp,8
   10844:	f800283a 	ret

00010848 <___vfprintf_internal_r>:
   10848:	defeb904 	addi	sp,sp,-1308
   1084c:	dc013d15 	stw	r16,1268(sp)
   10850:	d9013015 	stw	r4,1216(sp)
   10854:	dfc14615 	stw	ra,1304(sp)
   10858:	df014515 	stw	fp,1300(sp)
   1085c:	ddc14415 	stw	r23,1296(sp)
   10860:	dd814315 	stw	r22,1292(sp)
   10864:	dd414215 	stw	r21,1288(sp)
   10868:	dd014115 	stw	r20,1284(sp)
   1086c:	dcc14015 	stw	r19,1280(sp)
   10870:	dc813f15 	stw	r18,1276(sp)
   10874:	dc413e15 	stw	r17,1272(sp)
   10878:	d9412915 	stw	r5,1188(sp)
   1087c:	3021883a 	mov	r16,r6
   10880:	d9c12d15 	stw	r7,1204(sp)
   10884:	00150b00 	call	150b0 <_localeconv_r>
   10888:	10800017 	ldw	r2,0(r2)
   1088c:	d9013017 	ldw	r4,1216(sp)
   10890:	d8013315 	stw	zero,1228(sp)
   10894:	d8813715 	stw	r2,1244(sp)
   10898:	d8013415 	stw	zero,1232(sp)
   1089c:	20000226 	beq	r4,zero,108a8 <___vfprintf_internal_r+0x60>
   108a0:	20800e17 	ldw	r2,56(r4)
   108a4:	10014b26 	beq	r2,zero,10dd4 <___vfprintf_internal_r+0x58c>
   108a8:	d8c12917 	ldw	r3,1188(sp)
   108ac:	1880030b 	ldhu	r2,12(r3)
   108b0:	10c0020c 	andi	r3,r2,8
   108b4:	18ffffcc 	andi	r3,r3,65535
   108b8:	18e0001c 	xori	r3,r3,32768
   108bc:	18e00004 	addi	r3,r3,-32768
   108c0:	1800ed26 	beq	r3,zero,10c78 <___vfprintf_internal_r+0x430>
   108c4:	d9012917 	ldw	r4,1188(sp)
   108c8:	20c00417 	ldw	r3,16(r4)
   108cc:	1800ea26 	beq	r3,zero,10c78 <___vfprintf_internal_r+0x430>
   108d0:	1100068c 	andi	r4,r2,26
   108d4:	00c00284 	movi	r3,10
   108d8:	20c0f026 	beq	r4,r3,10c9c <___vfprintf_internal_r+0x454>
   108dc:	d9010dc4 	addi	r4,sp,1079
   108e0:	d8810e04 	addi	r2,sp,1080
   108e4:	dc413017 	ldw	r17,1216(sp)
   108e8:	d8c00404 	addi	r3,sp,16
   108ec:	d9012615 	stw	r4,1176(sp)
   108f0:	1109c83a 	sub	r4,r2,r4
   108f4:	d8812715 	stw	r2,1180(sp)
   108f8:	d8c11b15 	stw	r3,1132(sp)
   108fc:	d8011d15 	stw	zero,1140(sp)
   10900:	d8011c15 	stw	zero,1136(sp)
   10904:	802b883a 	mov	r21,r16
   10908:	d8013215 	stw	zero,1224(sp)
   1090c:	d8013615 	stw	zero,1240(sp)
   10910:	d8013515 	stw	zero,1236(sp)
   10914:	d8012c15 	stw	zero,1200(sp)
   10918:	1813883a 	mov	r9,r3
   1091c:	d9013915 	stw	r4,1252(sp)
   10920:	a8800007 	ldb	r2,0(r21)
   10924:	1002f326 	beq	r2,zero,114f4 <___vfprintf_internal_r+0xcac>
   10928:	00c00944 	movi	r3,37
   1092c:	a825883a 	mov	r18,r21
   10930:	10c0021e 	bne	r2,r3,1093c <___vfprintf_internal_r+0xf4>
   10934:	00001406 	br	10988 <___vfprintf_internal_r+0x140>
   10938:	10c00326 	beq	r2,r3,10948 <___vfprintf_internal_r+0x100>
   1093c:	94800044 	addi	r18,r18,1
   10940:	90800007 	ldb	r2,0(r18)
   10944:	103ffc1e 	bne	r2,zero,10938 <___vfprintf_internal_r+0xf0>
   10948:	9561c83a 	sub	r16,r18,r21
   1094c:	80000e26 	beq	r16,zero,10988 <___vfprintf_internal_r+0x140>
   10950:	da011d17 	ldw	r8,1140(sp)
   10954:	d8c11c17 	ldw	r3,1136(sp)
   10958:	4d400015 	stw	r21,0(r9)
   1095c:	4c000115 	stw	r16,4(r9)
   10960:	4411883a 	add	r8,r8,r16
   10964:	18c00044 	addi	r3,r3,1
   10968:	da011d15 	stw	r8,1140(sp)
   1096c:	d8c11c15 	stw	r3,1136(sp)
   10970:	008001c4 	movi	r2,7
   10974:	10c11016 	blt	r2,r3,10db8 <___vfprintf_internal_r+0x570>
   10978:	4a400204 	addi	r9,r9,8
   1097c:	d8812c17 	ldw	r2,1200(sp)
   10980:	1405883a 	add	r2,r2,r16
   10984:	d8812c15 	stw	r2,1200(sp)
   10988:	90800007 	ldb	r2,0(r18)
   1098c:	1000ee26 	beq	r2,zero,10d48 <___vfprintf_internal_r+0x500>
   10990:	95400044 	addi	r21,r18,1
   10994:	94800047 	ldb	r18,1(r18)
   10998:	073fffc4 	movi	fp,-1
   1099c:	e007883a 	mov	r3,fp
   109a0:	d8012585 	stb	zero,1174(sp)
   109a4:	d8012e15 	stw	zero,1208(sp)
   109a8:	0021883a 	mov	r16,zero
   109ac:	05001604 	movi	r20,88
   109b0:	04c00244 	movi	r19,9
   109b4:	4839883a 	mov	fp,r9
   109b8:	ad400044 	addi	r21,r21,1
   109bc:	90bff804 	addi	r2,r18,-32
   109c0:	a080462e 	bgeu	r20,r2,10adc <___vfprintf_internal_r+0x294>
   109c4:	e013883a 	mov	r9,fp
   109c8:	9000df26 	beq	r18,zero,10d48 <___vfprintf_internal_r+0x500>
   109cc:	00c00044 	movi	r3,1
   109d0:	d8c12815 	stw	r3,1184(sp)
   109d4:	dc810405 	stb	r18,1040(sp)
   109d8:	d8012585 	stb	zero,1174(sp)
   109dc:	d8c12b15 	stw	r3,1196(sp)
   109e0:	dcc10404 	addi	r19,sp,1040
   109e4:	d8013115 	stw	zero,1220(sp)
   109e8:	80c0008c 	andi	r3,r16,2
   109ec:	d8c12a15 	stw	r3,1192(sp)
   109f0:	18000326 	beq	r3,zero,10a00 <___vfprintf_internal_r+0x1b8>
   109f4:	d8c12817 	ldw	r3,1184(sp)
   109f8:	18c00084 	addi	r3,r3,2
   109fc:	d8c12815 	stw	r3,1184(sp)
   10a00:	80c0210c 	andi	r3,r16,132
   10a04:	d8c12f15 	stw	r3,1212(sp)
   10a08:	1802251e 	bne	r3,zero,112a0 <___vfprintf_internal_r+0xa58>
   10a0c:	d9012e17 	ldw	r4,1208(sp)
   10a10:	d8c12817 	ldw	r3,1184(sp)
   10a14:	20edc83a 	sub	r22,r4,r3
   10a18:	0582210e 	bge	zero,r22,112a0 <___vfprintf_internal_r+0xa58>
   10a1c:	02800404 	movi	r10,16
   10a20:	da011d17 	ldw	r8,1140(sp)
   10a24:	d8c11c17 	ldw	r3,1136(sp)
   10a28:	05c000f4 	movhi	r23,3
   10a2c:	bde05d84 	addi	r23,r23,-32394
   10a30:	5580200e 	bge	r10,r22,10ab4 <___vfprintf_internal_r+0x26c>
   10a34:	dc813815 	stw	r18,1248(sp)
   10a38:	5039883a 	mov	fp,r10
   10a3c:	b825883a 	mov	r18,r23
   10a40:	050001c4 	movi	r20,7
   10a44:	b02f883a 	mov	r23,r22
   10a48:	802d883a 	mov	r22,r16
   10a4c:	dc012917 	ldw	r16,1188(sp)
   10a50:	00000306 	br	10a60 <___vfprintf_internal_r+0x218>
   10a54:	bdfffc04 	addi	r23,r23,-16
   10a58:	4a400204 	addi	r9,r9,8
   10a5c:	e5c0110e 	bge	fp,r23,10aa4 <___vfprintf_internal_r+0x25c>
   10a60:	4c800015 	stw	r18,0(r9)
   10a64:	4f000115 	stw	fp,4(r9)
   10a68:	42000404 	addi	r8,r8,16
   10a6c:	18c00044 	addi	r3,r3,1
   10a70:	da011d15 	stw	r8,1140(sp)
   10a74:	d8c11c15 	stw	r3,1136(sp)
   10a78:	a0fff60e 	bge	r20,r3,10a54 <___vfprintf_internal_r+0x20c>
   10a7c:	8809883a 	mov	r4,r17
   10a80:	800b883a 	mov	r5,r16
   10a84:	d9811b04 	addi	r6,sp,1132
   10a88:	00108140 	call	10814 <__sprint_r>
   10a8c:	1000b41e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   10a90:	bdfffc04 	addi	r23,r23,-16
   10a94:	da011d17 	ldw	r8,1140(sp)
   10a98:	d8c11c17 	ldw	r3,1136(sp)
   10a9c:	da400404 	addi	r9,sp,16
   10aa0:	e5ffef16 	blt	fp,r23,10a60 <___vfprintf_internal_r+0x218>
   10aa4:	b021883a 	mov	r16,r22
   10aa8:	b82d883a 	mov	r22,r23
   10aac:	902f883a 	mov	r23,r18
   10ab0:	dc813817 	ldw	r18,1248(sp)
   10ab4:	4dc00015 	stw	r23,0(r9)
   10ab8:	4d800115 	stw	r22,4(r9)
   10abc:	4591883a 	add	r8,r8,r22
   10ac0:	18c00044 	addi	r3,r3,1
   10ac4:	da011d15 	stw	r8,1140(sp)
   10ac8:	d8c11c15 	stw	r3,1136(sp)
   10acc:	008001c4 	movi	r2,7
   10ad0:	10c3fe16 	blt	r2,r3,11acc <___vfprintf_internal_r+0x1284>
   10ad4:	4a400204 	addi	r9,r9,8
   10ad8:	0001f306 	br	112a8 <___vfprintf_internal_r+0xa60>
   10adc:	1085883a 	add	r2,r2,r2
   10ae0:	1085883a 	add	r2,r2,r2
   10ae4:	01000074 	movhi	r4,1
   10ae8:	2102be04 	addi	r4,r4,2808
   10aec:	1105883a 	add	r2,r2,r4
   10af0:	10800017 	ldw	r2,0(r2)
   10af4:	1000683a 	jmp	r2
   10af8:	000111d4 	movui	zero,1095
   10afc:	000109c4 	movi	zero,1063
   10b00:	000109c4 	movi	zero,1063
   10b04:	000111ec 	andhi	zero,zero,1095
   10b08:	000109c4 	movi	zero,1063
   10b0c:	000109c4 	movi	zero,1063
   10b10:	000109c4 	movi	zero,1063
   10b14:	000109c4 	movi	zero,1063
   10b18:	000109c4 	movi	zero,1063
   10b1c:	000109c4 	movi	zero,1063
   10b20:	000110a4 	muli	zero,zero,1090
   10b24:	00011238 	rdprs	zero,zero,1096
   10b28:	000109c4 	movi	zero,1063
   10b2c:	00010c6c 	andhi	zero,zero,1073
   10b30:	0001100c 	andi	zero,zero,1088
   10b34:	000109c4 	movi	zero,1063
   10b38:	000111f8 	rdprs	zero,zero,1095
   10b3c:	00011204 	movi	zero,1096
   10b40:	00011204 	movi	zero,1096
   10b44:	00011204 	movi	zero,1096
   10b48:	00011204 	movi	zero,1096
   10b4c:	00011204 	movi	zero,1096
   10b50:	00011204 	movi	zero,1096
   10b54:	00011204 	movi	zero,1096
   10b58:	00011204 	movi	zero,1096
   10b5c:	00011204 	movi	zero,1096
   10b60:	000109c4 	movi	zero,1063
   10b64:	000109c4 	movi	zero,1063
   10b68:	000109c4 	movi	zero,1063
   10b6c:	000109c4 	movi	zero,1063
   10b70:	000109c4 	movi	zero,1063
   10b74:	000109c4 	movi	zero,1063
   10b78:	000109c4 	movi	zero,1063
   10b7c:	000109c4 	movi	zero,1063
   10b80:	000109c4 	movi	zero,1063
   10b84:	000109c4 	movi	zero,1063
   10b88:	00010ddc 	xori	zero,zero,1079
   10b8c:	00010e9c 	xori	zero,zero,1082
   10b90:	000109c4 	movi	zero,1063
   10b94:	00010e9c 	xori	zero,zero,1082
   10b98:	000109c4 	movi	zero,1063
   10b9c:	000109c4 	movi	zero,1063
   10ba0:	000109c4 	movi	zero,1063
   10ba4:	000109c4 	movi	zero,1063
   10ba8:	00010f30 	cmpltui	zero,zero,1084
   10bac:	000109c4 	movi	zero,1063
   10bb0:	000109c4 	movi	zero,1063
   10bb4:	00010f3c 	xorhi	zero,zero,1084
   10bb8:	000109c4 	movi	zero,1063
   10bbc:	000109c4 	movi	zero,1063
   10bc0:	000109c4 	movi	zero,1063
   10bc4:	000109c4 	movi	zero,1063
   10bc8:	000109c4 	movi	zero,1063
   10bcc:	00010f74 	movhi	zero,1085
   10bd0:	000109c4 	movi	zero,1063
   10bd4:	000109c4 	movi	zero,1063
   10bd8:	00010fb0 	cmpltui	zero,zero,1086
   10bdc:	000109c4 	movi	zero,1063
   10be0:	000109c4 	movi	zero,1063
   10be4:	000109c4 	movi	zero,1063
   10be8:	000109c4 	movi	zero,1063
   10bec:	000109c4 	movi	zero,1063
   10bf0:	000109c4 	movi	zero,1063
   10bf4:	000109c4 	movi	zero,1063
   10bf8:	000109c4 	movi	zero,1063
   10bfc:	000109c4 	movi	zero,1063
   10c00:	000109c4 	movi	zero,1063
   10c04:	00011248 	cmpgei	zero,zero,1097
   10c08:	0001127c 	xorhi	zero,zero,1097
   10c0c:	00010e9c 	xori	zero,zero,1082
   10c10:	00010e9c 	xori	zero,zero,1082
   10c14:	00010e9c 	xori	zero,zero,1082
   10c18:	000111c8 	cmpgei	zero,zero,1095
   10c1c:	0001127c 	xorhi	zero,zero,1097
   10c20:	000109c4 	movi	zero,1063
   10c24:	000109c4 	movi	zero,1063
   10c28:	00011054 	movui	zero,1089
   10c2c:	000109c4 	movi	zero,1063
   10c30:	0001106c 	andhi	zero,zero,1089
   10c34:	00011288 	cmpgei	zero,zero,1098
   10c38:	000110cc 	andi	zero,zero,1091
   10c3c:	0001111c 	xori	zero,zero,1092
   10c40:	000109c4 	movi	zero,1063
   10c44:	00011128 	cmpgeui	zero,zero,1092
   10c48:	000109c4 	movi	zero,1063
   10c4c:	00011294 	movui	zero,1098
   10c50:	000109c4 	movi	zero,1063
   10c54:	000109c4 	movi	zero,1063
   10c58:	0001118c 	andi	zero,zero,1094
   10c5c:	d9012e17 	ldw	r4,1208(sp)
   10c60:	d8812d15 	stw	r2,1204(sp)
   10c64:	0109c83a 	sub	r4,zero,r4
   10c68:	d9012e15 	stw	r4,1208(sp)
   10c6c:	84000114 	ori	r16,r16,4
   10c70:	ac800007 	ldb	r18,0(r21)
   10c74:	003f5006 	br	109b8 <___vfprintf_internal_r+0x170>
   10c78:	d9013017 	ldw	r4,1216(sp)
   10c7c:	d9412917 	ldw	r5,1188(sp)
   10c80:	00126e80 	call	126e8 <__swsetup_r>
   10c84:	10003d1e 	bne	r2,zero,10d7c <___vfprintf_internal_r+0x534>
   10c88:	d8c12917 	ldw	r3,1188(sp)
   10c8c:	1880030b 	ldhu	r2,12(r3)
   10c90:	00c00284 	movi	r3,10
   10c94:	1100068c 	andi	r4,r2,26
   10c98:	20ff101e 	bne	r4,r3,108dc <___vfprintf_internal_r+0x94>
   10c9c:	d9012917 	ldw	r4,1188(sp)
   10ca0:	20c0038b 	ldhu	r3,14(r4)
   10ca4:	193fffcc 	andi	r4,r3,65535
   10ca8:	2120001c 	xori	r4,r4,32768
   10cac:	21200004 	addi	r4,r4,-32768
   10cb0:	203f0a16 	blt	r4,zero,108dc <___vfprintf_internal_r+0x94>
   10cb4:	d9012917 	ldw	r4,1188(sp)
   10cb8:	d9c12d17 	ldw	r7,1204(sp)
   10cbc:	10bfff4c 	andi	r2,r2,65533
   10cc0:	22800717 	ldw	r10,28(r4)
   10cc4:	22400917 	ldw	r9,36(r4)
   10cc8:	d9013017 	ldw	r4,1216(sp)
   10ccc:	02010004 	movi	r8,1024
   10cd0:	d881070d 	sth	r2,1052(sp)
   10cd4:	d9410404 	addi	r5,sp,1040
   10cd8:	d8800404 	addi	r2,sp,16
   10cdc:	800d883a 	mov	r6,r16
   10ce0:	d8c1078d 	sth	r3,1054(sp)
   10ce4:	da810b15 	stw	r10,1068(sp)
   10ce8:	da410d15 	stw	r9,1076(sp)
   10cec:	d8810415 	stw	r2,1040(sp)
   10cf0:	d8810815 	stw	r2,1056(sp)
   10cf4:	da010615 	stw	r8,1048(sp)
   10cf8:	da010915 	stw	r8,1060(sp)
   10cfc:	d8010a15 	stw	zero,1064(sp)
   10d00:	00108480 	call	10848 <___vfprintf_internal_r>
   10d04:	d8812c15 	stw	r2,1200(sp)
   10d08:	10000416 	blt	r2,zero,10d1c <___vfprintf_internal_r+0x4d4>
   10d0c:	d9013017 	ldw	r4,1216(sp)
   10d10:	d9410404 	addi	r5,sp,1040
   10d14:	00140b40 	call	140b4 <_fflush_r>
   10d18:	1006501e 	bne	r2,zero,1265c <___vfprintf_internal_r+0x1e14>
   10d1c:	d881070b 	ldhu	r2,1052(sp)
   10d20:	1080100c 	andi	r2,r2,64
   10d24:	10bfffcc 	andi	r2,r2,65535
   10d28:	10a0001c 	xori	r2,r2,32768
   10d2c:	10a00004 	addi	r2,r2,-32768
   10d30:	10001426 	beq	r2,zero,10d84 <___vfprintf_internal_r+0x53c>
   10d34:	d8c12917 	ldw	r3,1188(sp)
   10d38:	1880030b 	ldhu	r2,12(r3)
   10d3c:	10801014 	ori	r2,r2,64
   10d40:	1880030d 	sth	r2,12(r3)
   10d44:	00000f06 	br	10d84 <___vfprintf_internal_r+0x53c>
   10d48:	d8811d17 	ldw	r2,1140(sp)
   10d4c:	10000426 	beq	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   10d50:	d9013017 	ldw	r4,1216(sp)
   10d54:	d9412917 	ldw	r5,1188(sp)
   10d58:	d9811b04 	addi	r6,sp,1132
   10d5c:	00108140 	call	10814 <__sprint_r>
   10d60:	d8c12917 	ldw	r3,1188(sp)
   10d64:	1880030b 	ldhu	r2,12(r3)
   10d68:	1080100c 	andi	r2,r2,64
   10d6c:	10bfffcc 	andi	r2,r2,65535
   10d70:	10a0001c 	xori	r2,r2,32768
   10d74:	10a00004 	addi	r2,r2,-32768
   10d78:	10000226 	beq	r2,zero,10d84 <___vfprintf_internal_r+0x53c>
   10d7c:	00bfffc4 	movi	r2,-1
   10d80:	d8812c15 	stw	r2,1200(sp)
   10d84:	d8812c17 	ldw	r2,1200(sp)
   10d88:	dfc14617 	ldw	ra,1304(sp)
   10d8c:	df014517 	ldw	fp,1300(sp)
   10d90:	ddc14417 	ldw	r23,1296(sp)
   10d94:	dd814317 	ldw	r22,1292(sp)
   10d98:	dd414217 	ldw	r21,1288(sp)
   10d9c:	dd014117 	ldw	r20,1284(sp)
   10da0:	dcc14017 	ldw	r19,1280(sp)
   10da4:	dc813f17 	ldw	r18,1276(sp)
   10da8:	dc413e17 	ldw	r17,1272(sp)
   10dac:	dc013d17 	ldw	r16,1268(sp)
   10db0:	dec14704 	addi	sp,sp,1308
   10db4:	f800283a 	ret
   10db8:	d9412917 	ldw	r5,1188(sp)
   10dbc:	8809883a 	mov	r4,r17
   10dc0:	d9811b04 	addi	r6,sp,1132
   10dc4:	00108140 	call	10814 <__sprint_r>
   10dc8:	103fe51e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   10dcc:	da400404 	addi	r9,sp,16
   10dd0:	003eea06 	br	1097c <___vfprintf_internal_r+0x134>
   10dd4:	00143700 	call	14370 <__sinit>
   10dd8:	003eb306 	br	108a8 <___vfprintf_internal_r+0x60>
   10ddc:	e013883a 	mov	r9,fp
   10de0:	84000414 	ori	r16,r16,16
   10de4:	1839883a 	mov	fp,r3
   10de8:	8080080c 	andi	r2,r16,32
   10dec:	10034426 	beq	r2,zero,11b00 <___vfprintf_internal_r+0x12b8>
   10df0:	d8c12d17 	ldw	r3,1204(sp)
   10df4:	18800117 	ldw	r2,4(r3)
   10df8:	1dc00017 	ldw	r23,0(r3)
   10dfc:	18c00204 	addi	r3,r3,8
   10e00:	d8c12d15 	stw	r3,1204(sp)
   10e04:	102d883a 	mov	r22,r2
   10e08:	1003020e 	bge	r2,zero,11a14 <___vfprintf_internal_r+0x11cc>
   10e0c:	05efc83a 	sub	r23,zero,r23
   10e10:	b804c03a 	cmpne	r2,r23,zero
   10e14:	05adc83a 	sub	r22,zero,r22
   10e18:	b0adc83a 	sub	r22,r22,r2
   10e1c:	00800b44 	movi	r2,45
   10e20:	d8812585 	stb	r2,1174(sp)
   10e24:	00c00044 	movi	r3,1
   10e28:	bd84b03a 	or	r2,r23,r22
   10e2c:	e0000216 	blt	fp,zero,10e38 <___vfprintf_internal_r+0x5f0>
   10e30:	013fdfc4 	movi	r4,-129
   10e34:	8120703a 	and	r16,r16,r4
   10e38:	1001cc1e 	bne	r2,zero,1156c <___vfprintf_internal_r+0xd24>
   10e3c:	e001cb1e 	bne	fp,zero,1156c <___vfprintf_internal_r+0xd24>
   10e40:	18c03fcc 	andi	r3,r3,255
   10e44:	1802ca1e 	bne	r3,zero,11970 <___vfprintf_internal_r+0x1128>
   10e48:	8080004c 	andi	r2,r16,1
   10e4c:	1002c826 	beq	r2,zero,11970 <___vfprintf_internal_r+0x1128>
   10e50:	d8c13917 	ldw	r3,1252(sp)
   10e54:	00800c04 	movi	r2,48
   10e58:	d8810dc5 	stb	r2,1079(sp)
   10e5c:	d8c12b15 	stw	r3,1196(sp)
   10e60:	dcc10dc4 	addi	r19,sp,1079
   10e64:	d8812b17 	ldw	r2,1196(sp)
   10e68:	d8812815 	stw	r2,1184(sp)
   10e6c:	1700010e 	bge	r2,fp,10e74 <___vfprintf_internal_r+0x62c>
   10e70:	df012815 	stw	fp,1184(sp)
   10e74:	d8812583 	ldbu	r2,1174(sp)
   10e78:	df013115 	stw	fp,1220(sp)
   10e7c:	10803fcc 	andi	r2,r2,255
   10e80:	1080201c 	xori	r2,r2,128
   10e84:	10bfe004 	addi	r2,r2,-128
   10e88:	103ed726 	beq	r2,zero,109e8 <___vfprintf_internal_r+0x1a0>
   10e8c:	d8c12817 	ldw	r3,1184(sp)
   10e90:	18c00044 	addi	r3,r3,1
   10e94:	d8c12815 	stw	r3,1184(sp)
   10e98:	003ed306 	br	109e8 <___vfprintf_internal_r+0x1a0>
   10e9c:	8080020c 	andi	r2,r16,8
   10ea0:	e013883a 	mov	r9,fp
   10ea4:	1839883a 	mov	fp,r3
   10ea8:	1003a626 	beq	r2,zero,11d44 <___vfprintf_internal_r+0x14fc>
   10eac:	d9012d17 	ldw	r4,1204(sp)
   10eb0:	25800017 	ldw	r22,0(r4)
   10eb4:	25000117 	ldw	r20,4(r4)
   10eb8:	21000204 	addi	r4,r4,8
   10ebc:	d9012d15 	stw	r4,1204(sp)
   10ec0:	dd813315 	stw	r22,1228(sp)
   10ec4:	dd013415 	stw	r20,1232(sp)
   10ec8:	b009883a 	mov	r4,r22
   10ecc:	a00b883a 	mov	r5,r20
   10ed0:	da413c15 	stw	r9,1264(sp)
   10ed4:	00174fc0 	call	174fc <__isinfd>
   10ed8:	da413c17 	ldw	r9,1264(sp)
   10edc:	b009883a 	mov	r4,r22
   10ee0:	a00b883a 	mov	r5,r20
   10ee4:	10041d26 	beq	r2,zero,11f5c <___vfprintf_internal_r+0x1714>
   10ee8:	000d883a 	mov	r6,zero
   10eec:	000f883a 	mov	r7,zero
   10ef0:	00192d00 	call	192d0 <__ltdf2>
   10ef4:	da413c17 	ldw	r9,1264(sp)
   10ef8:	1004da16 	blt	r2,zero,12264 <___vfprintf_internal_r+0x1a1c>
   10efc:	d8812583 	ldbu	r2,1174(sp)
   10f00:	00c011c4 	movi	r3,71
   10f04:	1c83d116 	blt	r3,r18,11e4c <___vfprintf_internal_r+0x1604>
   10f08:	04c000f4 	movhi	r19,3
   10f0c:	9ce04d04 	addi	r19,r19,-32460
   10f10:	00c000c4 	movi	r3,3
   10f14:	d8c12815 	stw	r3,1184(sp)
   10f18:	00ffdfc4 	movi	r3,-129
   10f1c:	80e0703a 	and	r16,r16,r3
   10f20:	d8c12817 	ldw	r3,1184(sp)
   10f24:	d8013115 	stw	zero,1220(sp)
   10f28:	d8c12b15 	stw	r3,1196(sp)
   10f2c:	003fd306 	br	10e7c <___vfprintf_internal_r+0x634>
   10f30:	84000214 	ori	r16,r16,8
   10f34:	ac800007 	ldb	r18,0(r21)
   10f38:	003e9f06 	br	109b8 <___vfprintf_internal_r+0x170>
   10f3c:	e013883a 	mov	r9,fp
   10f40:	84000414 	ori	r16,r16,16
   10f44:	1839883a 	mov	fp,r3
   10f48:	8080080c 	andi	r2,r16,32
   10f4c:	10031d26 	beq	r2,zero,11bc4 <___vfprintf_internal_r+0x137c>
   10f50:	d8812d17 	ldw	r2,1204(sp)
   10f54:	0007883a 	mov	r3,zero
   10f58:	15c00017 	ldw	r23,0(r2)
   10f5c:	15800117 	ldw	r22,4(r2)
   10f60:	10800204 	addi	r2,r2,8
   10f64:	d8812d15 	stw	r2,1204(sp)
   10f68:	d8012585 	stb	zero,1174(sp)
   10f6c:	bd84b03a 	or	r2,r23,r22
   10f70:	003fae06 	br	10e2c <___vfprintf_internal_r+0x5e4>
   10f74:	e013883a 	mov	r9,fp
   10f78:	84000414 	ori	r16,r16,16
   10f7c:	1839883a 	mov	fp,r3
   10f80:	8080080c 	andi	r2,r16,32
   10f84:	1002e726 	beq	r2,zero,11b24 <___vfprintf_internal_r+0x12dc>
   10f88:	d8c12d17 	ldw	r3,1204(sp)
   10f8c:	d9012d17 	ldw	r4,1204(sp)
   10f90:	1dc00017 	ldw	r23,0(r3)
   10f94:	1d800117 	ldw	r22,4(r3)
   10f98:	21000204 	addi	r4,r4,8
   10f9c:	00c00044 	movi	r3,1
   10fa0:	d9012d15 	stw	r4,1204(sp)
   10fa4:	bd84b03a 	or	r2,r23,r22
   10fa8:	d8012585 	stb	zero,1174(sp)
   10fac:	003f9f06 	br	10e2c <___vfprintf_internal_r+0x5e4>
   10fb0:	e013883a 	mov	r9,fp
   10fb4:	1839883a 	mov	fp,r3
   10fb8:	00c000f4 	movhi	r3,3
   10fbc:	18e05104 	addi	r3,r3,-32444
   10fc0:	d8c13615 	stw	r3,1240(sp)
   10fc4:	8080080c 	andi	r2,r16,32
   10fc8:	10007726 	beq	r2,zero,111a8 <___vfprintf_internal_r+0x960>
   10fcc:	d9012d17 	ldw	r4,1204(sp)
   10fd0:	25c00017 	ldw	r23,0(r4)
   10fd4:	25800117 	ldw	r22,4(r4)
   10fd8:	21000204 	addi	r4,r4,8
   10fdc:	d9012d15 	stw	r4,1204(sp)
   10fe0:	8080004c 	andi	r2,r16,1
   10fe4:	1002c226 	beq	r2,zero,11af0 <___vfprintf_internal_r+0x12a8>
   10fe8:	bd84b03a 	or	r2,r23,r22
   10fec:	10035d26 	beq	r2,zero,11d64 <___vfprintf_internal_r+0x151c>
   10ff0:	00c00c04 	movi	r3,48
   10ff4:	d8c12505 	stb	r3,1172(sp)
   10ff8:	dc812545 	stb	r18,1173(sp)
   10ffc:	84000094 	ori	r16,r16,2
   11000:	00c00084 	movi	r3,2
   11004:	d8012585 	stb	zero,1174(sp)
   11008:	003f8806 	br	10e2c <___vfprintf_internal_r+0x5e4>
   1100c:	ac800007 	ldb	r18,0(r21)
   11010:	00c00a84 	movi	r3,42
   11014:	adc00044 	addi	r23,r21,1
   11018:	90c57526 	beq	r18,r3,125f0 <___vfprintf_internal_r+0x1da8>
   1101c:	95bff404 	addi	r22,r18,-48
   11020:	0009883a 	mov	r4,zero
   11024:	9d84ff36 	bltu	r19,r22,12424 <___vfprintf_internal_r+0x1bdc>
   11028:	01400284 	movi	r5,10
   1102c:	00106600 	call	10660 <__mulsi3>
   11030:	bc800007 	ldb	r18,0(r23)
   11034:	b089883a 	add	r4,r22,r2
   11038:	bdc00044 	addi	r23,r23,1
   1103c:	95bff404 	addi	r22,r18,-48
   11040:	9dbff92e 	bgeu	r19,r22,11028 <___vfprintf_internal_r+0x7e0>
   11044:	2007883a 	mov	r3,r4
   11048:	20044316 	blt	r4,zero,12158 <___vfprintf_internal_r+0x1910>
   1104c:	b82b883a 	mov	r21,r23
   11050:	003e5a06 	br	109bc <___vfprintf_internal_r+0x174>
   11054:	ac800007 	ldb	r18,0(r21)
   11058:	01001b04 	movi	r4,108
   1105c:	a805883a 	mov	r2,r21
   11060:	91045526 	beq	r18,r4,121b8 <___vfprintf_internal_r+0x1970>
   11064:	84000414 	ori	r16,r16,16
   11068:	003e5306 	br	109b8 <___vfprintf_internal_r+0x170>
   1106c:	8080080c 	andi	r2,r16,32
   11070:	e013883a 	mov	r9,fp
   11074:	10034026 	beq	r2,zero,11d78 <___vfprintf_internal_r+0x1530>
   11078:	d9012d17 	ldw	r4,1204(sp)
   1107c:	20800017 	ldw	r2,0(r4)
   11080:	d9012c17 	ldw	r4,1200(sp)
   11084:	2007d7fa 	srai	r3,r4,31
   11088:	d9012d17 	ldw	r4,1204(sp)
   1108c:	10c00115 	stw	r3,4(r2)
   11090:	21000104 	addi	r4,r4,4
   11094:	d9012d15 	stw	r4,1204(sp)
   11098:	d9012c17 	ldw	r4,1200(sp)
   1109c:	11000015 	stw	r4,0(r2)
   110a0:	003e1f06 	br	10920 <___vfprintf_internal_r+0xd8>
   110a4:	d9012d17 	ldw	r4,1204(sp)
   110a8:	21000017 	ldw	r4,0(r4)
   110ac:	d9012e15 	stw	r4,1208(sp)
   110b0:	d9012d17 	ldw	r4,1204(sp)
   110b4:	20800104 	addi	r2,r4,4
   110b8:	d9012e17 	ldw	r4,1208(sp)
   110bc:	203ee716 	blt	r4,zero,10c5c <___vfprintf_internal_r+0x414>
   110c0:	d8812d15 	stw	r2,1204(sp)
   110c4:	ac800007 	ldb	r18,0(r21)
   110c8:	003e3b06 	br	109b8 <___vfprintf_internal_r+0x170>
   110cc:	e013883a 	mov	r9,fp
   110d0:	1839883a 	mov	fp,r3
   110d4:	d8c12d17 	ldw	r3,1204(sp)
   110d8:	00800c04 	movi	r2,48
   110dc:	010000f4 	movhi	r4,3
   110e0:	21205604 	addi	r4,r4,-32424
   110e4:	1dc00017 	ldw	r23,0(r3)
   110e8:	18c00104 	addi	r3,r3,4
   110ec:	d8812505 	stb	r2,1172(sp)
   110f0:	00801e04 	movi	r2,120
   110f4:	d8812545 	stb	r2,1173(sp)
   110f8:	d8c12d15 	stw	r3,1204(sp)
   110fc:	002d883a 	mov	r22,zero
   11100:	84000094 	ori	r16,r16,2
   11104:	d9013615 	stw	r4,1240(sp)
   11108:	00c00084 	movi	r3,2
   1110c:	04801e04 	movi	r18,120
   11110:	b805883a 	mov	r2,r23
   11114:	d8012585 	stb	zero,1174(sp)
   11118:	003f4406 	br	10e2c <___vfprintf_internal_r+0x5e4>
   1111c:	84000814 	ori	r16,r16,32
   11120:	ac800007 	ldb	r18,0(r21)
   11124:	003e2406 	br	109b8 <___vfprintf_internal_r+0x170>
   11128:	d8812d17 	ldw	r2,1204(sp)
   1112c:	d8012585 	stb	zero,1174(sp)
   11130:	e013883a 	mov	r9,fp
   11134:	14c00017 	ldw	r19,0(r2)
   11138:	1839883a 	mov	fp,r3
   1113c:	15c00104 	addi	r23,r2,4
   11140:	98045526 	beq	r19,zero,12298 <___vfprintf_internal_r+0x1a50>
   11144:	9809883a 	mov	r4,r19
   11148:	18043116 	blt	r3,zero,12210 <___vfprintf_internal_r+0x19c8>
   1114c:	000b883a 	mov	r5,zero
   11150:	180d883a 	mov	r6,r3
   11154:	da413c15 	stw	r9,1264(sp)
   11158:	0015a100 	call	15a10 <memchr>
   1115c:	da413c17 	ldw	r9,1264(sp)
   11160:	10047a26 	beq	r2,zero,1234c <___vfprintf_internal_r+0x1b04>
   11164:	14c5c83a 	sub	r2,r2,r19
   11168:	d8812b15 	stw	r2,1196(sp)
   1116c:	e083d40e 	bge	fp,r2,120c0 <___vfprintf_internal_r+0x1878>
   11170:	df012815 	stw	fp,1184(sp)
   11174:	e004e416 	blt	fp,zero,12508 <___vfprintf_internal_r+0x1cc0>
   11178:	d8812583 	ldbu	r2,1174(sp)
   1117c:	df012b15 	stw	fp,1196(sp)
   11180:	ddc12d15 	stw	r23,1204(sp)
   11184:	d8013115 	stw	zero,1220(sp)
   11188:	003f3c06 	br	10e7c <___vfprintf_internal_r+0x634>
   1118c:	008000f4 	movhi	r2,3
   11190:	10a05604 	addi	r2,r2,-32424
   11194:	d8813615 	stw	r2,1240(sp)
   11198:	8080080c 	andi	r2,r16,32
   1119c:	e013883a 	mov	r9,fp
   111a0:	1839883a 	mov	fp,r3
   111a4:	103f891e 	bne	r2,zero,10fcc <___vfprintf_internal_r+0x784>
   111a8:	8080040c 	andi	r2,r16,16
   111ac:	1002c326 	beq	r2,zero,11cbc <___vfprintf_internal_r+0x1474>
   111b0:	d8812d17 	ldw	r2,1204(sp)
   111b4:	002d883a 	mov	r22,zero
   111b8:	15c00017 	ldw	r23,0(r2)
   111bc:	10800104 	addi	r2,r2,4
   111c0:	d8812d15 	stw	r2,1204(sp)
   111c4:	003f8606 	br	10fe0 <___vfprintf_internal_r+0x798>
   111c8:	84001014 	ori	r16,r16,64
   111cc:	ac800007 	ldb	r18,0(r21)
   111d0:	003df906 	br	109b8 <___vfprintf_internal_r+0x170>
   111d4:	d8812587 	ldb	r2,1174(sp)
   111d8:	1002e51e 	bne	r2,zero,11d70 <___vfprintf_internal_r+0x1528>
   111dc:	00800804 	movi	r2,32
   111e0:	d8812585 	stb	r2,1174(sp)
   111e4:	ac800007 	ldb	r18,0(r21)
   111e8:	003df306 	br	109b8 <___vfprintf_internal_r+0x170>
   111ec:	84000054 	ori	r16,r16,1
   111f0:	ac800007 	ldb	r18,0(r21)
   111f4:	003df006 	br	109b8 <___vfprintf_internal_r+0x170>
   111f8:	84002014 	ori	r16,r16,128
   111fc:	ac800007 	ldb	r18,0(r21)
   11200:	003ded06 	br	109b8 <___vfprintf_internal_r+0x170>
   11204:	0009883a 	mov	r4,zero
   11208:	95bff404 	addi	r22,r18,-48
   1120c:	182f883a 	mov	r23,r3
   11210:	01400284 	movi	r5,10
   11214:	00106600 	call	10660 <__mulsi3>
   11218:	ac800007 	ldb	r18,0(r21)
   1121c:	1589883a 	add	r4,r2,r22
   11220:	ad400044 	addi	r21,r21,1
   11224:	95bff404 	addi	r22,r18,-48
   11228:	9dbff92e 	bgeu	r19,r22,11210 <___vfprintf_internal_r+0x9c8>
   1122c:	b807883a 	mov	r3,r23
   11230:	d9012e15 	stw	r4,1208(sp)
   11234:	003de106 	br	109bc <___vfprintf_internal_r+0x174>
   11238:	00800ac4 	movi	r2,43
   1123c:	d8812585 	stb	r2,1174(sp)
   11240:	ac800007 	ldb	r18,0(r21)
   11244:	003ddc06 	br	109b8 <___vfprintf_internal_r+0x170>
   11248:	d8c12d17 	ldw	r3,1204(sp)
   1124c:	d9012d17 	ldw	r4,1204(sp)
   11250:	e013883a 	mov	r9,fp
   11254:	18800017 	ldw	r2,0(r3)
   11258:	21000104 	addi	r4,r4,4
   1125c:	00c00044 	movi	r3,1
   11260:	d8c12815 	stw	r3,1184(sp)
   11264:	d8012585 	stb	zero,1174(sp)
   11268:	d8810405 	stb	r2,1040(sp)
   1126c:	d9012d15 	stw	r4,1204(sp)
   11270:	d8c12b15 	stw	r3,1196(sp)
   11274:	dcc10404 	addi	r19,sp,1040
   11278:	003dda06 	br	109e4 <___vfprintf_internal_r+0x19c>
   1127c:	e013883a 	mov	r9,fp
   11280:	1839883a 	mov	fp,r3
   11284:	003ed806 	br	10de8 <___vfprintf_internal_r+0x5a0>
   11288:	e013883a 	mov	r9,fp
   1128c:	1839883a 	mov	fp,r3
   11290:	003f2d06 	br	10f48 <___vfprintf_internal_r+0x700>
   11294:	e013883a 	mov	r9,fp
   11298:	1839883a 	mov	fp,r3
   1129c:	003f3806 	br	10f80 <___vfprintf_internal_r+0x738>
   112a0:	da011d17 	ldw	r8,1140(sp)
   112a4:	d8c11c17 	ldw	r3,1136(sp)
   112a8:	d8812587 	ldb	r2,1174(sp)
   112ac:	10000b26 	beq	r2,zero,112dc <___vfprintf_internal_r+0xa94>
   112b0:	d8812584 	addi	r2,sp,1174
   112b4:	48800015 	stw	r2,0(r9)
   112b8:	00800044 	movi	r2,1
   112bc:	48800115 	stw	r2,4(r9)
   112c0:	4091883a 	add	r8,r8,r2
   112c4:	1887883a 	add	r3,r3,r2
   112c8:	da011d15 	stw	r8,1140(sp)
   112cc:	d8c11c15 	stw	r3,1136(sp)
   112d0:	008001c4 	movi	r2,7
   112d4:	10c18e16 	blt	r2,r3,11910 <___vfprintf_internal_r+0x10c8>
   112d8:	4a400204 	addi	r9,r9,8
   112dc:	d9012a17 	ldw	r4,1192(sp)
   112e0:	20000b26 	beq	r4,zero,11310 <___vfprintf_internal_r+0xac8>
   112e4:	d8812504 	addi	r2,sp,1172
   112e8:	48800015 	stw	r2,0(r9)
   112ec:	00800084 	movi	r2,2
   112f0:	48800115 	stw	r2,4(r9)
   112f4:	4091883a 	add	r8,r8,r2
   112f8:	18c00044 	addi	r3,r3,1
   112fc:	da011d15 	stw	r8,1140(sp)
   11300:	d8c11c15 	stw	r3,1136(sp)
   11304:	008001c4 	movi	r2,7
   11308:	10c17816 	blt	r2,r3,118ec <___vfprintf_internal_r+0x10a4>
   1130c:	4a400204 	addi	r9,r9,8
   11310:	d9012f17 	ldw	r4,1212(sp)
   11314:	00802004 	movi	r2,128
   11318:	2080fc26 	beq	r4,r2,1170c <___vfprintf_internal_r+0xec4>
   1131c:	d8813117 	ldw	r2,1220(sp)
   11320:	d9012b17 	ldw	r4,1196(sp)
   11324:	112fc83a 	sub	r23,r2,r4
   11328:	05c02a0e 	bge	zero,r23,113d4 <___vfprintf_internal_r+0xb8c>
   1132c:	07000404 	movi	fp,16
   11330:	050000f4 	movhi	r20,3
   11334:	a5206184 	addi	r20,r20,-32378
   11338:	e5c01d0e 	bge	fp,r23,113b0 <___vfprintf_internal_r+0xb68>
   1133c:	dc812a15 	stw	r18,1192(sp)
   11340:	058001c4 	movi	r22,7
   11344:	a025883a 	mov	r18,r20
   11348:	8029883a 	mov	r20,r16
   1134c:	dc012917 	ldw	r16,1188(sp)
   11350:	00000306 	br	11360 <___vfprintf_internal_r+0xb18>
   11354:	bdfffc04 	addi	r23,r23,-16
   11358:	4a400204 	addi	r9,r9,8
   1135c:	e5c0110e 	bge	fp,r23,113a4 <___vfprintf_internal_r+0xb5c>
   11360:	4c800015 	stw	r18,0(r9)
   11364:	4f000115 	stw	fp,4(r9)
   11368:	42000404 	addi	r8,r8,16
   1136c:	18c00044 	addi	r3,r3,1
   11370:	da011d15 	stw	r8,1140(sp)
   11374:	d8c11c15 	stw	r3,1136(sp)
   11378:	b0fff60e 	bge	r22,r3,11354 <___vfprintf_internal_r+0xb0c>
   1137c:	8809883a 	mov	r4,r17
   11380:	800b883a 	mov	r5,r16
   11384:	d9811b04 	addi	r6,sp,1132
   11388:	00108140 	call	10814 <__sprint_r>
   1138c:	103e741e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11390:	bdfffc04 	addi	r23,r23,-16
   11394:	da011d17 	ldw	r8,1140(sp)
   11398:	d8c11c17 	ldw	r3,1136(sp)
   1139c:	da400404 	addi	r9,sp,16
   113a0:	e5ffef16 	blt	fp,r23,11360 <___vfprintf_internal_r+0xb18>
   113a4:	a021883a 	mov	r16,r20
   113a8:	9029883a 	mov	r20,r18
   113ac:	dc812a17 	ldw	r18,1192(sp)
   113b0:	4d000015 	stw	r20,0(r9)
   113b4:	4dc00115 	stw	r23,4(r9)
   113b8:	45d1883a 	add	r8,r8,r23
   113bc:	18c00044 	addi	r3,r3,1
   113c0:	da011d15 	stw	r8,1140(sp)
   113c4:	d8c11c15 	stw	r3,1136(sp)
   113c8:	008001c4 	movi	r2,7
   113cc:	10c13e16 	blt	r2,r3,118c8 <___vfprintf_internal_r+0x1080>
   113d0:	4a400204 	addi	r9,r9,8
   113d4:	8080400c 	andi	r2,r16,256
   113d8:	1000831e 	bne	r2,zero,115e8 <___vfprintf_internal_r+0xda0>
   113dc:	d8812b17 	ldw	r2,1196(sp)
   113e0:	4cc00015 	stw	r19,0(r9)
   113e4:	48800115 	stw	r2,4(r9)
   113e8:	4091883a 	add	r8,r8,r2
   113ec:	18c00044 	addi	r3,r3,1
   113f0:	da011d15 	stw	r8,1140(sp)
   113f4:	d8c11c15 	stw	r3,1136(sp)
   113f8:	008001c4 	movi	r2,7
   113fc:	10c05316 	blt	r2,r3,1154c <___vfprintf_internal_r+0xd04>
   11400:	4a400204 	addi	r9,r9,8
   11404:	8400010c 	andi	r16,r16,4
   11408:	80002e26 	beq	r16,zero,114c4 <___vfprintf_internal_r+0xc7c>
   1140c:	d8812e17 	ldw	r2,1208(sp)
   11410:	d8c12817 	ldw	r3,1184(sp)
   11414:	10e1c83a 	sub	r16,r2,r3
   11418:	04002a0e 	bge	zero,r16,114c4 <___vfprintf_internal_r+0xc7c>
   1141c:	04800404 	movi	r18,16
   11420:	d8c11c17 	ldw	r3,1136(sp)
   11424:	05c000f4 	movhi	r23,3
   11428:	bde05d84 	addi	r23,r23,-32394
   1142c:	9400170e 	bge	r18,r16,1148c <___vfprintf_internal_r+0xc44>
   11430:	04c001c4 	movi	r19,7
   11434:	dd012917 	ldw	r20,1188(sp)
   11438:	00000306 	br	11448 <___vfprintf_internal_r+0xc00>
   1143c:	843ffc04 	addi	r16,r16,-16
   11440:	4a400204 	addi	r9,r9,8
   11444:	9400110e 	bge	r18,r16,1148c <___vfprintf_internal_r+0xc44>
   11448:	4dc00015 	stw	r23,0(r9)
   1144c:	4c800115 	stw	r18,4(r9)
   11450:	42000404 	addi	r8,r8,16
   11454:	18c00044 	addi	r3,r3,1
   11458:	da011d15 	stw	r8,1140(sp)
   1145c:	d8c11c15 	stw	r3,1136(sp)
   11460:	98fff60e 	bge	r19,r3,1143c <___vfprintf_internal_r+0xbf4>
   11464:	8809883a 	mov	r4,r17
   11468:	a00b883a 	mov	r5,r20
   1146c:	d9811b04 	addi	r6,sp,1132
   11470:	00108140 	call	10814 <__sprint_r>
   11474:	103e3a1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11478:	843ffc04 	addi	r16,r16,-16
   1147c:	da011d17 	ldw	r8,1140(sp)
   11480:	d8c11c17 	ldw	r3,1136(sp)
   11484:	da400404 	addi	r9,sp,16
   11488:	943fef16 	blt	r18,r16,11448 <___vfprintf_internal_r+0xc00>
   1148c:	4dc00015 	stw	r23,0(r9)
   11490:	4c000115 	stw	r16,4(r9)
   11494:	8211883a 	add	r8,r16,r8
   11498:	18c00044 	addi	r3,r3,1
   1149c:	da011d15 	stw	r8,1140(sp)
   114a0:	d8c11c15 	stw	r3,1136(sp)
   114a4:	008001c4 	movi	r2,7
   114a8:	10c0060e 	bge	r2,r3,114c4 <___vfprintf_internal_r+0xc7c>
   114ac:	d9412917 	ldw	r5,1188(sp)
   114b0:	8809883a 	mov	r4,r17
   114b4:	d9811b04 	addi	r6,sp,1132
   114b8:	00108140 	call	10814 <__sprint_r>
   114bc:	103e281e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   114c0:	da011d17 	ldw	r8,1140(sp)
   114c4:	dd012817 	ldw	r20,1184(sp)
   114c8:	d9012e17 	ldw	r4,1208(sp)
   114cc:	a100010e 	bge	r20,r4,114d4 <___vfprintf_internal_r+0xc8c>
   114d0:	2029883a 	mov	r20,r4
   114d4:	d8812c17 	ldw	r2,1200(sp)
   114d8:	1505883a 	add	r2,r2,r20
   114dc:	d8812c15 	stw	r2,1200(sp)
   114e0:	4000b91e 	bne	r8,zero,117c8 <___vfprintf_internal_r+0xf80>
   114e4:	d8011c15 	stw	zero,1136(sp)
   114e8:	a8800007 	ldb	r2,0(r21)
   114ec:	da400404 	addi	r9,sp,16
   114f0:	103d0d1e 	bne	r2,zero,10928 <___vfprintf_internal_r+0xe0>
   114f4:	a825883a 	mov	r18,r21
   114f8:	003d2306 	br	10988 <___vfprintf_internal_r+0x140>
   114fc:	d9412917 	ldw	r5,1188(sp)
   11500:	8809883a 	mov	r4,r17
   11504:	d9811b04 	addi	r6,sp,1132
   11508:	00108140 	call	10814 <__sprint_r>
   1150c:	103e141e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11510:	da011d17 	ldw	r8,1140(sp)
   11514:	da400404 	addi	r9,sp,16
   11518:	8080004c 	andi	r2,r16,1
   1151c:	103fb926 	beq	r2,zero,11404 <___vfprintf_internal_r+0xbbc>
   11520:	d8c11c17 	ldw	r3,1136(sp)
   11524:	d9013717 	ldw	r4,1244(sp)
   11528:	00800044 	movi	r2,1
   1152c:	48800115 	stw	r2,4(r9)
   11530:	49000015 	stw	r4,0(r9)
   11534:	4091883a 	add	r8,r8,r2
   11538:	1887883a 	add	r3,r3,r2
   1153c:	da011d15 	stw	r8,1140(sp)
   11540:	d8c11c15 	stw	r3,1136(sp)
   11544:	008001c4 	movi	r2,7
   11548:	10ffad0e 	bge	r2,r3,11400 <___vfprintf_internal_r+0xbb8>
   1154c:	d9412917 	ldw	r5,1188(sp)
   11550:	8809883a 	mov	r4,r17
   11554:	d9811b04 	addi	r6,sp,1132
   11558:	00108140 	call	10814 <__sprint_r>
   1155c:	103e001e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11560:	da400404 	addi	r9,sp,16
   11564:	da011d17 	ldw	r8,1140(sp)
   11568:	003fa606 	br	11404 <___vfprintf_internal_r+0xbbc>
   1156c:	18803fcc 	andi	r2,r3,255
   11570:	00c00044 	movi	r3,1
   11574:	10c10126 	beq	r2,r3,1197c <___vfprintf_internal_r+0x1134>
   11578:	00c00084 	movi	r3,2
   1157c:	10c0ed26 	beq	r2,r3,11934 <___vfprintf_internal_r+0x10ec>
   11580:	d8c10dc4 	addi	r3,sp,1079
   11584:	b808d0fa 	srli	r4,r23,3
   11588:	b00a977a 	slli	r5,r22,29
   1158c:	b02cd0fa 	srli	r22,r22,3
   11590:	bdc001cc 	andi	r23,r23,7
   11594:	b8800c04 	addi	r2,r23,48
   11598:	292eb03a 	or	r23,r5,r4
   1159c:	18800005 	stb	r2,0(r3)
   115a0:	bd88b03a 	or	r4,r23,r22
   115a4:	1827883a 	mov	r19,r3
   115a8:	18ffffc4 	addi	r3,r3,-1
   115ac:	203ff51e 	bne	r4,zero,11584 <___vfprintf_internal_r+0xd3c>
   115b0:	8100004c 	andi	r4,r16,1
   115b4:	980b883a 	mov	r5,r19
   115b8:	20000726 	beq	r4,zero,115d8 <___vfprintf_internal_r+0xd90>
   115bc:	10803fcc 	andi	r2,r2,255
   115c0:	1080201c 	xori	r2,r2,128
   115c4:	10bfe004 	addi	r2,r2,-128
   115c8:	01000c04 	movi	r4,48
   115cc:	11000226 	beq	r2,r4,115d8 <___vfprintf_internal_r+0xd90>
   115d0:	1827883a 	mov	r19,r3
   115d4:	293fffc5 	stb	r4,-1(r5)
   115d8:	d8812717 	ldw	r2,1180(sp)
   115dc:	14c5c83a 	sub	r2,r2,r19
   115e0:	d8812b15 	stw	r2,1196(sp)
   115e4:	003e1f06 	br	10e64 <___vfprintf_internal_r+0x61c>
   115e8:	00801944 	movi	r2,101
   115ec:	14807c0e 	bge	r2,r18,117e0 <___vfprintf_internal_r+0xf98>
   115f0:	d9013317 	ldw	r4,1228(sp)
   115f4:	d9413417 	ldw	r5,1232(sp)
   115f8:	000d883a 	mov	r6,zero
   115fc:	000f883a 	mov	r7,zero
   11600:	d8c13b15 	stw	r3,1260(sp)
   11604:	da013a15 	stw	r8,1256(sp)
   11608:	da413c15 	stw	r9,1264(sp)
   1160c:	00191500 	call	19150 <__eqdf2>
   11610:	d8c13b17 	ldw	r3,1260(sp)
   11614:	da013a17 	ldw	r8,1256(sp)
   11618:	da413c17 	ldw	r9,1264(sp)
   1161c:	1001001e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x11d8>
   11620:	008000f4 	movhi	r2,3
   11624:	10a05d04 	addi	r2,r2,-32396
   11628:	48800015 	stw	r2,0(r9)
   1162c:	00800044 	movi	r2,1
   11630:	48800115 	stw	r2,4(r9)
   11634:	4091883a 	add	r8,r8,r2
   11638:	1887883a 	add	r3,r3,r2
   1163c:	da011d15 	stw	r8,1140(sp)
   11640:	d8c11c15 	stw	r3,1136(sp)
   11644:	008001c4 	movi	r2,7
   11648:	10c20316 	blt	r2,r3,11e58 <___vfprintf_internal_r+0x1610>
   1164c:	4a400204 	addi	r9,r9,8
   11650:	d8812417 	ldw	r2,1168(sp)
   11654:	d8c13217 	ldw	r3,1224(sp)
   11658:	10c00216 	blt	r2,r3,11664 <___vfprintf_internal_r+0xe1c>
   1165c:	8080004c 	andi	r2,r16,1
   11660:	103f6826 	beq	r2,zero,11404 <___vfprintf_internal_r+0xbbc>
   11664:	d8c11c17 	ldw	r3,1136(sp)
   11668:	d9013717 	ldw	r4,1244(sp)
   1166c:	00800044 	movi	r2,1
   11670:	48800115 	stw	r2,4(r9)
   11674:	49000015 	stw	r4,0(r9)
   11678:	4091883a 	add	r8,r8,r2
   1167c:	1887883a 	add	r3,r3,r2
   11680:	da011d15 	stw	r8,1140(sp)
   11684:	d8c11c15 	stw	r3,1136(sp)
   11688:	008001c4 	movi	r2,7
   1168c:	10c2ce16 	blt	r2,r3,121c8 <___vfprintf_internal_r+0x1980>
   11690:	4a400204 	addi	r9,r9,8
   11694:	d8813217 	ldw	r2,1224(sp)
   11698:	14bfffc4 	addi	r18,r2,-1
   1169c:	04bf590e 	bge	zero,r18,11404 <___vfprintf_internal_r+0xbbc>
   116a0:	04c00404 	movi	r19,16
   116a4:	d8c11c17 	ldw	r3,1136(sp)
   116a8:	050000f4 	movhi	r20,3
   116ac:	a5206184 	addi	r20,r20,-32378
   116b0:	9c818a0e 	bge	r19,r18,11cdc <___vfprintf_internal_r+0x1494>
   116b4:	058001c4 	movi	r22,7
   116b8:	ddc12917 	ldw	r23,1188(sp)
   116bc:	00000306 	br	116cc <___vfprintf_internal_r+0xe84>
   116c0:	4a400204 	addi	r9,r9,8
   116c4:	94bffc04 	addi	r18,r18,-16
   116c8:	9c81840e 	bge	r19,r18,11cdc <___vfprintf_internal_r+0x1494>
   116cc:	4d000015 	stw	r20,0(r9)
   116d0:	4cc00115 	stw	r19,4(r9)
   116d4:	42000404 	addi	r8,r8,16
   116d8:	18c00044 	addi	r3,r3,1
   116dc:	da011d15 	stw	r8,1140(sp)
   116e0:	d8c11c15 	stw	r3,1136(sp)
   116e4:	b0fff60e 	bge	r22,r3,116c0 <___vfprintf_internal_r+0xe78>
   116e8:	8809883a 	mov	r4,r17
   116ec:	b80b883a 	mov	r5,r23
   116f0:	d9811b04 	addi	r6,sp,1132
   116f4:	00108140 	call	10814 <__sprint_r>
   116f8:	103d991e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   116fc:	da011d17 	ldw	r8,1140(sp)
   11700:	d8c11c17 	ldw	r3,1136(sp)
   11704:	da400404 	addi	r9,sp,16
   11708:	003fee06 	br	116c4 <___vfprintf_internal_r+0xe7c>
   1170c:	d8812e17 	ldw	r2,1208(sp)
   11710:	d9012817 	ldw	r4,1184(sp)
   11714:	112fc83a 	sub	r23,r2,r4
   11718:	05ff000e 	bge	zero,r23,1131c <___vfprintf_internal_r+0xad4>
   1171c:	07000404 	movi	fp,16
   11720:	050000f4 	movhi	r20,3
   11724:	a5206184 	addi	r20,r20,-32378
   11728:	e5c01d0e 	bge	fp,r23,117a0 <___vfprintf_internal_r+0xf58>
   1172c:	dc812a15 	stw	r18,1192(sp)
   11730:	058001c4 	movi	r22,7
   11734:	a025883a 	mov	r18,r20
   11738:	8029883a 	mov	r20,r16
   1173c:	dc012917 	ldw	r16,1188(sp)
   11740:	00000306 	br	11750 <___vfprintf_internal_r+0xf08>
   11744:	bdfffc04 	addi	r23,r23,-16
   11748:	4a400204 	addi	r9,r9,8
   1174c:	e5c0110e 	bge	fp,r23,11794 <___vfprintf_internal_r+0xf4c>
   11750:	4c800015 	stw	r18,0(r9)
   11754:	4f000115 	stw	fp,4(r9)
   11758:	42000404 	addi	r8,r8,16
   1175c:	18c00044 	addi	r3,r3,1
   11760:	da011d15 	stw	r8,1140(sp)
   11764:	d8c11c15 	stw	r3,1136(sp)
   11768:	b0fff60e 	bge	r22,r3,11744 <___vfprintf_internal_r+0xefc>
   1176c:	8809883a 	mov	r4,r17
   11770:	800b883a 	mov	r5,r16
   11774:	d9811b04 	addi	r6,sp,1132
   11778:	00108140 	call	10814 <__sprint_r>
   1177c:	103d781e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11780:	bdfffc04 	addi	r23,r23,-16
   11784:	da011d17 	ldw	r8,1140(sp)
   11788:	d8c11c17 	ldw	r3,1136(sp)
   1178c:	da400404 	addi	r9,sp,16
   11790:	e5ffef16 	blt	fp,r23,11750 <___vfprintf_internal_r+0xf08>
   11794:	a021883a 	mov	r16,r20
   11798:	9029883a 	mov	r20,r18
   1179c:	dc812a17 	ldw	r18,1192(sp)
   117a0:	4d000015 	stw	r20,0(r9)
   117a4:	4dc00115 	stw	r23,4(r9)
   117a8:	45d1883a 	add	r8,r8,r23
   117ac:	18c00044 	addi	r3,r3,1
   117b0:	da011d15 	stw	r8,1140(sp)
   117b4:	d8c11c15 	stw	r3,1136(sp)
   117b8:	008001c4 	movi	r2,7
   117bc:	10c13616 	blt	r2,r3,11c98 <___vfprintf_internal_r+0x1450>
   117c0:	4a400204 	addi	r9,r9,8
   117c4:	003ed506 	br	1131c <___vfprintf_internal_r+0xad4>
   117c8:	d9412917 	ldw	r5,1188(sp)
   117cc:	8809883a 	mov	r4,r17
   117d0:	d9811b04 	addi	r6,sp,1132
   117d4:	00108140 	call	10814 <__sprint_r>
   117d8:	103f4226 	beq	r2,zero,114e4 <___vfprintf_internal_r+0xc9c>
   117dc:	003d6006 	br	10d60 <___vfprintf_internal_r+0x518>
   117e0:	d9013217 	ldw	r4,1224(sp)
   117e4:	00800044 	movi	r2,1
   117e8:	4cc00015 	stw	r19,0(r9)
   117ec:	1101000e 	bge	r2,r4,11bf0 <___vfprintf_internal_r+0x13a8>
   117f0:	00800044 	movi	r2,1
   117f4:	48800115 	stw	r2,4(r9)
   117f8:	4091883a 	add	r8,r8,r2
   117fc:	1887883a 	add	r3,r3,r2
   11800:	da011d15 	stw	r8,1140(sp)
   11804:	d8c11c15 	stw	r3,1136(sp)
   11808:	008001c4 	movi	r2,7
   1180c:	10c10c16 	blt	r2,r3,11c40 <___vfprintf_internal_r+0x13f8>
   11810:	4a400204 	addi	r9,r9,8
   11814:	d8813717 	ldw	r2,1244(sp)
   11818:	48800015 	stw	r2,0(r9)
   1181c:	00800044 	movi	r2,1
   11820:	48800115 	stw	r2,4(r9)
   11824:	4091883a 	add	r8,r8,r2
   11828:	1887883a 	add	r3,r3,r2
   1182c:	da011d15 	stw	r8,1140(sp)
   11830:	d8c11c15 	stw	r3,1136(sp)
   11834:	008001c4 	movi	r2,7
   11838:	10c10a16 	blt	r2,r3,11c64 <___vfprintf_internal_r+0x141c>
   1183c:	4c800204 	addi	r18,r9,8
   11840:	d9013317 	ldw	r4,1228(sp)
   11844:	d9413417 	ldw	r5,1232(sp)
   11848:	000d883a 	mov	r6,zero
   1184c:	000f883a 	mov	r7,zero
   11850:	d8c13b15 	stw	r3,1260(sp)
   11854:	da013a15 	stw	r8,1256(sp)
   11858:	00191ac0 	call	191ac <__nedf2>
   1185c:	d8c13b17 	ldw	r3,1260(sp)
   11860:	da013a17 	ldw	r8,1256(sp)
   11864:	1000ba26 	beq	r2,zero,11b50 <___vfprintf_internal_r+0x1308>
   11868:	d9013217 	ldw	r4,1224(sp)
   1186c:	9cc00044 	addi	r19,r19,1
   11870:	94c00015 	stw	r19,0(r18)
   11874:	20bfffc4 	addi	r2,r4,-1
   11878:	90800115 	stw	r2,4(r18)
   1187c:	4091883a 	add	r8,r8,r2
   11880:	18c00044 	addi	r3,r3,1
   11884:	da011d15 	stw	r8,1140(sp)
   11888:	d8c11c15 	stw	r3,1136(sp)
   1188c:	008001c4 	movi	r2,7
   11890:	10c0e216 	blt	r2,r3,11c1c <___vfprintf_internal_r+0x13d4>
   11894:	94800204 	addi	r18,r18,8
   11898:	d9013517 	ldw	r4,1236(sp)
   1189c:	d8811fc4 	addi	r2,sp,1151
   118a0:	90800015 	stw	r2,0(r18)
   118a4:	91000115 	stw	r4,4(r18)
   118a8:	4111883a 	add	r8,r8,r4
   118ac:	18c00044 	addi	r3,r3,1
   118b0:	da011d15 	stw	r8,1140(sp)
   118b4:	d8c11c15 	stw	r3,1136(sp)
   118b8:	008001c4 	movi	r2,7
   118bc:	10ff2316 	blt	r2,r3,1154c <___vfprintf_internal_r+0xd04>
   118c0:	92400204 	addi	r9,r18,8
   118c4:	003ecf06 	br	11404 <___vfprintf_internal_r+0xbbc>
   118c8:	d9412917 	ldw	r5,1188(sp)
   118cc:	8809883a 	mov	r4,r17
   118d0:	d9811b04 	addi	r6,sp,1132
   118d4:	00108140 	call	10814 <__sprint_r>
   118d8:	103d211e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   118dc:	da011d17 	ldw	r8,1140(sp)
   118e0:	d8c11c17 	ldw	r3,1136(sp)
   118e4:	da400404 	addi	r9,sp,16
   118e8:	003eba06 	br	113d4 <___vfprintf_internal_r+0xb8c>
   118ec:	d9412917 	ldw	r5,1188(sp)
   118f0:	8809883a 	mov	r4,r17
   118f4:	d9811b04 	addi	r6,sp,1132
   118f8:	00108140 	call	10814 <__sprint_r>
   118fc:	103d181e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11900:	da011d17 	ldw	r8,1140(sp)
   11904:	d8c11c17 	ldw	r3,1136(sp)
   11908:	da400404 	addi	r9,sp,16
   1190c:	003e8006 	br	11310 <___vfprintf_internal_r+0xac8>
   11910:	d9412917 	ldw	r5,1188(sp)
   11914:	8809883a 	mov	r4,r17
   11918:	d9811b04 	addi	r6,sp,1132
   1191c:	00108140 	call	10814 <__sprint_r>
   11920:	103d0f1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11924:	da011d17 	ldw	r8,1140(sp)
   11928:	d8c11c17 	ldw	r3,1136(sp)
   1192c:	da400404 	addi	r9,sp,16
   11930:	003e6a06 	br	112dc <___vfprintf_internal_r+0xa94>
   11934:	d9413617 	ldw	r5,1240(sp)
   11938:	d8810dc4 	addi	r2,sp,1079
   1193c:	b8c003cc 	andi	r3,r23,15
   11940:	b008973a 	slli	r4,r22,28
   11944:	28c7883a 	add	r3,r5,r3
   11948:	b82ed13a 	srli	r23,r23,4
   1194c:	18c00003 	ldbu	r3,0(r3)
   11950:	b02cd13a 	srli	r22,r22,4
   11954:	25eeb03a 	or	r23,r4,r23
   11958:	10c00005 	stb	r3,0(r2)
   1195c:	bd86b03a 	or	r3,r23,r22
   11960:	1027883a 	mov	r19,r2
   11964:	10bfffc4 	addi	r2,r2,-1
   11968:	183ff41e 	bne	r3,zero,1193c <___vfprintf_internal_r+0x10f4>
   1196c:	003f1a06 	br	115d8 <___vfprintf_internal_r+0xd90>
   11970:	d8012b15 	stw	zero,1196(sp)
   11974:	dcc10e04 	addi	r19,sp,1080
   11978:	003d3a06 	br	10e64 <___vfprintf_internal_r+0x61c>
   1197c:	b0025426 	beq	r22,zero,122d0 <___vfprintf_internal_r+0x1a88>
   11980:	b807883a 	mov	r3,r23
   11984:	d8810dc4 	addi	r2,sp,1079
   11988:	882f883a 	mov	r23,r17
   1198c:	04c00244 	movi	r19,9
   11990:	8023883a 	mov	r17,r16
   11994:	da412815 	stw	r9,1184(sp)
   11998:	1821883a 	mov	r16,r3
   1199c:	8009883a 	mov	r4,r16
   119a0:	b00b883a 	mov	r5,r22
   119a4:	01800284 	movi	r6,10
   119a8:	000f883a 	mov	r7,zero
   119ac:	1029883a 	mov	r20,r2
   119b0:	00182880 	call	18288 <__umoddi3>
   119b4:	10800c04 	addi	r2,r2,48
   119b8:	8009883a 	mov	r4,r16
   119bc:	b00b883a 	mov	r5,r22
   119c0:	a0800005 	stb	r2,0(r20)
   119c4:	01800284 	movi	r6,10
   119c8:	000f883a 	mov	r7,zero
   119cc:	0017c380 	call	17c38 <__udivdi3>
   119d0:	1021883a 	mov	r16,r2
   119d4:	182d883a 	mov	r22,r3
   119d8:	a0bfffc4 	addi	r2,r20,-1
   119dc:	183fef1e 	bne	r3,zero,1199c <___vfprintf_internal_r+0x1154>
   119e0:	9c3fee36 	bltu	r19,r16,1199c <___vfprintf_internal_r+0x1154>
   119e4:	da412817 	ldw	r9,1184(sp)
   119e8:	8005883a 	mov	r2,r16
   119ec:	8821883a 	mov	r16,r17
   119f0:	b823883a 	mov	r17,r23
   119f4:	102f883a 	mov	r23,r2
   119f8:	d8812717 	ldw	r2,1180(sp)
   119fc:	a4ffffc4 	addi	r19,r20,-1
   11a00:	bdc00c04 	addi	r23,r23,48
   11a04:	14c5c83a 	sub	r2,r2,r19
   11a08:	a5ffffc5 	stb	r23,-1(r20)
   11a0c:	d8812b15 	stw	r2,1196(sp)
   11a10:	003d1406 	br	10e64 <___vfprintf_internal_r+0x61c>
   11a14:	00c00044 	movi	r3,1
   11a18:	bd84b03a 	or	r2,r23,r22
   11a1c:	003d0306 	br	10e2c <___vfprintf_internal_r+0x5e4>
   11a20:	dc812417 	ldw	r18,1168(sp)
   11a24:	0481140e 	bge	zero,r18,11e78 <___vfprintf_internal_r+0x1630>
   11a28:	d9013217 	ldw	r4,1224(sp)
   11a2c:	4cc00015 	stw	r19,0(r9)
   11a30:	9100ec16 	blt	r18,r4,11de4 <___vfprintf_internal_r+0x159c>
   11a34:	49000115 	stw	r4,4(r9)
   11a38:	4111883a 	add	r8,r8,r4
   11a3c:	18c00044 	addi	r3,r3,1
   11a40:	da011d15 	stw	r8,1140(sp)
   11a44:	d8c11c15 	stw	r3,1136(sp)
   11a48:	008001c4 	movi	r2,7
   11a4c:	10c23616 	blt	r2,r3,12328 <___vfprintf_internal_r+0x1ae0>
   11a50:	4a400204 	addi	r9,r9,8
   11a54:	d8813217 	ldw	r2,1224(sp)
   11a58:	90a5c83a 	sub	r18,r18,r2
   11a5c:	04beae0e 	bge	zero,r18,11518 <___vfprintf_internal_r+0xcd0>
   11a60:	04c00404 	movi	r19,16
   11a64:	d8c11c17 	ldw	r3,1136(sp)
   11a68:	050000f4 	movhi	r20,3
   11a6c:	a5206184 	addi	r20,r20,-32378
   11a70:	9c81dd0e 	bge	r19,r18,121e8 <___vfprintf_internal_r+0x19a0>
   11a74:	058001c4 	movi	r22,7
   11a78:	ddc12917 	ldw	r23,1188(sp)
   11a7c:	00000306 	br	11a8c <___vfprintf_internal_r+0x1244>
   11a80:	4a400204 	addi	r9,r9,8
   11a84:	94bffc04 	addi	r18,r18,-16
   11a88:	9c81d70e 	bge	r19,r18,121e8 <___vfprintf_internal_r+0x19a0>
   11a8c:	4d000015 	stw	r20,0(r9)
   11a90:	4cc00115 	stw	r19,4(r9)
   11a94:	42000404 	addi	r8,r8,16
   11a98:	18c00044 	addi	r3,r3,1
   11a9c:	da011d15 	stw	r8,1140(sp)
   11aa0:	d8c11c15 	stw	r3,1136(sp)
   11aa4:	b0fff60e 	bge	r22,r3,11a80 <___vfprintf_internal_r+0x1238>
   11aa8:	8809883a 	mov	r4,r17
   11aac:	b80b883a 	mov	r5,r23
   11ab0:	d9811b04 	addi	r6,sp,1132
   11ab4:	00108140 	call	10814 <__sprint_r>
   11ab8:	103ca91e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11abc:	da011d17 	ldw	r8,1140(sp)
   11ac0:	d8c11c17 	ldw	r3,1136(sp)
   11ac4:	da400404 	addi	r9,sp,16
   11ac8:	003fee06 	br	11a84 <___vfprintf_internal_r+0x123c>
   11acc:	d9412917 	ldw	r5,1188(sp)
   11ad0:	8809883a 	mov	r4,r17
   11ad4:	d9811b04 	addi	r6,sp,1132
   11ad8:	00108140 	call	10814 <__sprint_r>
   11adc:	103ca01e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11ae0:	da011d17 	ldw	r8,1140(sp)
   11ae4:	d8c11c17 	ldw	r3,1136(sp)
   11ae8:	da400404 	addi	r9,sp,16
   11aec:	003dee06 	br	112a8 <___vfprintf_internal_r+0xa60>
   11af0:	00c00084 	movi	r3,2
   11af4:	bd84b03a 	or	r2,r23,r22
   11af8:	d8012585 	stb	zero,1174(sp)
   11afc:	003ccb06 	br	10e2c <___vfprintf_internal_r+0x5e4>
   11b00:	8080040c 	andi	r2,r16,16
   11b04:	1000ae26 	beq	r2,zero,11dc0 <___vfprintf_internal_r+0x1578>
   11b08:	d9012d17 	ldw	r4,1204(sp)
   11b0c:	25c00017 	ldw	r23,0(r4)
   11b10:	21000104 	addi	r4,r4,4
   11b14:	d9012d15 	stw	r4,1204(sp)
   11b18:	b82dd7fa 	srai	r22,r23,31
   11b1c:	b005883a 	mov	r2,r22
   11b20:	003cb906 	br	10e08 <___vfprintf_internal_r+0x5c0>
   11b24:	8080040c 	andi	r2,r16,16
   11b28:	10007026 	beq	r2,zero,11cec <___vfprintf_internal_r+0x14a4>
   11b2c:	d8812d17 	ldw	r2,1204(sp)
   11b30:	002d883a 	mov	r22,zero
   11b34:	00c00044 	movi	r3,1
   11b38:	15c00017 	ldw	r23,0(r2)
   11b3c:	10800104 	addi	r2,r2,4
   11b40:	d8812d15 	stw	r2,1204(sp)
   11b44:	d8012585 	stb	zero,1174(sp)
   11b48:	b805883a 	mov	r2,r23
   11b4c:	003cb706 	br	10e2c <___vfprintf_internal_r+0x5e4>
   11b50:	d8813217 	ldw	r2,1224(sp)
   11b54:	14ffffc4 	addi	r19,r2,-1
   11b58:	04ff4f0e 	bge	zero,r19,11898 <___vfprintf_internal_r+0x1050>
   11b5c:	05800404 	movi	r22,16
   11b60:	050000f4 	movhi	r20,3
   11b64:	a5206184 	addi	r20,r20,-32378
   11b68:	b4c0470e 	bge	r22,r19,11c88 <___vfprintf_internal_r+0x1440>
   11b6c:	05c001c4 	movi	r23,7
   11b70:	df012917 	ldw	fp,1188(sp)
   11b74:	00000306 	br	11b84 <___vfprintf_internal_r+0x133c>
   11b78:	94800204 	addi	r18,r18,8
   11b7c:	9cfffc04 	addi	r19,r19,-16
   11b80:	b4c0410e 	bge	r22,r19,11c88 <___vfprintf_internal_r+0x1440>
   11b84:	95000015 	stw	r20,0(r18)
   11b88:	95800115 	stw	r22,4(r18)
   11b8c:	42000404 	addi	r8,r8,16
   11b90:	18c00044 	addi	r3,r3,1
   11b94:	da011d15 	stw	r8,1140(sp)
   11b98:	d8c11c15 	stw	r3,1136(sp)
   11b9c:	b8fff60e 	bge	r23,r3,11b78 <___vfprintf_internal_r+0x1330>
   11ba0:	8809883a 	mov	r4,r17
   11ba4:	e00b883a 	mov	r5,fp
   11ba8:	d9811b04 	addi	r6,sp,1132
   11bac:	00108140 	call	10814 <__sprint_r>
   11bb0:	103c6b1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11bb4:	da011d17 	ldw	r8,1140(sp)
   11bb8:	d8c11c17 	ldw	r3,1136(sp)
   11bbc:	dc800404 	addi	r18,sp,16
   11bc0:	003fee06 	br	11b7c <___vfprintf_internal_r+0x1334>
   11bc4:	8080040c 	andi	r2,r16,16
   11bc8:	10005326 	beq	r2,zero,11d18 <___vfprintf_internal_r+0x14d0>
   11bcc:	d8c12d17 	ldw	r3,1204(sp)
   11bd0:	002d883a 	mov	r22,zero
   11bd4:	1dc00017 	ldw	r23,0(r3)
   11bd8:	18c00104 	addi	r3,r3,4
   11bdc:	d8c12d15 	stw	r3,1204(sp)
   11be0:	b805883a 	mov	r2,r23
   11be4:	0007883a 	mov	r3,zero
   11be8:	d8012585 	stb	zero,1174(sp)
   11bec:	003c8f06 	br	10e2c <___vfprintf_internal_r+0x5e4>
   11bf0:	8088703a 	and	r4,r16,r2
   11bf4:	203efe1e 	bne	r4,zero,117f0 <___vfprintf_internal_r+0xfa8>
   11bf8:	48800115 	stw	r2,4(r9)
   11bfc:	42000044 	addi	r8,r8,1
   11c00:	18c00044 	addi	r3,r3,1
   11c04:	da011d15 	stw	r8,1140(sp)
   11c08:	d8c11c15 	stw	r3,1136(sp)
   11c0c:	008001c4 	movi	r2,7
   11c10:	10c00216 	blt	r2,r3,11c1c <___vfprintf_internal_r+0x13d4>
   11c14:	4c800204 	addi	r18,r9,8
   11c18:	003f1f06 	br	11898 <___vfprintf_internal_r+0x1050>
   11c1c:	d9412917 	ldw	r5,1188(sp)
   11c20:	8809883a 	mov	r4,r17
   11c24:	d9811b04 	addi	r6,sp,1132
   11c28:	00108140 	call	10814 <__sprint_r>
   11c2c:	103c4c1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11c30:	dc800404 	addi	r18,sp,16
   11c34:	da011d17 	ldw	r8,1140(sp)
   11c38:	d8c11c17 	ldw	r3,1136(sp)
   11c3c:	003f1606 	br	11898 <___vfprintf_internal_r+0x1050>
   11c40:	d9412917 	ldw	r5,1188(sp)
   11c44:	8809883a 	mov	r4,r17
   11c48:	d9811b04 	addi	r6,sp,1132
   11c4c:	00108140 	call	10814 <__sprint_r>
   11c50:	103c431e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11c54:	da011d17 	ldw	r8,1140(sp)
   11c58:	d8c11c17 	ldw	r3,1136(sp)
   11c5c:	da400404 	addi	r9,sp,16
   11c60:	003eec06 	br	11814 <___vfprintf_internal_r+0xfcc>
   11c64:	d9412917 	ldw	r5,1188(sp)
   11c68:	8809883a 	mov	r4,r17
   11c6c:	d9811b04 	addi	r6,sp,1132
   11c70:	00108140 	call	10814 <__sprint_r>
   11c74:	103c3a1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11c78:	da011d17 	ldw	r8,1140(sp)
   11c7c:	d8c11c17 	ldw	r3,1136(sp)
   11c80:	dc800404 	addi	r18,sp,16
   11c84:	003eee06 	br	11840 <___vfprintf_internal_r+0xff8>
   11c88:	95000015 	stw	r20,0(r18)
   11c8c:	94c00115 	stw	r19,4(r18)
   11c90:	44d1883a 	add	r8,r8,r19
   11c94:	003efa06 	br	11880 <___vfprintf_internal_r+0x1038>
   11c98:	d9412917 	ldw	r5,1188(sp)
   11c9c:	8809883a 	mov	r4,r17
   11ca0:	d9811b04 	addi	r6,sp,1132
   11ca4:	00108140 	call	10814 <__sprint_r>
   11ca8:	103c2d1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11cac:	da011d17 	ldw	r8,1140(sp)
   11cb0:	d8c11c17 	ldw	r3,1136(sp)
   11cb4:	da400404 	addi	r9,sp,16
   11cb8:	003d9806 	br	1131c <___vfprintf_internal_r+0xad4>
   11cbc:	8080100c 	andi	r2,r16,64
   11cc0:	10011626 	beq	r2,zero,1211c <___vfprintf_internal_r+0x18d4>
   11cc4:	d8c12d17 	ldw	r3,1204(sp)
   11cc8:	002d883a 	mov	r22,zero
   11ccc:	1dc0000b 	ldhu	r23,0(r3)
   11cd0:	18c00104 	addi	r3,r3,4
   11cd4:	d8c12d15 	stw	r3,1204(sp)
   11cd8:	003cc106 	br	10fe0 <___vfprintf_internal_r+0x798>
   11cdc:	4d000015 	stw	r20,0(r9)
   11ce0:	4c800115 	stw	r18,4(r9)
   11ce4:	4491883a 	add	r8,r8,r18
   11ce8:	003dc006 	br	113ec <___vfprintf_internal_r+0xba4>
   11cec:	8080100c 	andi	r2,r16,64
   11cf0:	10010126 	beq	r2,zero,120f8 <___vfprintf_internal_r+0x18b0>
   11cf4:	d8c12d17 	ldw	r3,1204(sp)
   11cf8:	002d883a 	mov	r22,zero
   11cfc:	1dc0000b 	ldhu	r23,0(r3)
   11d00:	18c00104 	addi	r3,r3,4
   11d04:	d8c12d15 	stw	r3,1204(sp)
   11d08:	b805883a 	mov	r2,r23
   11d0c:	00c00044 	movi	r3,1
   11d10:	d8012585 	stb	zero,1174(sp)
   11d14:	003c4506 	br	10e2c <___vfprintf_internal_r+0x5e4>
   11d18:	8080100c 	andi	r2,r16,64
   11d1c:	10010526 	beq	r2,zero,12134 <___vfprintf_internal_r+0x18ec>
   11d20:	d9012d17 	ldw	r4,1204(sp)
   11d24:	002d883a 	mov	r22,zero
   11d28:	0007883a 	mov	r3,zero
   11d2c:	25c0000b 	ldhu	r23,0(r4)
   11d30:	21000104 	addi	r4,r4,4
   11d34:	d9012d15 	stw	r4,1204(sp)
   11d38:	b805883a 	mov	r2,r23
   11d3c:	d8012585 	stb	zero,1174(sp)
   11d40:	003c3a06 	br	10e2c <___vfprintf_internal_r+0x5e4>
   11d44:	d8812d17 	ldw	r2,1204(sp)
   11d48:	15800017 	ldw	r22,0(r2)
   11d4c:	15000117 	ldw	r20,4(r2)
   11d50:	10800204 	addi	r2,r2,8
   11d54:	d8812d15 	stw	r2,1204(sp)
   11d58:	dd813315 	stw	r22,1228(sp)
   11d5c:	dd013415 	stw	r20,1232(sp)
   11d60:	003c5906 	br	10ec8 <___vfprintf_internal_r+0x680>
   11d64:	00c00084 	movi	r3,2
   11d68:	d8012585 	stb	zero,1174(sp)
   11d6c:	003c2f06 	br	10e2c <___vfprintf_internal_r+0x5e4>
   11d70:	ac800007 	ldb	r18,0(r21)
   11d74:	003b1006 	br	109b8 <___vfprintf_internal_r+0x170>
   11d78:	8080040c 	andi	r2,r16,16
   11d7c:	1000091e 	bne	r2,zero,11da4 <___vfprintf_internal_r+0x155c>
   11d80:	8400100c 	andi	r16,r16,64
   11d84:	80000726 	beq	r16,zero,11da4 <___vfprintf_internal_r+0x155c>
   11d88:	d8c12d17 	ldw	r3,1204(sp)
   11d8c:	d9012c17 	ldw	r4,1200(sp)
   11d90:	18800017 	ldw	r2,0(r3)
   11d94:	18c00104 	addi	r3,r3,4
   11d98:	d8c12d15 	stw	r3,1204(sp)
   11d9c:	1100000d 	sth	r4,0(r2)
   11da0:	003adf06 	br	10920 <___vfprintf_internal_r+0xd8>
   11da4:	d8c12d17 	ldw	r3,1204(sp)
   11da8:	d9012c17 	ldw	r4,1200(sp)
   11dac:	18800017 	ldw	r2,0(r3)
   11db0:	18c00104 	addi	r3,r3,4
   11db4:	d8c12d15 	stw	r3,1204(sp)
   11db8:	11000015 	stw	r4,0(r2)
   11dbc:	003ad806 	br	10920 <___vfprintf_internal_r+0xd8>
   11dc0:	8080100c 	andi	r2,r16,64
   11dc4:	1000c526 	beq	r2,zero,120dc <___vfprintf_internal_r+0x1894>
   11dc8:	d8812d17 	ldw	r2,1204(sp)
   11dcc:	15c0000f 	ldh	r23,0(r2)
   11dd0:	10800104 	addi	r2,r2,4
   11dd4:	d8812d15 	stw	r2,1204(sp)
   11dd8:	b82dd7fa 	srai	r22,r23,31
   11ddc:	b005883a 	mov	r2,r22
   11de0:	003c0906 	br	10e08 <___vfprintf_internal_r+0x5c0>
   11de4:	4c800115 	stw	r18,4(r9)
   11de8:	9211883a 	add	r8,r18,r8
   11dec:	18c00044 	addi	r3,r3,1
   11df0:	da011d15 	stw	r8,1140(sp)
   11df4:	d8c11c15 	stw	r3,1136(sp)
   11df8:	008001c4 	movi	r2,7
   11dfc:	10c14016 	blt	r2,r3,12300 <___vfprintf_internal_r+0x1ab8>
   11e00:	4a400204 	addi	r9,r9,8
   11e04:	d8813717 	ldw	r2,1244(sp)
   11e08:	9ca7883a 	add	r19,r19,r18
   11e0c:	48800015 	stw	r2,0(r9)
   11e10:	00800044 	movi	r2,1
   11e14:	48800115 	stw	r2,4(r9)
   11e18:	4091883a 	add	r8,r8,r2
   11e1c:	1887883a 	add	r3,r3,r2
   11e20:	da011d15 	stw	r8,1140(sp)
   11e24:	d8c11c15 	stw	r3,1136(sp)
   11e28:	008001c4 	movi	r2,7
   11e2c:	10c12c16 	blt	r2,r3,122e0 <___vfprintf_internal_r+0x1a98>
   11e30:	4a400204 	addi	r9,r9,8
   11e34:	d9013217 	ldw	r4,1224(sp)
   11e38:	da011d17 	ldw	r8,1140(sp)
   11e3c:	d8c11c17 	ldw	r3,1136(sp)
   11e40:	24a5c83a 	sub	r18,r4,r18
   11e44:	4cc00015 	stw	r19,0(r9)
   11e48:	003fa506 	br	11ce0 <___vfprintf_internal_r+0x1498>
   11e4c:	04c000f4 	movhi	r19,3
   11e50:	9ce04e04 	addi	r19,r19,-32456
   11e54:	003c2e06 	br	10f10 <___vfprintf_internal_r+0x6c8>
   11e58:	d9412917 	ldw	r5,1188(sp)
   11e5c:	8809883a 	mov	r4,r17
   11e60:	d9811b04 	addi	r6,sp,1132
   11e64:	00108140 	call	10814 <__sprint_r>
   11e68:	103bbd1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11e6c:	da011d17 	ldw	r8,1140(sp)
   11e70:	da400404 	addi	r9,sp,16
   11e74:	003df606 	br	11650 <___vfprintf_internal_r+0xe08>
   11e78:	008000f4 	movhi	r2,3
   11e7c:	10a05d04 	addi	r2,r2,-32396
   11e80:	48800015 	stw	r2,0(r9)
   11e84:	00800044 	movi	r2,1
   11e88:	48800115 	stw	r2,4(r9)
   11e8c:	4091883a 	add	r8,r8,r2
   11e90:	1887883a 	add	r3,r3,r2
   11e94:	da011d15 	stw	r8,1140(sp)
   11e98:	d8c11c15 	stw	r3,1136(sp)
   11e9c:	008001c4 	movi	r2,7
   11ea0:	10c0bc16 	blt	r2,r3,12194 <___vfprintf_internal_r+0x194c>
   11ea4:	4a400204 	addi	r9,r9,8
   11ea8:	9000041e 	bne	r18,zero,11ebc <___vfprintf_internal_r+0x1674>
   11eac:	d8c13217 	ldw	r3,1224(sp)
   11eb0:	1800021e 	bne	r3,zero,11ebc <___vfprintf_internal_r+0x1674>
   11eb4:	8080004c 	andi	r2,r16,1
   11eb8:	103d5226 	beq	r2,zero,11404 <___vfprintf_internal_r+0xbbc>
   11ebc:	d8c11c17 	ldw	r3,1136(sp)
   11ec0:	d9013717 	ldw	r4,1244(sp)
   11ec4:	00800044 	movi	r2,1
   11ec8:	48800115 	stw	r2,4(r9)
   11ecc:	49000015 	stw	r4,0(r9)
   11ed0:	4091883a 	add	r8,r8,r2
   11ed4:	1887883a 	add	r3,r3,r2
   11ed8:	da011d15 	stw	r8,1140(sp)
   11edc:	d8c11c15 	stw	r3,1136(sp)
   11ee0:	008001c4 	movi	r2,7
   11ee4:	10c14516 	blt	r2,r3,123fc <___vfprintf_internal_r+0x1bb4>
   11ee8:	4a400204 	addi	r9,r9,8
   11eec:	04a5c83a 	sub	r18,zero,r18
   11ef0:	0480d70e 	bge	zero,r18,12250 <___vfprintf_internal_r+0x1a08>
   11ef4:	05800404 	movi	r22,16
   11ef8:	050000f4 	movhi	r20,3
   11efc:	a5206184 	addi	r20,r20,-32378
   11f00:	b480db0e 	bge	r22,r18,12270 <___vfprintf_internal_r+0x1a28>
   11f04:	05c001c4 	movi	r23,7
   11f08:	df012917 	ldw	fp,1188(sp)
   11f0c:	00000306 	br	11f1c <___vfprintf_internal_r+0x16d4>
   11f10:	4a400204 	addi	r9,r9,8
   11f14:	94bffc04 	addi	r18,r18,-16
   11f18:	b480d50e 	bge	r22,r18,12270 <___vfprintf_internal_r+0x1a28>
   11f1c:	4d000015 	stw	r20,0(r9)
   11f20:	4d800115 	stw	r22,4(r9)
   11f24:	42000404 	addi	r8,r8,16
   11f28:	18c00044 	addi	r3,r3,1
   11f2c:	da011d15 	stw	r8,1140(sp)
   11f30:	d8c11c15 	stw	r3,1136(sp)
   11f34:	b8fff60e 	bge	r23,r3,11f10 <___vfprintf_internal_r+0x16c8>
   11f38:	8809883a 	mov	r4,r17
   11f3c:	e00b883a 	mov	r5,fp
   11f40:	d9811b04 	addi	r6,sp,1132
   11f44:	00108140 	call	10814 <__sprint_r>
   11f48:	103b851e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   11f4c:	da011d17 	ldw	r8,1140(sp)
   11f50:	d8c11c17 	ldw	r3,1136(sp)
   11f54:	da400404 	addi	r9,sp,16
   11f58:	003fee06 	br	11f14 <___vfprintf_internal_r+0x16cc>
   11f5c:	da413c15 	stw	r9,1264(sp)
   11f60:	00175340 	call	17534 <__isnand>
   11f64:	da413c17 	ldw	r9,1264(sp)
   11f68:	10007e1e 	bne	r2,zero,12164 <___vfprintf_internal_r+0x191c>
   11f6c:	00bfffc4 	movi	r2,-1
   11f70:	e0816a26 	beq	fp,r2,1251c <___vfprintf_internal_r+0x1cd4>
   11f74:	008019c4 	movi	r2,103
   11f78:	90816526 	beq	r18,r2,12510 <___vfprintf_internal_r+0x1cc8>
   11f7c:	008011c4 	movi	r2,71
   11f80:	90816326 	beq	r18,r2,12510 <___vfprintf_internal_r+0x1cc8>
   11f84:	80c04014 	ori	r3,r16,256
   11f88:	d8c12a15 	stw	r3,1192(sp)
   11f8c:	a0016516 	blt	r20,zero,12524 <___vfprintf_internal_r+0x1cdc>
   11f90:	d8012f05 	stb	zero,1212(sp)
   11f94:	00801984 	movi	r2,102
   11f98:	9080f226 	beq	r18,r2,12364 <___vfprintf_internal_r+0x1b1c>
   11f9c:	00801184 	movi	r2,70
   11fa0:	9080f026 	beq	r18,r2,12364 <___vfprintf_internal_r+0x1b1c>
   11fa4:	00801944 	movi	r2,101
   11fa8:	90818d26 	beq	r18,r2,125e0 <___vfprintf_internal_r+0x1d98>
   11fac:	00801144 	movi	r2,69
   11fb0:	90818b26 	beq	r18,r2,125e0 <___vfprintf_internal_r+0x1d98>
   11fb4:	e02f883a 	mov	r23,fp
   11fb8:	d8812404 	addi	r2,sp,1168
   11fbc:	d8800115 	stw	r2,4(sp)
   11fc0:	d8812304 	addi	r2,sp,1164
   11fc4:	d8800215 	stw	r2,8(sp)
   11fc8:	d8812204 	addi	r2,sp,1160
   11fcc:	ddc00015 	stw	r23,0(sp)
   11fd0:	d8800315 	stw	r2,12(sp)
   11fd4:	8809883a 	mov	r4,r17
   11fd8:	b00b883a 	mov	r5,r22
   11fdc:	a00d883a 	mov	r6,r20
   11fe0:	01c00084 	movi	r7,2
   11fe4:	da413c15 	stw	r9,1264(sp)
   11fe8:	0012a980 	call	12a98 <_dtoa_r>
   11fec:	1027883a 	mov	r19,r2
   11ff0:	008019c4 	movi	r2,103
   11ff4:	da413c17 	ldw	r9,1264(sp)
   11ff8:	9081951e 	bne	r18,r2,12650 <___vfprintf_internal_r+0x1e08>
   11ffc:	8080004c 	andi	r2,r16,1
   12000:	10017926 	beq	r2,zero,125e8 <___vfprintf_internal_r+0x1da0>
   12004:	00801184 	movi	r2,70
   12008:	9dc7883a 	add	r3,r19,r23
   1200c:	9080e626 	beq	r18,r2,123a8 <___vfprintf_internal_r+0x1b60>
   12010:	b009883a 	mov	r4,r22
   12014:	a00b883a 	mov	r5,r20
   12018:	000d883a 	mov	r6,zero
   1201c:	000f883a 	mov	r7,zero
   12020:	d8c13b15 	stw	r3,1260(sp)
   12024:	da413c15 	stw	r9,1264(sp)
   12028:	00191500 	call	19150 <__eqdf2>
   1202c:	d8c13b17 	ldw	r3,1260(sp)
   12030:	da413c17 	ldw	r9,1264(sp)
   12034:	10000726 	beq	r2,zero,12054 <___vfprintf_internal_r+0x180c>
   12038:	d8812217 	ldw	r2,1160(sp)
   1203c:	10c18a2e 	bgeu	r2,r3,12668 <___vfprintf_internal_r+0x1e20>
   12040:	01000c04 	movi	r4,48
   12044:	11000005 	stb	r4,0(r2)
   12048:	10800044 	addi	r2,r2,1
   1204c:	d8812215 	stw	r2,1160(sp)
   12050:	10fffc1e 	bne	r2,r3,12044 <___vfprintf_internal_r+0x17fc>
   12054:	1cc7c83a 	sub	r3,r3,r19
   12058:	d8c13215 	stw	r3,1224(sp)
   1205c:	008019c4 	movi	r2,103
   12060:	9080fa26 	beq	r18,r2,1244c <___vfprintf_internal_r+0x1c04>
   12064:	008011c4 	movi	r2,71
   12068:	9080f826 	beq	r18,r2,1244c <___vfprintf_internal_r+0x1c04>
   1206c:	00801984 	movi	r2,102
   12070:	90818e1e 	bne	r18,r2,126ac <___vfprintf_internal_r+0x1e64>
   12074:	d8812417 	ldw	r2,1168(sp)
   12078:	d8812b15 	stw	r2,1196(sp)
   1207c:	00817c0e 	bge	zero,r2,12670 <___vfprintf_internal_r+0x1e28>
   12080:	e000021e 	bne	fp,zero,1208c <___vfprintf_internal_r+0x1844>
   12084:	8400004c 	andi	r16,r16,1
   12088:	80000426 	beq	r16,zero,1209c <___vfprintf_internal_r+0x1854>
   1208c:	d8812b17 	ldw	r2,1196(sp)
   12090:	e2000044 	addi	r8,fp,1
   12094:	1205883a 	add	r2,r2,r8
   12098:	d8812b15 	stw	r2,1196(sp)
   1209c:	d8812815 	stw	r2,1184(sp)
   120a0:	10010b16 	blt	r2,zero,124d0 <___vfprintf_internal_r+0x1c88>
   120a4:	ddc12f07 	ldb	r23,1212(sp)
   120a8:	b800e426 	beq	r23,zero,1243c <___vfprintf_internal_r+0x1bf4>
   120ac:	00800b44 	movi	r2,45
   120b0:	d8812585 	stb	r2,1174(sp)
   120b4:	dc012a17 	ldw	r16,1192(sp)
   120b8:	d8013115 	stw	zero,1220(sp)
   120bc:	003b7306 	br	10e8c <___vfprintf_internal_r+0x644>
   120c0:	d8812b17 	ldw	r2,1196(sp)
   120c4:	d8812815 	stw	r2,1184(sp)
   120c8:	10005716 	blt	r2,zero,12228 <___vfprintf_internal_r+0x19e0>
   120cc:	d8812583 	ldbu	r2,1174(sp)
   120d0:	ddc12d15 	stw	r23,1204(sp)
   120d4:	d8013115 	stw	zero,1220(sp)
   120d8:	003b6806 	br	10e7c <___vfprintf_internal_r+0x634>
   120dc:	d8c12d17 	ldw	r3,1204(sp)
   120e0:	1dc00017 	ldw	r23,0(r3)
   120e4:	18c00104 	addi	r3,r3,4
   120e8:	d8c12d15 	stw	r3,1204(sp)
   120ec:	b82dd7fa 	srai	r22,r23,31
   120f0:	b005883a 	mov	r2,r22
   120f4:	003b4406 	br	10e08 <___vfprintf_internal_r+0x5c0>
   120f8:	d9012d17 	ldw	r4,1204(sp)
   120fc:	002d883a 	mov	r22,zero
   12100:	00c00044 	movi	r3,1
   12104:	25c00017 	ldw	r23,0(r4)
   12108:	21000104 	addi	r4,r4,4
   1210c:	d9012d15 	stw	r4,1204(sp)
   12110:	b805883a 	mov	r2,r23
   12114:	d8012585 	stb	zero,1174(sp)
   12118:	003b4406 	br	10e2c <___vfprintf_internal_r+0x5e4>
   1211c:	d9012d17 	ldw	r4,1204(sp)
   12120:	002d883a 	mov	r22,zero
   12124:	25c00017 	ldw	r23,0(r4)
   12128:	21000104 	addi	r4,r4,4
   1212c:	d9012d15 	stw	r4,1204(sp)
   12130:	003bab06 	br	10fe0 <___vfprintf_internal_r+0x798>
   12134:	d8812d17 	ldw	r2,1204(sp)
   12138:	002d883a 	mov	r22,zero
   1213c:	0007883a 	mov	r3,zero
   12140:	15c00017 	ldw	r23,0(r2)
   12144:	10800104 	addi	r2,r2,4
   12148:	d8812d15 	stw	r2,1204(sp)
   1214c:	d8012585 	stb	zero,1174(sp)
   12150:	b805883a 	mov	r2,r23
   12154:	003b3506 	br	10e2c <___vfprintf_internal_r+0x5e4>
   12158:	00ffffc4 	movi	r3,-1
   1215c:	b82b883a 	mov	r21,r23
   12160:	003a1606 	br	109bc <___vfprintf_internal_r+0x174>
   12164:	008011c4 	movi	r2,71
   12168:	1480b116 	blt	r2,r18,12430 <___vfprintf_internal_r+0x1be8>
   1216c:	04c000f4 	movhi	r19,3
   12170:	9ce04f04 	addi	r19,r19,-32452
   12174:	00c000c4 	movi	r3,3
   12178:	00bfdfc4 	movi	r2,-129
   1217c:	80a0703a 	and	r16,r16,r2
   12180:	d8c12815 	stw	r3,1184(sp)
   12184:	d8812583 	ldbu	r2,1174(sp)
   12188:	d8c12b15 	stw	r3,1196(sp)
   1218c:	d8013115 	stw	zero,1220(sp)
   12190:	003b3a06 	br	10e7c <___vfprintf_internal_r+0x634>
   12194:	d9412917 	ldw	r5,1188(sp)
   12198:	8809883a 	mov	r4,r17
   1219c:	d9811b04 	addi	r6,sp,1132
   121a0:	00108140 	call	10814 <__sprint_r>
   121a4:	103aee1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   121a8:	dc812417 	ldw	r18,1168(sp)
   121ac:	da011d17 	ldw	r8,1140(sp)
   121b0:	da400404 	addi	r9,sp,16
   121b4:	003f3c06 	br	11ea8 <___vfprintf_internal_r+0x1660>
   121b8:	ad400044 	addi	r21,r21,1
   121bc:	84000814 	ori	r16,r16,32
   121c0:	14800047 	ldb	r18,1(r2)
   121c4:	0039fc06 	br	109b8 <___vfprintf_internal_r+0x170>
   121c8:	d9412917 	ldw	r5,1188(sp)
   121cc:	8809883a 	mov	r4,r17
   121d0:	d9811b04 	addi	r6,sp,1132
   121d4:	00108140 	call	10814 <__sprint_r>
   121d8:	103ae11e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   121dc:	da011d17 	ldw	r8,1140(sp)
   121e0:	da400404 	addi	r9,sp,16
   121e4:	003d2b06 	br	11694 <___vfprintf_internal_r+0xe4c>
   121e8:	4d000015 	stw	r20,0(r9)
   121ec:	4c800115 	stw	r18,4(r9)
   121f0:	4491883a 	add	r8,r8,r18
   121f4:	18c00044 	addi	r3,r3,1
   121f8:	da011d15 	stw	r8,1140(sp)
   121fc:	d8c11c15 	stw	r3,1136(sp)
   12200:	008001c4 	movi	r2,7
   12204:	10fcbd16 	blt	r2,r3,114fc <___vfprintf_internal_r+0xcb4>
   12208:	4a400204 	addi	r9,r9,8
   1220c:	003cc206 	br	11518 <___vfprintf_internal_r+0xcd0>
   12210:	da413c15 	stw	r9,1264(sp)
   12214:	00107880 	call	10788 <strlen>
   12218:	d8812b15 	stw	r2,1196(sp)
   1221c:	d8812815 	stw	r2,1184(sp)
   12220:	da413c17 	ldw	r9,1264(sp)
   12224:	103fa90e 	bge	r2,zero,120cc <___vfprintf_internal_r+0x1884>
   12228:	d8012815 	stw	zero,1184(sp)
   1222c:	003fa706 	br	120cc <___vfprintf_internal_r+0x1884>
   12230:	d9412917 	ldw	r5,1188(sp)
   12234:	8809883a 	mov	r4,r17
   12238:	d9811b04 	addi	r6,sp,1132
   1223c:	00108140 	call	10814 <__sprint_r>
   12240:	103ac71e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   12244:	da011d17 	ldw	r8,1140(sp)
   12248:	d8c11c17 	ldw	r3,1136(sp)
   1224c:	da400404 	addi	r9,sp,16
   12250:	d8813217 	ldw	r2,1224(sp)
   12254:	4cc00015 	stw	r19,0(r9)
   12258:	48800115 	stw	r2,4(r9)
   1225c:	4091883a 	add	r8,r8,r2
   12260:	003c6206 	br	113ec <___vfprintf_internal_r+0xba4>
   12264:	00800b44 	movi	r2,45
   12268:	d8812585 	stb	r2,1174(sp)
   1226c:	003b2406 	br	10f00 <___vfprintf_internal_r+0x6b8>
   12270:	4d000015 	stw	r20,0(r9)
   12274:	4c800115 	stw	r18,4(r9)
   12278:	4491883a 	add	r8,r8,r18
   1227c:	18c00044 	addi	r3,r3,1
   12280:	da011d15 	stw	r8,1140(sp)
   12284:	d8c11c15 	stw	r3,1136(sp)
   12288:	008001c4 	movi	r2,7
   1228c:	10ffe816 	blt	r2,r3,12230 <___vfprintf_internal_r+0x19e8>
   12290:	4a400204 	addi	r9,r9,8
   12294:	003fee06 	br	12250 <___vfprintf_internal_r+0x1a08>
   12298:	d8c12b15 	stw	r3,1196(sp)
   1229c:	00800184 	movi	r2,6
   122a0:	10c0062e 	bgeu	r2,r3,122bc <___vfprintf_internal_r+0x1a74>
   122a4:	d8812b15 	stw	r2,1196(sp)
   122a8:	d8812815 	stw	r2,1184(sp)
   122ac:	ddc12d15 	stw	r23,1204(sp)
   122b0:	04c000f4 	movhi	r19,3
   122b4:	9ce05b04 	addi	r19,r19,-32404
   122b8:	0039ca06 	br	109e4 <___vfprintf_internal_r+0x19c>
   122bc:	d8812b17 	ldw	r2,1196(sp)
   122c0:	d8812815 	stw	r2,1184(sp)
   122c4:	103ff90e 	bge	r2,zero,122ac <___vfprintf_internal_r+0x1a64>
   122c8:	d8012815 	stw	zero,1184(sp)
   122cc:	003ff706 	br	122ac <___vfprintf_internal_r+0x1a64>
   122d0:	00800244 	movi	r2,9
   122d4:	15fdaa36 	bltu	r2,r23,11980 <___vfprintf_internal_r+0x1138>
   122d8:	dd010e04 	addi	r20,sp,1080
   122dc:	003dc606 	br	119f8 <___vfprintf_internal_r+0x11b0>
   122e0:	d9412917 	ldw	r5,1188(sp)
   122e4:	8809883a 	mov	r4,r17
   122e8:	d9811b04 	addi	r6,sp,1132
   122ec:	00108140 	call	10814 <__sprint_r>
   122f0:	103a9b1e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   122f4:	dc812417 	ldw	r18,1168(sp)
   122f8:	da400404 	addi	r9,sp,16
   122fc:	003ecd06 	br	11e34 <___vfprintf_internal_r+0x15ec>
   12300:	d9412917 	ldw	r5,1188(sp)
   12304:	8809883a 	mov	r4,r17
   12308:	d9811b04 	addi	r6,sp,1132
   1230c:	00108140 	call	10814 <__sprint_r>
   12310:	103a931e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   12314:	dc812417 	ldw	r18,1168(sp)
   12318:	da011d17 	ldw	r8,1140(sp)
   1231c:	d8c11c17 	ldw	r3,1136(sp)
   12320:	da400404 	addi	r9,sp,16
   12324:	003eb706 	br	11e04 <___vfprintf_internal_r+0x15bc>
   12328:	d9412917 	ldw	r5,1188(sp)
   1232c:	8809883a 	mov	r4,r17
   12330:	d9811b04 	addi	r6,sp,1132
   12334:	00108140 	call	10814 <__sprint_r>
   12338:	103a891e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   1233c:	dc812417 	ldw	r18,1168(sp)
   12340:	da011d17 	ldw	r8,1140(sp)
   12344:	da400404 	addi	r9,sp,16
   12348:	003dc206 	br	11a54 <___vfprintf_internal_r+0x120c>
   1234c:	df012815 	stw	fp,1184(sp)
   12350:	d8812583 	ldbu	r2,1174(sp)
   12354:	df012b15 	stw	fp,1196(sp)
   12358:	ddc12d15 	stw	r23,1204(sp)
   1235c:	d8013115 	stw	zero,1220(sp)
   12360:	003ac606 	br	10e7c <___vfprintf_internal_r+0x634>
   12364:	d8812404 	addi	r2,sp,1168
   12368:	d8800115 	stw	r2,4(sp)
   1236c:	d8812304 	addi	r2,sp,1164
   12370:	d8800215 	stw	r2,8(sp)
   12374:	d8812204 	addi	r2,sp,1160
   12378:	df000015 	stw	fp,0(sp)
   1237c:	d8800315 	stw	r2,12(sp)
   12380:	8809883a 	mov	r4,r17
   12384:	b00b883a 	mov	r5,r22
   12388:	a00d883a 	mov	r6,r20
   1238c:	01c000c4 	movi	r7,3
   12390:	da413c15 	stw	r9,1264(sp)
   12394:	0012a980 	call	12a98 <_dtoa_r>
   12398:	da413c17 	ldw	r9,1264(sp)
   1239c:	1027883a 	mov	r19,r2
   123a0:	1707883a 	add	r3,r2,fp
   123a4:	e02f883a 	mov	r23,fp
   123a8:	99000007 	ldb	r4,0(r19)
   123ac:	00800c04 	movi	r2,48
   123b0:	20800326 	beq	r4,r2,123c0 <___vfprintf_internal_r+0x1b78>
   123b4:	da812417 	ldw	r10,1168(sp)
   123b8:	1a87883a 	add	r3,r3,r10
   123bc:	003f1406 	br	12010 <___vfprintf_internal_r+0x17c8>
   123c0:	b009883a 	mov	r4,r22
   123c4:	a00b883a 	mov	r5,r20
   123c8:	000d883a 	mov	r6,zero
   123cc:	000f883a 	mov	r7,zero
   123d0:	d8c13b15 	stw	r3,1260(sp)
   123d4:	da413c15 	stw	r9,1264(sp)
   123d8:	00191ac0 	call	191ac <__nedf2>
   123dc:	d8c13b17 	ldw	r3,1260(sp)
   123e0:	da413c17 	ldw	r9,1264(sp)
   123e4:	103ff326 	beq	r2,zero,123b4 <___vfprintf_internal_r+0x1b6c>
   123e8:	00800044 	movi	r2,1
   123ec:	15d5c83a 	sub	r10,r2,r23
   123f0:	da812415 	stw	r10,1168(sp)
   123f4:	1a87883a 	add	r3,r3,r10
   123f8:	003f0506 	br	12010 <___vfprintf_internal_r+0x17c8>
   123fc:	d9412917 	ldw	r5,1188(sp)
   12400:	8809883a 	mov	r4,r17
   12404:	d9811b04 	addi	r6,sp,1132
   12408:	00108140 	call	10814 <__sprint_r>
   1240c:	103a541e 	bne	r2,zero,10d60 <___vfprintf_internal_r+0x518>
   12410:	dc812417 	ldw	r18,1168(sp)
   12414:	da011d17 	ldw	r8,1140(sp)
   12418:	d8c11c17 	ldw	r3,1136(sp)
   1241c:	da400404 	addi	r9,sp,16
   12420:	003eb206 	br	11eec <___vfprintf_internal_r+0x16a4>
   12424:	b82b883a 	mov	r21,r23
   12428:	0007883a 	mov	r3,zero
   1242c:	00396306 	br	109bc <___vfprintf_internal_r+0x174>
   12430:	04c000f4 	movhi	r19,3
   12434:	9ce05004 	addi	r19,r19,-32448
   12438:	003f4e06 	br	12174 <___vfprintf_internal_r+0x192c>
   1243c:	d8812583 	ldbu	r2,1174(sp)
   12440:	dc012a17 	ldw	r16,1192(sp)
   12444:	d8013115 	stw	zero,1220(sp)
   12448:	003a8c06 	br	10e7c <___vfprintf_internal_r+0x634>
   1244c:	d8812417 	ldw	r2,1168(sp)
   12450:	d8812b15 	stw	r2,1196(sp)
   12454:	1029883a 	mov	r20,r2
   12458:	00bfff44 	movi	r2,-3
   1245c:	a0800116 	blt	r20,r2,12464 <___vfprintf_internal_r+0x1c1c>
   12460:	e5001d0e 	bge	fp,r20,124d8 <___vfprintf_internal_r+0x1c90>
   12464:	94bfff84 	addi	r18,r18,-2
   12468:	a53fffc4 	addi	r20,r20,-1
   1246c:	dd012415 	stw	r20,1168(sp)
   12470:	dc811fc5 	stb	r18,1151(sp)
   12474:	a0007216 	blt	r20,zero,12640 <___vfprintf_internal_r+0x1df8>
   12478:	00800ac4 	movi	r2,43
   1247c:	d8812005 	stb	r2,1152(sp)
   12480:	00800244 	movi	r2,9
   12484:	15003516 	blt	r2,r20,1255c <___vfprintf_internal_r+0x1d14>
   12488:	00800c04 	movi	r2,48
   1248c:	a5000c04 	addi	r20,r20,48
   12490:	d8812045 	stb	r2,1153(sp)
   12494:	dd012085 	stb	r20,1154(sp)
   12498:	d8c120c4 	addi	r3,sp,1155
   1249c:	d8811fc4 	addi	r2,sp,1151
   124a0:	1885c83a 	sub	r2,r3,r2
   124a4:	d8c13217 	ldw	r3,1224(sp)
   124a8:	d8813515 	stw	r2,1236(sp)
   124ac:	1885883a 	add	r2,r3,r2
   124b0:	d8812b15 	stw	r2,1196(sp)
   124b4:	00800044 	movi	r2,1
   124b8:	10c0580e 	bge	r2,r3,1261c <___vfprintf_internal_r+0x1dd4>
   124bc:	d8812b17 	ldw	r2,1196(sp)
   124c0:	10800044 	addi	r2,r2,1
   124c4:	d8812b15 	stw	r2,1196(sp)
   124c8:	d8812815 	stw	r2,1184(sp)
   124cc:	103ef50e 	bge	r2,zero,120a4 <___vfprintf_internal_r+0x185c>
   124d0:	d8012815 	stw	zero,1184(sp)
   124d4:	003ef306 	br	120a4 <___vfprintf_internal_r+0x185c>
   124d8:	d8812b17 	ldw	r2,1196(sp)
   124dc:	d8c13217 	ldw	r3,1224(sp)
   124e0:	10c01416 	blt	r2,r3,12534 <___vfprintf_internal_r+0x1cec>
   124e4:	8400004c 	andi	r16,r16,1
   124e8:	80000326 	beq	r16,zero,124f8 <___vfprintf_internal_r+0x1cb0>
   124ec:	d8812b17 	ldw	r2,1196(sp)
   124f0:	10800044 	addi	r2,r2,1
   124f4:	d8812b15 	stw	r2,1196(sp)
   124f8:	d8812815 	stw	r2,1184(sp)
   124fc:	10001416 	blt	r2,zero,12550 <___vfprintf_internal_r+0x1d08>
   12500:	048019c4 	movi	r18,103
   12504:	003ee706 	br	120a4 <___vfprintf_internal_r+0x185c>
   12508:	d8012815 	stw	zero,1184(sp)
   1250c:	003b1a06 	br	11178 <___vfprintf_internal_r+0x930>
   12510:	e03e9c1e 	bne	fp,zero,11f84 <___vfprintf_internal_r+0x173c>
   12514:	07000044 	movi	fp,1
   12518:	003e9a06 	br	11f84 <___vfprintf_internal_r+0x173c>
   1251c:	07000184 	movi	fp,6
   12520:	003e9806 	br	11f84 <___vfprintf_internal_r+0x173c>
   12524:	00c00b44 	movi	r3,45
   12528:	a520003c 	xorhi	r20,r20,32768
   1252c:	d8c12f05 	stb	r3,1212(sp)
   12530:	003e9806 	br	11f94 <___vfprintf_internal_r+0x174c>
   12534:	05003f0e 	bge	zero,r20,12634 <___vfprintf_internal_r+0x1dec>
   12538:	05000044 	movi	r20,1
   1253c:	d8c13217 	ldw	r3,1224(sp)
   12540:	a0e9883a 	add	r20,r20,r3
   12544:	dd012b15 	stw	r20,1196(sp)
   12548:	dd012815 	stw	r20,1184(sp)
   1254c:	a03fec0e 	bge	r20,zero,12500 <___vfprintf_internal_r+0x1cb8>
   12550:	d8012815 	stw	zero,1184(sp)
   12554:	048019c4 	movi	r18,103
   12558:	003ed206 	br	120a4 <___vfprintf_internal_r+0x185c>
   1255c:	d8c11f84 	addi	r3,sp,1150
   12560:	102f883a 	mov	r23,r2
   12564:	4839883a 	mov	fp,r9
   12568:	a009883a 	mov	r4,r20
   1256c:	01400284 	movi	r5,10
   12570:	182d883a 	mov	r22,r3
   12574:	00105f40 	call	105f4 <__modsi3>
   12578:	10800c04 	addi	r2,r2,48
   1257c:	a009883a 	mov	r4,r20
   12580:	b0800005 	stb	r2,0(r22)
   12584:	01400284 	movi	r5,10
   12588:	00105a40 	call	105a4 <__divsi3>
   1258c:	1029883a 	mov	r20,r2
   12590:	b0ffffc4 	addi	r3,r22,-1
   12594:	b8bff416 	blt	r23,r2,12568 <___vfprintf_internal_r+0x1d20>
   12598:	11400c04 	addi	r5,r2,48
   1259c:	b17fffc5 	stb	r5,-1(r22)
   125a0:	d8811fc4 	addi	r2,sp,1151
   125a4:	e013883a 	mov	r9,fp
   125a8:	18803e2e 	bgeu	r3,r2,126a4 <___vfprintf_internal_r+0x1e5c>
   125ac:	b007883a 	mov	r3,r22
   125b0:	d9012044 	addi	r4,sp,1153
   125b4:	00000206 	br	125c0 <___vfprintf_internal_r+0x1d78>
   125b8:	19400003 	ldbu	r5,0(r3)
   125bc:	18c00044 	addi	r3,r3,1
   125c0:	21400005 	stb	r5,0(r4)
   125c4:	21000044 	addi	r4,r4,1
   125c8:	10fffb1e 	bne	r2,r3,125b8 <___vfprintf_internal_r+0x1d70>
   125cc:	d8c12004 	addi	r3,sp,1152
   125d0:	1d87c83a 	sub	r3,r3,r22
   125d4:	d9012044 	addi	r4,sp,1153
   125d8:	20c7883a 	add	r3,r4,r3
   125dc:	003fb006 	br	124a0 <___vfprintf_internal_r+0x1c58>
   125e0:	e5c00044 	addi	r23,fp,1
   125e4:	003e7406 	br	11fb8 <___vfprintf_internal_r+0x1770>
   125e8:	d8c12217 	ldw	r3,1160(sp)
   125ec:	003e9906 	br	12054 <___vfprintf_internal_r+0x180c>
   125f0:	d9012d17 	ldw	r4,1204(sp)
   125f4:	ac800043 	ldbu	r18,1(r21)
   125f8:	b82b883a 	mov	r21,r23
   125fc:	20c00017 	ldw	r3,0(r4)
   12600:	20800104 	addi	r2,r4,4
   12604:	d8812d15 	stw	r2,1204(sp)
   12608:	18002116 	blt	r3,zero,12690 <___vfprintf_internal_r+0x1e48>
   1260c:	94803fcc 	andi	r18,r18,255
   12610:	9480201c 	xori	r18,r18,128
   12614:	94bfe004 	addi	r18,r18,-128
   12618:	0038e706 	br	109b8 <___vfprintf_internal_r+0x170>
   1261c:	80a0703a 	and	r16,r16,r2
   12620:	803fa61e 	bne	r16,zero,124bc <___vfprintf_internal_r+0x1c74>
   12624:	d8812b17 	ldw	r2,1196(sp)
   12628:	d8812815 	stw	r2,1184(sp)
   1262c:	103e9d0e 	bge	r2,zero,120a4 <___vfprintf_internal_r+0x185c>
   12630:	003fa706 	br	124d0 <___vfprintf_internal_r+0x1c88>
   12634:	00800084 	movi	r2,2
   12638:	1529c83a 	sub	r20,r2,r20
   1263c:	003fbf06 	br	1253c <___vfprintf_internal_r+0x1cf4>
   12640:	00800b44 	movi	r2,45
   12644:	0529c83a 	sub	r20,zero,r20
   12648:	d8812005 	stb	r2,1152(sp)
   1264c:	003f8c06 	br	12480 <___vfprintf_internal_r+0x1c38>
   12650:	008011c4 	movi	r2,71
   12654:	90be6926 	beq	r18,r2,11ffc <___vfprintf_internal_r+0x17b4>
   12658:	003e6a06 	br	12004 <___vfprintf_internal_r+0x17bc>
   1265c:	00bfffc4 	movi	r2,-1
   12660:	d8812c15 	stw	r2,1200(sp)
   12664:	0039ad06 	br	10d1c <___vfprintf_internal_r+0x4d4>
   12668:	1007883a 	mov	r3,r2
   1266c:	003e7906 	br	12054 <___vfprintf_internal_r+0x180c>
   12670:	e000021e 	bne	fp,zero,1267c <___vfprintf_internal_r+0x1e34>
   12674:	8400004c 	andi	r16,r16,1
   12678:	80000e26 	beq	r16,zero,126b4 <___vfprintf_internal_r+0x1e6c>
   1267c:	e7000084 	addi	fp,fp,2
   12680:	df012b15 	stw	fp,1196(sp)
   12684:	df012815 	stw	fp,1184(sp)
   12688:	e03e860e 	bge	fp,zero,120a4 <___vfprintf_internal_r+0x185c>
   1268c:	003f9006 	br	124d0 <___vfprintf_internal_r+0x1c88>
   12690:	94803fcc 	andi	r18,r18,255
   12694:	9480201c 	xori	r18,r18,128
   12698:	00ffffc4 	movi	r3,-1
   1269c:	94bfe004 	addi	r18,r18,-128
   126a0:	0038c506 	br	109b8 <___vfprintf_internal_r+0x170>
   126a4:	d8c12044 	addi	r3,sp,1153
   126a8:	003f7d06 	br	124a0 <___vfprintf_internal_r+0x1c58>
   126ac:	dd012417 	ldw	r20,1168(sp)
   126b0:	003f6d06 	br	12468 <___vfprintf_internal_r+0x1c20>
   126b4:	00c00044 	movi	r3,1
   126b8:	d8c12815 	stw	r3,1184(sp)
   126bc:	d8c12b15 	stw	r3,1196(sp)
   126c0:	003e7806 	br	120a4 <___vfprintf_internal_r+0x185c>

000126c4 <__vfprintf_internal>:
   126c4:	008000f4 	movhi	r2,3
   126c8:	10a79e04 	addi	r2,r2,-24968
   126cc:	2007883a 	mov	r3,r4
   126d0:	11000017 	ldw	r4,0(r2)
   126d4:	2805883a 	mov	r2,r5
   126d8:	300f883a 	mov	r7,r6
   126dc:	180b883a 	mov	r5,r3
   126e0:	100d883a 	mov	r6,r2
   126e4:	00108481 	jmpi	10848 <___vfprintf_internal_r>

000126e8 <__swsetup_r>:
   126e8:	008000f4 	movhi	r2,3
   126ec:	10a79e04 	addi	r2,r2,-24968
   126f0:	10800017 	ldw	r2,0(r2)
   126f4:	defffd04 	addi	sp,sp,-12
   126f8:	dc400115 	stw	r17,4(sp)
   126fc:	dc000015 	stw	r16,0(sp)
   12700:	dfc00215 	stw	ra,8(sp)
   12704:	2023883a 	mov	r17,r4
   12708:	2821883a 	mov	r16,r5
   1270c:	10000226 	beq	r2,zero,12718 <__swsetup_r+0x30>
   12710:	10c00e17 	ldw	r3,56(r2)
   12714:	18003d26 	beq	r3,zero,1280c <__swsetup_r+0x124>
   12718:	8080030b 	ldhu	r2,12(r16)
   1271c:	10c0020c 	andi	r3,r2,8
   12720:	18ffffcc 	andi	r3,r3,65535
   12724:	18e0001c 	xori	r3,r3,32768
   12728:	18e00004 	addi	r3,r3,-32768
   1272c:	18001226 	beq	r3,zero,12778 <__swsetup_r+0x90>
   12730:	80c00417 	ldw	r3,16(r16)
   12734:	18001f26 	beq	r3,zero,127b4 <__swsetup_r+0xcc>
   12738:	1100004c 	andi	r4,r2,1
   1273c:	2000261e 	bne	r4,zero,127d8 <__swsetup_r+0xf0>
   12740:	1080008c 	andi	r2,r2,2
   12744:	10bfffcc 	andi	r2,r2,65535
   12748:	10a0001c 	xori	r2,r2,32768
   1274c:	10a00004 	addi	r2,r2,-32768
   12750:	1000311e 	bne	r2,zero,12818 <__swsetup_r+0x130>
   12754:	80800517 	ldw	r2,20(r16)
   12758:	80800215 	stw	r2,8(r16)
   1275c:	18002326 	beq	r3,zero,127ec <__swsetup_r+0x104>
   12760:	0005883a 	mov	r2,zero
   12764:	dfc00217 	ldw	ra,8(sp)
   12768:	dc400117 	ldw	r17,4(sp)
   1276c:	dc000017 	ldw	r16,0(sp)
   12770:	dec00304 	addi	sp,sp,12
   12774:	f800283a 	ret
   12778:	10c0040c 	andi	r3,r2,16
   1277c:	18ffffcc 	andi	r3,r3,65535
   12780:	18e0001c 	xori	r3,r3,32768
   12784:	18e00004 	addi	r3,r3,-32768
   12788:	18001e26 	beq	r3,zero,12804 <__swsetup_r+0x11c>
   1278c:	10c0010c 	andi	r3,r2,4
   12790:	18ffffcc 	andi	r3,r3,65535
   12794:	18e0001c 	xori	r3,r3,32768
   12798:	18e00004 	addi	r3,r3,-32768
   1279c:	1800211e 	bne	r3,zero,12824 <__swsetup_r+0x13c>
   127a0:	80c00417 	ldw	r3,16(r16)
   127a4:	11400214 	ori	r5,r2,8
   127a8:	8140030d 	sth	r5,12(r16)
   127ac:	2805883a 	mov	r2,r5
   127b0:	183fe11e 	bne	r3,zero,12738 <__swsetup_r+0x50>
   127b4:	1140a00c 	andi	r5,r2,640
   127b8:	01008004 	movi	r4,512
   127bc:	293fde26 	beq	r5,r4,12738 <__swsetup_r+0x50>
   127c0:	8809883a 	mov	r4,r17
   127c4:	800b883a 	mov	r5,r16
   127c8:	00150e40 	call	150e4 <__smakebuf_r>
   127cc:	8080030b 	ldhu	r2,12(r16)
   127d0:	80c00417 	ldw	r3,16(r16)
   127d4:	003fd806 	br	12738 <__swsetup_r+0x50>
   127d8:	80800517 	ldw	r2,20(r16)
   127dc:	80000215 	stw	zero,8(r16)
   127e0:	0085c83a 	sub	r2,zero,r2
   127e4:	80800615 	stw	r2,24(r16)
   127e8:	183fdd1e 	bne	r3,zero,12760 <__swsetup_r+0x78>
   127ec:	8080030b 	ldhu	r2,12(r16)
   127f0:	1080200c 	andi	r2,r2,128
   127f4:	10bfffcc 	andi	r2,r2,65535
   127f8:	10a0001c 	xori	r2,r2,32768
   127fc:	10a00004 	addi	r2,r2,-32768
   12800:	103fd826 	beq	r2,zero,12764 <__swsetup_r+0x7c>
   12804:	00bfffc4 	movi	r2,-1
   12808:	003fd606 	br	12764 <__swsetup_r+0x7c>
   1280c:	1009883a 	mov	r4,r2
   12810:	00143700 	call	14370 <__sinit>
   12814:	003fc006 	br	12718 <__swsetup_r+0x30>
   12818:	0005883a 	mov	r2,zero
   1281c:	80800215 	stw	r2,8(r16)
   12820:	003fce06 	br	1275c <__swsetup_r+0x74>
   12824:	81400c17 	ldw	r5,48(r16)
   12828:	28000626 	beq	r5,zero,12844 <__swsetup_r+0x15c>
   1282c:	80c01004 	addi	r3,r16,64
   12830:	28c00326 	beq	r5,r3,12840 <__swsetup_r+0x158>
   12834:	8809883a 	mov	r4,r17
   12838:	00146f40 	call	146f4 <_free_r>
   1283c:	8080030b 	ldhu	r2,12(r16)
   12840:	80000c15 	stw	zero,48(r16)
   12844:	80c00417 	ldw	r3,16(r16)
   12848:	013ff6c4 	movi	r4,-37
   1284c:	2084703a 	and	r2,r4,r2
   12850:	80000115 	stw	zero,4(r16)
   12854:	80c00015 	stw	r3,0(r16)
   12858:	003fd206 	br	127a4 <__swsetup_r+0xbc>

0001285c <quorem>:
   1285c:	defff204 	addi	sp,sp,-56
   12860:	dd000815 	stw	r20,32(sp)
   12864:	20800417 	ldw	r2,16(r4)
   12868:	2d000417 	ldw	r20,16(r5)
   1286c:	dcc00715 	stw	r19,28(sp)
   12870:	dfc00d15 	stw	ra,52(sp)
   12874:	df000c15 	stw	fp,48(sp)
   12878:	ddc00b15 	stw	r23,44(sp)
   1287c:	dd800a15 	stw	r22,40(sp)
   12880:	dd400915 	stw	r21,36(sp)
   12884:	dc800615 	stw	r18,24(sp)
   12888:	dc400515 	stw	r17,20(sp)
   1288c:	dc000415 	stw	r16,16(sp)
   12890:	d9400015 	stw	r5,0(sp)
   12894:	2027883a 	mov	r19,r4
   12898:	15007d16 	blt	r2,r20,12a90 <quorem+0x234>
   1289c:	a0800104 	addi	r2,r20,4
   128a0:	1085883a 	add	r2,r2,r2
   128a4:	1085883a 	add	r2,r2,r2
   128a8:	28ad883a 	add	r22,r5,r2
   128ac:	2085883a 	add	r2,r4,r2
   128b0:	10800017 	ldw	r2,0(r2)
   128b4:	b1400017 	ldw	r5,0(r22)
   128b8:	a53fffc4 	addi	r20,r20,-1
   128bc:	1009883a 	mov	r4,r2
   128c0:	29400044 	addi	r5,r5,1
   128c4:	d8800115 	stw	r2,4(sp)
   128c8:	00106500 	call	10650 <__udivsi3>
   128cc:	1025883a 	mov	r18,r2
   128d0:	d8800017 	ldw	r2,0(sp)
   128d4:	9f000504 	addi	fp,r19,20
   128d8:	14000504 	addi	r16,r2,20
   128dc:	90003626 	beq	r18,zero,129b8 <quorem+0x15c>
   128e0:	802b883a 	mov	r21,r16
   128e4:	e023883a 	mov	r17,fp
   128e8:	0007883a 	mov	r3,zero
   128ec:	002f883a 	mov	r23,zero
   128f0:	a9800017 	ldw	r6,0(r21)
   128f4:	900b883a 	mov	r5,r18
   128f8:	d8c00315 	stw	r3,12(sp)
   128fc:	313fffcc 	andi	r4,r6,65535
   12900:	d9800215 	stw	r6,8(sp)
   12904:	00106600 	call	10660 <__mulsi3>
   12908:	d9800217 	ldw	r6,8(sp)
   1290c:	d8c00317 	ldw	r3,12(sp)
   12910:	900b883a 	mov	r5,r18
   12914:	3008d43a 	srli	r4,r6,16
   12918:	1887883a 	add	r3,r3,r2
   1291c:	d8c00315 	stw	r3,12(sp)
   12920:	00106600 	call	10660 <__mulsi3>
   12924:	89400017 	ldw	r5,0(r17)
   12928:	d8c00317 	ldw	r3,12(sp)
   1292c:	ad400104 	addi	r21,r21,4
   12930:	293fffcc 	andi	r4,r5,65535
   12934:	1810d43a 	srli	r8,r3,16
   12938:	25c9883a 	add	r4,r4,r23
   1293c:	18ffffcc 	andi	r3,r3,65535
   12940:	20c9c83a 	sub	r4,r4,r3
   12944:	280cd43a 	srli	r6,r5,16
   12948:	4085883a 	add	r2,r8,r2
   1294c:	2007d43a 	srai	r3,r4,16
   12950:	117fffcc 	andi	r5,r2,65535
   12954:	314bc83a 	sub	r5,r6,r5
   12958:	28cb883a 	add	r5,r5,r3
   1295c:	8940008d 	sth	r5,2(r17)
   12960:	8900000d 	sth	r4,0(r17)
   12964:	1006d43a 	srli	r3,r2,16
   12968:	282fd43a 	srai	r23,r5,16
   1296c:	8c400104 	addi	r17,r17,4
   12970:	b57fdf2e 	bgeu	r22,r21,128f0 <quorem+0x94>
   12974:	d8c00117 	ldw	r3,4(sp)
   12978:	18000f1e 	bne	r3,zero,129b8 <quorem+0x15c>
   1297c:	a0800144 	addi	r2,r20,5
   12980:	1085883a 	add	r2,r2,r2
   12984:	1085883a 	add	r2,r2,r2
   12988:	9887883a 	add	r3,r19,r2
   1298c:	18bfff04 	addi	r2,r3,-4
   12990:	e080082e 	bgeu	fp,r2,129b4 <quorem+0x158>
   12994:	18ffff17 	ldw	r3,-4(r3)
   12998:	18000326 	beq	r3,zero,129a8 <quorem+0x14c>
   1299c:	00000506 	br	129b4 <quorem+0x158>
   129a0:	10c00017 	ldw	r3,0(r2)
   129a4:	1800031e 	bne	r3,zero,129b4 <quorem+0x158>
   129a8:	10bfff04 	addi	r2,r2,-4
   129ac:	a53fffc4 	addi	r20,r20,-1
   129b0:	e0bffb36 	bltu	fp,r2,129a0 <quorem+0x144>
   129b4:	9d000415 	stw	r20,16(r19)
   129b8:	d9400017 	ldw	r5,0(sp)
   129bc:	9809883a 	mov	r4,r19
   129c0:	00167fc0 	call	167fc <__mcmp>
   129c4:	10002516 	blt	r2,zero,12a5c <quorem+0x200>
   129c8:	94800044 	addi	r18,r18,1
   129cc:	e007883a 	mov	r3,fp
   129d0:	000d883a 	mov	r6,zero
   129d4:	18800017 	ldw	r2,0(r3)
   129d8:	82000017 	ldw	r8,0(r16)
   129dc:	84000104 	addi	r16,r16,4
   129e0:	11ffffcc 	andi	r7,r2,65535
   129e4:	413fffcc 	andi	r4,r8,65535
   129e8:	398d883a 	add	r6,r7,r6
   129ec:	310fc83a 	sub	r7,r6,r4
   129f0:	4010d43a 	srli	r8,r8,16
   129f4:	100cd43a 	srli	r6,r2,16
   129f8:	3809d43a 	srai	r4,r7,16
   129fc:	19c0000d 	sth	r7,0(r3)
   12a00:	320dc83a 	sub	r6,r6,r8
   12a04:	310d883a 	add	r6,r6,r4
   12a08:	1980008d 	sth	r6,2(r3)
   12a0c:	300dd43a 	srai	r6,r6,16
   12a10:	18c00104 	addi	r3,r3,4
   12a14:	b43fef2e 	bgeu	r22,r16,129d4 <quorem+0x178>
   12a18:	a0800144 	addi	r2,r20,5
   12a1c:	1085883a 	add	r2,r2,r2
   12a20:	1085883a 	add	r2,r2,r2
   12a24:	9885883a 	add	r2,r19,r2
   12a28:	10c00017 	ldw	r3,0(r2)
   12a2c:	18000b1e 	bne	r3,zero,12a5c <quorem+0x200>
   12a30:	10ffff04 	addi	r3,r2,-4
   12a34:	e0c0082e 	bgeu	fp,r3,12a58 <quorem+0x1fc>
   12a38:	10bfff17 	ldw	r2,-4(r2)
   12a3c:	10000326 	beq	r2,zero,12a4c <quorem+0x1f0>
   12a40:	00000506 	br	12a58 <quorem+0x1fc>
   12a44:	18800017 	ldw	r2,0(r3)
   12a48:	1000031e 	bne	r2,zero,12a58 <quorem+0x1fc>
   12a4c:	18ffff04 	addi	r3,r3,-4
   12a50:	a53fffc4 	addi	r20,r20,-1
   12a54:	e0fffb36 	bltu	fp,r3,12a44 <quorem+0x1e8>
   12a58:	9d000415 	stw	r20,16(r19)
   12a5c:	9005883a 	mov	r2,r18
   12a60:	dfc00d17 	ldw	ra,52(sp)
   12a64:	df000c17 	ldw	fp,48(sp)
   12a68:	ddc00b17 	ldw	r23,44(sp)
   12a6c:	dd800a17 	ldw	r22,40(sp)
   12a70:	dd400917 	ldw	r21,36(sp)
   12a74:	dd000817 	ldw	r20,32(sp)
   12a78:	dcc00717 	ldw	r19,28(sp)
   12a7c:	dc800617 	ldw	r18,24(sp)
   12a80:	dc400517 	ldw	r17,20(sp)
   12a84:	dc000417 	ldw	r16,16(sp)
   12a88:	dec00e04 	addi	sp,sp,56
   12a8c:	f800283a 	ret
   12a90:	0005883a 	mov	r2,zero
   12a94:	003ff206 	br	12a60 <quorem+0x204>

00012a98 <_dtoa_r>:
   12a98:	20801017 	ldw	r2,64(r4)
   12a9c:	deffdf04 	addi	sp,sp,-132
   12aa0:	dcc01a15 	stw	r19,104(sp)
   12aa4:	dc801915 	stw	r18,100(sp)
   12aa8:	dc401815 	stw	r17,96(sp)
   12aac:	dc001715 	stw	r16,92(sp)
   12ab0:	dfc02015 	stw	ra,128(sp)
   12ab4:	df001f15 	stw	fp,124(sp)
   12ab8:	ddc01e15 	stw	r23,120(sp)
   12abc:	dd801d15 	stw	r22,116(sp)
   12ac0:	dd401c15 	stw	r21,112(sp)
   12ac4:	dd001b15 	stw	r20,108(sp)
   12ac8:	d9400315 	stw	r5,12(sp)
   12acc:	d9c00415 	stw	r7,16(sp)
   12ad0:	2021883a 	mov	r16,r4
   12ad4:	3025883a 	mov	r18,r6
   12ad8:	dcc02317 	ldw	r19,140(sp)
   12adc:	3023883a 	mov	r17,r6
   12ae0:	10000826 	beq	r2,zero,12b04 <_dtoa_r+0x6c>
   12ae4:	20c01117 	ldw	r3,68(r4)
   12ae8:	01800044 	movi	r6,1
   12aec:	100b883a 	mov	r5,r2
   12af0:	30cc983a 	sll	r6,r6,r3
   12af4:	10c00115 	stw	r3,4(r2)
   12af8:	11800215 	stw	r6,8(r2)
   12afc:	0015f580 	call	15f58 <_Bfree>
   12b00:	80001015 	stw	zero,64(r16)
   12b04:	90002f16 	blt	r18,zero,12bc4 <_dtoa_r+0x12c>
   12b08:	98000015 	stw	zero,0(r19)
   12b0c:	90dffc2c 	andhi	r3,r18,32752
   12b10:	009ffc34 	movhi	r2,32752
   12b14:	18801c26 	beq	r3,r2,12b88 <_dtoa_r+0xf0>
   12b18:	d9000317 	ldw	r4,12(sp)
   12b1c:	880b883a 	mov	r5,r17
   12b20:	000d883a 	mov	r6,zero
   12b24:	000f883a 	mov	r7,zero
   12b28:	00191500 	call	19150 <__eqdf2>
   12b2c:	10002c1e 	bne	r2,zero,12be0 <_dtoa_r+0x148>
   12b30:	d9002217 	ldw	r4,136(sp)
   12b34:	d9c02417 	ldw	r7,144(sp)
   12b38:	00800044 	movi	r2,1
   12b3c:	20800015 	stw	r2,0(r4)
   12b40:	38019426 	beq	r7,zero,13194 <_dtoa_r+0x6fc>
   12b44:	008000f4 	movhi	r2,3
   12b48:	10a05d44 	addi	r2,r2,-32395
   12b4c:	38800015 	stw	r2,0(r7)
   12b50:	15ffffc4 	addi	r23,r2,-1
   12b54:	b805883a 	mov	r2,r23
   12b58:	dfc02017 	ldw	ra,128(sp)
   12b5c:	df001f17 	ldw	fp,124(sp)
   12b60:	ddc01e17 	ldw	r23,120(sp)
   12b64:	dd801d17 	ldw	r22,116(sp)
   12b68:	dd401c17 	ldw	r21,112(sp)
   12b6c:	dd001b17 	ldw	r20,108(sp)
   12b70:	dcc01a17 	ldw	r19,104(sp)
   12b74:	dc801917 	ldw	r18,100(sp)
   12b78:	dc401817 	ldw	r17,96(sp)
   12b7c:	dc001717 	ldw	r16,92(sp)
   12b80:	dec02104 	addi	sp,sp,132
   12b84:	f800283a 	ret
   12b88:	d8c02217 	ldw	r3,136(sp)
   12b8c:	d9000317 	ldw	r4,12(sp)
   12b90:	0089c3c4 	movi	r2,9999
   12b94:	18800015 	stw	r2,0(r3)
   12b98:	20016c26 	beq	r4,zero,1314c <_dtoa_r+0x6b4>
   12b9c:	05c000f4 	movhi	r23,3
   12ba0:	bde06904 	addi	r23,r23,-32348
   12ba4:	d9c02417 	ldw	r7,144(sp)
   12ba8:	383fea26 	beq	r7,zero,12b54 <_dtoa_r+0xbc>
   12bac:	b88000c7 	ldb	r2,3(r23)
   12bb0:	10016d1e 	bne	r2,zero,13168 <_dtoa_r+0x6d0>
   12bb4:	b88000c4 	addi	r2,r23,3
   12bb8:	d8c02417 	ldw	r3,144(sp)
   12bbc:	18800015 	stw	r2,0(r3)
   12bc0:	003fe406 	br	12b54 <_dtoa_r+0xbc>
   12bc4:	04600034 	movhi	r17,32768
   12bc8:	8c7fffc4 	addi	r17,r17,-1
   12bcc:	9462703a 	and	r17,r18,r17
   12bd0:	00800044 	movi	r2,1
   12bd4:	98800015 	stw	r2,0(r19)
   12bd8:	8825883a 	mov	r18,r17
   12bdc:	003fcb06 	br	12b0c <_dtoa_r+0x74>
   12be0:	d9400317 	ldw	r5,12(sp)
   12be4:	9028d53a 	srli	r20,r18,20
   12be8:	d8800204 	addi	r2,sp,8
   12bec:	d8800015 	stw	r2,0(sp)
   12bf0:	8009883a 	mov	r4,r16
   12bf4:	880d883a 	mov	r6,r17
   12bf8:	d9c00104 	addi	r7,sp,4
   12bfc:	0016ba40 	call	16ba4 <__d2b>
   12c00:	a501ffcc 	andi	r20,r20,2047
   12c04:	1039883a 	mov	fp,r2
   12c08:	a001591e 	bne	r20,zero,13170 <_dtoa_r+0x6d8>
   12c0c:	dd400217 	ldw	r21,8(sp)
   12c10:	dd000117 	ldw	r20,4(sp)
   12c14:	00befbc4 	movi	r2,-1041
   12c18:	ad29883a 	add	r20,r21,r20
   12c1c:	a082d216 	blt	r20,r2,13768 <_dtoa_r+0xcd0>
   12c20:	d8c00317 	ldw	r3,12(sp)
   12c24:	013f0384 	movi	r4,-1010
   12c28:	2509c83a 	sub	r4,r4,r20
   12c2c:	a0810484 	addi	r2,r20,1042
   12c30:	9124983a 	sll	r18,r18,r4
   12c34:	1884d83a 	srl	r2,r3,r2
   12c38:	9088b03a 	or	r4,r18,r2
   12c3c:	00194d40 	call	194d4 <__floatunsidf>
   12c40:	1009883a 	mov	r4,r2
   12c44:	017f8434 	movhi	r5,65040
   12c48:	00800044 	movi	r2,1
   12c4c:	194b883a 	add	r5,r3,r5
   12c50:	a53fffc4 	addi	r20,r20,-1
   12c54:	d8800f15 	stw	r2,60(sp)
   12c58:	000d883a 	mov	r6,zero
   12c5c:	01cffe34 	movhi	r7,16376
   12c60:	0018c580 	call	18c58 <__subdf3>
   12c64:	1009883a 	mov	r4,r2
   12c68:	180b883a 	mov	r5,r3
   12c6c:	0198dbf4 	movhi	r6,25455
   12c70:	3190d844 	addi	r6,r6,17249
   12c74:	01cff4f4 	movhi	r7,16339
   12c78:	39e1e9c4 	addi	r7,r7,-30809
   12c7c:	0018cb80 	call	18cb8 <__muldf3>
   12c80:	180b883a 	mov	r5,r3
   12c84:	01a2d874 	movhi	r6,35681
   12c88:	31b22cc4 	addi	r6,r6,-14157
   12c8c:	01cff1f4 	movhi	r7,16327
   12c90:	39e28a04 	addi	r7,r7,-30168
   12c94:	1009883a 	mov	r4,r2
   12c98:	0018c040 	call	18c04 <__adddf3>
   12c9c:	a009883a 	mov	r4,r20
   12ca0:	1027883a 	mov	r19,r2
   12ca4:	1825883a 	mov	r18,r3
   12ca8:	001932c0 	call	1932c <__floatsidf>
   12cac:	1009883a 	mov	r4,r2
   12cb0:	180b883a 	mov	r5,r3
   12cb4:	019427f4 	movhi	r6,20639
   12cb8:	319e7ec4 	addi	r6,r6,31227
   12cbc:	01cff4f4 	movhi	r7,16339
   12cc0:	39d104c4 	addi	r7,r7,17427
   12cc4:	0018cb80 	call	18cb8 <__muldf3>
   12cc8:	9809883a 	mov	r4,r19
   12ccc:	900b883a 	mov	r5,r18
   12cd0:	100d883a 	mov	r6,r2
   12cd4:	180f883a 	mov	r7,r3
   12cd8:	0018c040 	call	18c04 <__adddf3>
   12cdc:	1009883a 	mov	r4,r2
   12ce0:	180b883a 	mov	r5,r3
   12ce4:	1027883a 	mov	r19,r2
   12ce8:	1825883a 	mov	r18,r3
   12cec:	00194000 	call	19400 <__fixdfsi>
   12cf0:	9809883a 	mov	r4,r19
   12cf4:	900b883a 	mov	r5,r18
   12cf8:	000d883a 	mov	r6,zero
   12cfc:	000f883a 	mov	r7,zero
   12d00:	d8800615 	stw	r2,24(sp)
   12d04:	00192d00 	call	192d0 <__ltdf2>
   12d08:	10027e16 	blt	r2,zero,13704 <_dtoa_r+0xc6c>
   12d0c:	d8c00617 	ldw	r3,24(sp)
   12d10:	00800584 	movi	r2,22
   12d14:	10c26c36 	bltu	r2,r3,136c8 <_dtoa_r+0xc30>
   12d18:	180490fa 	slli	r2,r3,3
   12d1c:	00c000f4 	movhi	r3,3
   12d20:	18e08f04 	addi	r3,r3,-32196
   12d24:	d9800317 	ldw	r6,12(sp)
   12d28:	1885883a 	add	r2,r3,r2
   12d2c:	11000017 	ldw	r4,0(r2)
   12d30:	11400117 	ldw	r5,4(r2)
   12d34:	880f883a 	mov	r7,r17
   12d38:	00192080 	call	19208 <__gtdf2>
   12d3c:	00828f0e 	bge	zero,r2,1377c <_dtoa_r+0xce4>
   12d40:	d8800617 	ldw	r2,24(sp)
   12d44:	d8000d15 	stw	zero,52(sp)
   12d48:	10bfffc4 	addi	r2,r2,-1
   12d4c:	d8800615 	stw	r2,24(sp)
   12d50:	ad29c83a 	sub	r20,r21,r20
   12d54:	a53fffc4 	addi	r20,r20,-1
   12d58:	a0026616 	blt	r20,zero,136f4 <_dtoa_r+0xc5c>
   12d5c:	dd000715 	stw	r20,28(sp)
   12d60:	d8000815 	stw	zero,32(sp)
   12d64:	d8800617 	ldw	r2,24(sp)
   12d68:	10025a16 	blt	r2,zero,136d4 <_dtoa_r+0xc3c>
   12d6c:	d8c00717 	ldw	r3,28(sp)
   12d70:	d8800b15 	stw	r2,44(sp)
   12d74:	d8000a15 	stw	zero,40(sp)
   12d78:	1887883a 	add	r3,r3,r2
   12d7c:	d8c00715 	stw	r3,28(sp)
   12d80:	d9c00417 	ldw	r7,16(sp)
   12d84:	00800244 	movi	r2,9
   12d88:	11c10536 	bltu	r2,r7,131a0 <_dtoa_r+0x708>
   12d8c:	00800144 	movi	r2,5
   12d90:	11c4c60e 	bge	r2,r7,140ac <_dtoa_r+0x1614>
   12d94:	39ffff04 	addi	r7,r7,-4
   12d98:	d9c00415 	stw	r7,16(sp)
   12d9c:	0027883a 	mov	r19,zero
   12da0:	d9c00417 	ldw	r7,16(sp)
   12da4:	008000c4 	movi	r2,3
   12da8:	3883a226 	beq	r7,r2,13c34 <_dtoa_r+0x119c>
   12dac:	11c2bc16 	blt	r2,r7,138a0 <_dtoa_r+0xe08>
   12db0:	00800084 	movi	r2,2
   12db4:	3880fb1e 	bne	r7,r2,131a4 <_dtoa_r+0x70c>
   12db8:	d8000c15 	stw	zero,48(sp)
   12dbc:	d9002117 	ldw	r4,132(sp)
   12dc0:	0103ae0e 	bge	zero,r4,13c7c <_dtoa_r+0x11e4>
   12dc4:	2025883a 	mov	r18,r4
   12dc8:	d9000e15 	stw	r4,56(sp)
   12dcc:	d9000915 	stw	r4,36(sp)
   12dd0:	80001115 	stw	zero,68(r16)
   12dd4:	008005c4 	movi	r2,23
   12dd8:	1484b22e 	bgeu	r2,r18,140a4 <_dtoa_r+0x160c>
   12ddc:	00c00044 	movi	r3,1
   12de0:	00800104 	movi	r2,4
   12de4:	1085883a 	add	r2,r2,r2
   12de8:	11000504 	addi	r4,r2,20
   12dec:	180b883a 	mov	r5,r3
   12df0:	18c00044 	addi	r3,r3,1
   12df4:	913ffb2e 	bgeu	r18,r4,12de4 <_dtoa_r+0x34c>
   12df8:	81401115 	stw	r5,68(r16)
   12dfc:	8009883a 	mov	r4,r16
   12e00:	0015eb00 	call	15eb0 <_Balloc>
   12e04:	102f883a 	mov	r23,r2
   12e08:	80801015 	stw	r2,64(r16)
   12e0c:	00800384 	movi	r2,14
   12e10:	1480f036 	bltu	r2,r18,131d4 <_dtoa_r+0x73c>
   12e14:	9800ef26 	beq	r19,zero,131d4 <_dtoa_r+0x73c>
   12e18:	d8800617 	ldw	r2,24(sp)
   12e1c:	00839c0e 	bge	zero,r2,13c90 <_dtoa_r+0x11f8>
   12e20:	d8c00617 	ldw	r3,24(sp)
   12e24:	108003cc 	andi	r2,r2,15
   12e28:	100490fa 	slli	r2,r2,3
   12e2c:	182bd13a 	srai	r21,r3,4
   12e30:	00c000f4 	movhi	r3,3
   12e34:	18e08f04 	addi	r3,r3,-32196
   12e38:	1885883a 	add	r2,r3,r2
   12e3c:	a8c0040c 	andi	r3,r21,16
   12e40:	12800017 	ldw	r10,0(r2)
   12e44:	15800117 	ldw	r22,4(r2)
   12e48:	18038726 	beq	r3,zero,13c68 <_dtoa_r+0x11d0>
   12e4c:	008000f4 	movhi	r2,3
   12e50:	10a08504 	addi	r2,r2,-32236
   12e54:	11800817 	ldw	r6,32(r2)
   12e58:	11c00917 	ldw	r7,36(r2)
   12e5c:	d9000317 	ldw	r4,12(sp)
   12e60:	880b883a 	mov	r5,r17
   12e64:	da801515 	stw	r10,84(sp)
   12e68:	0018f9c0 	call	18f9c <__divdf3>
   12e6c:	da801517 	ldw	r10,84(sp)
   12e70:	d8801015 	stw	r2,64(sp)
   12e74:	1829883a 	mov	r20,r3
   12e78:	ad4003cc 	andi	r21,r21,15
   12e7c:	048000c4 	movi	r18,3
   12e80:	a8001126 	beq	r21,zero,12ec8 <_dtoa_r+0x430>
   12e84:	04c000f4 	movhi	r19,3
   12e88:	9ce08504 	addi	r19,r19,-32236
   12e8c:	5005883a 	mov	r2,r10
   12e90:	b007883a 	mov	r3,r22
   12e94:	a980004c 	andi	r6,r21,1
   12e98:	1009883a 	mov	r4,r2
   12e9c:	a82bd07a 	srai	r21,r21,1
   12ea0:	180b883a 	mov	r5,r3
   12ea4:	30000426 	beq	r6,zero,12eb8 <_dtoa_r+0x420>
   12ea8:	99800017 	ldw	r6,0(r19)
   12eac:	99c00117 	ldw	r7,4(r19)
   12eb0:	94800044 	addi	r18,r18,1
   12eb4:	0018cb80 	call	18cb8 <__muldf3>
   12eb8:	9cc00204 	addi	r19,r19,8
   12ebc:	a83ff51e 	bne	r21,zero,12e94 <_dtoa_r+0x3fc>
   12ec0:	1015883a 	mov	r10,r2
   12ec4:	182d883a 	mov	r22,r3
   12ec8:	d9001017 	ldw	r4,64(sp)
   12ecc:	a00b883a 	mov	r5,r20
   12ed0:	500d883a 	mov	r6,r10
   12ed4:	b00f883a 	mov	r7,r22
   12ed8:	0018f9c0 	call	18f9c <__divdf3>
   12edc:	1027883a 	mov	r19,r2
   12ee0:	1829883a 	mov	r20,r3
   12ee4:	d8c00d17 	ldw	r3,52(sp)
   12ee8:	18000626 	beq	r3,zero,12f04 <_dtoa_r+0x46c>
   12eec:	9809883a 	mov	r4,r19
   12ef0:	a00b883a 	mov	r5,r20
   12ef4:	000d883a 	mov	r6,zero
   12ef8:	01cffc34 	movhi	r7,16368
   12efc:	00192d00 	call	192d0 <__ltdf2>
   12f00:	10040e16 	blt	r2,zero,13f3c <_dtoa_r+0x14a4>
   12f04:	9009883a 	mov	r4,r18
   12f08:	001932c0 	call	1932c <__floatsidf>
   12f0c:	1009883a 	mov	r4,r2
   12f10:	180b883a 	mov	r5,r3
   12f14:	980d883a 	mov	r6,r19
   12f18:	a00f883a 	mov	r7,r20
   12f1c:	0018cb80 	call	18cb8 <__muldf3>
   12f20:	1009883a 	mov	r4,r2
   12f24:	180b883a 	mov	r5,r3
   12f28:	000d883a 	mov	r6,zero
   12f2c:	01d00734 	movhi	r7,16412
   12f30:	0018c040 	call	18c04 <__adddf3>
   12f34:	057f3034 	movhi	r21,64704
   12f38:	1d6b883a 	add	r21,r3,r21
   12f3c:	d8c00917 	ldw	r3,36(sp)
   12f40:	1025883a 	mov	r18,r2
   12f44:	18031f26 	beq	r3,zero,13bc4 <_dtoa_r+0x112c>
   12f48:	d8800617 	ldw	r2,24(sp)
   12f4c:	dac00917 	ldw	r11,36(sp)
   12f50:	d8801315 	stw	r2,76(sp)
   12f54:	d8c00c17 	ldw	r3,48(sp)
   12f58:	18039026 	beq	r3,zero,13d9c <_dtoa_r+0x1304>
   12f5c:	58bfffc4 	addi	r2,r11,-1
   12f60:	100490fa 	slli	r2,r2,3
   12f64:	00c000f4 	movhi	r3,3
   12f68:	18e08f04 	addi	r3,r3,-32196
   12f6c:	0009883a 	mov	r4,zero
   12f70:	1885883a 	add	r2,r3,r2
   12f74:	11800017 	ldw	r6,0(r2)
   12f78:	11c00117 	ldw	r7,4(r2)
   12f7c:	014ff834 	movhi	r5,16352
   12f80:	dac01615 	stw	r11,88(sp)
   12f84:	0018f9c0 	call	18f9c <__divdf3>
   12f88:	900d883a 	mov	r6,r18
   12f8c:	a80f883a 	mov	r7,r21
   12f90:	1009883a 	mov	r4,r2
   12f94:	180b883a 	mov	r5,r3
   12f98:	0018c580 	call	18c58 <__subdf3>
   12f9c:	a00b883a 	mov	r5,r20
   12fa0:	9809883a 	mov	r4,r19
   12fa4:	182b883a 	mov	r21,r3
   12fa8:	d8801015 	stw	r2,64(sp)
   12fac:	00194000 	call	19400 <__fixdfsi>
   12fb0:	1009883a 	mov	r4,r2
   12fb4:	d8801515 	stw	r2,84(sp)
   12fb8:	001932c0 	call	1932c <__floatsidf>
   12fbc:	9809883a 	mov	r4,r19
   12fc0:	a00b883a 	mov	r5,r20
   12fc4:	100d883a 	mov	r6,r2
   12fc8:	180f883a 	mov	r7,r3
   12fcc:	0018c580 	call	18c58 <__subdf3>
   12fd0:	da401517 	ldw	r9,84(sp)
   12fd4:	d9001017 	ldw	r4,64(sp)
   12fd8:	a80b883a 	mov	r5,r21
   12fdc:	4d000c04 	addi	r20,r9,48
   12fe0:	bd000005 	stb	r20,0(r23)
   12fe4:	100d883a 	mov	r6,r2
   12fe8:	180f883a 	mov	r7,r3
   12fec:	bd800044 	addi	r22,r23,1
   12ff0:	1025883a 	mov	r18,r2
   12ff4:	1827883a 	mov	r19,r3
   12ff8:	00192080 	call	19208 <__gtdf2>
   12ffc:	00842216 	blt	zero,r2,14088 <_dtoa_r+0x15f0>
   13000:	0009883a 	mov	r4,zero
   13004:	014ffc34 	movhi	r5,16368
   13008:	900d883a 	mov	r6,r18
   1300c:	980f883a 	mov	r7,r19
   13010:	0018c580 	call	18c58 <__subdf3>
   13014:	d9001017 	ldw	r4,64(sp)
   13018:	a80b883a 	mov	r5,r21
   1301c:	100d883a 	mov	r6,r2
   13020:	180f883a 	mov	r7,r3
   13024:	00192080 	call	19208 <__gtdf2>
   13028:	dac01617 	ldw	r11,88(sp)
   1302c:	00841316 	blt	zero,r2,1407c <_dtoa_r+0x15e4>
   13030:	00800044 	movi	r2,1
   13034:	12c0670e 	bge	r2,r11,131d4 <_dtoa_r+0x73c>
   13038:	bad7883a 	add	r11,r23,r11
   1303c:	df001115 	stw	fp,68(sp)
   13040:	dc401215 	stw	r17,72(sp)
   13044:	5839883a 	mov	fp,r11
   13048:	dc401017 	ldw	r17,64(sp)
   1304c:	00000806 	br	13070 <_dtoa_r+0x5d8>
   13050:	0018c580 	call	18c58 <__subdf3>
   13054:	1009883a 	mov	r4,r2
   13058:	180b883a 	mov	r5,r3
   1305c:	880d883a 	mov	r6,r17
   13060:	a80f883a 	mov	r7,r21
   13064:	00192d00 	call	192d0 <__ltdf2>
   13068:	1003ee16 	blt	r2,zero,14024 <_dtoa_r+0x158c>
   1306c:	b703f126 	beq	r22,fp,14034 <_dtoa_r+0x159c>
   13070:	8809883a 	mov	r4,r17
   13074:	a80b883a 	mov	r5,r21
   13078:	000d883a 	mov	r6,zero
   1307c:	01d00934 	movhi	r7,16420
   13080:	0018cb80 	call	18cb8 <__muldf3>
   13084:	000d883a 	mov	r6,zero
   13088:	01d00934 	movhi	r7,16420
   1308c:	9009883a 	mov	r4,r18
   13090:	980b883a 	mov	r5,r19
   13094:	1023883a 	mov	r17,r2
   13098:	182b883a 	mov	r21,r3
   1309c:	0018cb80 	call	18cb8 <__muldf3>
   130a0:	180b883a 	mov	r5,r3
   130a4:	1009883a 	mov	r4,r2
   130a8:	1825883a 	mov	r18,r3
   130ac:	1027883a 	mov	r19,r2
   130b0:	00194000 	call	19400 <__fixdfsi>
   130b4:	1009883a 	mov	r4,r2
   130b8:	1029883a 	mov	r20,r2
   130bc:	001932c0 	call	1932c <__floatsidf>
   130c0:	9809883a 	mov	r4,r19
   130c4:	900b883a 	mov	r5,r18
   130c8:	100d883a 	mov	r6,r2
   130cc:	180f883a 	mov	r7,r3
   130d0:	0018c580 	call	18c58 <__subdf3>
   130d4:	a5000c04 	addi	r20,r20,48
   130d8:	b5000005 	stb	r20,0(r22)
   130dc:	1009883a 	mov	r4,r2
   130e0:	180b883a 	mov	r5,r3
   130e4:	880d883a 	mov	r6,r17
   130e8:	a80f883a 	mov	r7,r21
   130ec:	1025883a 	mov	r18,r2
   130f0:	1827883a 	mov	r19,r3
   130f4:	00192d00 	call	192d0 <__ltdf2>
   130f8:	b5800044 	addi	r22,r22,1
   130fc:	0009883a 	mov	r4,zero
   13100:	014ffc34 	movhi	r5,16368
   13104:	900d883a 	mov	r6,r18
   13108:	980f883a 	mov	r7,r19
   1310c:	103fd00e 	bge	r2,zero,13050 <_dtoa_r+0x5b8>
   13110:	d9001317 	ldw	r4,76(sp)
   13114:	df001117 	ldw	fp,68(sp)
   13118:	d9000615 	stw	r4,24(sp)
   1311c:	8009883a 	mov	r4,r16
   13120:	e00b883a 	mov	r5,fp
   13124:	0015f580 	call	15f58 <_Bfree>
   13128:	d9c00617 	ldw	r7,24(sp)
   1312c:	d8c02217 	ldw	r3,136(sp)
   13130:	d9002417 	ldw	r4,144(sp)
   13134:	b0000005 	stb	zero,0(r22)
   13138:	38800044 	addi	r2,r7,1
   1313c:	18800015 	stw	r2,0(r3)
   13140:	203e8426 	beq	r4,zero,12b54 <_dtoa_r+0xbc>
   13144:	25800015 	stw	r22,0(r4)
   13148:	003e8206 	br	12b54 <_dtoa_r+0xbc>
   1314c:	00800434 	movhi	r2,16
   13150:	10bfffc4 	addi	r2,r2,-1
   13154:	90a4703a 	and	r18,r18,r2
   13158:	903e901e 	bne	r18,zero,12b9c <_dtoa_r+0x104>
   1315c:	05c000f4 	movhi	r23,3
   13160:	bde06604 	addi	r23,r23,-32360
   13164:	003e8f06 	br	12ba4 <_dtoa_r+0x10c>
   13168:	b8800204 	addi	r2,r23,8
   1316c:	003e9206 	br	12bb8 <_dtoa_r+0x120>
   13170:	01400434 	movhi	r5,16
   13174:	297fffc4 	addi	r5,r5,-1
   13178:	894a703a 	and	r5,r17,r5
   1317c:	d9000317 	ldw	r4,12(sp)
   13180:	294ffc34 	orhi	r5,r5,16368
   13184:	a53f0044 	addi	r20,r20,-1023
   13188:	dd400217 	ldw	r21,8(sp)
   1318c:	d8000f15 	stw	zero,60(sp)
   13190:	003eb106 	br	12c58 <_dtoa_r+0x1c0>
   13194:	05c000f4 	movhi	r23,3
   13198:	bde05d04 	addi	r23,r23,-32396
   1319c:	003e6d06 	br	12b54 <_dtoa_r+0xbc>
   131a0:	d8000415 	stw	zero,16(sp)
   131a4:	80001115 	stw	zero,68(r16)
   131a8:	8009883a 	mov	r4,r16
   131ac:	000b883a 	mov	r5,zero
   131b0:	0015eb00 	call	15eb0 <_Balloc>
   131b4:	01ffffc4 	movi	r7,-1
   131b8:	102f883a 	mov	r23,r2
   131bc:	80801015 	stw	r2,64(r16)
   131c0:	00800044 	movi	r2,1
   131c4:	d9c00915 	stw	r7,36(sp)
   131c8:	d8002115 	stw	zero,132(sp)
   131cc:	d9c00e15 	stw	r7,56(sp)
   131d0:	d8800c15 	stw	r2,48(sp)
   131d4:	d8800117 	ldw	r2,4(sp)
   131d8:	10008b16 	blt	r2,zero,13408 <_dtoa_r+0x970>
   131dc:	d9000617 	ldw	r4,24(sp)
   131e0:	00c00384 	movi	r3,14
   131e4:	19008816 	blt	r3,r4,13408 <_dtoa_r+0x970>
   131e8:	200490fa 	slli	r2,r4,3
   131ec:	d9c02117 	ldw	r7,132(sp)
   131f0:	00c000f4 	movhi	r3,3
   131f4:	18e08f04 	addi	r3,r3,-32196
   131f8:	1885883a 	add	r2,r3,r2
   131fc:	14800017 	ldw	r18,0(r2)
   13200:	14c00117 	ldw	r19,4(r2)
   13204:	3801c916 	blt	r7,zero,1392c <_dtoa_r+0xe94>
   13208:	d9000317 	ldw	r4,12(sp)
   1320c:	900d883a 	mov	r6,r18
   13210:	980f883a 	mov	r7,r19
   13214:	880b883a 	mov	r5,r17
   13218:	0018f9c0 	call	18f9c <__divdf3>
   1321c:	180b883a 	mov	r5,r3
   13220:	1009883a 	mov	r4,r2
   13224:	00194000 	call	19400 <__fixdfsi>
   13228:	1009883a 	mov	r4,r2
   1322c:	102b883a 	mov	r21,r2
   13230:	001932c0 	call	1932c <__floatsidf>
   13234:	1009883a 	mov	r4,r2
   13238:	180b883a 	mov	r5,r3
   1323c:	900d883a 	mov	r6,r18
   13240:	980f883a 	mov	r7,r19
   13244:	0018cb80 	call	18cb8 <__muldf3>
   13248:	d9000317 	ldw	r4,12(sp)
   1324c:	880b883a 	mov	r5,r17
   13250:	100d883a 	mov	r6,r2
   13254:	180f883a 	mov	r7,r3
   13258:	0018c580 	call	18c58 <__subdf3>
   1325c:	d9c00917 	ldw	r7,36(sp)
   13260:	1009883a 	mov	r4,r2
   13264:	a8800c04 	addi	r2,r21,48
   13268:	b8800005 	stb	r2,0(r23)
   1326c:	01800044 	movi	r6,1
   13270:	180b883a 	mov	r5,r3
   13274:	2005883a 	mov	r2,r4
   13278:	bd800044 	addi	r22,r23,1
   1327c:	39803726 	beq	r7,r6,1335c <_dtoa_r+0x8c4>
   13280:	000d883a 	mov	r6,zero
   13284:	01d00934 	movhi	r7,16420
   13288:	0018cb80 	call	18cb8 <__muldf3>
   1328c:	1009883a 	mov	r4,r2
   13290:	180b883a 	mov	r5,r3
   13294:	000d883a 	mov	r6,zero
   13298:	000f883a 	mov	r7,zero
   1329c:	1029883a 	mov	r20,r2
   132a0:	1823883a 	mov	r17,r3
   132a4:	00191500 	call	19150 <__eqdf2>
   132a8:	103f9c26 	beq	r2,zero,1311c <_dtoa_r+0x684>
   132ac:	dd400917 	ldw	r21,36(sp)
   132b0:	dc000415 	stw	r16,16(sp)
   132b4:	00000906 	br	132dc <_dtoa_r+0x844>
   132b8:	0018cb80 	call	18cb8 <__muldf3>
   132bc:	1009883a 	mov	r4,r2
   132c0:	180b883a 	mov	r5,r3
   132c4:	000d883a 	mov	r6,zero
   132c8:	000f883a 	mov	r7,zero
   132cc:	1029883a 	mov	r20,r2
   132d0:	1823883a 	mov	r17,r3
   132d4:	00191500 	call	19150 <__eqdf2>
   132d8:	10022926 	beq	r2,zero,13b80 <_dtoa_r+0x10e8>
   132dc:	900d883a 	mov	r6,r18
   132e0:	980f883a 	mov	r7,r19
   132e4:	a009883a 	mov	r4,r20
   132e8:	880b883a 	mov	r5,r17
   132ec:	0018f9c0 	call	18f9c <__divdf3>
   132f0:	180b883a 	mov	r5,r3
   132f4:	1009883a 	mov	r4,r2
   132f8:	00194000 	call	19400 <__fixdfsi>
   132fc:	1009883a 	mov	r4,r2
   13300:	1021883a 	mov	r16,r2
   13304:	001932c0 	call	1932c <__floatsidf>
   13308:	1009883a 	mov	r4,r2
   1330c:	180b883a 	mov	r5,r3
   13310:	900d883a 	mov	r6,r18
   13314:	980f883a 	mov	r7,r19
   13318:	0018cb80 	call	18cb8 <__muldf3>
   1331c:	a009883a 	mov	r4,r20
   13320:	880b883a 	mov	r5,r17
   13324:	100d883a 	mov	r6,r2
   13328:	180f883a 	mov	r7,r3
   1332c:	0018c580 	call	18c58 <__subdf3>
   13330:	82400c04 	addi	r9,r16,48
   13334:	b2400005 	stb	r9,0(r22)
   13338:	b5800044 	addi	r22,r22,1
   1333c:	b5d3c83a 	sub	r9,r22,r23
   13340:	000d883a 	mov	r6,zero
   13344:	01d00934 	movhi	r7,16420
   13348:	1009883a 	mov	r4,r2
   1334c:	180b883a 	mov	r5,r3
   13350:	aa7fd91e 	bne	r21,r9,132b8 <_dtoa_r+0x820>
   13354:	802b883a 	mov	r21,r16
   13358:	dc000417 	ldw	r16,16(sp)
   1335c:	1009883a 	mov	r4,r2
   13360:	180b883a 	mov	r5,r3
   13364:	100d883a 	mov	r6,r2
   13368:	180f883a 	mov	r7,r3
   1336c:	0018c040 	call	18c04 <__adddf3>
   13370:	9009883a 	mov	r4,r18
   13374:	980b883a 	mov	r5,r19
   13378:	100d883a 	mov	r6,r2
   1337c:	180f883a 	mov	r7,r3
   13380:	1023883a 	mov	r17,r2
   13384:	1829883a 	mov	r20,r3
   13388:	00192d00 	call	192d0 <__ltdf2>
   1338c:	10000816 	blt	r2,zero,133b0 <_dtoa_r+0x918>
   13390:	9009883a 	mov	r4,r18
   13394:	980b883a 	mov	r5,r19
   13398:	880d883a 	mov	r6,r17
   1339c:	a00f883a 	mov	r7,r20
   133a0:	00191500 	call	19150 <__eqdf2>
   133a4:	103f5d1e 	bne	r2,zero,1311c <_dtoa_r+0x684>
   133a8:	ad40004c 	andi	r21,r21,1
   133ac:	a83f5b26 	beq	r21,zero,1311c <_dtoa_r+0x684>
   133b0:	b53fffc3 	ldbu	r20,-1(r22)
   133b4:	b0ffff84 	addi	r3,r22,-2
   133b8:	01400e44 	movi	r5,57
   133bc:	00000306 	br	133cc <_dtoa_r+0x934>
   133c0:	1d000003 	ldbu	r20,0(r3)
   133c4:	102d883a 	mov	r22,r2
   133c8:	18ffffc4 	addi	r3,r3,-1
   133cc:	a1003fcc 	andi	r4,r20,255
   133d0:	2100201c 	xori	r4,r4,128
   133d4:	213fe004 	addi	r4,r4,-128
   133d8:	b0bfffc4 	addi	r2,r22,-1
   133dc:	2142ca1e 	bne	r4,r5,13f08 <_dtoa_r+0x1470>
   133e0:	b8bff71e 	bne	r23,r2,133c0 <_dtoa_r+0x928>
   133e4:	d8800617 	ldw	r2,24(sp)
   133e8:	05000c44 	movi	r20,49
   133ec:	10800044 	addi	r2,r2,1
   133f0:	d8800615 	stw	r2,24(sp)
   133f4:	00800c04 	movi	r2,48
   133f8:	b8800005 	stb	r2,0(r23)
   133fc:	b805883a 	mov	r2,r23
   13400:	15000005 	stb	r20,0(r2)
   13404:	003f4506 	br	1311c <_dtoa_r+0x684>
   13408:	d9c00c17 	ldw	r7,48(sp)
   1340c:	3800c926 	beq	r7,zero,13734 <_dtoa_r+0xc9c>
   13410:	d9c00417 	ldw	r7,16(sp)
   13414:	00c00044 	movi	r3,1
   13418:	19c16c0e 	bge	r3,r7,139cc <_dtoa_r+0xf34>
   1341c:	d9000917 	ldw	r4,36(sp)
   13420:	d9c00a17 	ldw	r7,40(sp)
   13424:	24ffffc4 	addi	r19,r4,-1
   13428:	3cc20716 	blt	r7,r19,13c48 <_dtoa_r+0x11b0>
   1342c:	3ce7c83a 	sub	r19,r7,r19
   13430:	d9c00917 	ldw	r7,36(sp)
   13434:	3802ae16 	blt	r7,zero,13ef0 <_dtoa_r+0x1458>
   13438:	dc800817 	ldw	r18,32(sp)
   1343c:	d8800917 	ldw	r2,36(sp)
   13440:	d8c00817 	ldw	r3,32(sp)
   13444:	d9c00717 	ldw	r7,28(sp)
   13448:	8009883a 	mov	r4,r16
   1344c:	1887883a 	add	r3,r3,r2
   13450:	388f883a 	add	r7,r7,r2
   13454:	01400044 	movi	r5,1
   13458:	d8c00815 	stw	r3,32(sp)
   1345c:	d9c00715 	stw	r7,28(sp)
   13460:	00162e00 	call	162e0 <__i2b>
   13464:	102b883a 	mov	r21,r2
   13468:	90000a26 	beq	r18,zero,13494 <_dtoa_r+0x9fc>
   1346c:	d8800717 	ldw	r2,28(sp)
   13470:	0080080e 	bge	zero,r2,13494 <_dtoa_r+0x9fc>
   13474:	90812b16 	blt	r18,r2,13924 <_dtoa_r+0xe8c>
   13478:	d8c00817 	ldw	r3,32(sp)
   1347c:	d9000717 	ldw	r4,28(sp)
   13480:	90a5c83a 	sub	r18,r18,r2
   13484:	1887c83a 	sub	r3,r3,r2
   13488:	2089c83a 	sub	r4,r4,r2
   1348c:	d8c00815 	stw	r3,32(sp)
   13490:	d9000715 	stw	r4,28(sp)
   13494:	d9c00a17 	ldw	r7,40(sp)
   13498:	01c0140e 	bge	zero,r7,134ec <_dtoa_r+0xa54>
   1349c:	d8800c17 	ldw	r2,48(sp)
   134a0:	1001de26 	beq	r2,zero,13c1c <_dtoa_r+0x1184>
   134a4:	04c00e0e 	bge	zero,r19,134e0 <_dtoa_r+0xa48>
   134a8:	a80b883a 	mov	r5,r21
   134ac:	8009883a 	mov	r4,r16
   134b0:	980d883a 	mov	r6,r19
   134b4:	00165740 	call	16574 <__pow5mult>
   134b8:	e00d883a 	mov	r6,fp
   134bc:	8009883a 	mov	r4,r16
   134c0:	100b883a 	mov	r5,r2
   134c4:	102b883a 	mov	r21,r2
   134c8:	001631c0 	call	1631c <__multiply>
   134cc:	1029883a 	mov	r20,r2
   134d0:	e00b883a 	mov	r5,fp
   134d4:	8009883a 	mov	r4,r16
   134d8:	0015f580 	call	15f58 <_Bfree>
   134dc:	a039883a 	mov	fp,r20
   134e0:	d8c00a17 	ldw	r3,40(sp)
   134e4:	1ccdc83a 	sub	r6,r3,r19
   134e8:	3001291e 	bne	r6,zero,13990 <_dtoa_r+0xef8>
   134ec:	8009883a 	mov	r4,r16
   134f0:	01400044 	movi	r5,1
   134f4:	00162e00 	call	162e0 <__i2b>
   134f8:	d9000b17 	ldw	r4,44(sp)
   134fc:	1029883a 	mov	r20,r2
   13500:	0100050e 	bge	zero,r4,13518 <_dtoa_r+0xa80>
   13504:	d9800b17 	ldw	r6,44(sp)
   13508:	8009883a 	mov	r4,r16
   1350c:	100b883a 	mov	r5,r2
   13510:	00165740 	call	16574 <__pow5mult>
   13514:	1029883a 	mov	r20,r2
   13518:	d9c00417 	ldw	r7,16(sp)
   1351c:	00800044 	movi	r2,1
   13520:	11c0f00e 	bge	r2,r7,138e4 <_dtoa_r+0xe4c>
   13524:	0023883a 	mov	r17,zero
   13528:	d8800b17 	ldw	r2,44(sp)
   1352c:	1001741e 	bne	r2,zero,13b00 <_dtoa_r+0x1068>
   13530:	00800044 	movi	r2,1
   13534:	d8c00717 	ldw	r3,28(sp)
   13538:	10c5883a 	add	r2,r2,r3
   1353c:	108007cc 	andi	r2,r2,31
   13540:	10008026 	beq	r2,zero,13744 <_dtoa_r+0xcac>
   13544:	01000804 	movi	r4,32
   13548:	2089c83a 	sub	r4,r4,r2
   1354c:	00c00104 	movi	r3,4
   13550:	1902d00e 	bge	r3,r4,14094 <_dtoa_r+0x15fc>
   13554:	d9000817 	ldw	r4,32(sp)
   13558:	d9c00717 	ldw	r7,28(sp)
   1355c:	00c00704 	movi	r3,28
   13560:	1885c83a 	sub	r2,r3,r2
   13564:	2089883a 	add	r4,r4,r2
   13568:	388f883a 	add	r7,r7,r2
   1356c:	d9000815 	stw	r4,32(sp)
   13570:	90a5883a 	add	r18,r18,r2
   13574:	d9c00715 	stw	r7,28(sp)
   13578:	d9c00817 	ldw	r7,32(sp)
   1357c:	01c0050e 	bge	zero,r7,13594 <_dtoa_r+0xafc>
   13580:	e00b883a 	mov	r5,fp
   13584:	8009883a 	mov	r4,r16
   13588:	380d883a 	mov	r6,r7
   1358c:	00166a00 	call	166a0 <__lshift>
   13590:	1039883a 	mov	fp,r2
   13594:	d8800717 	ldw	r2,28(sp)
   13598:	0080050e 	bge	zero,r2,135b0 <_dtoa_r+0xb18>
   1359c:	a00b883a 	mov	r5,r20
   135a0:	8009883a 	mov	r4,r16
   135a4:	100d883a 	mov	r6,r2
   135a8:	00166a00 	call	166a0 <__lshift>
   135ac:	1029883a 	mov	r20,r2
   135b0:	d8c00d17 	ldw	r3,52(sp)
   135b4:	1801401e 	bne	r3,zero,13ab8 <_dtoa_r+0x1020>
   135b8:	d8800917 	ldw	r2,36(sp)
   135bc:	00815a0e 	bge	zero,r2,13b28 <_dtoa_r+0x1090>
   135c0:	d8c00c17 	ldw	r3,48(sp)
   135c4:	18006f1e 	bne	r3,zero,13784 <_dtoa_r+0xcec>
   135c8:	b823883a 	mov	r17,r23
   135cc:	dc800917 	ldw	r18,36(sp)
   135d0:	00000206 	br	135dc <_dtoa_r+0xb44>
   135d4:	0015f800 	call	15f80 <__multadd>
   135d8:	1039883a 	mov	fp,r2
   135dc:	e009883a 	mov	r4,fp
   135e0:	a00b883a 	mov	r5,r20
   135e4:	001285c0 	call	1285c <quorem>
   135e8:	10800c04 	addi	r2,r2,48
   135ec:	88800005 	stb	r2,0(r17)
   135f0:	8c400044 	addi	r17,r17,1
   135f4:	8dc7c83a 	sub	r3,r17,r23
   135f8:	8009883a 	mov	r4,r16
   135fc:	e00b883a 	mov	r5,fp
   13600:	01800284 	movi	r6,10
   13604:	000f883a 	mov	r7,zero
   13608:	1cbff216 	blt	r3,r18,135d4 <_dtoa_r+0xb3c>
   1360c:	dd800917 	ldw	r22,36(sp)
   13610:	1007883a 	mov	r3,r2
   13614:	05823a0e 	bge	zero,r22,13f00 <_dtoa_r+0x1468>
   13618:	bdad883a 	add	r22,r23,r22
   1361c:	0023883a 	mov	r17,zero
   13620:	e00b883a 	mov	r5,fp
   13624:	01800044 	movi	r6,1
   13628:	8009883a 	mov	r4,r16
   1362c:	d8c01515 	stw	r3,84(sp)
   13630:	00166a00 	call	166a0 <__lshift>
   13634:	1009883a 	mov	r4,r2
   13638:	a00b883a 	mov	r5,r20
   1363c:	1039883a 	mov	fp,r2
   13640:	00167fc0 	call	167fc <__mcmp>
   13644:	d8c01517 	ldw	r3,84(sp)
   13648:	0080d60e 	bge	zero,r2,139a4 <_dtoa_r+0xf0c>
   1364c:	b13fffc3 	ldbu	r4,-1(r22)
   13650:	b0ffff84 	addi	r3,r22,-2
   13654:	01800e44 	movi	r6,57
   13658:	00000306 	br	13668 <_dtoa_r+0xbd0>
   1365c:	19000003 	ldbu	r4,0(r3)
   13660:	102d883a 	mov	r22,r2
   13664:	18ffffc4 	addi	r3,r3,-1
   13668:	21403fcc 	andi	r5,r4,255
   1366c:	2940201c 	xori	r5,r5,128
   13670:	297fe004 	addi	r5,r5,-128
   13674:	b0bfffc4 	addi	r2,r22,-1
   13678:	2981a71e 	bne	r5,r6,13d18 <_dtoa_r+0x1280>
   1367c:	b8bff71e 	bne	r23,r2,1365c <_dtoa_r+0xbc4>
   13680:	d8800617 	ldw	r2,24(sp)
   13684:	10800044 	addi	r2,r2,1
   13688:	d8800615 	stw	r2,24(sp)
   1368c:	00800c44 	movi	r2,49
   13690:	b8800005 	stb	r2,0(r23)
   13694:	8009883a 	mov	r4,r16
   13698:	a00b883a 	mov	r5,r20
   1369c:	0015f580 	call	15f58 <_Bfree>
   136a0:	a83e9e26 	beq	r21,zero,1311c <_dtoa_r+0x684>
   136a4:	88000426 	beq	r17,zero,136b8 <_dtoa_r+0xc20>
   136a8:	8d400326 	beq	r17,r21,136b8 <_dtoa_r+0xc20>
   136ac:	8009883a 	mov	r4,r16
   136b0:	880b883a 	mov	r5,r17
   136b4:	0015f580 	call	15f58 <_Bfree>
   136b8:	8009883a 	mov	r4,r16
   136bc:	a80b883a 	mov	r5,r21
   136c0:	0015f580 	call	15f58 <_Bfree>
   136c4:	003e9506 	br	1311c <_dtoa_r+0x684>
   136c8:	00c00044 	movi	r3,1
   136cc:	d8c00d15 	stw	r3,52(sp)
   136d0:	003d9f06 	br	12d50 <_dtoa_r+0x2b8>
   136d4:	d9000817 	ldw	r4,32(sp)
   136d8:	d8800617 	ldw	r2,24(sp)
   136dc:	d8000b15 	stw	zero,44(sp)
   136e0:	2089c83a 	sub	r4,r4,r2
   136e4:	0087c83a 	sub	r3,zero,r2
   136e8:	d9000815 	stw	r4,32(sp)
   136ec:	d8c00a15 	stw	r3,40(sp)
   136f0:	003da306 	br	12d80 <_dtoa_r+0x2e8>
   136f4:	0529c83a 	sub	r20,zero,r20
   136f8:	dd000815 	stw	r20,32(sp)
   136fc:	d8000715 	stw	zero,28(sp)
   13700:	003d9806 	br	12d64 <_dtoa_r+0x2cc>
   13704:	d9000617 	ldw	r4,24(sp)
   13708:	001932c0 	call	1932c <__floatsidf>
   1370c:	1009883a 	mov	r4,r2
   13710:	180b883a 	mov	r5,r3
   13714:	980d883a 	mov	r6,r19
   13718:	900f883a 	mov	r7,r18
   1371c:	00191ac0 	call	191ac <__nedf2>
   13720:	103d7a26 	beq	r2,zero,12d0c <_dtoa_r+0x274>
   13724:	d8800617 	ldw	r2,24(sp)
   13728:	10bfffc4 	addi	r2,r2,-1
   1372c:	d8800615 	stw	r2,24(sp)
   13730:	003d7606 	br	12d0c <_dtoa_r+0x274>
   13734:	dcc00a17 	ldw	r19,40(sp)
   13738:	dc800817 	ldw	r18,32(sp)
   1373c:	002b883a 	mov	r21,zero
   13740:	003f4906 	br	13468 <_dtoa_r+0x9d0>
   13744:	00800704 	movi	r2,28
   13748:	d8c00817 	ldw	r3,32(sp)
   1374c:	d9000717 	ldw	r4,28(sp)
   13750:	90a5883a 	add	r18,r18,r2
   13754:	1887883a 	add	r3,r3,r2
   13758:	2089883a 	add	r4,r4,r2
   1375c:	d8c00815 	stw	r3,32(sp)
   13760:	d9000715 	stw	r4,28(sp)
   13764:	003f8406 	br	13578 <_dtoa_r+0xae0>
   13768:	d9c00317 	ldw	r7,12(sp)
   1376c:	013efb84 	movi	r4,-1042
   13770:	2509c83a 	sub	r4,r4,r20
   13774:	3908983a 	sll	r4,r7,r4
   13778:	003d3006 	br	12c3c <_dtoa_r+0x1a4>
   1377c:	d8000d15 	stw	zero,52(sp)
   13780:	003d7306 	br	12d50 <_dtoa_r+0x2b8>
   13784:	0480050e 	bge	zero,r18,1379c <_dtoa_r+0xd04>
   13788:	a80b883a 	mov	r5,r21
   1378c:	8009883a 	mov	r4,r16
   13790:	900d883a 	mov	r6,r18
   13794:	00166a00 	call	166a0 <__lshift>
   13798:	102b883a 	mov	r21,r2
   1379c:	8801611e 	bne	r17,zero,13d24 <_dtoa_r+0x128c>
   137a0:	a827883a 	mov	r19,r21
   137a4:	d8c00317 	ldw	r3,12(sp)
   137a8:	d9000917 	ldw	r4,36(sp)
   137ac:	b8bfffc4 	addi	r2,r23,-1
   137b0:	18c0004c 	andi	r3,r3,1
   137b4:	1105883a 	add	r2,r2,r4
   137b8:	b825883a 	mov	r18,r23
   137bc:	d8800515 	stw	r2,20(sp)
   137c0:	a823883a 	mov	r17,r21
   137c4:	d8c00315 	stw	r3,12(sp)
   137c8:	ddc00715 	stw	r23,28(sp)
   137cc:	e009883a 	mov	r4,fp
   137d0:	a00b883a 	mov	r5,r20
   137d4:	001285c0 	call	1285c <quorem>
   137d8:	e009883a 	mov	r4,fp
   137dc:	880b883a 	mov	r5,r17
   137e0:	102d883a 	mov	r22,r2
   137e4:	00167fc0 	call	167fc <__mcmp>
   137e8:	980d883a 	mov	r6,r19
   137ec:	8009883a 	mov	r4,r16
   137f0:	a00b883a 	mov	r5,r20
   137f4:	102b883a 	mov	r21,r2
   137f8:	00168540 	call	16854 <__mdiff>
   137fc:	100d883a 	mov	r6,r2
   13800:	10800317 	ldw	r2,12(r2)
   13804:	b5c00c04 	addi	r23,r22,48
   13808:	10008c26 	beq	r2,zero,13a3c <_dtoa_r+0xfa4>
   1380c:	8009883a 	mov	r4,r16
   13810:	300b883a 	mov	r5,r6
   13814:	0015f580 	call	15f58 <_Bfree>
   13818:	00800044 	movi	r2,1
   1381c:	a8007116 	blt	r21,zero,139e4 <_dtoa_r+0xf4c>
   13820:	a800041e 	bne	r21,zero,13834 <_dtoa_r+0xd9c>
   13824:	d9c00417 	ldw	r7,16(sp)
   13828:	3800021e 	bne	r7,zero,13834 <_dtoa_r+0xd9c>
   1382c:	d8c00317 	ldw	r3,12(sp)
   13830:	18006c26 	beq	r3,zero,139e4 <_dtoa_r+0xf4c>
   13834:	00814c16 	blt	zero,r2,13d68 <_dtoa_r+0x12d0>
   13838:	d8c00517 	ldw	r3,20(sp)
   1383c:	95400044 	addi	r21,r18,1
   13840:	95c00005 	stb	r23,0(r18)
   13844:	a82d883a 	mov	r22,r21
   13848:	90c14d26 	beq	r18,r3,13d80 <_dtoa_r+0x12e8>
   1384c:	e00b883a 	mov	r5,fp
   13850:	8009883a 	mov	r4,r16
   13854:	01800284 	movi	r6,10
   13858:	000f883a 	mov	r7,zero
   1385c:	0015f800 	call	15f80 <__multadd>
   13860:	1039883a 	mov	fp,r2
   13864:	8cc08b26 	beq	r17,r19,13a94 <_dtoa_r+0xffc>
   13868:	880b883a 	mov	r5,r17
   1386c:	01800284 	movi	r6,10
   13870:	000f883a 	mov	r7,zero
   13874:	8009883a 	mov	r4,r16
   13878:	0015f800 	call	15f80 <__multadd>
   1387c:	980b883a 	mov	r5,r19
   13880:	8009883a 	mov	r4,r16
   13884:	01800284 	movi	r6,10
   13888:	000f883a 	mov	r7,zero
   1388c:	1023883a 	mov	r17,r2
   13890:	0015f800 	call	15f80 <__multadd>
   13894:	1027883a 	mov	r19,r2
   13898:	a825883a 	mov	r18,r21
   1389c:	003fcb06 	br	137cc <_dtoa_r+0xd34>
   138a0:	d9c00417 	ldw	r7,16(sp)
   138a4:	00800104 	movi	r2,4
   138a8:	3880e426 	beq	r7,r2,13c3c <_dtoa_r+0x11a4>
   138ac:	00800144 	movi	r2,5
   138b0:	38be3c1e 	bne	r7,r2,131a4 <_dtoa_r+0x70c>
   138b4:	00c00044 	movi	r3,1
   138b8:	d8c00c15 	stw	r3,48(sp)
   138bc:	d9c02117 	ldw	r7,132(sp)
   138c0:	d8800617 	ldw	r2,24(sp)
   138c4:	388f883a 	add	r7,r7,r2
   138c8:	3c800044 	addi	r18,r7,1
   138cc:	d9c00e15 	stw	r7,56(sp)
   138d0:	dc800915 	stw	r18,36(sp)
   138d4:	04bd3e16 	blt	zero,r18,12dd0 <_dtoa_r+0x338>
   138d8:	80001115 	stw	zero,68(r16)
   138dc:	000b883a 	mov	r5,zero
   138e0:	003d4606 	br	12dfc <_dtoa_r+0x364>
   138e4:	d8c00317 	ldw	r3,12(sp)
   138e8:	183f0e1e 	bne	r3,zero,13524 <_dtoa_r+0xa8c>
   138ec:	00c00434 	movhi	r3,16
   138f0:	18ffffc4 	addi	r3,r3,-1
   138f4:	88c6703a 	and	r3,r17,r3
   138f8:	183f0a1e 	bne	r3,zero,13524 <_dtoa_r+0xa8c>
   138fc:	8c5ffc2c 	andhi	r17,r17,32752
   13900:	883f0826 	beq	r17,zero,13524 <_dtoa_r+0xa8c>
   13904:	d9000817 	ldw	r4,32(sp)
   13908:	d9c00717 	ldw	r7,28(sp)
   1390c:	1023883a 	mov	r17,r2
   13910:	2089883a 	add	r4,r4,r2
   13914:	388f883a 	add	r7,r7,r2
   13918:	d9000815 	stw	r4,32(sp)
   1391c:	d9c00715 	stw	r7,28(sp)
   13920:	003f0106 	br	13528 <_dtoa_r+0xa90>
   13924:	9005883a 	mov	r2,r18
   13928:	003ed306 	br	13478 <_dtoa_r+0x9e0>
   1392c:	d8800917 	ldw	r2,36(sp)
   13930:	00be3516 	blt	zero,r2,13208 <_dtoa_r+0x770>
   13934:	1000b61e 	bne	r2,zero,13c10 <_dtoa_r+0x1178>
   13938:	9009883a 	mov	r4,r18
   1393c:	980b883a 	mov	r5,r19
   13940:	000d883a 	mov	r6,zero
   13944:	01d00534 	movhi	r7,16404
   13948:	0018cb80 	call	18cb8 <__muldf3>
   1394c:	d9800317 	ldw	r6,12(sp)
   13950:	1009883a 	mov	r4,r2
   13954:	180b883a 	mov	r5,r3
   13958:	880f883a 	mov	r7,r17
   1395c:	001926c0 	call	1926c <__gedf2>
   13960:	0029883a 	mov	r20,zero
   13964:	002b883a 	mov	r21,zero
   13968:	10007e16 	blt	r2,zero,13b64 <_dtoa_r+0x10cc>
   1396c:	d8802117 	ldw	r2,132(sp)
   13970:	b82d883a 	mov	r22,r23
   13974:	0084303a 	nor	r2,zero,r2
   13978:	d8800615 	stw	r2,24(sp)
   1397c:	8009883a 	mov	r4,r16
   13980:	a00b883a 	mov	r5,r20
   13984:	0015f580 	call	15f58 <_Bfree>
   13988:	a83f4b1e 	bne	r21,zero,136b8 <_dtoa_r+0xc20>
   1398c:	003de306 	br	1311c <_dtoa_r+0x684>
   13990:	e00b883a 	mov	r5,fp
   13994:	8009883a 	mov	r4,r16
   13998:	00165740 	call	16574 <__pow5mult>
   1399c:	1039883a 	mov	fp,r2
   139a0:	003ed206 	br	134ec <_dtoa_r+0xa54>
   139a4:	1000021e 	bne	r2,zero,139b0 <_dtoa_r+0xf18>
   139a8:	18c0004c 	andi	r3,r3,1
   139ac:	183f271e 	bne	r3,zero,1364c <_dtoa_r+0xbb4>
   139b0:	01000c04 	movi	r4,48
   139b4:	00000106 	br	139bc <_dtoa_r+0xf24>
   139b8:	102d883a 	mov	r22,r2
   139bc:	b0bfffc4 	addi	r2,r22,-1
   139c0:	10c00007 	ldb	r3,0(r2)
   139c4:	193ffc26 	beq	r3,r4,139b8 <_dtoa_r+0xf20>
   139c8:	003f3206 	br	13694 <_dtoa_r+0xbfc>
   139cc:	d8c00f17 	ldw	r3,60(sp)
   139d0:	18015026 	beq	r3,zero,13f14 <_dtoa_r+0x147c>
   139d4:	10810cc4 	addi	r2,r2,1075
   139d8:	dcc00a17 	ldw	r19,40(sp)
   139dc:	dc800817 	ldw	r18,32(sp)
   139e0:	003e9706 	br	13440 <_dtoa_r+0x9a8>
   139e4:	b807883a 	mov	r3,r23
   139e8:	182b883a 	mov	r21,r3
   139ec:	ddc00717 	ldw	r23,28(sp)
   139f0:	00800e0e 	bge	zero,r2,13a2c <_dtoa_r+0xf94>
   139f4:	e00b883a 	mov	r5,fp
   139f8:	01800044 	movi	r6,1
   139fc:	8009883a 	mov	r4,r16
   13a00:	d8c01515 	stw	r3,84(sp)
   13a04:	00166a00 	call	166a0 <__lshift>
   13a08:	1009883a 	mov	r4,r2
   13a0c:	a00b883a 	mov	r5,r20
   13a10:	1039883a 	mov	fp,r2
   13a14:	00167fc0 	call	167fc <__mcmp>
   13a18:	d8c01517 	ldw	r3,84(sp)
   13a1c:	0081880e 	bge	zero,r2,14040 <_dtoa_r+0x15a8>
   13a20:	00800e44 	movi	r2,57
   13a24:	b0c00c44 	addi	r3,r22,49
   13a28:	a8816326 	beq	r21,r2,13fb8 <_dtoa_r+0x1520>
   13a2c:	90c00005 	stb	r3,0(r18)
   13a30:	95800044 	addi	r22,r18,1
   13a34:	982b883a 	mov	r21,r19
   13a38:	003f1606 	br	13694 <_dtoa_r+0xbfc>
   13a3c:	300b883a 	mov	r5,r6
   13a40:	e009883a 	mov	r4,fp
   13a44:	d9801515 	stw	r6,84(sp)
   13a48:	00167fc0 	call	167fc <__mcmp>
   13a4c:	d9801517 	ldw	r6,84(sp)
   13a50:	8009883a 	mov	r4,r16
   13a54:	d8801515 	stw	r2,84(sp)
   13a58:	300b883a 	mov	r5,r6
   13a5c:	0015f580 	call	15f58 <_Bfree>
   13a60:	d8801517 	ldw	r2,84(sp)
   13a64:	103f6d1e 	bne	r2,zero,1381c <_dtoa_r+0xd84>
   13a68:	d9c00417 	ldw	r7,16(sp)
   13a6c:	383f6b1e 	bne	r7,zero,1381c <_dtoa_r+0xd84>
   13a70:	d8c00317 	ldw	r3,12(sp)
   13a74:	183f691e 	bne	r3,zero,1381c <_dtoa_r+0xd84>
   13a78:	b807883a 	mov	r3,r23
   13a7c:	00800e44 	movi	r2,57
   13a80:	ddc00717 	ldw	r23,28(sp)
   13a84:	18814c26 	beq	r3,r2,13fb8 <_dtoa_r+0x1520>
   13a88:	057fe80e 	bge	zero,r21,13a2c <_dtoa_r+0xf94>
   13a8c:	b0c00c44 	addi	r3,r22,49
   13a90:	003fe606 	br	13a2c <_dtoa_r+0xf94>
   13a94:	880b883a 	mov	r5,r17
   13a98:	8009883a 	mov	r4,r16
   13a9c:	01800284 	movi	r6,10
   13aa0:	000f883a 	mov	r7,zero
   13aa4:	0015f800 	call	15f80 <__multadd>
   13aa8:	1023883a 	mov	r17,r2
   13aac:	1027883a 	mov	r19,r2
   13ab0:	a825883a 	mov	r18,r21
   13ab4:	003f4506 	br	137cc <_dtoa_r+0xd34>
   13ab8:	e009883a 	mov	r4,fp
   13abc:	a00b883a 	mov	r5,r20
   13ac0:	00167fc0 	call	167fc <__mcmp>
   13ac4:	103ebc0e 	bge	r2,zero,135b8 <_dtoa_r+0xb20>
   13ac8:	e00b883a 	mov	r5,fp
   13acc:	8009883a 	mov	r4,r16
   13ad0:	01800284 	movi	r6,10
   13ad4:	000f883a 	mov	r7,zero
   13ad8:	0015f800 	call	15f80 <__multadd>
   13adc:	1039883a 	mov	fp,r2
   13ae0:	d8800617 	ldw	r2,24(sp)
   13ae4:	d8c00c17 	ldw	r3,48(sp)
   13ae8:	10bfffc4 	addi	r2,r2,-1
   13aec:	d8800615 	stw	r2,24(sp)
   13af0:	1801571e 	bne	r3,zero,14050 <_dtoa_r+0x15b8>
   13af4:	d9c00e17 	ldw	r7,56(sp)
   13af8:	d9c00915 	stw	r7,36(sp)
   13afc:	003eae06 	br	135b8 <_dtoa_r+0xb20>
   13b00:	a0800417 	ldw	r2,16(r20)
   13b04:	10800104 	addi	r2,r2,4
   13b08:	1085883a 	add	r2,r2,r2
   13b0c:	1085883a 	add	r2,r2,r2
   13b10:	a085883a 	add	r2,r20,r2
   13b14:	11000017 	ldw	r4,0(r2)
   13b18:	00161c80 	call	161c8 <__hi0bits>
   13b1c:	00c00804 	movi	r3,32
   13b20:	1885c83a 	sub	r2,r3,r2
   13b24:	003e8306 	br	13534 <_dtoa_r+0xa9c>
   13b28:	d9c00417 	ldw	r7,16(sp)
   13b2c:	00800084 	movi	r2,2
   13b30:	11fea30e 	bge	r2,r7,135c0 <_dtoa_r+0xb28>
   13b34:	d8800917 	ldw	r2,36(sp)
   13b38:	103f8c1e 	bne	r2,zero,1396c <_dtoa_r+0xed4>
   13b3c:	a00b883a 	mov	r5,r20
   13b40:	8009883a 	mov	r4,r16
   13b44:	01800144 	movi	r6,5
   13b48:	000f883a 	mov	r7,zero
   13b4c:	0015f800 	call	15f80 <__multadd>
   13b50:	e009883a 	mov	r4,fp
   13b54:	100b883a 	mov	r5,r2
   13b58:	1029883a 	mov	r20,r2
   13b5c:	00167fc0 	call	167fc <__mcmp>
   13b60:	00bf820e 	bge	zero,r2,1396c <_dtoa_r+0xed4>
   13b64:	00800c44 	movi	r2,49
   13b68:	b8800005 	stb	r2,0(r23)
   13b6c:	d8800617 	ldw	r2,24(sp)
   13b70:	bd800044 	addi	r22,r23,1
   13b74:	10800044 	addi	r2,r2,1
   13b78:	d8800615 	stw	r2,24(sp)
   13b7c:	003f7f06 	br	1397c <_dtoa_r+0xee4>
   13b80:	dc000417 	ldw	r16,16(sp)
   13b84:	003d6506 	br	1311c <_dtoa_r+0x684>
   13b88:	9009883a 	mov	r4,r18
   13b8c:	001932c0 	call	1932c <__floatsidf>
   13b90:	1009883a 	mov	r4,r2
   13b94:	180b883a 	mov	r5,r3
   13b98:	980d883a 	mov	r6,r19
   13b9c:	a00f883a 	mov	r7,r20
   13ba0:	0018cb80 	call	18cb8 <__muldf3>
   13ba4:	1009883a 	mov	r4,r2
   13ba8:	180b883a 	mov	r5,r3
   13bac:	000d883a 	mov	r6,zero
   13bb0:	01d00734 	movhi	r7,16412
   13bb4:	0018c040 	call	18c04 <__adddf3>
   13bb8:	057f3034 	movhi	r21,64704
   13bbc:	1025883a 	mov	r18,r2
   13bc0:	1d6b883a 	add	r21,r3,r21
   13bc4:	9809883a 	mov	r4,r19
   13bc8:	a00b883a 	mov	r5,r20
   13bcc:	000d883a 	mov	r6,zero
   13bd0:	01d00534 	movhi	r7,16404
   13bd4:	0018c580 	call	18c58 <__subdf3>
   13bd8:	1009883a 	mov	r4,r2
   13bdc:	180b883a 	mov	r5,r3
   13be0:	900d883a 	mov	r6,r18
   13be4:	a80f883a 	mov	r7,r21
   13be8:	1027883a 	mov	r19,r2
   13bec:	1829883a 	mov	r20,r3
   13bf0:	00192080 	call	19208 <__gtdf2>
   13bf4:	00806616 	blt	zero,r2,13d90 <_dtoa_r+0x12f8>
   13bf8:	a9e0003c 	xorhi	r7,r21,32768
   13bfc:	9809883a 	mov	r4,r19
   13c00:	a00b883a 	mov	r5,r20
   13c04:	900d883a 	mov	r6,r18
   13c08:	00192d00 	call	192d0 <__ltdf2>
   13c0c:	103d710e 	bge	r2,zero,131d4 <_dtoa_r+0x73c>
   13c10:	0029883a 	mov	r20,zero
   13c14:	002b883a 	mov	r21,zero
   13c18:	003f5406 	br	1396c <_dtoa_r+0xed4>
   13c1c:	d9800a17 	ldw	r6,40(sp)
   13c20:	e00b883a 	mov	r5,fp
   13c24:	8009883a 	mov	r4,r16
   13c28:	00165740 	call	16574 <__pow5mult>
   13c2c:	1039883a 	mov	fp,r2
   13c30:	003e2e06 	br	134ec <_dtoa_r+0xa54>
   13c34:	d8000c15 	stw	zero,48(sp)
   13c38:	003f2006 	br	138bc <_dtoa_r+0xe24>
   13c3c:	00800044 	movi	r2,1
   13c40:	d8800c15 	stw	r2,48(sp)
   13c44:	003c5d06 	br	12dbc <_dtoa_r+0x324>
   13c48:	d8c00a17 	ldw	r3,40(sp)
   13c4c:	d9000b17 	ldw	r4,44(sp)
   13c50:	dcc00a15 	stw	r19,40(sp)
   13c54:	98c5c83a 	sub	r2,r19,r3
   13c58:	2089883a 	add	r4,r4,r2
   13c5c:	d9000b15 	stw	r4,44(sp)
   13c60:	0027883a 	mov	r19,zero
   13c64:	003df206 	br	13430 <_dtoa_r+0x998>
   13c68:	d9000317 	ldw	r4,12(sp)
   13c6c:	8829883a 	mov	r20,r17
   13c70:	04800084 	movi	r18,2
   13c74:	d9001015 	stw	r4,64(sp)
   13c78:	003c8106 	br	12e80 <_dtoa_r+0x3e8>
   13c7c:	04800044 	movi	r18,1
   13c80:	dc800e15 	stw	r18,56(sp)
   13c84:	dc800915 	stw	r18,36(sp)
   13c88:	dc802115 	stw	r18,132(sp)
   13c8c:	003f1206 	br	138d8 <_dtoa_r+0xe40>
   13c90:	d8800617 	ldw	r2,24(sp)
   13c94:	00abc83a 	sub	r21,zero,r2
   13c98:	a800a426 	beq	r21,zero,13f2c <_dtoa_r+0x1494>
   13c9c:	a88003cc 	andi	r2,r21,15
   13ca0:	100490fa 	slli	r2,r2,3
   13ca4:	00c000f4 	movhi	r3,3
   13ca8:	18e08f04 	addi	r3,r3,-32196
   13cac:	d9000317 	ldw	r4,12(sp)
   13cb0:	1885883a 	add	r2,r3,r2
   13cb4:	11800017 	ldw	r6,0(r2)
   13cb8:	11c00117 	ldw	r7,4(r2)
   13cbc:	a82bd13a 	srai	r21,r21,4
   13cc0:	880b883a 	mov	r5,r17
   13cc4:	0018cb80 	call	18cb8 <__muldf3>
   13cc8:	1027883a 	mov	r19,r2
   13ccc:	1829883a 	mov	r20,r3
   13cd0:	a800e826 	beq	r21,zero,14074 <_dtoa_r+0x15dc>
   13cd4:	058000f4 	movhi	r22,3
   13cd8:	b5a08504 	addi	r22,r22,-32236
   13cdc:	04800084 	movi	r18,2
   13ce0:	a980004c 	andi	r6,r21,1
   13ce4:	1009883a 	mov	r4,r2
   13ce8:	a82bd07a 	srai	r21,r21,1
   13cec:	180b883a 	mov	r5,r3
   13cf0:	30000426 	beq	r6,zero,13d04 <_dtoa_r+0x126c>
   13cf4:	b1800017 	ldw	r6,0(r22)
   13cf8:	b1c00117 	ldw	r7,4(r22)
   13cfc:	94800044 	addi	r18,r18,1
   13d00:	0018cb80 	call	18cb8 <__muldf3>
   13d04:	b5800204 	addi	r22,r22,8
   13d08:	a83ff51e 	bne	r21,zero,13ce0 <_dtoa_r+0x1248>
   13d0c:	1027883a 	mov	r19,r2
   13d10:	1829883a 	mov	r20,r3
   13d14:	003c7306 	br	12ee4 <_dtoa_r+0x44c>
   13d18:	21000044 	addi	r4,r4,1
   13d1c:	11000005 	stb	r4,0(r2)
   13d20:	003e5c06 	br	13694 <_dtoa_r+0xbfc>
   13d24:	a9400117 	ldw	r5,4(r21)
   13d28:	8009883a 	mov	r4,r16
   13d2c:	0015eb00 	call	15eb0 <_Balloc>
   13d30:	a9800417 	ldw	r6,16(r21)
   13d34:	11000304 	addi	r4,r2,12
   13d38:	a9400304 	addi	r5,r21,12
   13d3c:	31800084 	addi	r6,r6,2
   13d40:	318d883a 	add	r6,r6,r6
   13d44:	318d883a 	add	r6,r6,r6
   13d48:	1023883a 	mov	r17,r2
   13d4c:	0015b080 	call	15b08 <memcpy>
   13d50:	8009883a 	mov	r4,r16
   13d54:	880b883a 	mov	r5,r17
   13d58:	01800044 	movi	r6,1
   13d5c:	00166a00 	call	166a0 <__lshift>
   13d60:	1027883a 	mov	r19,r2
   13d64:	003e8f06 	br	137a4 <_dtoa_r+0xd0c>
   13d68:	b807883a 	mov	r3,r23
   13d6c:	00800e44 	movi	r2,57
   13d70:	ddc00717 	ldw	r23,28(sp)
   13d74:	18809026 	beq	r3,r2,13fb8 <_dtoa_r+0x1520>
   13d78:	18c00044 	addi	r3,r3,1
   13d7c:	003f2b06 	br	13a2c <_dtoa_r+0xf94>
   13d80:	b807883a 	mov	r3,r23
   13d84:	982b883a 	mov	r21,r19
   13d88:	ddc00717 	ldw	r23,28(sp)
   13d8c:	003e2406 	br	13620 <_dtoa_r+0xb88>
   13d90:	0029883a 	mov	r20,zero
   13d94:	002b883a 	mov	r21,zero
   13d98:	003f7206 	br	13b64 <_dtoa_r+0x10cc>
   13d9c:	593fffc4 	addi	r4,r11,-1
   13da0:	200490fa 	slli	r2,r4,3
   13da4:	00c000f4 	movhi	r3,3
   13da8:	18e08f04 	addi	r3,r3,-32196
   13dac:	d9001015 	stw	r4,64(sp)
   13db0:	1885883a 	add	r2,r3,r2
   13db4:	11000017 	ldw	r4,0(r2)
   13db8:	11400117 	ldw	r5,4(r2)
   13dbc:	900d883a 	mov	r6,r18
   13dc0:	a80f883a 	mov	r7,r21
   13dc4:	dac01615 	stw	r11,88(sp)
   13dc8:	0018cb80 	call	18cb8 <__muldf3>
   13dcc:	a00b883a 	mov	r5,r20
   13dd0:	9809883a 	mov	r4,r19
   13dd4:	d8c01215 	stw	r3,72(sp)
   13dd8:	d8801115 	stw	r2,68(sp)
   13ddc:	00194000 	call	19400 <__fixdfsi>
   13de0:	1009883a 	mov	r4,r2
   13de4:	1025883a 	mov	r18,r2
   13de8:	001932c0 	call	1932c <__floatsidf>
   13dec:	9809883a 	mov	r4,r19
   13df0:	a00b883a 	mov	r5,r20
   13df4:	100d883a 	mov	r6,r2
   13df8:	180f883a 	mov	r7,r3
   13dfc:	94800c04 	addi	r18,r18,48
   13e00:	0018c580 	call	18c58 <__subdf3>
   13e04:	bc800005 	stb	r18,0(r23)
   13e08:	dac01617 	ldw	r11,88(sp)
   13e0c:	102b883a 	mov	r21,r2
   13e10:	00800044 	movi	r2,1
   13e14:	bd800044 	addi	r22,r23,1
   13e18:	1815883a 	mov	r10,r3
   13e1c:	58802226 	beq	r11,r2,13ea8 <_dtoa_r+0x1410>
   13e20:	bad7883a 	add	r11,r23,r11
   13e24:	dc001415 	stw	r16,80(sp)
   13e28:	a805883a 	mov	r2,r21
   13e2c:	b027883a 	mov	r19,r22
   13e30:	5821883a 	mov	r16,r11
   13e34:	882b883a 	mov	r21,r17
   13e38:	000d883a 	mov	r6,zero
   13e3c:	01d00934 	movhi	r7,16420
   13e40:	1009883a 	mov	r4,r2
   13e44:	180b883a 	mov	r5,r3
   13e48:	0018cb80 	call	18cb8 <__muldf3>
   13e4c:	180b883a 	mov	r5,r3
   13e50:	1009883a 	mov	r4,r2
   13e54:	1829883a 	mov	r20,r3
   13e58:	1023883a 	mov	r17,r2
   13e5c:	00194000 	call	19400 <__fixdfsi>
   13e60:	1009883a 	mov	r4,r2
   13e64:	1025883a 	mov	r18,r2
   13e68:	001932c0 	call	1932c <__floatsidf>
   13e6c:	8809883a 	mov	r4,r17
   13e70:	a00b883a 	mov	r5,r20
   13e74:	100d883a 	mov	r6,r2
   13e78:	180f883a 	mov	r7,r3
   13e7c:	94800c04 	addi	r18,r18,48
   13e80:	0018c580 	call	18c58 <__subdf3>
   13e84:	9cc00044 	addi	r19,r19,1
   13e88:	9cbfffc5 	stb	r18,-1(r19)
   13e8c:	9c3fea1e 	bne	r19,r16,13e38 <_dtoa_r+0x13a0>
   13e90:	1815883a 	mov	r10,r3
   13e94:	d8c01017 	ldw	r3,64(sp)
   13e98:	dc001417 	ldw	r16,80(sp)
   13e9c:	a823883a 	mov	r17,r21
   13ea0:	b0ed883a 	add	r22,r22,r3
   13ea4:	102b883a 	mov	r21,r2
   13ea8:	d9001117 	ldw	r4,68(sp)
   13eac:	d9401217 	ldw	r5,72(sp)
   13eb0:	000d883a 	mov	r6,zero
   13eb4:	01cff834 	movhi	r7,16352
   13eb8:	da801515 	stw	r10,84(sp)
   13ebc:	0018c040 	call	18c04 <__adddf3>
   13ec0:	da801517 	ldw	r10,84(sp)
   13ec4:	1009883a 	mov	r4,r2
   13ec8:	180b883a 	mov	r5,r3
   13ecc:	500f883a 	mov	r7,r10
   13ed0:	a80d883a 	mov	r6,r21
   13ed4:	00192d00 	call	192d0 <__ltdf2>
   13ed8:	da801517 	ldw	r10,84(sp)
   13edc:	10003b0e 	bge	r2,zero,13fcc <_dtoa_r+0x1534>
   13ee0:	d9c01317 	ldw	r7,76(sp)
   13ee4:	b53fffc3 	ldbu	r20,-1(r22)
   13ee8:	d9c00615 	stw	r7,24(sp)
   13eec:	003d3106 	br	133b4 <_dtoa_r+0x91c>
   13ef0:	d8800817 	ldw	r2,32(sp)
   13ef4:	11e5c83a 	sub	r18,r2,r7
   13ef8:	0005883a 	mov	r2,zero
   13efc:	003d5006 	br	13440 <_dtoa_r+0x9a8>
   13f00:	05800044 	movi	r22,1
   13f04:	003dc406 	br	13618 <_dtoa_r+0xb80>
   13f08:	a5000044 	addi	r20,r20,1
   13f0c:	15000005 	stb	r20,0(r2)
   13f10:	003c8206 	br	1311c <_dtoa_r+0x684>
   13f14:	d8800217 	ldw	r2,8(sp)
   13f18:	00c00d84 	movi	r3,54
   13f1c:	dcc00a17 	ldw	r19,40(sp)
   13f20:	1885c83a 	sub	r2,r3,r2
   13f24:	dc800817 	ldw	r18,32(sp)
   13f28:	003d4506 	br	13440 <_dtoa_r+0x9a8>
   13f2c:	dcc00317 	ldw	r19,12(sp)
   13f30:	8829883a 	mov	r20,r17
   13f34:	04800084 	movi	r18,2
   13f38:	003bea06 	br	12ee4 <_dtoa_r+0x44c>
   13f3c:	d9000917 	ldw	r4,36(sp)
   13f40:	203f1126 	beq	r4,zero,13b88 <_dtoa_r+0x10f0>
   13f44:	d9c00e17 	ldw	r7,56(sp)
   13f48:	01fca20e 	bge	zero,r7,131d4 <_dtoa_r+0x73c>
   13f4c:	a00b883a 	mov	r5,r20
   13f50:	9809883a 	mov	r4,r19
   13f54:	000d883a 	mov	r6,zero
   13f58:	01d00934 	movhi	r7,16420
   13f5c:	0018cb80 	call	18cb8 <__muldf3>
   13f60:	91000044 	addi	r4,r18,1
   13f64:	1027883a 	mov	r19,r2
   13f68:	1829883a 	mov	r20,r3
   13f6c:	001932c0 	call	1932c <__floatsidf>
   13f70:	9809883a 	mov	r4,r19
   13f74:	a00b883a 	mov	r5,r20
   13f78:	100d883a 	mov	r6,r2
   13f7c:	180f883a 	mov	r7,r3
   13f80:	0018cb80 	call	18cb8 <__muldf3>
   13f84:	1009883a 	mov	r4,r2
   13f88:	180b883a 	mov	r5,r3
   13f8c:	000d883a 	mov	r6,zero
   13f90:	01d00734 	movhi	r7,16412
   13f94:	0018c040 	call	18c04 <__adddf3>
   13f98:	1025883a 	mov	r18,r2
   13f9c:	d8800617 	ldw	r2,24(sp)
   13fa0:	057f3034 	movhi	r21,64704
   13fa4:	1d6b883a 	add	r21,r3,r21
   13fa8:	10bfffc4 	addi	r2,r2,-1
   13fac:	d8801315 	stw	r2,76(sp)
   13fb0:	dac00e17 	ldw	r11,56(sp)
   13fb4:	003be706 	br	12f54 <_dtoa_r+0x4bc>
   13fb8:	01000e44 	movi	r4,57
   13fbc:	91000005 	stb	r4,0(r18)
   13fc0:	95800044 	addi	r22,r18,1
   13fc4:	982b883a 	mov	r21,r19
   13fc8:	003da106 	br	13650 <_dtoa_r+0xbb8>
   13fcc:	d9801117 	ldw	r6,68(sp)
   13fd0:	d9c01217 	ldw	r7,72(sp)
   13fd4:	0009883a 	mov	r4,zero
   13fd8:	014ff834 	movhi	r5,16352
   13fdc:	da801515 	stw	r10,84(sp)
   13fe0:	0018c580 	call	18c58 <__subdf3>
   13fe4:	da801517 	ldw	r10,84(sp)
   13fe8:	1009883a 	mov	r4,r2
   13fec:	180b883a 	mov	r5,r3
   13ff0:	a80d883a 	mov	r6,r21
   13ff4:	500f883a 	mov	r7,r10
   13ff8:	00192080 	call	19208 <__gtdf2>
   13ffc:	00bc750e 	bge	zero,r2,131d4 <_dtoa_r+0x73c>
   14000:	01000c04 	movi	r4,48
   14004:	00000106 	br	1400c <_dtoa_r+0x1574>
   14008:	102d883a 	mov	r22,r2
   1400c:	b0bfffc4 	addi	r2,r22,-1
   14010:	10c00007 	ldb	r3,0(r2)
   14014:	193ffc26 	beq	r3,r4,14008 <_dtoa_r+0x1570>
   14018:	d8801317 	ldw	r2,76(sp)
   1401c:	d8800615 	stw	r2,24(sp)
   14020:	003c3e06 	br	1311c <_dtoa_r+0x684>
   14024:	d9001317 	ldw	r4,76(sp)
   14028:	df001117 	ldw	fp,68(sp)
   1402c:	d9000615 	stw	r4,24(sp)
   14030:	003ce006 	br	133b4 <_dtoa_r+0x91c>
   14034:	df001117 	ldw	fp,68(sp)
   14038:	dc401217 	ldw	r17,72(sp)
   1403c:	003c6506 	br	131d4 <_dtoa_r+0x73c>
   14040:	103e7a1e 	bne	r2,zero,13a2c <_dtoa_r+0xf94>
   14044:	1880004c 	andi	r2,r3,1
   14048:	103e7826 	beq	r2,zero,13a2c <_dtoa_r+0xf94>
   1404c:	003e7406 	br	13a20 <_dtoa_r+0xf88>
   14050:	8009883a 	mov	r4,r16
   14054:	a80b883a 	mov	r5,r21
   14058:	01800284 	movi	r6,10
   1405c:	000f883a 	mov	r7,zero
   14060:	0015f800 	call	15f80 <__multadd>
   14064:	d9000e17 	ldw	r4,56(sp)
   14068:	102b883a 	mov	r21,r2
   1406c:	d9000915 	stw	r4,36(sp)
   14070:	003d5106 	br	135b8 <_dtoa_r+0xb20>
   14074:	04800084 	movi	r18,2
   14078:	003b9a06 	br	12ee4 <_dtoa_r+0x44c>
   1407c:	d8c01317 	ldw	r3,76(sp)
   14080:	d8c00615 	stw	r3,24(sp)
   14084:	003ccb06 	br	133b4 <_dtoa_r+0x91c>
   14088:	d8c01317 	ldw	r3,76(sp)
   1408c:	d8c00615 	stw	r3,24(sp)
   14090:	003c2206 	br	1311c <_dtoa_r+0x684>
   14094:	20fd3826 	beq	r4,r3,13578 <_dtoa_r+0xae0>
   14098:	00c00f04 	movi	r3,60
   1409c:	1885c83a 	sub	r2,r3,r2
   140a0:	003da906 	br	13748 <_dtoa_r+0xcb0>
   140a4:	000b883a 	mov	r5,zero
   140a8:	003b5406 	br	12dfc <_dtoa_r+0x364>
   140ac:	04c00044 	movi	r19,1
   140b0:	003b3b06 	br	12da0 <_dtoa_r+0x308>

000140b4 <_fflush_r>:
   140b4:	defffb04 	addi	sp,sp,-20
   140b8:	dcc00315 	stw	r19,12(sp)
   140bc:	dc400115 	stw	r17,4(sp)
   140c0:	dfc00415 	stw	ra,16(sp)
   140c4:	dc800215 	stw	r18,8(sp)
   140c8:	dc000015 	stw	r16,0(sp)
   140cc:	2027883a 	mov	r19,r4
   140d0:	2823883a 	mov	r17,r5
   140d4:	20000226 	beq	r4,zero,140e0 <_fflush_r+0x2c>
   140d8:	20800e17 	ldw	r2,56(r4)
   140dc:	10005726 	beq	r2,zero,1423c <_fflush_r+0x188>
   140e0:	8880030b 	ldhu	r2,12(r17)
   140e4:	10c0020c 	andi	r3,r2,8
   140e8:	18ffffcc 	andi	r3,r3,65535
   140ec:	18e0001c 	xori	r3,r3,32768
   140f0:	18e00004 	addi	r3,r3,-32768
   140f4:	1800311e 	bne	r3,zero,141bc <_fflush_r+0x108>
   140f8:	89000117 	ldw	r4,4(r17)
   140fc:	10c20014 	ori	r3,r2,2048
   14100:	88c0030d 	sth	r3,12(r17)
   14104:	180b883a 	mov	r5,r3
   14108:	0100520e 	bge	zero,r4,14254 <_fflush_r+0x1a0>
   1410c:	88c00a17 	ldw	r3,40(r17)
   14110:	18002226 	beq	r3,zero,1419c <_fflush_r+0xe8>
   14114:	1084000c 	andi	r2,r2,4096
   14118:	10bfffcc 	andi	r2,r2,65535
   1411c:	10a0001c 	xori	r2,r2,32768
   14120:	10a00004 	addi	r2,r2,-32768
   14124:	10004e26 	beq	r2,zero,14260 <_fflush_r+0x1ac>
   14128:	8c001417 	ldw	r16,80(r17)
   1412c:	2940010c 	andi	r5,r5,4
   14130:	297fffcc 	andi	r5,r5,65535
   14134:	2960001c 	xori	r5,r5,32768
   14138:	29600004 	addi	r5,r5,-32768
   1413c:	28000626 	beq	r5,zero,14158 <_fflush_r+0xa4>
   14140:	89000117 	ldw	r4,4(r17)
   14144:	88800c17 	ldw	r2,48(r17)
   14148:	8121c83a 	sub	r16,r16,r4
   1414c:	10000226 	beq	r2,zero,14158 <_fflush_r+0xa4>
   14150:	88800f17 	ldw	r2,60(r17)
   14154:	80a1c83a 	sub	r16,r16,r2
   14158:	89400717 	ldw	r5,28(r17)
   1415c:	9809883a 	mov	r4,r19
   14160:	800d883a 	mov	r6,r16
   14164:	000f883a 	mov	r7,zero
   14168:	183ee83a 	callr	r3
   1416c:	8080281e 	bne	r16,r2,14210 <_fflush_r+0x15c>
   14170:	8880030b 	ldhu	r2,12(r17)
   14174:	88c00417 	ldw	r3,16(r17)
   14178:	88000115 	stw	zero,4(r17)
   1417c:	113dffcc 	andi	r4,r2,63487
   14180:	1084000c 	andi	r2,r2,4096
   14184:	10bfffcc 	andi	r2,r2,65535
   14188:	10a0001c 	xori	r2,r2,32768
   1418c:	8900030d 	sth	r4,12(r17)
   14190:	88c00015 	stw	r3,0(r17)
   14194:	10a00004 	addi	r2,r2,-32768
   14198:	10002c1e 	bne	r2,zero,1424c <_fflush_r+0x198>
   1419c:	0005883a 	mov	r2,zero
   141a0:	dfc00417 	ldw	ra,16(sp)
   141a4:	dcc00317 	ldw	r19,12(sp)
   141a8:	dc800217 	ldw	r18,8(sp)
   141ac:	dc400117 	ldw	r17,4(sp)
   141b0:	dc000017 	ldw	r16,0(sp)
   141b4:	dec00504 	addi	sp,sp,20
   141b8:	f800283a 	ret
   141bc:	8c800417 	ldw	r18,16(r17)
   141c0:	903ff626 	beq	r18,zero,1419c <_fflush_r+0xe8>
   141c4:	8c000017 	ldw	r16,0(r17)
   141c8:	108000cc 	andi	r2,r2,3
   141cc:	8c800015 	stw	r18,0(r17)
   141d0:	84a1c83a 	sub	r16,r16,r18
   141d4:	10001b1e 	bne	r2,zero,14244 <_fflush_r+0x190>
   141d8:	88800517 	ldw	r2,20(r17)
   141dc:	88800215 	stw	r2,8(r17)
   141e0:	04000316 	blt	zero,r16,141f0 <_fflush_r+0x13c>
   141e4:	003fed06 	br	1419c <_fflush_r+0xe8>
   141e8:	90a5883a 	add	r18,r18,r2
   141ec:	043feb0e 	bge	zero,r16,1419c <_fflush_r+0xe8>
   141f0:	88800917 	ldw	r2,36(r17)
   141f4:	89400717 	ldw	r5,28(r17)
   141f8:	800f883a 	mov	r7,r16
   141fc:	900d883a 	mov	r6,r18
   14200:	9809883a 	mov	r4,r19
   14204:	103ee83a 	callr	r2
   14208:	80a1c83a 	sub	r16,r16,r2
   1420c:	00bff616 	blt	zero,r2,141e8 <_fflush_r+0x134>
   14210:	88c0030b 	ldhu	r3,12(r17)
   14214:	00bfffc4 	movi	r2,-1
   14218:	18c01014 	ori	r3,r3,64
   1421c:	88c0030d 	sth	r3,12(r17)
   14220:	dfc00417 	ldw	ra,16(sp)
   14224:	dcc00317 	ldw	r19,12(sp)
   14228:	dc800217 	ldw	r18,8(sp)
   1422c:	dc400117 	ldw	r17,4(sp)
   14230:	dc000017 	ldw	r16,0(sp)
   14234:	dec00504 	addi	sp,sp,20
   14238:	f800283a 	ret
   1423c:	00143700 	call	14370 <__sinit>
   14240:	003fa706 	br	140e0 <_fflush_r+0x2c>
   14244:	0005883a 	mov	r2,zero
   14248:	003fe406 	br	141dc <_fflush_r+0x128>
   1424c:	8c001415 	stw	r16,80(r17)
   14250:	003fd206 	br	1419c <_fflush_r+0xe8>
   14254:	88c00f17 	ldw	r3,60(r17)
   14258:	00ffac16 	blt	zero,r3,1410c <_fflush_r+0x58>
   1425c:	003fcf06 	br	1419c <_fflush_r+0xe8>
   14260:	89400717 	ldw	r5,28(r17)
   14264:	9809883a 	mov	r4,r19
   14268:	000d883a 	mov	r6,zero
   1426c:	01c00044 	movi	r7,1
   14270:	183ee83a 	callr	r3
   14274:	1021883a 	mov	r16,r2
   14278:	00bfffc4 	movi	r2,-1
   1427c:	80800326 	beq	r16,r2,1428c <_fflush_r+0x1d8>
   14280:	8940030b 	ldhu	r5,12(r17)
   14284:	88c00a17 	ldw	r3,40(r17)
   14288:	003fa806 	br	1412c <_fflush_r+0x78>
   1428c:	98c00017 	ldw	r3,0(r19)
   14290:	00800744 	movi	r2,29
   14294:	18bfde1e 	bne	r3,r2,14210 <_fflush_r+0x15c>
   14298:	003fc006 	br	1419c <_fflush_r+0xe8>

0001429c <fflush>:
   1429c:	200b883a 	mov	r5,r4
   142a0:	20000426 	beq	r4,zero,142b4 <fflush+0x18>
   142a4:	008000f4 	movhi	r2,3
   142a8:	10a79e04 	addi	r2,r2,-24968
   142ac:	11000017 	ldw	r4,0(r2)
   142b0:	00140b41 	jmpi	140b4 <_fflush_r>
   142b4:	008000f4 	movhi	r2,3
   142b8:	10a79d04 	addi	r2,r2,-24972
   142bc:	11000017 	ldw	r4,0(r2)
   142c0:	01400074 	movhi	r5,1
   142c4:	29502d04 	addi	r5,r5,16564
   142c8:	0014f501 	jmpi	14f50 <_fwalk_reent>

000142cc <__fp_lock>:
   142cc:	0005883a 	mov	r2,zero
   142d0:	f800283a 	ret

000142d4 <__fp_unlock>:
   142d4:	0005883a 	mov	r2,zero
   142d8:	f800283a 	ret

000142dc <_cleanup_r>:
   142dc:	01400074 	movhi	r5,1
   142e0:	295ea004 	addi	r5,r5,31360
   142e4:	0014ea81 	jmpi	14ea8 <_fwalk>

000142e8 <__sfmoreglue>:
   142e8:	defffc04 	addi	sp,sp,-16
   142ec:	dc800215 	stw	r18,8(sp)
   142f0:	2825883a 	mov	r18,r5
   142f4:	dc000015 	stw	r16,0(sp)
   142f8:	01401704 	movi	r5,92
   142fc:	2021883a 	mov	r16,r4
   14300:	9009883a 	mov	r4,r18
   14304:	dfc00315 	stw	ra,12(sp)
   14308:	dc400115 	stw	r17,4(sp)
   1430c:	00106600 	call	10660 <__mulsi3>
   14310:	8009883a 	mov	r4,r16
   14314:	11400304 	addi	r5,r2,12
   14318:	1023883a 	mov	r17,r2
   1431c:	001528c0 	call	1528c <_malloc_r>
   14320:	1021883a 	mov	r16,r2
   14324:	10000726 	beq	r2,zero,14344 <__sfmoreglue+0x5c>
   14328:	11000304 	addi	r4,r2,12
   1432c:	10000015 	stw	zero,0(r2)
   14330:	14800115 	stw	r18,4(r2)
   14334:	11000215 	stw	r4,8(r2)
   14338:	000b883a 	mov	r5,zero
   1433c:	880d883a 	mov	r6,r17
   14340:	0015dd40 	call	15dd4 <memset>
   14344:	8005883a 	mov	r2,r16
   14348:	dfc00317 	ldw	ra,12(sp)
   1434c:	dc800217 	ldw	r18,8(sp)
   14350:	dc400117 	ldw	r17,4(sp)
   14354:	dc000017 	ldw	r16,0(sp)
   14358:	dec00404 	addi	sp,sp,16
   1435c:	f800283a 	ret

00014360 <_cleanup>:
   14360:	008000f4 	movhi	r2,3
   14364:	10a79d04 	addi	r2,r2,-24972
   14368:	11000017 	ldw	r4,0(r2)
   1436c:	00142dc1 	jmpi	142dc <_cleanup_r>

00014370 <__sinit>:
   14370:	20800e17 	ldw	r2,56(r4)
   14374:	1000401e 	bne	r2,zero,14478 <__sinit+0x108>
   14378:	21400117 	ldw	r5,4(r4)
   1437c:	01800074 	movhi	r6,1
   14380:	3190b704 	addi	r6,r6,17116
   14384:	20c00217 	ldw	r3,8(r4)
   14388:	21800f15 	stw	r6,60(r4)
   1438c:	2080bb04 	addi	r2,r4,748
   14390:	02400044 	movi	r9,1
   14394:	018000c4 	movi	r6,3
   14398:	2180b915 	stw	r6,740(r4)
   1439c:	2080ba15 	stw	r2,744(r4)
   143a0:	22400e15 	stw	r9,56(r4)
   143a4:	20800317 	ldw	r2,12(r4)
   143a8:	2000b815 	stw	zero,736(r4)
   143ac:	02000074 	movhi	r8,1
   143b0:	421d7104 	addi	r8,r8,30148
   143b4:	01c00074 	movhi	r7,1
   143b8:	39dd8604 	addi	r7,r7,30232
   143bc:	01800074 	movhi	r6,1
   143c0:	319da804 	addi	r6,r6,30368
   143c4:	01000074 	movhi	r4,1
   143c8:	211dbf04 	addi	r4,r4,30460
   143cc:	02800104 	movi	r10,4
   143d0:	28000015 	stw	zero,0(r5)
   143d4:	28000115 	stw	zero,4(r5)
   143d8:	28000215 	stw	zero,8(r5)
   143dc:	2a80030d 	sth	r10,12(r5)
   143e0:	2800038d 	sth	zero,14(r5)
   143e4:	28000415 	stw	zero,16(r5)
   143e8:	28000515 	stw	zero,20(r5)
   143ec:	28000615 	stw	zero,24(r5)
   143f0:	29400715 	stw	r5,28(r5)
   143f4:	2a000815 	stw	r8,32(r5)
   143f8:	29c00915 	stw	r7,36(r5)
   143fc:	29800a15 	stw	r6,40(r5)
   14400:	29000b15 	stw	r4,44(r5)
   14404:	01400284 	movi	r5,10
   14408:	18000015 	stw	zero,0(r3)
   1440c:	18000115 	stw	zero,4(r3)
   14410:	18000215 	stw	zero,8(r3)
   14414:	1940030d 	sth	r5,12(r3)
   14418:	1a40038d 	sth	r9,14(r3)
   1441c:	18000415 	stw	zero,16(r3)
   14420:	18000515 	stw	zero,20(r3)
   14424:	18000615 	stw	zero,24(r3)
   14428:	18c00715 	stw	r3,28(r3)
   1442c:	1a000815 	stw	r8,32(r3)
   14430:	19c00915 	stw	r7,36(r3)
   14434:	19800a15 	stw	r6,40(r3)
   14438:	19000b15 	stw	r4,44(r3)
   1443c:	00c00484 	movi	r3,18
   14440:	10c0030d 	sth	r3,12(r2)
   14444:	00c00084 	movi	r3,2
   14448:	10000015 	stw	zero,0(r2)
   1444c:	10000115 	stw	zero,4(r2)
   14450:	10000215 	stw	zero,8(r2)
   14454:	10c0038d 	sth	r3,14(r2)
   14458:	10000415 	stw	zero,16(r2)
   1445c:	10000515 	stw	zero,20(r2)
   14460:	10000615 	stw	zero,24(r2)
   14464:	10800715 	stw	r2,28(r2)
   14468:	12000815 	stw	r8,32(r2)
   1446c:	11c00915 	stw	r7,36(r2)
   14470:	11800a15 	stw	r6,40(r2)
   14474:	11000b15 	stw	r4,44(r2)
   14478:	f800283a 	ret

0001447c <__sfp>:
   1447c:	defffc04 	addi	sp,sp,-16
   14480:	008000f4 	movhi	r2,3
   14484:	10a79d04 	addi	r2,r2,-24972
   14488:	dc400115 	stw	r17,4(sp)
   1448c:	14400017 	ldw	r17,0(r2)
   14490:	dc800215 	stw	r18,8(sp)
   14494:	dfc00315 	stw	ra,12(sp)
   14498:	88800e17 	ldw	r2,56(r17)
   1449c:	dc000015 	stw	r16,0(sp)
   144a0:	2025883a 	mov	r18,r4
   144a4:	10002826 	beq	r2,zero,14548 <__sfp+0xcc>
   144a8:	8c40b804 	addi	r17,r17,736
   144ac:	043fffc4 	movi	r16,-1
   144b0:	89400117 	ldw	r5,4(r17)
   144b4:	88800217 	ldw	r2,8(r17)
   144b8:	297fffc4 	addi	r5,r5,-1
   144bc:	28000a16 	blt	r5,zero,144e8 <__sfp+0x6c>
   144c0:	10c0030f 	ldh	r3,12(r2)
   144c4:	18000c26 	beq	r3,zero,144f8 <__sfp+0x7c>
   144c8:	10c01a04 	addi	r3,r2,104
   144cc:	00000206 	br	144d8 <__sfp+0x5c>
   144d0:	19bfe90f 	ldh	r6,-92(r3)
   144d4:	30000826 	beq	r6,zero,144f8 <__sfp+0x7c>
   144d8:	297fffc4 	addi	r5,r5,-1
   144dc:	18bffd04 	addi	r2,r3,-12
   144e0:	18c01704 	addi	r3,r3,92
   144e4:	2c3ffa1e 	bne	r5,r16,144d0 <__sfp+0x54>
   144e8:	88800017 	ldw	r2,0(r17)
   144ec:	10001926 	beq	r2,zero,14554 <__sfp+0xd8>
   144f0:	1023883a 	mov	r17,r2
   144f4:	003fee06 	br	144b0 <__sfp+0x34>
   144f8:	00ffffc4 	movi	r3,-1
   144fc:	10c0038d 	sth	r3,14(r2)
   14500:	00c00044 	movi	r3,1
   14504:	10c0030d 	sth	r3,12(r2)
   14508:	10000015 	stw	zero,0(r2)
   1450c:	10000215 	stw	zero,8(r2)
   14510:	10000115 	stw	zero,4(r2)
   14514:	10000415 	stw	zero,16(r2)
   14518:	10000515 	stw	zero,20(r2)
   1451c:	10000615 	stw	zero,24(r2)
   14520:	10000c15 	stw	zero,48(r2)
   14524:	10000d15 	stw	zero,52(r2)
   14528:	10001115 	stw	zero,68(r2)
   1452c:	10001215 	stw	zero,72(r2)
   14530:	dfc00317 	ldw	ra,12(sp)
   14534:	dc800217 	ldw	r18,8(sp)
   14538:	dc400117 	ldw	r17,4(sp)
   1453c:	dc000017 	ldw	r16,0(sp)
   14540:	dec00404 	addi	sp,sp,16
   14544:	f800283a 	ret
   14548:	8809883a 	mov	r4,r17
   1454c:	00143700 	call	14370 <__sinit>
   14550:	003fd506 	br	144a8 <__sfp+0x2c>
   14554:	9009883a 	mov	r4,r18
   14558:	01400104 	movi	r5,4
   1455c:	00142e80 	call	142e8 <__sfmoreglue>
   14560:	88800015 	stw	r2,0(r17)
   14564:	103fe21e 	bne	r2,zero,144f0 <__sfp+0x74>
   14568:	00800304 	movi	r2,12
   1456c:	90800015 	stw	r2,0(r18)
   14570:	0005883a 	mov	r2,zero
   14574:	003fee06 	br	14530 <__sfp+0xb4>

00014578 <__sfp_lock_acquire>:
   14578:	f800283a 	ret

0001457c <__sfp_lock_release>:
   1457c:	f800283a 	ret

00014580 <__sinit_lock_acquire>:
   14580:	f800283a 	ret

00014584 <__sinit_lock_release>:
   14584:	f800283a 	ret

00014588 <__fp_lock_all>:
   14588:	008000f4 	movhi	r2,3
   1458c:	10a79e04 	addi	r2,r2,-24968
   14590:	11000017 	ldw	r4,0(r2)
   14594:	01400074 	movhi	r5,1
   14598:	2950b304 	addi	r5,r5,17100
   1459c:	0014ea81 	jmpi	14ea8 <_fwalk>

000145a0 <__fp_unlock_all>:
   145a0:	008000f4 	movhi	r2,3
   145a4:	10a79e04 	addi	r2,r2,-24968
   145a8:	11000017 	ldw	r4,0(r2)
   145ac:	01400074 	movhi	r5,1
   145b0:	2950b504 	addi	r5,r5,17108
   145b4:	0014ea81 	jmpi	14ea8 <_fwalk>

000145b8 <_malloc_trim_r>:
   145b8:	defffb04 	addi	sp,sp,-20
   145bc:	dcc00315 	stw	r19,12(sp)
   145c0:	dc800215 	stw	r18,8(sp)
   145c4:	dc400115 	stw	r17,4(sp)
   145c8:	dc000015 	stw	r16,0(sp)
   145cc:	2827883a 	mov	r19,r5
   145d0:	dfc00415 	stw	ra,16(sp)
   145d4:	044000f4 	movhi	r17,3
   145d8:	8c621904 	addi	r17,r17,-30620
   145dc:	2021883a 	mov	r16,r4
   145e0:	001a1f00 	call	1a1f0 <__malloc_lock>
   145e4:	88800217 	ldw	r2,8(r17)
   145e8:	14800117 	ldw	r18,4(r2)
   145ec:	00bfff04 	movi	r2,-4
   145f0:	90a4703a 	and	r18,r18,r2
   145f4:	9083fbc4 	addi	r2,r18,4079
   145f8:	14e7c83a 	sub	r19,r2,r19
   145fc:	9826d33a 	srli	r19,r19,12
   14600:	0083ffc4 	movi	r2,4095
   14604:	9cffffc4 	addi	r19,r19,-1
   14608:	9826933a 	slli	r19,r19,12
   1460c:	14c0060e 	bge	r2,r19,14628 <_malloc_trim_r+0x70>
   14610:	8009883a 	mov	r4,r16
   14614:	000b883a 	mov	r5,zero
   14618:	00175600 	call	17560 <_sbrk_r>
   1461c:	88c00217 	ldw	r3,8(r17)
   14620:	1c87883a 	add	r3,r3,r18
   14624:	10c00a26 	beq	r2,r3,14650 <_malloc_trim_r+0x98>
   14628:	8009883a 	mov	r4,r16
   1462c:	001a2100 	call	1a210 <__malloc_unlock>
   14630:	0005883a 	mov	r2,zero
   14634:	dfc00417 	ldw	ra,16(sp)
   14638:	dcc00317 	ldw	r19,12(sp)
   1463c:	dc800217 	ldw	r18,8(sp)
   14640:	dc400117 	ldw	r17,4(sp)
   14644:	dc000017 	ldw	r16,0(sp)
   14648:	dec00504 	addi	sp,sp,20
   1464c:	f800283a 	ret
   14650:	8009883a 	mov	r4,r16
   14654:	04cbc83a 	sub	r5,zero,r19
   14658:	00175600 	call	17560 <_sbrk_r>
   1465c:	00ffffc4 	movi	r3,-1
   14660:	10c01326 	beq	r2,r3,146b0 <_malloc_trim_r+0xf8>
   14664:	008000f4 	movhi	r2,3
   14668:	10a7c004 	addi	r2,r2,-24832
   1466c:	11000017 	ldw	r4,0(r2)
   14670:	88c00217 	ldw	r3,8(r17)
   14674:	94e5c83a 	sub	r18,r18,r19
   14678:	94800054 	ori	r18,r18,1
   1467c:	24e7c83a 	sub	r19,r4,r19
   14680:	1c800115 	stw	r18,4(r3)
   14684:	8009883a 	mov	r4,r16
   14688:	14c00015 	stw	r19,0(r2)
   1468c:	001a2100 	call	1a210 <__malloc_unlock>
   14690:	00800044 	movi	r2,1
   14694:	dfc00417 	ldw	ra,16(sp)
   14698:	dcc00317 	ldw	r19,12(sp)
   1469c:	dc800217 	ldw	r18,8(sp)
   146a0:	dc400117 	ldw	r17,4(sp)
   146a4:	dc000017 	ldw	r16,0(sp)
   146a8:	dec00504 	addi	sp,sp,20
   146ac:	f800283a 	ret
   146b0:	8009883a 	mov	r4,r16
   146b4:	000b883a 	mov	r5,zero
   146b8:	00175600 	call	17560 <_sbrk_r>
   146bc:	88c00217 	ldw	r3,8(r17)
   146c0:	014003c4 	movi	r5,15
   146c4:	10c9c83a 	sub	r4,r2,r3
   146c8:	293fd70e 	bge	r5,r4,14628 <_malloc_trim_r+0x70>
   146cc:	014000f4 	movhi	r5,3
   146d0:	2967a004 	addi	r5,r5,-24960
   146d4:	29400017 	ldw	r5,0(r5)
   146d8:	21000054 	ori	r4,r4,1
   146dc:	19000115 	stw	r4,4(r3)
   146e0:	1145c83a 	sub	r2,r2,r5
   146e4:	014000f4 	movhi	r5,3
   146e8:	2967c004 	addi	r5,r5,-24832
   146ec:	28800015 	stw	r2,0(r5)
   146f0:	003fcd06 	br	14628 <_malloc_trim_r+0x70>

000146f4 <_free_r>:
   146f4:	defffd04 	addi	sp,sp,-12
   146f8:	dc400115 	stw	r17,4(sp)
   146fc:	dc000015 	stw	r16,0(sp)
   14700:	dfc00215 	stw	ra,8(sp)
   14704:	2821883a 	mov	r16,r5
   14708:	2023883a 	mov	r17,r4
   1470c:	28004b26 	beq	r5,zero,1483c <_free_r+0x148>
   14710:	001a1f00 	call	1a1f0 <__malloc_lock>
   14714:	823fff17 	ldw	r8,-4(r16)
   14718:	00bfff84 	movi	r2,-2
   1471c:	81bffe04 	addi	r6,r16,-8
   14720:	4084703a 	and	r2,r8,r2
   14724:	3087883a 	add	r3,r6,r2
   14728:	014000f4 	movhi	r5,3
   1472c:	29621904 	addi	r5,r5,-30620
   14730:	1a400117 	ldw	r9,4(r3)
   14734:	29000217 	ldw	r4,8(r5)
   14738:	01ffff04 	movi	r7,-4
   1473c:	49ce703a 	and	r7,r9,r7
   14740:	20c06526 	beq	r4,r3,148d8 <_free_r+0x1e4>
   14744:	19c00115 	stw	r7,4(r3)
   14748:	4200004c 	andi	r8,r8,1
   1474c:	40003026 	beq	r8,zero,14810 <_free_r+0x11c>
   14750:	0009883a 	mov	r4,zero
   14754:	19d1883a 	add	r8,r3,r7
   14758:	42000117 	ldw	r8,4(r8)
   1475c:	4200004c 	andi	r8,r8,1
   14760:	4000061e 	bne	r8,zero,1477c <_free_r+0x88>
   14764:	11c5883a 	add	r2,r2,r7
   14768:	19c00217 	ldw	r7,8(r3)
   1476c:	20004e26 	beq	r4,zero,148a8 <_free_r+0x1b4>
   14770:	18c00317 	ldw	r3,12(r3)
   14774:	38c00315 	stw	r3,12(r7)
   14778:	19c00215 	stw	r7,8(r3)
   1477c:	11c00054 	ori	r7,r2,1
   14780:	3087883a 	add	r3,r6,r2
   14784:	31c00115 	stw	r7,4(r6)
   14788:	18800015 	stw	r2,0(r3)
   1478c:	20001a1e 	bne	r4,zero,147f8 <_free_r+0x104>
   14790:	00c07fc4 	movi	r3,511
   14794:	18802e2e 	bgeu	r3,r2,14850 <_free_r+0x15c>
   14798:	1006d27a 	srli	r3,r2,9
   1479c:	01000104 	movi	r4,4
   147a0:	20c06636 	bltu	r4,r3,1493c <_free_r+0x248>
   147a4:	1008d1ba 	srli	r4,r2,6
   147a8:	21000e04 	addi	r4,r4,56
   147ac:	210f883a 	add	r7,r4,r4
   147b0:	39cf883a 	add	r7,r7,r7
   147b4:	39cf883a 	add	r7,r7,r7
   147b8:	29cf883a 	add	r7,r5,r7
   147bc:	38c00217 	ldw	r3,8(r7)
   147c0:	014000f4 	movhi	r5,3
   147c4:	29621904 	addi	r5,r5,-30620
   147c8:	19c06126 	beq	r3,r7,14950 <_free_r+0x25c>
   147cc:	013fff04 	movi	r4,-4
   147d0:	19400117 	ldw	r5,4(r3)
   147d4:	290a703a 	and	r5,r5,r4
   147d8:	1140022e 	bgeu	r2,r5,147e4 <_free_r+0xf0>
   147dc:	18c00217 	ldw	r3,8(r3)
   147e0:	38fffb1e 	bne	r7,r3,147d0 <_free_r+0xdc>
   147e4:	18800317 	ldw	r2,12(r3)
   147e8:	30800315 	stw	r2,12(r6)
   147ec:	30c00215 	stw	r3,8(r6)
   147f0:	11800215 	stw	r6,8(r2)
   147f4:	19800315 	stw	r6,12(r3)
   147f8:	8809883a 	mov	r4,r17
   147fc:	dfc00217 	ldw	ra,8(sp)
   14800:	dc400117 	ldw	r17,4(sp)
   14804:	dc000017 	ldw	r16,0(sp)
   14808:	dec00304 	addi	sp,sp,12
   1480c:	001a2101 	jmpi	1a210 <__malloc_unlock>
   14810:	813ffe17 	ldw	r4,-8(r16)
   14814:	2a400204 	addi	r9,r5,8
   14818:	310dc83a 	sub	r6,r6,r4
   1481c:	32000217 	ldw	r8,8(r6)
   14820:	1105883a 	add	r2,r2,r4
   14824:	42404326 	beq	r8,r9,14934 <_free_r+0x240>
   14828:	32400317 	ldw	r9,12(r6)
   1482c:	0009883a 	mov	r4,zero
   14830:	42400315 	stw	r9,12(r8)
   14834:	4a000215 	stw	r8,8(r9)
   14838:	003fc606 	br	14754 <_free_r+0x60>
   1483c:	dfc00217 	ldw	ra,8(sp)
   14840:	dc400117 	ldw	r17,4(sp)
   14844:	dc000017 	ldw	r16,0(sp)
   14848:	dec00304 	addi	sp,sp,12
   1484c:	f800283a 	ret
   14850:	1004d0fa 	srli	r2,r2,3
   14854:	02000044 	movi	r8,1
   14858:	29c00117 	ldw	r7,4(r5)
   1485c:	1087883a 	add	r3,r2,r2
   14860:	18c7883a 	add	r3,r3,r3
   14864:	1005d0ba 	srai	r2,r2,2
   14868:	18c7883a 	add	r3,r3,r3
   1486c:	28c7883a 	add	r3,r5,r3
   14870:	19000217 	ldw	r4,8(r3)
   14874:	4084983a 	sll	r2,r8,r2
   14878:	30c00315 	stw	r3,12(r6)
   1487c:	31000215 	stw	r4,8(r6)
   14880:	11c4b03a 	or	r2,r2,r7
   14884:	21800315 	stw	r6,12(r4)
   14888:	8809883a 	mov	r4,r17
   1488c:	28800115 	stw	r2,4(r5)
   14890:	19800215 	stw	r6,8(r3)
   14894:	dfc00217 	ldw	ra,8(sp)
   14898:	dc400117 	ldw	r17,4(sp)
   1489c:	dc000017 	ldw	r16,0(sp)
   148a0:	dec00304 	addi	sp,sp,12
   148a4:	001a2101 	jmpi	1a210 <__malloc_unlock>
   148a8:	020000f4 	movhi	r8,3
   148ac:	42221b04 	addi	r8,r8,-30612
   148b0:	3a3faf1e 	bne	r7,r8,14770 <_free_r+0x7c>
   148b4:	29800515 	stw	r6,20(r5)
   148b8:	29800415 	stw	r6,16(r5)
   148bc:	11000054 	ori	r4,r2,1
   148c0:	3087883a 	add	r3,r6,r2
   148c4:	31c00315 	stw	r7,12(r6)
   148c8:	31c00215 	stw	r7,8(r6)
   148cc:	31000115 	stw	r4,4(r6)
   148d0:	18800015 	stw	r2,0(r3)
   148d4:	003fc806 	br	147f8 <_free_r+0x104>
   148d8:	4200004c 	andi	r8,r8,1
   148dc:	3885883a 	add	r2,r7,r2
   148e0:	4000071e 	bne	r8,zero,14900 <_free_r+0x20c>
   148e4:	81fffe17 	ldw	r7,-8(r16)
   148e8:	31cdc83a 	sub	r6,r6,r7
   148ec:	30c00317 	ldw	r3,12(r6)
   148f0:	31000217 	ldw	r4,8(r6)
   148f4:	11c5883a 	add	r2,r2,r7
   148f8:	20c00315 	stw	r3,12(r4)
   148fc:	19000215 	stw	r4,8(r3)
   14900:	00c000f4 	movhi	r3,3
   14904:	18e7a104 	addi	r3,r3,-24956
   14908:	18c00017 	ldw	r3,0(r3)
   1490c:	11000054 	ori	r4,r2,1
   14910:	31000115 	stw	r4,4(r6)
   14914:	29800215 	stw	r6,8(r5)
   14918:	10ffb736 	bltu	r2,r3,147f8 <_free_r+0x104>
   1491c:	008000f4 	movhi	r2,3
   14920:	10a7b604 	addi	r2,r2,-24872
   14924:	11400017 	ldw	r5,0(r2)
   14928:	8809883a 	mov	r4,r17
   1492c:	00145b80 	call	145b8 <_malloc_trim_r>
   14930:	003fb106 	br	147f8 <_free_r+0x104>
   14934:	01000044 	movi	r4,1
   14938:	003f8606 	br	14754 <_free_r+0x60>
   1493c:	01000504 	movi	r4,20
   14940:	20c00b36 	bltu	r4,r3,14970 <_free_r+0x27c>
   14944:	190016c4 	addi	r4,r3,91
   14948:	210f883a 	add	r7,r4,r4
   1494c:	003f9806 	br	147b0 <_free_r+0xbc>
   14950:	2009d0ba 	srai	r4,r4,2
   14954:	00800044 	movi	r2,1
   14958:	29c00117 	ldw	r7,4(r5)
   1495c:	1108983a 	sll	r4,r2,r4
   14960:	1805883a 	mov	r2,r3
   14964:	21c8b03a 	or	r4,r4,r7
   14968:	29000115 	stw	r4,4(r5)
   1496c:	003f9e06 	br	147e8 <_free_r+0xf4>
   14970:	01001504 	movi	r4,84
   14974:	20c00436 	bltu	r4,r3,14988 <_free_r+0x294>
   14978:	1008d33a 	srli	r4,r2,12
   1497c:	21001b84 	addi	r4,r4,110
   14980:	210f883a 	add	r7,r4,r4
   14984:	003f8a06 	br	147b0 <_free_r+0xbc>
   14988:	01005504 	movi	r4,340
   1498c:	20c00436 	bltu	r4,r3,149a0 <_free_r+0x2ac>
   14990:	1008d3fa 	srli	r4,r2,15
   14994:	21001dc4 	addi	r4,r4,119
   14998:	210f883a 	add	r7,r4,r4
   1499c:	003f8406 	br	147b0 <_free_r+0xbc>
   149a0:	01015504 	movi	r4,1364
   149a4:	20c00436 	bltu	r4,r3,149b8 <_free_r+0x2c4>
   149a8:	1008d4ba 	srli	r4,r2,18
   149ac:	21001f04 	addi	r4,r4,124
   149b0:	210f883a 	add	r7,r4,r4
   149b4:	003f7e06 	br	147b0 <_free_r+0xbc>
   149b8:	01c03f04 	movi	r7,252
   149bc:	01001f84 	movi	r4,126
   149c0:	003f7b06 	br	147b0 <_free_r+0xbc>

000149c4 <__sfvwrite_r>:
   149c4:	30800217 	ldw	r2,8(r6)
   149c8:	defff504 	addi	sp,sp,-44
   149cc:	dd400615 	stw	r21,24(sp)
   149d0:	dd000515 	stw	r20,20(sp)
   149d4:	dc000115 	stw	r16,4(sp)
   149d8:	dfc00a15 	stw	ra,40(sp)
   149dc:	df000915 	stw	fp,36(sp)
   149e0:	ddc00815 	stw	r23,32(sp)
   149e4:	dd800715 	stw	r22,28(sp)
   149e8:	dcc00415 	stw	r19,16(sp)
   149ec:	dc800315 	stw	r18,12(sp)
   149f0:	dc400215 	stw	r17,8(sp)
   149f4:	3029883a 	mov	r20,r6
   149f8:	202b883a 	mov	r21,r4
   149fc:	2821883a 	mov	r16,r5
   14a00:	10002126 	beq	r2,zero,14a88 <__sfvwrite_r+0xc4>
   14a04:	2880030b 	ldhu	r2,12(r5)
   14a08:	10c0020c 	andi	r3,r2,8
   14a0c:	18ffffcc 	andi	r3,r3,65535
   14a10:	18e0001c 	xori	r3,r3,32768
   14a14:	18e00004 	addi	r3,r3,-32768
   14a18:	18002826 	beq	r3,zero,14abc <__sfvwrite_r+0xf8>
   14a1c:	28c00417 	ldw	r3,16(r5)
   14a20:	18002626 	beq	r3,zero,14abc <__sfvwrite_r+0xf8>
   14a24:	10c0008c 	andi	r3,r2,2
   14a28:	18ffffcc 	andi	r3,r3,65535
   14a2c:	18e0001c 	xori	r3,r3,32768
   14a30:	18e00004 	addi	r3,r3,-32768
   14a34:	a4400017 	ldw	r17,0(r20)
   14a38:	18002b26 	beq	r3,zero,14ae8 <__sfvwrite_r+0x124>
   14a3c:	0027883a 	mov	r19,zero
   14a40:	0025883a 	mov	r18,zero
   14a44:	05810004 	movi	r22,1024
   14a48:	980d883a 	mov	r6,r19
   14a4c:	a809883a 	mov	r4,r21
   14a50:	90004f26 	beq	r18,zero,14b90 <__sfvwrite_r+0x1cc>
   14a54:	900f883a 	mov	r7,r18
   14a58:	81400717 	ldw	r5,28(r16)
   14a5c:	b480012e 	bgeu	r22,r18,14a64 <__sfvwrite_r+0xa0>
   14a60:	01c10004 	movi	r7,1024
   14a64:	80800917 	ldw	r2,36(r16)
   14a68:	103ee83a 	callr	r2
   14a6c:	0080540e 	bge	zero,r2,14bc0 <__sfvwrite_r+0x1fc>
   14a70:	a0c00217 	ldw	r3,8(r20)
   14a74:	98a7883a 	add	r19,r19,r2
   14a78:	90a5c83a 	sub	r18,r18,r2
   14a7c:	1885c83a 	sub	r2,r3,r2
   14a80:	a0800215 	stw	r2,8(r20)
   14a84:	103ff01e 	bne	r2,zero,14a48 <__sfvwrite_r+0x84>
   14a88:	0005883a 	mov	r2,zero
   14a8c:	dfc00a17 	ldw	ra,40(sp)
   14a90:	df000917 	ldw	fp,36(sp)
   14a94:	ddc00817 	ldw	r23,32(sp)
   14a98:	dd800717 	ldw	r22,28(sp)
   14a9c:	dd400617 	ldw	r21,24(sp)
   14aa0:	dd000517 	ldw	r20,20(sp)
   14aa4:	dcc00417 	ldw	r19,16(sp)
   14aa8:	dc800317 	ldw	r18,12(sp)
   14aac:	dc400217 	ldw	r17,8(sp)
   14ab0:	dc000117 	ldw	r16,4(sp)
   14ab4:	dec00b04 	addi	sp,sp,44
   14ab8:	f800283a 	ret
   14abc:	a809883a 	mov	r4,r21
   14ac0:	800b883a 	mov	r5,r16
   14ac4:	00126e80 	call	126e8 <__swsetup_r>
   14ac8:	1000f01e 	bne	r2,zero,14e8c <__sfvwrite_r+0x4c8>
   14acc:	8080030b 	ldhu	r2,12(r16)
   14ad0:	a4400017 	ldw	r17,0(r20)
   14ad4:	10c0008c 	andi	r3,r2,2
   14ad8:	18ffffcc 	andi	r3,r3,65535
   14adc:	18e0001c 	xori	r3,r3,32768
   14ae0:	18e00004 	addi	r3,r3,-32768
   14ae4:	183fd51e 	bne	r3,zero,14a3c <__sfvwrite_r+0x78>
   14ae8:	10c0004c 	andi	r3,r2,1
   14aec:	002d883a 	mov	r22,zero
   14af0:	1800381e 	bne	r3,zero,14bd4 <__sfvwrite_r+0x210>
   14af4:	0025883a 	mov	r18,zero
   14af8:	90002126 	beq	r18,zero,14b80 <__sfvwrite_r+0x1bc>
   14afc:	10c0800c 	andi	r3,r2,512
   14b00:	18ffffcc 	andi	r3,r3,65535
   14b04:	18e0001c 	xori	r3,r3,32768
   14b08:	18e00004 	addi	r3,r3,-32768
   14b0c:	84c00217 	ldw	r19,8(r16)
   14b10:	18006b26 	beq	r3,zero,14cc0 <__sfvwrite_r+0x2fc>
   14b14:	980f883a 	mov	r7,r19
   14b18:	94c08636 	bltu	r18,r19,14d34 <__sfvwrite_r+0x370>
   14b1c:	10c1200c 	andi	r3,r2,1152
   14b20:	18009f1e 	bne	r3,zero,14da0 <__sfvwrite_r+0x3dc>
   14b24:	81000017 	ldw	r4,0(r16)
   14b28:	982f883a 	mov	r23,r19
   14b2c:	9039883a 	mov	fp,r18
   14b30:	9027883a 	mov	r19,r18
   14b34:	380d883a 	mov	r6,r7
   14b38:	b00b883a 	mov	r5,r22
   14b3c:	d9c00015 	stw	r7,0(sp)
   14b40:	0015c480 	call	15c48 <memmove>
   14b44:	d9c00017 	ldw	r7,0(sp)
   14b48:	81000217 	ldw	r4,8(r16)
   14b4c:	80800017 	ldw	r2,0(r16)
   14b50:	25efc83a 	sub	r23,r4,r23
   14b54:	11cf883a 	add	r7,r2,r7
   14b58:	85c00215 	stw	r23,8(r16)
   14b5c:	81c00015 	stw	r7,0(r16)
   14b60:	a0800217 	ldw	r2,8(r20)
   14b64:	b72d883a 	add	r22,r22,fp
   14b68:	9725c83a 	sub	r18,r18,fp
   14b6c:	14e7c83a 	sub	r19,r2,r19
   14b70:	a4c00215 	stw	r19,8(r20)
   14b74:	983fc426 	beq	r19,zero,14a88 <__sfvwrite_r+0xc4>
   14b78:	8080030b 	ldhu	r2,12(r16)
   14b7c:	903fdf1e 	bne	r18,zero,14afc <__sfvwrite_r+0x138>
   14b80:	8d800017 	ldw	r22,0(r17)
   14b84:	8c800117 	ldw	r18,4(r17)
   14b88:	8c400204 	addi	r17,r17,8
   14b8c:	003fda06 	br	14af8 <__sfvwrite_r+0x134>
   14b90:	8cc00017 	ldw	r19,0(r17)
   14b94:	8c800117 	ldw	r18,4(r17)
   14b98:	8c400204 	addi	r17,r17,8
   14b9c:	003faa06 	br	14a48 <__sfvwrite_r+0x84>
   14ba0:	0016f000 	call	16f00 <_realloc_r>
   14ba4:	102f883a 	mov	r23,r2
   14ba8:	10009f1e 	bne	r2,zero,14e28 <__sfvwrite_r+0x464>
   14bac:	81400417 	ldw	r5,16(r16)
   14bb0:	a809883a 	mov	r4,r21
   14bb4:	00146f40 	call	146f4 <_free_r>
   14bb8:	00800304 	movi	r2,12
   14bbc:	a8800015 	stw	r2,0(r21)
   14bc0:	80c0030b 	ldhu	r3,12(r16)
   14bc4:	00bfffc4 	movi	r2,-1
   14bc8:	18c01014 	ori	r3,r3,64
   14bcc:	80c0030d 	sth	r3,12(r16)
   14bd0:	003fae06 	br	14a8c <__sfvwrite_r+0xc8>
   14bd4:	0007883a 	mov	r3,zero
   14bd8:	0039883a 	mov	fp,zero
   14bdc:	0025883a 	mov	r18,zero
   14be0:	90001e26 	beq	r18,zero,14c5c <__sfvwrite_r+0x298>
   14be4:	18006526 	beq	r3,zero,14d7c <__sfvwrite_r+0x3b8>
   14be8:	b02f883a 	mov	r23,r22
   14bec:	9580012e 	bgeu	r18,r22,14bf4 <__sfvwrite_r+0x230>
   14bf0:	902f883a 	mov	r23,r18
   14bf4:	81000017 	ldw	r4,0(r16)
   14bf8:	80800417 	ldw	r2,16(r16)
   14bfc:	84c00217 	ldw	r19,8(r16)
   14c00:	81c00517 	ldw	r7,20(r16)
   14c04:	1100022e 	bgeu	r2,r4,14c10 <__sfvwrite_r+0x24c>
   14c08:	99e7883a 	add	r19,r19,r7
   14c0c:	9dc01816 	blt	r19,r23,14c70 <__sfvwrite_r+0x2ac>
   14c10:	b9c03b16 	blt	r23,r7,14d00 <__sfvwrite_r+0x33c>
   14c14:	80800917 	ldw	r2,36(r16)
   14c18:	81400717 	ldw	r5,28(r16)
   14c1c:	a809883a 	mov	r4,r21
   14c20:	d8c00015 	stw	r3,0(sp)
   14c24:	e00d883a 	mov	r6,fp
   14c28:	103ee83a 	callr	r2
   14c2c:	1027883a 	mov	r19,r2
   14c30:	d8c00017 	ldw	r3,0(sp)
   14c34:	00bfe20e 	bge	zero,r2,14bc0 <__sfvwrite_r+0x1fc>
   14c38:	b4edc83a 	sub	r22,r22,r19
   14c3c:	b0001a26 	beq	r22,zero,14ca8 <__sfvwrite_r+0x2e4>
   14c40:	a0800217 	ldw	r2,8(r20)
   14c44:	e4f9883a 	add	fp,fp,r19
   14c48:	94e5c83a 	sub	r18,r18,r19
   14c4c:	14e7c83a 	sub	r19,r2,r19
   14c50:	a4c00215 	stw	r19,8(r20)
   14c54:	983f8c26 	beq	r19,zero,14a88 <__sfvwrite_r+0xc4>
   14c58:	903fe21e 	bne	r18,zero,14be4 <__sfvwrite_r+0x220>
   14c5c:	8f000017 	ldw	fp,0(r17)
   14c60:	8c800117 	ldw	r18,4(r17)
   14c64:	0007883a 	mov	r3,zero
   14c68:	8c400204 	addi	r17,r17,8
   14c6c:	003fdc06 	br	14be0 <__sfvwrite_r+0x21c>
   14c70:	e00b883a 	mov	r5,fp
   14c74:	980d883a 	mov	r6,r19
   14c78:	d8c00015 	stw	r3,0(sp)
   14c7c:	0015c480 	call	15c48 <memmove>
   14c80:	80800017 	ldw	r2,0(r16)
   14c84:	a809883a 	mov	r4,r21
   14c88:	800b883a 	mov	r5,r16
   14c8c:	14c5883a 	add	r2,r2,r19
   14c90:	80800015 	stw	r2,0(r16)
   14c94:	00140b40 	call	140b4 <_fflush_r>
   14c98:	d8c00017 	ldw	r3,0(sp)
   14c9c:	103fc81e 	bne	r2,zero,14bc0 <__sfvwrite_r+0x1fc>
   14ca0:	b4edc83a 	sub	r22,r22,r19
   14ca4:	b03fe61e 	bne	r22,zero,14c40 <__sfvwrite_r+0x27c>
   14ca8:	a809883a 	mov	r4,r21
   14cac:	800b883a 	mov	r5,r16
   14cb0:	00140b40 	call	140b4 <_fflush_r>
   14cb4:	103fc21e 	bne	r2,zero,14bc0 <__sfvwrite_r+0x1fc>
   14cb8:	0007883a 	mov	r3,zero
   14cbc:	003fe006 	br	14c40 <__sfvwrite_r+0x27c>
   14cc0:	81000017 	ldw	r4,0(r16)
   14cc4:	80800417 	ldw	r2,16(r16)
   14cc8:	1100022e 	bgeu	r2,r4,14cd4 <__sfvwrite_r+0x310>
   14ccc:	9839883a 	mov	fp,r19
   14cd0:	9c806036 	bltu	r19,r18,14e54 <__sfvwrite_r+0x490>
   14cd4:	81c00517 	ldw	r7,20(r16)
   14cd8:	91c01c36 	bltu	r18,r7,14d4c <__sfvwrite_r+0x388>
   14cdc:	80800917 	ldw	r2,36(r16)
   14ce0:	81400717 	ldw	r5,28(r16)
   14ce4:	a809883a 	mov	r4,r21
   14ce8:	b00d883a 	mov	r6,r22
   14cec:	103ee83a 	callr	r2
   14cf0:	1027883a 	mov	r19,r2
   14cf4:	00bfb20e 	bge	zero,r2,14bc0 <__sfvwrite_r+0x1fc>
   14cf8:	1039883a 	mov	fp,r2
   14cfc:	003f9806 	br	14b60 <__sfvwrite_r+0x19c>
   14d00:	b80d883a 	mov	r6,r23
   14d04:	e00b883a 	mov	r5,fp
   14d08:	d8c00015 	stw	r3,0(sp)
   14d0c:	0015c480 	call	15c48 <memmove>
   14d10:	80800217 	ldw	r2,8(r16)
   14d14:	81000017 	ldw	r4,0(r16)
   14d18:	b827883a 	mov	r19,r23
   14d1c:	15c5c83a 	sub	r2,r2,r23
   14d20:	25ef883a 	add	r23,r4,r23
   14d24:	80800215 	stw	r2,8(r16)
   14d28:	85c00015 	stw	r23,0(r16)
   14d2c:	d8c00017 	ldw	r3,0(sp)
   14d30:	003fc106 	br	14c38 <__sfvwrite_r+0x274>
   14d34:	81000017 	ldw	r4,0(r16)
   14d38:	902f883a 	mov	r23,r18
   14d3c:	9039883a 	mov	fp,r18
   14d40:	9027883a 	mov	r19,r18
   14d44:	900f883a 	mov	r7,r18
   14d48:	003f7a06 	br	14b34 <__sfvwrite_r+0x170>
   14d4c:	b00b883a 	mov	r5,r22
   14d50:	900d883a 	mov	r6,r18
   14d54:	0015c480 	call	15c48 <memmove>
   14d58:	80c00217 	ldw	r3,8(r16)
   14d5c:	80800017 	ldw	r2,0(r16)
   14d60:	9027883a 	mov	r19,r18
   14d64:	1c87c83a 	sub	r3,r3,r18
   14d68:	1485883a 	add	r2,r2,r18
   14d6c:	80c00215 	stw	r3,8(r16)
   14d70:	80800015 	stw	r2,0(r16)
   14d74:	9039883a 	mov	fp,r18
   14d78:	003f7906 	br	14b60 <__sfvwrite_r+0x19c>
   14d7c:	e009883a 	mov	r4,fp
   14d80:	01400284 	movi	r5,10
   14d84:	900d883a 	mov	r6,r18
   14d88:	0015a100 	call	15a10 <memchr>
   14d8c:	10003c26 	beq	r2,zero,14e80 <__sfvwrite_r+0x4bc>
   14d90:	15800044 	addi	r22,r2,1
   14d94:	b72dc83a 	sub	r22,r22,fp
   14d98:	00c00044 	movi	r3,1
   14d9c:	003f9206 	br	14be8 <__sfvwrite_r+0x224>
   14da0:	81000517 	ldw	r4,20(r16)
   14da4:	81400417 	ldw	r5,16(r16)
   14da8:	80c00017 	ldw	r3,0(r16)
   14dac:	210d883a 	add	r6,r4,r4
   14db0:	3109883a 	add	r4,r6,r4
   14db4:	2026d7fa 	srli	r19,r4,31
   14db8:	1979c83a 	sub	fp,r3,r5
   14dbc:	e1800044 	addi	r6,fp,1
   14dc0:	9909883a 	add	r4,r19,r4
   14dc4:	2027d07a 	srai	r19,r4,1
   14dc8:	3489883a 	add	r4,r6,r18
   14dcc:	980d883a 	mov	r6,r19
   14dd0:	9900022e 	bgeu	r19,r4,14ddc <__sfvwrite_r+0x418>
   14dd4:	2027883a 	mov	r19,r4
   14dd8:	200d883a 	mov	r6,r4
   14ddc:	1081000c 	andi	r2,r2,1024
   14de0:	10bfffcc 	andi	r2,r2,65535
   14de4:	10a0001c 	xori	r2,r2,32768
   14de8:	10a00004 	addi	r2,r2,-32768
   14dec:	a809883a 	mov	r4,r21
   14df0:	103f6b26 	beq	r2,zero,14ba0 <__sfvwrite_r+0x1dc>
   14df4:	300b883a 	mov	r5,r6
   14df8:	001528c0 	call	1528c <_malloc_r>
   14dfc:	102f883a 	mov	r23,r2
   14e00:	103f6d26 	beq	r2,zero,14bb8 <__sfvwrite_r+0x1f4>
   14e04:	81400417 	ldw	r5,16(r16)
   14e08:	1009883a 	mov	r4,r2
   14e0c:	e00d883a 	mov	r6,fp
   14e10:	0015b080 	call	15b08 <memcpy>
   14e14:	8080030b 	ldhu	r2,12(r16)
   14e18:	00fedfc4 	movi	r3,-1153
   14e1c:	10c4703a 	and	r2,r2,r3
   14e20:	10802014 	ori	r2,r2,128
   14e24:	8080030d 	sth	r2,12(r16)
   14e28:	bf09883a 	add	r4,r23,fp
   14e2c:	9f07c83a 	sub	r3,r19,fp
   14e30:	85c00415 	stw	r23,16(r16)
   14e34:	84c00515 	stw	r19,20(r16)
   14e38:	81000015 	stw	r4,0(r16)
   14e3c:	902f883a 	mov	r23,r18
   14e40:	80c00215 	stw	r3,8(r16)
   14e44:	9039883a 	mov	fp,r18
   14e48:	9027883a 	mov	r19,r18
   14e4c:	900f883a 	mov	r7,r18
   14e50:	003f3806 	br	14b34 <__sfvwrite_r+0x170>
   14e54:	b00b883a 	mov	r5,r22
   14e58:	980d883a 	mov	r6,r19
   14e5c:	0015c480 	call	15c48 <memmove>
   14e60:	80800017 	ldw	r2,0(r16)
   14e64:	a809883a 	mov	r4,r21
   14e68:	800b883a 	mov	r5,r16
   14e6c:	14c5883a 	add	r2,r2,r19
   14e70:	80800015 	stw	r2,0(r16)
   14e74:	00140b40 	call	140b4 <_fflush_r>
   14e78:	103f3926 	beq	r2,zero,14b60 <__sfvwrite_r+0x19c>
   14e7c:	003f5006 	br	14bc0 <__sfvwrite_r+0x1fc>
   14e80:	95800044 	addi	r22,r18,1
   14e84:	00c00044 	movi	r3,1
   14e88:	003f5706 	br	14be8 <__sfvwrite_r+0x224>
   14e8c:	80c0030b 	ldhu	r3,12(r16)
   14e90:	00bfffc4 	movi	r2,-1
   14e94:	18c01014 	ori	r3,r3,64
   14e98:	80c0030d 	sth	r3,12(r16)
   14e9c:	00c00244 	movi	r3,9
   14ea0:	a8c00015 	stw	r3,0(r21)
   14ea4:	003ef906 	br	14a8c <__sfvwrite_r+0xc8>

00014ea8 <_fwalk>:
   14ea8:	defff904 	addi	sp,sp,-28
   14eac:	dcc00315 	stw	r19,12(sp)
   14eb0:	24c0b804 	addi	r19,r4,736
   14eb4:	dd400515 	stw	r21,20(sp)
   14eb8:	dd000415 	stw	r20,16(sp)
   14ebc:	dfc00615 	stw	ra,24(sp)
   14ec0:	dc800215 	stw	r18,8(sp)
   14ec4:	dc400115 	stw	r17,4(sp)
   14ec8:	dc000015 	stw	r16,0(sp)
   14ecc:	282b883a 	mov	r21,r5
   14ed0:	0029883a 	mov	r20,zero
   14ed4:	00145780 	call	14578 <__sfp_lock_acquire>
   14ed8:	98001226 	beq	r19,zero,14f24 <_fwalk+0x7c>
   14edc:	04bfffc4 	movi	r18,-1
   14ee0:	9c400117 	ldw	r17,4(r19)
   14ee4:	9c000217 	ldw	r16,8(r19)
   14ee8:	8c7fffc4 	addi	r17,r17,-1
   14eec:	88000b16 	blt	r17,zero,14f1c <_fwalk+0x74>
   14ef0:	84000304 	addi	r16,r16,12
   14ef4:	80c0000f 	ldh	r3,0(r16)
   14ef8:	8c7fffc4 	addi	r17,r17,-1
   14efc:	813ffd04 	addi	r4,r16,-12
   14f00:	18000426 	beq	r3,zero,14f14 <_fwalk+0x6c>
   14f04:	80c0008f 	ldh	r3,2(r16)
   14f08:	1c800226 	beq	r3,r18,14f14 <_fwalk+0x6c>
   14f0c:	a83ee83a 	callr	r21
   14f10:	a0a8b03a 	or	r20,r20,r2
   14f14:	84001704 	addi	r16,r16,92
   14f18:	8cbff61e 	bne	r17,r18,14ef4 <_fwalk+0x4c>
   14f1c:	9cc00017 	ldw	r19,0(r19)
   14f20:	983fef1e 	bne	r19,zero,14ee0 <_fwalk+0x38>
   14f24:	001457c0 	call	1457c <__sfp_lock_release>
   14f28:	a005883a 	mov	r2,r20
   14f2c:	dfc00617 	ldw	ra,24(sp)
   14f30:	dd400517 	ldw	r21,20(sp)
   14f34:	dd000417 	ldw	r20,16(sp)
   14f38:	dcc00317 	ldw	r19,12(sp)
   14f3c:	dc800217 	ldw	r18,8(sp)
   14f40:	dc400117 	ldw	r17,4(sp)
   14f44:	dc000017 	ldw	r16,0(sp)
   14f48:	dec00704 	addi	sp,sp,28
   14f4c:	f800283a 	ret

00014f50 <_fwalk_reent>:
   14f50:	defff804 	addi	sp,sp,-32
   14f54:	dcc00315 	stw	r19,12(sp)
   14f58:	24c0b804 	addi	r19,r4,736
   14f5c:	dd800615 	stw	r22,24(sp)
   14f60:	dd400515 	stw	r21,20(sp)
   14f64:	dd000415 	stw	r20,16(sp)
   14f68:	dfc00715 	stw	ra,28(sp)
   14f6c:	dc800215 	stw	r18,8(sp)
   14f70:	dc400115 	stw	r17,4(sp)
   14f74:	dc000015 	stw	r16,0(sp)
   14f78:	2029883a 	mov	r20,r4
   14f7c:	282b883a 	mov	r21,r5
   14f80:	002d883a 	mov	r22,zero
   14f84:	00145780 	call	14578 <__sfp_lock_acquire>
   14f88:	98001326 	beq	r19,zero,14fd8 <_fwalk_reent+0x88>
   14f8c:	04bfffc4 	movi	r18,-1
   14f90:	9c400117 	ldw	r17,4(r19)
   14f94:	9c000217 	ldw	r16,8(r19)
   14f98:	8c7fffc4 	addi	r17,r17,-1
   14f9c:	88000c16 	blt	r17,zero,14fd0 <_fwalk_reent+0x80>
   14fa0:	84000304 	addi	r16,r16,12
   14fa4:	80c0000f 	ldh	r3,0(r16)
   14fa8:	8c7fffc4 	addi	r17,r17,-1
   14fac:	817ffd04 	addi	r5,r16,-12
   14fb0:	18000526 	beq	r3,zero,14fc8 <_fwalk_reent+0x78>
   14fb4:	80c0008f 	ldh	r3,2(r16)
   14fb8:	a009883a 	mov	r4,r20
   14fbc:	1c800226 	beq	r3,r18,14fc8 <_fwalk_reent+0x78>
   14fc0:	a83ee83a 	callr	r21
   14fc4:	b0acb03a 	or	r22,r22,r2
   14fc8:	84001704 	addi	r16,r16,92
   14fcc:	8cbff51e 	bne	r17,r18,14fa4 <_fwalk_reent+0x54>
   14fd0:	9cc00017 	ldw	r19,0(r19)
   14fd4:	983fee1e 	bne	r19,zero,14f90 <_fwalk_reent+0x40>
   14fd8:	001457c0 	call	1457c <__sfp_lock_release>
   14fdc:	b005883a 	mov	r2,r22
   14fe0:	dfc00717 	ldw	ra,28(sp)
   14fe4:	dd800617 	ldw	r22,24(sp)
   14fe8:	dd400517 	ldw	r21,20(sp)
   14fec:	dd000417 	ldw	r20,16(sp)
   14ff0:	dcc00317 	ldw	r19,12(sp)
   14ff4:	dc800217 	ldw	r18,8(sp)
   14ff8:	dc400117 	ldw	r17,4(sp)
   14ffc:	dc000017 	ldw	r16,0(sp)
   15000:	dec00804 	addi	sp,sp,32
   15004:	f800283a 	ret

00015008 <_setlocale_r>:
   15008:	defffc04 	addi	sp,sp,-16
   1500c:	dc800215 	stw	r18,8(sp)
   15010:	dc400115 	stw	r17,4(sp)
   15014:	dc000015 	stw	r16,0(sp)
   15018:	dfc00315 	stw	ra,12(sp)
   1501c:	3021883a 	mov	r16,r6
   15020:	2023883a 	mov	r17,r4
   15024:	2825883a 	mov	r18,r5
   15028:	30001626 	beq	r6,zero,15084 <_setlocale_r+0x7c>
   1502c:	3009883a 	mov	r4,r6
   15030:	014000f4 	movhi	r5,3
   15034:	29606a04 	addi	r5,r5,-32344
   15038:	00177040 	call	17704 <strcmp>
   1503c:	10000a1e 	bne	r2,zero,15068 <_setlocale_r+0x60>
   15040:	8c800c15 	stw	r18,48(r17)
   15044:	8c000d15 	stw	r16,52(r17)
   15048:	008000f4 	movhi	r2,3
   1504c:	10a06a04 	addi	r2,r2,-32344
   15050:	dfc00317 	ldw	ra,12(sp)
   15054:	dc800217 	ldw	r18,8(sp)
   15058:	dc400117 	ldw	r17,4(sp)
   1505c:	dc000017 	ldw	r16,0(sp)
   15060:	dec00404 	addi	sp,sp,16
   15064:	f800283a 	ret
   15068:	8009883a 	mov	r4,r16
   1506c:	014000f4 	movhi	r5,3
   15070:	29605504 	addi	r5,r5,-32428
   15074:	00177040 	call	17704 <strcmp>
   15078:	103ff126 	beq	r2,zero,15040 <_setlocale_r+0x38>
   1507c:	0005883a 	mov	r2,zero
   15080:	003ff306 	br	15050 <_setlocale_r+0x48>
   15084:	008000f4 	movhi	r2,3
   15088:	10a06a04 	addi	r2,r2,-32344
   1508c:	dfc00317 	ldw	ra,12(sp)
   15090:	dc800217 	ldw	r18,8(sp)
   15094:	dc400117 	ldw	r17,4(sp)
   15098:	dc000017 	ldw	r16,0(sp)
   1509c:	dec00404 	addi	sp,sp,16
   150a0:	f800283a 	ret

000150a4 <__locale_charset>:
   150a4:	008000f4 	movhi	r2,3
   150a8:	10a06b04 	addi	r2,r2,-32340
   150ac:	f800283a 	ret

000150b0 <_localeconv_r>:
   150b0:	008000f4 	movhi	r2,3
   150b4:	10a06f04 	addi	r2,r2,-32324
   150b8:	f800283a 	ret

000150bc <setlocale>:
   150bc:	00c000f4 	movhi	r3,3
   150c0:	18e79e04 	addi	r3,r3,-24968
   150c4:	2005883a 	mov	r2,r4
   150c8:	19000017 	ldw	r4,0(r3)
   150cc:	280d883a 	mov	r6,r5
   150d0:	100b883a 	mov	r5,r2
   150d4:	00150081 	jmpi	15008 <_setlocale_r>

000150d8 <localeconv>:
   150d8:	008000f4 	movhi	r2,3
   150dc:	10a06f04 	addi	r2,r2,-32324
   150e0:	f800283a 	ret

000150e4 <__smakebuf_r>:
   150e4:	2880030b 	ldhu	r2,12(r5)
   150e8:	deffed04 	addi	sp,sp,-76
   150ec:	dc401015 	stw	r17,64(sp)
   150f0:	10c0008c 	andi	r3,r2,2
   150f4:	18ffffcc 	andi	r3,r3,65535
   150f8:	18e0001c 	xori	r3,r3,32768
   150fc:	dc000f15 	stw	r16,60(sp)
   15100:	dfc01215 	stw	ra,72(sp)
   15104:	dc801115 	stw	r18,68(sp)
   15108:	18e00004 	addi	r3,r3,-32768
   1510c:	2821883a 	mov	r16,r5
   15110:	2023883a 	mov	r17,r4
   15114:	1800381e 	bne	r3,zero,151f8 <__smakebuf_r+0x114>
   15118:	2940038f 	ldh	r5,14(r5)
   1511c:	28002d16 	blt	r5,zero,151d4 <__smakebuf_r+0xf0>
   15120:	d80d883a 	mov	r6,sp
   15124:	0017a940 	call	17a94 <_fstat_r>
   15128:	10002916 	blt	r2,zero,151d0 <__smakebuf_r+0xec>
   1512c:	d8800117 	ldw	r2,4(sp)
   15130:	00e00014 	movui	r3,32768
   15134:	10bc000c 	andi	r2,r2,61440
   15138:	10c03c26 	beq	r2,r3,1522c <__smakebuf_r+0x148>
   1513c:	80c0030b 	ldhu	r3,12(r16)
   15140:	18c20014 	ori	r3,r3,2048
   15144:	80c0030d 	sth	r3,12(r16)
   15148:	00c80004 	movi	r3,8192
   1514c:	10c00c1e 	bne	r2,r3,15180 <__smakebuf_r+0x9c>
   15150:	8140038f 	ldh	r5,14(r16)
   15154:	8809883a 	mov	r4,r17
   15158:	0017afc0 	call	17afc <_isatty_r>
   1515c:	10000826 	beq	r2,zero,15180 <__smakebuf_r+0x9c>
   15160:	80c0030b 	ldhu	r3,12(r16)
   15164:	808010c4 	addi	r2,r16,67
   15168:	80800015 	stw	r2,0(r16)
   1516c:	18c00054 	ori	r3,r3,1
   15170:	80800415 	stw	r2,16(r16)
   15174:	00800044 	movi	r2,1
   15178:	80c0030d 	sth	r3,12(r16)
   1517c:	80800515 	stw	r2,20(r16)
   15180:	04810004 	movi	r18,1024
   15184:	8809883a 	mov	r4,r17
   15188:	900b883a 	mov	r5,r18
   1518c:	001528c0 	call	1528c <_malloc_r>
   15190:	10003026 	beq	r2,zero,15254 <__smakebuf_r+0x170>
   15194:	80c0030b 	ldhu	r3,12(r16)
   15198:	01000074 	movhi	r4,1
   1519c:	2110b704 	addi	r4,r4,17116
   151a0:	89000f15 	stw	r4,60(r17)
   151a4:	18c02014 	ori	r3,r3,128
   151a8:	80c0030d 	sth	r3,12(r16)
   151ac:	80800015 	stw	r2,0(r16)
   151b0:	80800415 	stw	r2,16(r16)
   151b4:	84800515 	stw	r18,20(r16)
   151b8:	dfc01217 	ldw	ra,72(sp)
   151bc:	dc801117 	ldw	r18,68(sp)
   151c0:	dc401017 	ldw	r17,64(sp)
   151c4:	dc000f17 	ldw	r16,60(sp)
   151c8:	dec01304 	addi	sp,sp,76
   151cc:	f800283a 	ret
   151d0:	8080030b 	ldhu	r2,12(r16)
   151d4:	10c0200c 	andi	r3,r2,128
   151d8:	18ffffcc 	andi	r3,r3,65535
   151dc:	18e0001c 	xori	r3,r3,32768
   151e0:	18e00004 	addi	r3,r3,-32768
   151e4:	18000f1e 	bne	r3,zero,15224 <__smakebuf_r+0x140>
   151e8:	04810004 	movi	r18,1024
   151ec:	10820014 	ori	r2,r2,2048
   151f0:	8080030d 	sth	r2,12(r16)
   151f4:	003fe306 	br	15184 <__smakebuf_r+0xa0>
   151f8:	288010c4 	addi	r2,r5,67
   151fc:	28800015 	stw	r2,0(r5)
   15200:	28800415 	stw	r2,16(r5)
   15204:	00800044 	movi	r2,1
   15208:	28800515 	stw	r2,20(r5)
   1520c:	dfc01217 	ldw	ra,72(sp)
   15210:	dc801117 	ldw	r18,68(sp)
   15214:	dc401017 	ldw	r17,64(sp)
   15218:	dc000f17 	ldw	r16,60(sp)
   1521c:	dec01304 	addi	sp,sp,76
   15220:	f800283a 	ret
   15224:	04801004 	movi	r18,64
   15228:	003ff006 	br	151ec <__smakebuf_r+0x108>
   1522c:	81000a17 	ldw	r4,40(r16)
   15230:	00c00074 	movhi	r3,1
   15234:	18dda804 	addi	r3,r3,30368
   15238:	20ffc01e 	bne	r4,r3,1513c <__smakebuf_r+0x58>
   1523c:	8080030b 	ldhu	r2,12(r16)
   15240:	00c10004 	movi	r3,1024
   15244:	80c01315 	stw	r3,76(r16)
   15248:	10c4b03a 	or	r2,r2,r3
   1524c:	8080030d 	sth	r2,12(r16)
   15250:	003fcb06 	br	15180 <__smakebuf_r+0x9c>
   15254:	8080030b 	ldhu	r2,12(r16)
   15258:	10c0800c 	andi	r3,r2,512
   1525c:	18ffffcc 	andi	r3,r3,65535
   15260:	18e0001c 	xori	r3,r3,32768
   15264:	18e00004 	addi	r3,r3,-32768
   15268:	183fd31e 	bne	r3,zero,151b8 <__smakebuf_r+0xd4>
   1526c:	10800094 	ori	r2,r2,2
   15270:	80c010c4 	addi	r3,r16,67
   15274:	8080030d 	sth	r2,12(r16)
   15278:	00800044 	movi	r2,1
   1527c:	80c00015 	stw	r3,0(r16)
   15280:	80c00415 	stw	r3,16(r16)
   15284:	80800515 	stw	r2,20(r16)
   15288:	003fcb06 	br	151b8 <__smakebuf_r+0xd4>

0001528c <_malloc_r>:
   1528c:	defff604 	addi	sp,sp,-40
   15290:	dc800215 	stw	r18,8(sp)
   15294:	dfc00915 	stw	ra,36(sp)
   15298:	df000815 	stw	fp,32(sp)
   1529c:	ddc00715 	stw	r23,28(sp)
   152a0:	dd800615 	stw	r22,24(sp)
   152a4:	dd400515 	stw	r21,20(sp)
   152a8:	dd000415 	stw	r20,16(sp)
   152ac:	dcc00315 	stw	r19,12(sp)
   152b0:	dc400115 	stw	r17,4(sp)
   152b4:	dc000015 	stw	r16,0(sp)
   152b8:	288002c4 	addi	r2,r5,11
   152bc:	00c00584 	movi	r3,22
   152c0:	2025883a 	mov	r18,r4
   152c4:	18802b2e 	bgeu	r3,r2,15374 <_malloc_r+0xe8>
   152c8:	047ffe04 	movi	r17,-8
   152cc:	1462703a 	and	r17,r2,r17
   152d0:	88002a16 	blt	r17,zero,1537c <_malloc_r+0xf0>
   152d4:	89402936 	bltu	r17,r5,1537c <_malloc_r+0xf0>
   152d8:	9009883a 	mov	r4,r18
   152dc:	001a1f00 	call	1a1f0 <__malloc_lock>
   152e0:	00807dc4 	movi	r2,503
   152e4:	14402936 	bltu	r2,r17,1538c <_malloc_r+0x100>
   152e8:	8808d0fa 	srli	r4,r17,3
   152ec:	04c000f4 	movhi	r19,3
   152f0:	9ce21904 	addi	r19,r19,-30620
   152f4:	2105883a 	add	r2,r4,r4
   152f8:	1085883a 	add	r2,r2,r2
   152fc:	1085883a 	add	r2,r2,r2
   15300:	9885883a 	add	r2,r19,r2
   15304:	14000317 	ldw	r16,12(r2)
   15308:	80815526 	beq	r16,r2,15860 <_malloc_r+0x5d4>
   1530c:	81000117 	ldw	r4,4(r16)
   15310:	00bfff04 	movi	r2,-4
   15314:	80c00317 	ldw	r3,12(r16)
   15318:	2084703a 	and	r2,r4,r2
   1531c:	8085883a 	add	r2,r16,r2
   15320:	11800117 	ldw	r6,4(r2)
   15324:	81400217 	ldw	r5,8(r16)
   15328:	9009883a 	mov	r4,r18
   1532c:	31800054 	ori	r6,r6,1
   15330:	11800115 	stw	r6,4(r2)
   15334:	28c00315 	stw	r3,12(r5)
   15338:	19400215 	stw	r5,8(r3)
   1533c:	001a2100 	call	1a210 <__malloc_unlock>
   15340:	80800204 	addi	r2,r16,8
   15344:	dfc00917 	ldw	ra,36(sp)
   15348:	df000817 	ldw	fp,32(sp)
   1534c:	ddc00717 	ldw	r23,28(sp)
   15350:	dd800617 	ldw	r22,24(sp)
   15354:	dd400517 	ldw	r21,20(sp)
   15358:	dd000417 	ldw	r20,16(sp)
   1535c:	dcc00317 	ldw	r19,12(sp)
   15360:	dc800217 	ldw	r18,8(sp)
   15364:	dc400117 	ldw	r17,4(sp)
   15368:	dc000017 	ldw	r16,0(sp)
   1536c:	dec00a04 	addi	sp,sp,40
   15370:	f800283a 	ret
   15374:	04400404 	movi	r17,16
   15378:	897fd72e 	bgeu	r17,r5,152d8 <_malloc_r+0x4c>
   1537c:	00800304 	movi	r2,12
   15380:	90800015 	stw	r2,0(r18)
   15384:	0005883a 	mov	r2,zero
   15388:	003fee06 	br	15344 <_malloc_r+0xb8>
   1538c:	8808d27a 	srli	r4,r17,9
   15390:	20007126 	beq	r4,zero,15558 <_malloc_r+0x2cc>
   15394:	00800104 	movi	r2,4
   15398:	1100eb36 	bltu	r2,r4,15748 <_malloc_r+0x4bc>
   1539c:	8808d1ba 	srli	r4,r17,6
   153a0:	21000e04 	addi	r4,r4,56
   153a4:	210b883a 	add	r5,r4,r4
   153a8:	294b883a 	add	r5,r5,r5
   153ac:	294b883a 	add	r5,r5,r5
   153b0:	04c000f4 	movhi	r19,3
   153b4:	9ce21904 	addi	r19,r19,-30620
   153b8:	994b883a 	add	r5,r19,r5
   153bc:	2c000317 	ldw	r16,12(r5)
   153c0:	2c000e26 	beq	r5,r16,153fc <_malloc_r+0x170>
   153c4:	80c00117 	ldw	r3,4(r16)
   153c8:	01ffff04 	movi	r7,-4
   153cc:	018003c4 	movi	r6,15
   153d0:	19c6703a 	and	r3,r3,r7
   153d4:	1c45c83a 	sub	r2,r3,r17
   153d8:	30800716 	blt	r6,r2,153f8 <_malloc_r+0x16c>
   153dc:	1000610e 	bge	r2,zero,15564 <_malloc_r+0x2d8>
   153e0:	84000317 	ldw	r16,12(r16)
   153e4:	2c000526 	beq	r5,r16,153fc <_malloc_r+0x170>
   153e8:	80c00117 	ldw	r3,4(r16)
   153ec:	19c6703a 	and	r3,r3,r7
   153f0:	1c45c83a 	sub	r2,r3,r17
   153f4:	30bff90e 	bge	r6,r2,153dc <_malloc_r+0x150>
   153f8:	213fffc4 	addi	r4,r4,-1
   153fc:	21000044 	addi	r4,r4,1
   15400:	9c000417 	ldw	r16,16(r19)
   15404:	00c000f4 	movhi	r3,3
   15408:	18e21904 	addi	r3,r3,-30620
   1540c:	1a400204 	addi	r9,r3,8
   15410:	8240ff26 	beq	r16,r9,15810 <_malloc_r+0x584>
   15414:	81400117 	ldw	r5,4(r16)
   15418:	00bfff04 	movi	r2,-4
   1541c:	018003c4 	movi	r6,15
   15420:	2884703a 	and	r2,r5,r2
   15424:	144bc83a 	sub	r5,r2,r17
   15428:	3140ea16 	blt	r6,r5,157d4 <_malloc_r+0x548>
   1542c:	1a400515 	stw	r9,20(r3)
   15430:	1a400415 	stw	r9,16(r3)
   15434:	2800570e 	bge	r5,zero,15594 <_malloc_r+0x308>
   15438:	01407fc4 	movi	r5,511
   1543c:	2880ca36 	bltu	r5,r2,15768 <_malloc_r+0x4dc>
   15440:	1004d0fa 	srli	r2,r2,3
   15444:	02000044 	movi	r8,1
   15448:	19c00117 	ldw	r7,4(r3)
   1544c:	108b883a 	add	r5,r2,r2
   15450:	294b883a 	add	r5,r5,r5
   15454:	1005d0ba 	srai	r2,r2,2
   15458:	294b883a 	add	r5,r5,r5
   1545c:	28cb883a 	add	r5,r5,r3
   15460:	29800217 	ldw	r6,8(r5)
   15464:	4084983a 	sll	r2,r8,r2
   15468:	81400315 	stw	r5,12(r16)
   1546c:	81800215 	stw	r6,8(r16)
   15470:	11c4b03a 	or	r2,r2,r7
   15474:	18800115 	stw	r2,4(r3)
   15478:	2c000215 	stw	r16,8(r5)
   1547c:	34000315 	stw	r16,12(r6)
   15480:	200bd0ba 	srai	r5,r4,2
   15484:	00c00044 	movi	r3,1
   15488:	194a983a 	sll	r5,r3,r5
   1548c:	11404936 	bltu	r2,r5,155b4 <_malloc_r+0x328>
   15490:	1146703a 	and	r3,r2,r5
   15494:	18000a1e 	bne	r3,zero,154c0 <_malloc_r+0x234>
   15498:	00ffff04 	movi	r3,-4
   1549c:	294b883a 	add	r5,r5,r5
   154a0:	20c8703a 	and	r4,r4,r3
   154a4:	1146703a 	and	r3,r2,r5
   154a8:	21000104 	addi	r4,r4,4
   154ac:	1800041e 	bne	r3,zero,154c0 <_malloc_r+0x234>
   154b0:	294b883a 	add	r5,r5,r5
   154b4:	1146703a 	and	r3,r2,r5
   154b8:	21000104 	addi	r4,r4,4
   154bc:	183ffc26 	beq	r3,zero,154b0 <_malloc_r+0x224>
   154c0:	023fff04 	movi	r8,-4
   154c4:	01c003c4 	movi	r7,15
   154c8:	2105883a 	add	r2,r4,r4
   154cc:	1085883a 	add	r2,r2,r2
   154d0:	1085883a 	add	r2,r2,r2
   154d4:	9899883a 	add	r12,r19,r2
   154d8:	62800304 	addi	r10,r12,12
   154dc:	2017883a 	mov	r11,r4
   154e0:	54000017 	ldw	r16,0(r10)
   154e4:	51bffd04 	addi	r6,r10,-12
   154e8:	8180041e 	bne	r16,r6,154fc <_malloc_r+0x270>
   154ec:	0000ca06 	br	15818 <_malloc_r+0x58c>
   154f0:	10001c0e 	bge	r2,zero,15564 <_malloc_r+0x2d8>
   154f4:	84000317 	ldw	r16,12(r16)
   154f8:	8180c726 	beq	r16,r6,15818 <_malloc_r+0x58c>
   154fc:	80c00117 	ldw	r3,4(r16)
   15500:	1a06703a 	and	r3,r3,r8
   15504:	1c45c83a 	sub	r2,r3,r17
   15508:	38bff90e 	bge	r7,r2,154f0 <_malloc_r+0x264>
   1550c:	81000317 	ldw	r4,12(r16)
   15510:	81400217 	ldw	r5,8(r16)
   15514:	8447883a 	add	r3,r16,r17
   15518:	8c400054 	ori	r17,r17,1
   1551c:	29000315 	stw	r4,12(r5)
   15520:	21400215 	stw	r5,8(r4)
   15524:	84400115 	stw	r17,4(r16)
   15528:	1889883a 	add	r4,r3,r2
   1552c:	11400054 	ori	r5,r2,1
   15530:	98c00515 	stw	r3,20(r19)
   15534:	98c00415 	stw	r3,16(r19)
   15538:	20800015 	stw	r2,0(r4)
   1553c:	1a400315 	stw	r9,12(r3)
   15540:	1a400215 	stw	r9,8(r3)
   15544:	19400115 	stw	r5,4(r3)
   15548:	9009883a 	mov	r4,r18
   1554c:	001a2100 	call	1a210 <__malloc_unlock>
   15550:	80800204 	addi	r2,r16,8
   15554:	003f7b06 	br	15344 <_malloc_r+0xb8>
   15558:	8808d0fa 	srli	r4,r17,3
   1555c:	210b883a 	add	r5,r4,r4
   15560:	003f9106 	br	153a8 <_malloc_r+0x11c>
   15564:	80c7883a 	add	r3,r16,r3
   15568:	19400117 	ldw	r5,4(r3)
   1556c:	80800317 	ldw	r2,12(r16)
   15570:	81000217 	ldw	r4,8(r16)
   15574:	29400054 	ori	r5,r5,1
   15578:	19400115 	stw	r5,4(r3)
   1557c:	20800315 	stw	r2,12(r4)
   15580:	11000215 	stw	r4,8(r2)
   15584:	9009883a 	mov	r4,r18
   15588:	001a2100 	call	1a210 <__malloc_unlock>
   1558c:	80800204 	addi	r2,r16,8
   15590:	003f6c06 	br	15344 <_malloc_r+0xb8>
   15594:	8085883a 	add	r2,r16,r2
   15598:	10c00117 	ldw	r3,4(r2)
   1559c:	9009883a 	mov	r4,r18
   155a0:	18c00054 	ori	r3,r3,1
   155a4:	10c00115 	stw	r3,4(r2)
   155a8:	001a2100 	call	1a210 <__malloc_unlock>
   155ac:	80800204 	addi	r2,r16,8
   155b0:	003f6406 	br	15344 <_malloc_r+0xb8>
   155b4:	9c000217 	ldw	r16,8(r19)
   155b8:	00bfff04 	movi	r2,-4
   155bc:	85400117 	ldw	r21,4(r16)
   155c0:	a8aa703a 	and	r21,r21,r2
   155c4:	ac400336 	bltu	r21,r17,155d4 <_malloc_r+0x348>
   155c8:	ac45c83a 	sub	r2,r21,r17
   155cc:	00c003c4 	movi	r3,15
   155d0:	18805316 	blt	r3,r2,15720 <_malloc_r+0x494>
   155d4:	d5e01917 	ldw	r23,-32668(gp)
   155d8:	d0e00317 	ldw	r3,-32756(gp)
   155dc:	00bfffc4 	movi	r2,-1
   155e0:	8579883a 	add	fp,r16,r21
   155e4:	8def883a 	add	r23,r17,r23
   155e8:	1880d226 	beq	r3,r2,15934 <_malloc_r+0x6a8>
   155ec:	bdc403c4 	addi	r23,r23,4111
   155f0:	00bc0004 	movi	r2,-4096
   155f4:	b8ae703a 	and	r23,r23,r2
   155f8:	9009883a 	mov	r4,r18
   155fc:	b80b883a 	mov	r5,r23
   15600:	00175600 	call	17560 <_sbrk_r>
   15604:	1029883a 	mov	r20,r2
   15608:	00bfffc4 	movi	r2,-1
   1560c:	a080d126 	beq	r20,r2,15954 <_malloc_r+0x6c8>
   15610:	a7009f36 	bltu	r20,fp,15890 <_malloc_r+0x604>
   15614:	058000f4 	movhi	r22,3
   15618:	b5a7c004 	addi	r22,r22,-24832
   1561c:	b0800017 	ldw	r2,0(r22)
   15620:	b885883a 	add	r2,r23,r2
   15624:	b0800015 	stw	r2,0(r22)
   15628:	e500cf26 	beq	fp,r20,15968 <_malloc_r+0x6dc>
   1562c:	d1200317 	ldw	r4,-32756(gp)
   15630:	00ffffc4 	movi	r3,-1
   15634:	20c0e026 	beq	r4,r3,159b8 <_malloc_r+0x72c>
   15638:	a739c83a 	sub	fp,r20,fp
   1563c:	1705883a 	add	r2,r2,fp
   15640:	b0800015 	stw	r2,0(r22)
   15644:	a08001cc 	andi	r2,r20,7
   15648:	1000a526 	beq	r2,zero,158e0 <_malloc_r+0x654>
   1564c:	a0a9c83a 	sub	r20,r20,r2
   15650:	00c40204 	movi	r3,4104
   15654:	a5000204 	addi	r20,r20,8
   15658:	1885c83a 	sub	r2,r3,r2
   1565c:	a5c7883a 	add	r3,r20,r23
   15660:	18c3ffcc 	andi	r3,r3,4095
   15664:	10efc83a 	sub	r23,r2,r3
   15668:	9009883a 	mov	r4,r18
   1566c:	b80b883a 	mov	r5,r23
   15670:	00175600 	call	17560 <_sbrk_r>
   15674:	00ffffc4 	movi	r3,-1
   15678:	10c0cc26 	beq	r2,r3,159ac <_malloc_r+0x720>
   1567c:	1505c83a 	sub	r2,r2,r20
   15680:	b887883a 	add	r3,r23,r2
   15684:	18c00054 	ori	r3,r3,1
   15688:	b0800017 	ldw	r2,0(r22)
   1568c:	9d000215 	stw	r20,8(r19)
   15690:	a0c00115 	stw	r3,4(r20)
   15694:	b885883a 	add	r2,r23,r2
   15698:	b0800015 	stw	r2,0(r22)
   1569c:	84c00e26 	beq	r16,r19,156d8 <_malloc_r+0x44c>
   156a0:	00c003c4 	movi	r3,15
   156a4:	1d40902e 	bgeu	r3,r21,158e8 <_malloc_r+0x65c>
   156a8:	ad7ffd04 	addi	r21,r21,-12
   156ac:	013ffe04 	movi	r4,-8
   156b0:	a908703a 	and	r4,r21,r4
   156b4:	810b883a 	add	r5,r16,r4
   156b8:	01800144 	movi	r6,5
   156bc:	29800115 	stw	r6,4(r5)
   156c0:	29800215 	stw	r6,8(r5)
   156c4:	81400117 	ldw	r5,4(r16)
   156c8:	2940004c 	andi	r5,r5,1
   156cc:	214ab03a 	or	r5,r4,r5
   156d0:	81400115 	stw	r5,4(r16)
   156d4:	1900ae36 	bltu	r3,r4,15990 <_malloc_r+0x704>
   156d8:	d0e01817 	ldw	r3,-32672(gp)
   156dc:	1880012e 	bgeu	r3,r2,156e4 <_malloc_r+0x458>
   156e0:	d0a01815 	stw	r2,-32672(gp)
   156e4:	d0e01717 	ldw	r3,-32676(gp)
   156e8:	9c000217 	ldw	r16,8(r19)
   156ec:	1880012e 	bgeu	r3,r2,156f4 <_malloc_r+0x468>
   156f0:	d0a01715 	stw	r2,-32676(gp)
   156f4:	80c00117 	ldw	r3,4(r16)
   156f8:	00bfff04 	movi	r2,-4
   156fc:	1886703a 	and	r3,r3,r2
   15700:	1c45c83a 	sub	r2,r3,r17
   15704:	1c400236 	bltu	r3,r17,15710 <_malloc_r+0x484>
   15708:	00c003c4 	movi	r3,15
   1570c:	18800416 	blt	r3,r2,15720 <_malloc_r+0x494>
   15710:	9009883a 	mov	r4,r18
   15714:	001a2100 	call	1a210 <__malloc_unlock>
   15718:	0005883a 	mov	r2,zero
   1571c:	003f0906 	br	15344 <_malloc_r+0xb8>
   15720:	88c00054 	ori	r3,r17,1
   15724:	10800054 	ori	r2,r2,1
   15728:	80c00115 	stw	r3,4(r16)
   1572c:	8463883a 	add	r17,r16,r17
   15730:	88800115 	stw	r2,4(r17)
   15734:	9009883a 	mov	r4,r18
   15738:	9c400215 	stw	r17,8(r19)
   1573c:	001a2100 	call	1a210 <__malloc_unlock>
   15740:	80800204 	addi	r2,r16,8
   15744:	003eff06 	br	15344 <_malloc_r+0xb8>
   15748:	00800504 	movi	r2,20
   1574c:	1100492e 	bgeu	r2,r4,15874 <_malloc_r+0x5e8>
   15750:	00801504 	movi	r2,84
   15754:	11005c36 	bltu	r2,r4,158c8 <_malloc_r+0x63c>
   15758:	8808d33a 	srli	r4,r17,12
   1575c:	21001b84 	addi	r4,r4,110
   15760:	210b883a 	add	r5,r4,r4
   15764:	003f1006 	br	153a8 <_malloc_r+0x11c>
   15768:	1006d27a 	srli	r3,r2,9
   1576c:	01400104 	movi	r5,4
   15770:	28c0432e 	bgeu	r5,r3,15880 <_malloc_r+0x5f4>
   15774:	01400504 	movi	r5,20
   15778:	28c07036 	bltu	r5,r3,1593c <_malloc_r+0x6b0>
   1577c:	194016c4 	addi	r5,r3,91
   15780:	294d883a 	add	r6,r5,r5
   15784:	318d883a 	add	r6,r6,r6
   15788:	318d883a 	add	r6,r6,r6
   1578c:	998d883a 	add	r6,r19,r6
   15790:	30c00217 	ldw	r3,8(r6)
   15794:	01c000f4 	movhi	r7,3
   15798:	39e21904 	addi	r7,r7,-30620
   1579c:	19805726 	beq	r3,r6,158fc <_malloc_r+0x670>
   157a0:	01ffff04 	movi	r7,-4
   157a4:	19400117 	ldw	r5,4(r3)
   157a8:	29ca703a 	and	r5,r5,r7
   157ac:	1140022e 	bgeu	r2,r5,157b8 <_malloc_r+0x52c>
   157b0:	18c00217 	ldw	r3,8(r3)
   157b4:	30fffb1e 	bne	r6,r3,157a4 <_malloc_r+0x518>
   157b8:	19400317 	ldw	r5,12(r3)
   157bc:	98800117 	ldw	r2,4(r19)
   157c0:	81400315 	stw	r5,12(r16)
   157c4:	80c00215 	stw	r3,8(r16)
   157c8:	2c000215 	stw	r16,8(r5)
   157cc:	1c000315 	stw	r16,12(r3)
   157d0:	003f2b06 	br	15480 <_malloc_r+0x1f4>
   157d4:	8445883a 	add	r2,r16,r17
   157d8:	8c400054 	ori	r17,r17,1
   157dc:	18800515 	stw	r2,20(r3)
   157e0:	18800415 	stw	r2,16(r3)
   157e4:	29000054 	ori	r4,r5,1
   157e8:	1147883a 	add	r3,r2,r5
   157ec:	84400115 	stw	r17,4(r16)
   157f0:	11000115 	stw	r4,4(r2)
   157f4:	12400315 	stw	r9,12(r2)
   157f8:	12400215 	stw	r9,8(r2)
   157fc:	19400015 	stw	r5,0(r3)
   15800:	9009883a 	mov	r4,r18
   15804:	001a2100 	call	1a210 <__malloc_unlock>
   15808:	80800204 	addi	r2,r16,8
   1580c:	003ecd06 	br	15344 <_malloc_r+0xb8>
   15810:	18800117 	ldw	r2,4(r3)
   15814:	003f1a06 	br	15480 <_malloc_r+0x1f4>
   15818:	5ac00044 	addi	r11,r11,1
   1581c:	588000cc 	andi	r2,r11,3
   15820:	52800204 	addi	r10,r10,8
   15824:	103f2e1e 	bne	r2,zero,154e0 <_malloc_r+0x254>
   15828:	20c000cc 	andi	r3,r4,3
   1582c:	60bffe04 	addi	r2,r12,-8
   15830:	18006f26 	beq	r3,zero,159f0 <_malloc_r+0x764>
   15834:	63000017 	ldw	r12,0(r12)
   15838:	213fffc4 	addi	r4,r4,-1
   1583c:	60bffa26 	beq	r12,r2,15828 <_malloc_r+0x59c>
   15840:	98800117 	ldw	r2,4(r19)
   15844:	294b883a 	add	r5,r5,r5
   15848:	117f5a36 	bltu	r2,r5,155b4 <_malloc_r+0x328>
   1584c:	283f5926 	beq	r5,zero,155b4 <_malloc_r+0x328>
   15850:	1146703a 	and	r3,r2,r5
   15854:	18001626 	beq	r3,zero,158b0 <_malloc_r+0x624>
   15858:	5809883a 	mov	r4,r11
   1585c:	003f1a06 	br	154c8 <_malloc_r+0x23c>
   15860:	80800204 	addi	r2,r16,8
   15864:	84000517 	ldw	r16,20(r16)
   15868:	143ea81e 	bne	r2,r16,1530c <_malloc_r+0x80>
   1586c:	21000084 	addi	r4,r4,2
   15870:	003ee306 	br	15400 <_malloc_r+0x174>
   15874:	210016c4 	addi	r4,r4,91
   15878:	210b883a 	add	r5,r4,r4
   1587c:	003eca06 	br	153a8 <_malloc_r+0x11c>
   15880:	100ad1ba 	srli	r5,r2,6
   15884:	29400e04 	addi	r5,r5,56
   15888:	294d883a 	add	r6,r5,r5
   1588c:	003fbd06 	br	15784 <_malloc_r+0x4f8>
   15890:	84ff6026 	beq	r16,r19,15614 <_malloc_r+0x388>
   15894:	008000f4 	movhi	r2,3
   15898:	10a21904 	addi	r2,r2,-30620
   1589c:	14000217 	ldw	r16,8(r2)
   158a0:	00bfff04 	movi	r2,-4
   158a4:	80c00117 	ldw	r3,4(r16)
   158a8:	1886703a 	and	r3,r3,r2
   158ac:	003f9406 	br	15700 <_malloc_r+0x474>
   158b0:	294b883a 	add	r5,r5,r5
   158b4:	1146703a 	and	r3,r2,r5
   158b8:	5ac00104 	addi	r11,r11,4
   158bc:	183ffc26 	beq	r3,zero,158b0 <_malloc_r+0x624>
   158c0:	5809883a 	mov	r4,r11
   158c4:	003f0006 	br	154c8 <_malloc_r+0x23c>
   158c8:	00805504 	movi	r2,340
   158cc:	11001336 	bltu	r2,r4,1591c <_malloc_r+0x690>
   158d0:	8808d3fa 	srli	r4,r17,15
   158d4:	21001dc4 	addi	r4,r4,119
   158d8:	210b883a 	add	r5,r4,r4
   158dc:	003eb206 	br	153a8 <_malloc_r+0x11c>
   158e0:	00840004 	movi	r2,4096
   158e4:	003f5d06 	br	1565c <_malloc_r+0x3d0>
   158e8:	00800044 	movi	r2,1
   158ec:	a0800115 	stw	r2,4(r20)
   158f0:	a021883a 	mov	r16,r20
   158f4:	0007883a 	mov	r3,zero
   158f8:	003f8106 	br	15700 <_malloc_r+0x474>
   158fc:	280bd0ba 	srai	r5,r5,2
   15900:	01800044 	movi	r6,1
   15904:	38800117 	ldw	r2,4(r7)
   15908:	314c983a 	sll	r6,r6,r5
   1590c:	180b883a 	mov	r5,r3
   15910:	3084b03a 	or	r2,r6,r2
   15914:	38800115 	stw	r2,4(r7)
   15918:	003fa906 	br	157c0 <_malloc_r+0x534>
   1591c:	00815504 	movi	r2,1364
   15920:	11001836 	bltu	r2,r4,15984 <_malloc_r+0x6f8>
   15924:	8808d4ba 	srli	r4,r17,18
   15928:	21001f04 	addi	r4,r4,124
   1592c:	210b883a 	add	r5,r4,r4
   15930:	003e9d06 	br	153a8 <_malloc_r+0x11c>
   15934:	bdc00404 	addi	r23,r23,16
   15938:	003f2f06 	br	155f8 <_malloc_r+0x36c>
   1593c:	01401504 	movi	r5,84
   15940:	28c01f36 	bltu	r5,r3,159c0 <_malloc_r+0x734>
   15944:	100ad33a 	srli	r5,r2,12
   15948:	29401b84 	addi	r5,r5,110
   1594c:	294d883a 	add	r6,r5,r5
   15950:	003f8c06 	br	15784 <_malloc_r+0x4f8>
   15954:	9c000217 	ldw	r16,8(r19)
   15958:	00bfff04 	movi	r2,-4
   1595c:	80c00117 	ldw	r3,4(r16)
   15960:	1886703a 	and	r3,r3,r2
   15964:	003f6606 	br	15700 <_malloc_r+0x474>
   15968:	e0c3ffcc 	andi	r3,fp,4095
   1596c:	183f2f1e 	bne	r3,zero,1562c <_malloc_r+0x3a0>
   15970:	98c00217 	ldw	r3,8(r19)
   15974:	bd49883a 	add	r4,r23,r21
   15978:	21000054 	ori	r4,r4,1
   1597c:	19000115 	stw	r4,4(r3)
   15980:	003f5506 	br	156d8 <_malloc_r+0x44c>
   15984:	01403f04 	movi	r5,252
   15988:	01001f84 	movi	r4,126
   1598c:	003e8606 	br	153a8 <_malloc_r+0x11c>
   15990:	9009883a 	mov	r4,r18
   15994:	81400204 	addi	r5,r16,8
   15998:	00146f40 	call	146f4 <_free_r>
   1599c:	008000f4 	movhi	r2,3
   159a0:	10a7c004 	addi	r2,r2,-24832
   159a4:	10800017 	ldw	r2,0(r2)
   159a8:	003f4b06 	br	156d8 <_malloc_r+0x44c>
   159ac:	00c00044 	movi	r3,1
   159b0:	002f883a 	mov	r23,zero
   159b4:	003f3406 	br	15688 <_malloc_r+0x3fc>
   159b8:	d5200315 	stw	r20,-32756(gp)
   159bc:	003f2106 	br	15644 <_malloc_r+0x3b8>
   159c0:	01405504 	movi	r5,340
   159c4:	28c00436 	bltu	r5,r3,159d8 <_malloc_r+0x74c>
   159c8:	100ad3fa 	srli	r5,r2,15
   159cc:	29401dc4 	addi	r5,r5,119
   159d0:	294d883a 	add	r6,r5,r5
   159d4:	003f6b06 	br	15784 <_malloc_r+0x4f8>
   159d8:	01415504 	movi	r5,1364
   159dc:	28c00936 	bltu	r5,r3,15a04 <_malloc_r+0x778>
   159e0:	100ad4ba 	srli	r5,r2,18
   159e4:	29401f04 	addi	r5,r5,124
   159e8:	294d883a 	add	r6,r5,r5
   159ec:	003f6506 	br	15784 <_malloc_r+0x4f8>
   159f0:	98800117 	ldw	r2,4(r19)
   159f4:	0146303a 	nor	r3,zero,r5
   159f8:	1884703a 	and	r2,r3,r2
   159fc:	98800115 	stw	r2,4(r19)
   15a00:	003f9006 	br	15844 <_malloc_r+0x5b8>
   15a04:	01803f04 	movi	r6,252
   15a08:	01401f84 	movi	r5,126
   15a0c:	003f5d06 	br	15784 <_malloc_r+0x4f8>

00015a10 <memchr>:
   15a10:	008000c4 	movi	r2,3
   15a14:	29403fcc 	andi	r5,r5,255
   15a18:	1180282e 	bgeu	r2,r6,15abc <memchr+0xac>
   15a1c:	2086703a 	and	r3,r4,r2
   15a20:	1800351e 	bne	r3,zero,15af8 <memchr+0xe8>
   15a24:	2816923a 	slli	r11,r5,8
   15a28:	2093883a 	add	r9,r4,r2
   15a2c:	22000084 	addi	r8,r4,2
   15a30:	5957883a 	add	r11,r11,r5
   15a34:	5816923a 	slli	r11,r11,8
   15a38:	20c00044 	addi	r3,r4,1
   15a3c:	037fbff4 	movhi	r13,65279
   15a40:	6b7fbfc4 	addi	r13,r13,-257
   15a44:	5957883a 	add	r11,r11,r5
   15a48:	5816923a 	slli	r11,r11,8
   15a4c:	03202074 	movhi	r12,32897
   15a50:	63202004 	addi	r12,r12,-32640
   15a54:	101d883a 	mov	r14,r2
   15a58:	5957883a 	add	r11,r11,r5
   15a5c:	21c00017 	ldw	r7,0(r4)
   15a60:	31bfff04 	addi	r6,r6,-4
   15a64:	1805883a 	mov	r2,r3
   15a68:	3acef03a 	xor	r7,r7,r11
   15a6c:	3b55883a 	add	r10,r7,r13
   15a70:	01ce303a 	nor	r7,zero,r7
   15a74:	51ce703a 	and	r7,r10,r7
   15a78:	3b0e703a 	and	r7,r7,r12
   15a7c:	38000a26 	beq	r7,zero,15aa8 <memchr+0x98>
   15a80:	21c00003 	ldbu	r7,0(r4)
   15a84:	39401e26 	beq	r7,r5,15b00 <memchr+0xf0>
   15a88:	19c00003 	ldbu	r7,0(r3)
   15a8c:	39401926 	beq	r7,r5,15af4 <memchr+0xe4>
   15a90:	41c00003 	ldbu	r7,0(r8)
   15a94:	4005883a 	mov	r2,r8
   15a98:	39401626 	beq	r7,r5,15af4 <memchr+0xe4>
   15a9c:	49c00003 	ldbu	r7,0(r9)
   15aa0:	4805883a 	mov	r2,r9
   15aa4:	39401326 	beq	r7,r5,15af4 <memchr+0xe4>
   15aa8:	21000104 	addi	r4,r4,4
   15aac:	4a400104 	addi	r9,r9,4
   15ab0:	42000104 	addi	r8,r8,4
   15ab4:	18c00104 	addi	r3,r3,4
   15ab8:	71bfe836 	bltu	r14,r6,15a5c <memchr+0x4c>
   15abc:	2005883a 	mov	r2,r4
   15ac0:	30000a26 	beq	r6,zero,15aec <memchr+0xdc>
   15ac4:	10c00003 	ldbu	r3,0(r2)
   15ac8:	19400a26 	beq	r3,r5,15af4 <memchr+0xe4>
   15acc:	10c00044 	addi	r3,r2,1
   15ad0:	118d883a 	add	r6,r2,r6
   15ad4:	00000306 	br	15ae4 <memchr+0xd4>
   15ad8:	11000003 	ldbu	r4,0(r2)
   15adc:	18c00044 	addi	r3,r3,1
   15ae0:	21400426 	beq	r4,r5,15af4 <memchr+0xe4>
   15ae4:	1805883a 	mov	r2,r3
   15ae8:	19bffb1e 	bne	r3,r6,15ad8 <memchr+0xc8>
   15aec:	0005883a 	mov	r2,zero
   15af0:	f800283a 	ret
   15af4:	f800283a 	ret
   15af8:	2005883a 	mov	r2,r4
   15afc:	003ff106 	br	15ac4 <memchr+0xb4>
   15b00:	2005883a 	mov	r2,r4
   15b04:	f800283a 	ret

00015b08 <memcpy>:
   15b08:	defffb04 	addi	sp,sp,-20
   15b0c:	dc000015 	stw	r16,0(sp)
   15b10:	dfc00415 	stw	ra,16(sp)
   15b14:	dcc00315 	stw	r19,12(sp)
   15b18:	dc800215 	stw	r18,8(sp)
   15b1c:	dc400115 	stw	r17,4(sp)
   15b20:	00c003c4 	movi	r3,15
   15b24:	2021883a 	mov	r16,r4
   15b28:	3005883a 	mov	r2,r6
   15b2c:	1980032e 	bgeu	r3,r6,15b3c <memcpy+0x34>
   15b30:	2906b03a 	or	r3,r5,r4
   15b34:	18c000cc 	andi	r3,r3,3
   15b38:	18001026 	beq	r3,zero,15b7c <memcpy+0x74>
   15b3c:	8007883a 	mov	r3,r16
   15b40:	288f883a 	add	r7,r5,r2
   15b44:	10000526 	beq	r2,zero,15b5c <memcpy+0x54>
   15b48:	29800003 	ldbu	r6,0(r5)
   15b4c:	18c00044 	addi	r3,r3,1
   15b50:	29400044 	addi	r5,r5,1
   15b54:	19bfffc5 	stb	r6,-1(r3)
   15b58:	29fffb1e 	bne	r5,r7,15b48 <memcpy+0x40>
   15b5c:	8005883a 	mov	r2,r16
   15b60:	dfc00417 	ldw	ra,16(sp)
   15b64:	dcc00317 	ldw	r19,12(sp)
   15b68:	dc800217 	ldw	r18,8(sp)
   15b6c:	dc400117 	ldw	r17,4(sp)
   15b70:	dc000017 	ldw	r16,0(sp)
   15b74:	dec00504 	addi	sp,sp,20
   15b78:	f800283a 	ret
   15b7c:	32bffc04 	addi	r10,r6,-16
   15b80:	5014d13a 	srli	r10,r10,4
   15b84:	20800404 	addi	r2,r4,16
   15b88:	2007883a 	mov	r3,r4
   15b8c:	5008913a 	slli	r4,r10,4
   15b90:	280f883a 	mov	r7,r5
   15b94:	1105883a 	add	r2,r2,r4
   15b98:	3a000017 	ldw	r8,0(r7)
   15b9c:	18c00404 	addi	r3,r3,16
   15ba0:	39c00404 	addi	r7,r7,16
   15ba4:	1a3ffc15 	stw	r8,-16(r3)
   15ba8:	3a3ffd17 	ldw	r8,-12(r7)
   15bac:	1a3ffd15 	stw	r8,-12(r3)
   15bb0:	3a3ffe17 	ldw	r8,-8(r7)
   15bb4:	1a3ffe15 	stw	r8,-8(r3)
   15bb8:	3a3fff17 	ldw	r8,-4(r7)
   15bbc:	1a3fff15 	stw	r8,-4(r3)
   15bc0:	18bff51e 	bne	r3,r2,15b98 <memcpy+0x90>
   15bc4:	52800044 	addi	r10,r10,1
   15bc8:	5014913a 	slli	r10,r10,4
   15bcc:	308003cc 	andi	r2,r6,15
   15bd0:	010000c4 	movi	r4,3
   15bd4:	8287883a 	add	r3,r16,r10
   15bd8:	2a95883a 	add	r10,r5,r10
   15bdc:	2080182e 	bgeu	r4,r2,15c40 <memcpy+0x138>
   15be0:	147fff04 	addi	r17,r2,-4
   15be4:	8808d0ba 	srli	r4,r17,2
   15be8:	1a400104 	addi	r9,r3,4
   15bec:	180d883a 	mov	r6,r3
   15bf0:	2105883a 	add	r2,r4,r4
   15bf4:	1085883a 	add	r2,r2,r2
   15bf8:	4893883a 	add	r9,r9,r2
   15bfc:	500f883a 	mov	r7,r10
   15c00:	3a000017 	ldw	r8,0(r7)
   15c04:	31800104 	addi	r6,r6,4
   15c08:	39c00104 	addi	r7,r7,4
   15c0c:	323fff15 	stw	r8,-4(r6)
   15c10:	327ffb1e 	bne	r6,r9,15c00 <memcpy+0xf8>
   15c14:	20800044 	addi	r2,r4,1
   15c18:	1085883a 	add	r2,r2,r2
   15c1c:	1085883a 	add	r2,r2,r2
   15c20:	017fff04 	movi	r5,-4
   15c24:	18a5883a 	add	r18,r3,r2
   15c28:	50a7883a 	add	r19,r10,r2
   15c2c:	00106600 	call	10660 <__mulsi3>
   15c30:	1445883a 	add	r2,r2,r17
   15c34:	980b883a 	mov	r5,r19
   15c38:	9007883a 	mov	r3,r18
   15c3c:	003fc006 	br	15b40 <memcpy+0x38>
   15c40:	500b883a 	mov	r5,r10
   15c44:	003fbe06 	br	15b40 <memcpy+0x38>

00015c48 <memmove>:
   15c48:	defffb04 	addi	sp,sp,-20
   15c4c:	dc000015 	stw	r16,0(sp)
   15c50:	dfc00415 	stw	ra,16(sp)
   15c54:	dcc00315 	stw	r19,12(sp)
   15c58:	dc800215 	stw	r18,8(sp)
   15c5c:	dc400115 	stw	r17,4(sp)
   15c60:	2021883a 	mov	r16,r4
   15c64:	300f883a 	mov	r7,r6
   15c68:	2900122e 	bgeu	r5,r4,15cb4 <memmove+0x6c>
   15c6c:	2987883a 	add	r3,r5,r6
   15c70:	20c0102e 	bgeu	r4,r3,15cb4 <memmove+0x6c>
   15c74:	218b883a 	add	r5,r4,r6
   15c78:	1989c83a 	sub	r4,r3,r6
   15c7c:	30000526 	beq	r6,zero,15c94 <memmove+0x4c>
   15c80:	18ffffc4 	addi	r3,r3,-1
   15c84:	18800003 	ldbu	r2,0(r3)
   15c88:	297fffc4 	addi	r5,r5,-1
   15c8c:	28800005 	stb	r2,0(r5)
   15c90:	193ffb1e 	bne	r3,r4,15c80 <memmove+0x38>
   15c94:	8005883a 	mov	r2,r16
   15c98:	dfc00417 	ldw	ra,16(sp)
   15c9c:	dcc00317 	ldw	r19,12(sp)
   15ca0:	dc800217 	ldw	r18,8(sp)
   15ca4:	dc400117 	ldw	r17,4(sp)
   15ca8:	dc000017 	ldw	r16,0(sp)
   15cac:	dec00504 	addi	sp,sp,20
   15cb0:	f800283a 	ret
   15cb4:	008003c4 	movi	r2,15
   15cb8:	1180422e 	bgeu	r2,r6,15dc4 <memmove+0x17c>
   15cbc:	2c04b03a 	or	r2,r5,r16
   15cc0:	108000cc 	andi	r2,r2,3
   15cc4:	10003f1e 	bne	r2,zero,15dc4 <memmove+0x17c>
   15cc8:	32bffc04 	addi	r10,r6,-16
   15ccc:	5014d13a 	srli	r10,r10,4
   15cd0:	81000404 	addi	r4,r16,16
   15cd4:	8007883a 	mov	r3,r16
   15cd8:	5004913a 	slli	r2,r10,4
   15cdc:	280f883a 	mov	r7,r5
   15ce0:	2089883a 	add	r4,r4,r2
   15ce4:	38800017 	ldw	r2,0(r7)
   15ce8:	18c00404 	addi	r3,r3,16
   15cec:	39c00404 	addi	r7,r7,16
   15cf0:	18bffc15 	stw	r2,-16(r3)
   15cf4:	38bffd17 	ldw	r2,-12(r7)
   15cf8:	18bffd15 	stw	r2,-12(r3)
   15cfc:	38bffe17 	ldw	r2,-8(r7)
   15d00:	18bffe15 	stw	r2,-8(r3)
   15d04:	38bfff17 	ldw	r2,-4(r7)
   15d08:	18bfff15 	stw	r2,-4(r3)
   15d0c:	193ff51e 	bne	r3,r4,15ce4 <memmove+0x9c>
   15d10:	52800044 	addi	r10,r10,1
   15d14:	5014913a 	slli	r10,r10,4
   15d18:	31c003cc 	andi	r7,r6,15
   15d1c:	008000c4 	movi	r2,3
   15d20:	8287883a 	add	r3,r16,r10
   15d24:	2a95883a 	add	r10,r5,r10
   15d28:	11c0282e 	bgeu	r2,r7,15dcc <memmove+0x184>
   15d2c:	3c7fff04 	addi	r17,r7,-4
   15d30:	8808d0ba 	srli	r4,r17,2
   15d34:	1a400104 	addi	r9,r3,4
   15d38:	180d883a 	mov	r6,r3
   15d3c:	2105883a 	add	r2,r4,r4
   15d40:	1085883a 	add	r2,r2,r2
   15d44:	4893883a 	add	r9,r9,r2
   15d48:	5005883a 	mov	r2,r10
   15d4c:	12000017 	ldw	r8,0(r2)
   15d50:	31800104 	addi	r6,r6,4
   15d54:	10800104 	addi	r2,r2,4
   15d58:	323fff15 	stw	r8,-4(r6)
   15d5c:	327ffb1e 	bne	r6,r9,15d4c <memmove+0x104>
   15d60:	20800044 	addi	r2,r4,1
   15d64:	1085883a 	add	r2,r2,r2
   15d68:	1085883a 	add	r2,r2,r2
   15d6c:	017fff04 	movi	r5,-4
   15d70:	18a5883a 	add	r18,r3,r2
   15d74:	50a7883a 	add	r19,r10,r2
   15d78:	00106600 	call	10660 <__mulsi3>
   15d7c:	144f883a 	add	r7,r2,r17
   15d80:	980b883a 	mov	r5,r19
   15d84:	9007883a 	mov	r3,r18
   15d88:	383fc226 	beq	r7,zero,15c94 <memmove+0x4c>
   15d8c:	19cf883a 	add	r7,r3,r7
   15d90:	29800003 	ldbu	r6,0(r5)
   15d94:	18c00044 	addi	r3,r3,1
   15d98:	29400044 	addi	r5,r5,1
   15d9c:	19bfffc5 	stb	r6,-1(r3)
   15da0:	19fffb1e 	bne	r3,r7,15d90 <memmove+0x148>
   15da4:	8005883a 	mov	r2,r16
   15da8:	dfc00417 	ldw	ra,16(sp)
   15dac:	dcc00317 	ldw	r19,12(sp)
   15db0:	dc800217 	ldw	r18,8(sp)
   15db4:	dc400117 	ldw	r17,4(sp)
   15db8:	dc000017 	ldw	r16,0(sp)
   15dbc:	dec00504 	addi	sp,sp,20
   15dc0:	f800283a 	ret
   15dc4:	8007883a 	mov	r3,r16
   15dc8:	003fef06 	br	15d88 <memmove+0x140>
   15dcc:	500b883a 	mov	r5,r10
   15dd0:	003fed06 	br	15d88 <memmove+0x140>

00015dd4 <memset>:
   15dd4:	00c000c4 	movi	r3,3
   15dd8:	2005883a 	mov	r2,r4
   15ddc:	29403fcc 	andi	r5,r5,255
   15de0:	19802d2e 	bgeu	r3,r6,15e98 <memset+0xc4>
   15de4:	20c6703a 	and	r3,r4,r3
   15de8:	18002e1e 	bne	r3,zero,15ea4 <memset+0xd0>
   15dec:	2806923a 	slli	r3,r5,8
   15df0:	010003c4 	movi	r4,15
   15df4:	3011883a 	mov	r8,r6
   15df8:	1946b03a 	or	r3,r3,r5
   15dfc:	180e943a 	slli	r7,r3,16
   15e00:	38ceb03a 	or	r7,r7,r3
   15e04:	1007883a 	mov	r3,r2
   15e08:	21800f2e 	bgeu	r4,r6,15e48 <memset+0x74>
   15e0c:	19c00015 	stw	r7,0(r3)
   15e10:	19c00115 	stw	r7,4(r3)
   15e14:	19c00215 	stw	r7,8(r3)
   15e18:	19c00315 	stw	r7,12(r3)
   15e1c:	423ffc04 	addi	r8,r8,-16
   15e20:	18c00404 	addi	r3,r3,16
   15e24:	223ff936 	bltu	r4,r8,15e0c <memset+0x38>
   15e28:	30fffc04 	addi	r3,r6,-16
   15e2c:	1806d13a 	srli	r3,r3,4
   15e30:	318003cc 	andi	r6,r6,15
   15e34:	010000c4 	movi	r4,3
   15e38:	18c00044 	addi	r3,r3,1
   15e3c:	1806913a 	slli	r3,r3,4
   15e40:	10c7883a 	add	r3,r2,r3
   15e44:	21800e2e 	bgeu	r4,r6,15e80 <memset+0xac>
   15e48:	1813883a 	mov	r9,r3
   15e4c:	3011883a 	mov	r8,r6
   15e50:	010000c4 	movi	r4,3
   15e54:	49c00015 	stw	r7,0(r9)
   15e58:	423fff04 	addi	r8,r8,-4
   15e5c:	4a400104 	addi	r9,r9,4
   15e60:	223ffc36 	bltu	r4,r8,15e54 <memset+0x80>
   15e64:	313fff04 	addi	r4,r6,-4
   15e68:	2008d0ba 	srli	r4,r4,2
   15e6c:	318000cc 	andi	r6,r6,3
   15e70:	21000044 	addi	r4,r4,1
   15e74:	2109883a 	add	r4,r4,r4
   15e78:	2109883a 	add	r4,r4,r4
   15e7c:	1907883a 	add	r3,r3,r4
   15e80:	30000a26 	beq	r6,zero,15eac <memset+0xd8>
   15e84:	198d883a 	add	r6,r3,r6
   15e88:	19400005 	stb	r5,0(r3)
   15e8c:	18c00044 	addi	r3,r3,1
   15e90:	19bffd1e 	bne	r3,r6,15e88 <memset+0xb4>
   15e94:	f800283a 	ret
   15e98:	2007883a 	mov	r3,r4
   15e9c:	303ff91e 	bne	r6,zero,15e84 <memset+0xb0>
   15ea0:	00000206 	br	15eac <memset+0xd8>
   15ea4:	2007883a 	mov	r3,r4
   15ea8:	003ff606 	br	15e84 <memset+0xb0>
   15eac:	f800283a 	ret

00015eb0 <_Balloc>:
   15eb0:	20801317 	ldw	r2,76(r4)
   15eb4:	defffc04 	addi	sp,sp,-16
   15eb8:	dc400115 	stw	r17,4(sp)
   15ebc:	dc000015 	stw	r16,0(sp)
   15ec0:	dfc00315 	stw	ra,12(sp)
   15ec4:	dc800215 	stw	r18,8(sp)
   15ec8:	2023883a 	mov	r17,r4
   15ecc:	2821883a 	mov	r16,r5
   15ed0:	10000f26 	beq	r2,zero,15f10 <_Balloc+0x60>
   15ed4:	8407883a 	add	r3,r16,r16
   15ed8:	18c7883a 	add	r3,r3,r3
   15edc:	10c7883a 	add	r3,r2,r3
   15ee0:	18800017 	ldw	r2,0(r3)
   15ee4:	10001126 	beq	r2,zero,15f2c <_Balloc+0x7c>
   15ee8:	11000017 	ldw	r4,0(r2)
   15eec:	19000015 	stw	r4,0(r3)
   15ef0:	10000415 	stw	zero,16(r2)
   15ef4:	10000315 	stw	zero,12(r2)
   15ef8:	dfc00317 	ldw	ra,12(sp)
   15efc:	dc800217 	ldw	r18,8(sp)
   15f00:	dc400117 	ldw	r17,4(sp)
   15f04:	dc000017 	ldw	r16,0(sp)
   15f08:	dec00404 	addi	sp,sp,16
   15f0c:	f800283a 	ret
   15f10:	01400104 	movi	r5,4
   15f14:	01800404 	movi	r6,16
   15f18:	00178140 	call	17814 <_calloc_r>
   15f1c:	88801315 	stw	r2,76(r17)
   15f20:	103fec1e 	bne	r2,zero,15ed4 <_Balloc+0x24>
   15f24:	0005883a 	mov	r2,zero
   15f28:	003ff306 	br	15ef8 <_Balloc+0x48>
   15f2c:	01400044 	movi	r5,1
   15f30:	2c24983a 	sll	r18,r5,r16
   15f34:	8809883a 	mov	r4,r17
   15f38:	91800144 	addi	r6,r18,5
   15f3c:	318d883a 	add	r6,r6,r6
   15f40:	318d883a 	add	r6,r6,r6
   15f44:	00178140 	call	17814 <_calloc_r>
   15f48:	103ff626 	beq	r2,zero,15f24 <_Balloc+0x74>
   15f4c:	14000115 	stw	r16,4(r2)
   15f50:	14800215 	stw	r18,8(r2)
   15f54:	003fe606 	br	15ef0 <_Balloc+0x40>

00015f58 <_Bfree>:
   15f58:	28000826 	beq	r5,zero,15f7c <_Bfree+0x24>
   15f5c:	28c00117 	ldw	r3,4(r5)
   15f60:	20801317 	ldw	r2,76(r4)
   15f64:	18c7883a 	add	r3,r3,r3
   15f68:	18c7883a 	add	r3,r3,r3
   15f6c:	10c5883a 	add	r2,r2,r3
   15f70:	10c00017 	ldw	r3,0(r2)
   15f74:	28c00015 	stw	r3,0(r5)
   15f78:	11400015 	stw	r5,0(r2)
   15f7c:	f800283a 	ret

00015f80 <__multadd>:
   15f80:	defff604 	addi	sp,sp,-40
   15f84:	dd400515 	stw	r21,20(sp)
   15f88:	2d400417 	ldw	r21,16(r5)
   15f8c:	df000815 	stw	fp,32(sp)
   15f90:	ddc00715 	stw	r23,28(sp)
   15f94:	dd800615 	stw	r22,24(sp)
   15f98:	dd000415 	stw	r20,16(sp)
   15f9c:	dc400115 	stw	r17,4(sp)
   15fa0:	dc000015 	stw	r16,0(sp)
   15fa4:	dfc00915 	stw	ra,36(sp)
   15fa8:	dcc00315 	stw	r19,12(sp)
   15fac:	dc800215 	stw	r18,8(sp)
   15fb0:	282d883a 	mov	r22,r5
   15fb4:	202f883a 	mov	r23,r4
   15fb8:	3029883a 	mov	r20,r6
   15fbc:	3839883a 	mov	fp,r7
   15fc0:	2c000504 	addi	r16,r5,20
   15fc4:	0023883a 	mov	r17,zero
   15fc8:	84c00017 	ldw	r19,0(r16)
   15fcc:	a00b883a 	mov	r5,r20
   15fd0:	8c400044 	addi	r17,r17,1
   15fd4:	993fffcc 	andi	r4,r19,65535
   15fd8:	00106600 	call	10660 <__mulsi3>
   15fdc:	1725883a 	add	r18,r2,fp
   15fe0:	9808d43a 	srli	r4,r19,16
   15fe4:	9026d43a 	srli	r19,r18,16
   15fe8:	a00b883a 	mov	r5,r20
   15fec:	00106600 	call	10660 <__mulsi3>
   15ff0:	988f883a 	add	r7,r19,r2
   15ff4:	3804943a 	slli	r2,r7,16
   15ff8:	94bfffcc 	andi	r18,r18,65535
   15ffc:	3838d43a 	srli	fp,r7,16
   16000:	14a5883a 	add	r18,r2,r18
   16004:	84800015 	stw	r18,0(r16)
   16008:	84000104 	addi	r16,r16,4
   1600c:	8d7fee16 	blt	r17,r21,15fc8 <__multadd+0x48>
   16010:	e0000926 	beq	fp,zero,16038 <__multadd+0xb8>
   16014:	b0800217 	ldw	r2,8(r22)
   16018:	a880140e 	bge	r21,r2,1606c <__multadd+0xec>
   1601c:	a8800144 	addi	r2,r21,5
   16020:	1085883a 	add	r2,r2,r2
   16024:	1085883a 	add	r2,r2,r2
   16028:	b085883a 	add	r2,r22,r2
   1602c:	ad400044 	addi	r21,r21,1
   16030:	17000015 	stw	fp,0(r2)
   16034:	b5400415 	stw	r21,16(r22)
   16038:	b005883a 	mov	r2,r22
   1603c:	dfc00917 	ldw	ra,36(sp)
   16040:	df000817 	ldw	fp,32(sp)
   16044:	ddc00717 	ldw	r23,28(sp)
   16048:	dd800617 	ldw	r22,24(sp)
   1604c:	dd400517 	ldw	r21,20(sp)
   16050:	dd000417 	ldw	r20,16(sp)
   16054:	dcc00317 	ldw	r19,12(sp)
   16058:	dc800217 	ldw	r18,8(sp)
   1605c:	dc400117 	ldw	r17,4(sp)
   16060:	dc000017 	ldw	r16,0(sp)
   16064:	dec00a04 	addi	sp,sp,40
   16068:	f800283a 	ret
   1606c:	b1400117 	ldw	r5,4(r22)
   16070:	b809883a 	mov	r4,r23
   16074:	29400044 	addi	r5,r5,1
   16078:	0015eb00 	call	15eb0 <_Balloc>
   1607c:	b1800417 	ldw	r6,16(r22)
   16080:	b1400304 	addi	r5,r22,12
   16084:	11000304 	addi	r4,r2,12
   16088:	31800084 	addi	r6,r6,2
   1608c:	318d883a 	add	r6,r6,r6
   16090:	318d883a 	add	r6,r6,r6
   16094:	1021883a 	mov	r16,r2
   16098:	0015b080 	call	15b08 <memcpy>
   1609c:	b0c00117 	ldw	r3,4(r22)
   160a0:	b8801317 	ldw	r2,76(r23)
   160a4:	18c7883a 	add	r3,r3,r3
   160a8:	18c7883a 	add	r3,r3,r3
   160ac:	10c5883a 	add	r2,r2,r3
   160b0:	10c00017 	ldw	r3,0(r2)
   160b4:	b0c00015 	stw	r3,0(r22)
   160b8:	15800015 	stw	r22,0(r2)
   160bc:	802d883a 	mov	r22,r16
   160c0:	003fd606 	br	1601c <__multadd+0x9c>

000160c4 <__s2b>:
   160c4:	defff904 	addi	sp,sp,-28
   160c8:	dd000415 	stw	r20,16(sp)
   160cc:	dc400115 	stw	r17,4(sp)
   160d0:	2829883a 	mov	r20,r5
   160d4:	2023883a 	mov	r17,r4
   160d8:	01400244 	movi	r5,9
   160dc:	39000204 	addi	r4,r7,8
   160e0:	dcc00315 	stw	r19,12(sp)
   160e4:	dc800215 	stw	r18,8(sp)
   160e8:	dfc00615 	stw	ra,24(sp)
   160ec:	dd400515 	stw	r21,20(sp)
   160f0:	dc000015 	stw	r16,0(sp)
   160f4:	3825883a 	mov	r18,r7
   160f8:	3027883a 	mov	r19,r6
   160fc:	00105a40 	call	105a4 <__divsi3>
   16100:	00c00044 	movi	r3,1
   16104:	000b883a 	mov	r5,zero
   16108:	1880030e 	bge	r3,r2,16118 <__s2b+0x54>
   1610c:	18c7883a 	add	r3,r3,r3
   16110:	29400044 	addi	r5,r5,1
   16114:	18bffd16 	blt	r3,r2,1610c <__s2b+0x48>
   16118:	8809883a 	mov	r4,r17
   1611c:	0015eb00 	call	15eb0 <_Balloc>
   16120:	d8c00717 	ldw	r3,28(sp)
   16124:	10c00515 	stw	r3,20(r2)
   16128:	00c00044 	movi	r3,1
   1612c:	10c00415 	stw	r3,16(r2)
   16130:	00c00244 	movi	r3,9
   16134:	1cc0210e 	bge	r3,r19,161bc <__s2b+0xf8>
   16138:	a0eb883a 	add	r21,r20,r3
   1613c:	a821883a 	mov	r16,r21
   16140:	a4e9883a 	add	r20,r20,r19
   16144:	81c00007 	ldb	r7,0(r16)
   16148:	8809883a 	mov	r4,r17
   1614c:	84000044 	addi	r16,r16,1
   16150:	100b883a 	mov	r5,r2
   16154:	01800284 	movi	r6,10
   16158:	39fff404 	addi	r7,r7,-48
   1615c:	0015f800 	call	15f80 <__multadd>
   16160:	853ff81e 	bne	r16,r20,16144 <__s2b+0x80>
   16164:	ace1883a 	add	r16,r21,r19
   16168:	843ffe04 	addi	r16,r16,-8
   1616c:	9c800a0e 	bge	r19,r18,16198 <__s2b+0xd4>
   16170:	94e5c83a 	sub	r18,r18,r19
   16174:	84a5883a 	add	r18,r16,r18
   16178:	81c00007 	ldb	r7,0(r16)
   1617c:	8809883a 	mov	r4,r17
   16180:	84000044 	addi	r16,r16,1
   16184:	100b883a 	mov	r5,r2
   16188:	01800284 	movi	r6,10
   1618c:	39fff404 	addi	r7,r7,-48
   16190:	0015f800 	call	15f80 <__multadd>
   16194:	84bff81e 	bne	r16,r18,16178 <__s2b+0xb4>
   16198:	dfc00617 	ldw	ra,24(sp)
   1619c:	dd400517 	ldw	r21,20(sp)
   161a0:	dd000417 	ldw	r20,16(sp)
   161a4:	dcc00317 	ldw	r19,12(sp)
   161a8:	dc800217 	ldw	r18,8(sp)
   161ac:	dc400117 	ldw	r17,4(sp)
   161b0:	dc000017 	ldw	r16,0(sp)
   161b4:	dec00704 	addi	sp,sp,28
   161b8:	f800283a 	ret
   161bc:	a4000284 	addi	r16,r20,10
   161c0:	1827883a 	mov	r19,r3
   161c4:	003fe906 	br	1616c <__s2b+0xa8>

000161c8 <__hi0bits>:
   161c8:	20bfffec 	andhi	r2,r4,65535
   161cc:	1000141e 	bne	r2,zero,16220 <__hi0bits+0x58>
   161d0:	2008943a 	slli	r4,r4,16
   161d4:	00800404 	movi	r2,16
   161d8:	20ffc02c 	andhi	r3,r4,65280
   161dc:	1800021e 	bne	r3,zero,161e8 <__hi0bits+0x20>
   161e0:	2008923a 	slli	r4,r4,8
   161e4:	10800204 	addi	r2,r2,8
   161e8:	20fc002c 	andhi	r3,r4,61440
   161ec:	1800021e 	bne	r3,zero,161f8 <__hi0bits+0x30>
   161f0:	2008913a 	slli	r4,r4,4
   161f4:	10800104 	addi	r2,r2,4
   161f8:	20f0002c 	andhi	r3,r4,49152
   161fc:	1800031e 	bne	r3,zero,1620c <__hi0bits+0x44>
   16200:	2109883a 	add	r4,r4,r4
   16204:	10800084 	addi	r2,r2,2
   16208:	2109883a 	add	r4,r4,r4
   1620c:	20000316 	blt	r4,zero,1621c <__hi0bits+0x54>
   16210:	2110002c 	andhi	r4,r4,16384
   16214:	2000041e 	bne	r4,zero,16228 <__hi0bits+0x60>
   16218:	00800804 	movi	r2,32
   1621c:	f800283a 	ret
   16220:	0005883a 	mov	r2,zero
   16224:	003fec06 	br	161d8 <__hi0bits+0x10>
   16228:	10800044 	addi	r2,r2,1
   1622c:	f800283a 	ret

00016230 <__lo0bits>:
   16230:	20c00017 	ldw	r3,0(r4)
   16234:	188001cc 	andi	r2,r3,7
   16238:	10000826 	beq	r2,zero,1625c <__lo0bits+0x2c>
   1623c:	1880004c 	andi	r2,r3,1
   16240:	1000211e 	bne	r2,zero,162c8 <__lo0bits+0x98>
   16244:	1880008c 	andi	r2,r3,2
   16248:	1000211e 	bne	r2,zero,162d0 <__lo0bits+0xa0>
   1624c:	1806d0ba 	srli	r3,r3,2
   16250:	00800084 	movi	r2,2
   16254:	20c00015 	stw	r3,0(r4)
   16258:	f800283a 	ret
   1625c:	18bfffcc 	andi	r2,r3,65535
   16260:	10001326 	beq	r2,zero,162b0 <__lo0bits+0x80>
   16264:	0005883a 	mov	r2,zero
   16268:	19403fcc 	andi	r5,r3,255
   1626c:	2800021e 	bne	r5,zero,16278 <__lo0bits+0x48>
   16270:	1806d23a 	srli	r3,r3,8
   16274:	10800204 	addi	r2,r2,8
   16278:	194003cc 	andi	r5,r3,15
   1627c:	2800021e 	bne	r5,zero,16288 <__lo0bits+0x58>
   16280:	1806d13a 	srli	r3,r3,4
   16284:	10800104 	addi	r2,r2,4
   16288:	194000cc 	andi	r5,r3,3
   1628c:	2800021e 	bne	r5,zero,16298 <__lo0bits+0x68>
   16290:	1806d0ba 	srli	r3,r3,2
   16294:	10800084 	addi	r2,r2,2
   16298:	1940004c 	andi	r5,r3,1
   1629c:	2800081e 	bne	r5,zero,162c0 <__lo0bits+0x90>
   162a0:	1806d07a 	srli	r3,r3,1
   162a4:	1800051e 	bne	r3,zero,162bc <__lo0bits+0x8c>
   162a8:	00800804 	movi	r2,32
   162ac:	f800283a 	ret
   162b0:	1806d43a 	srli	r3,r3,16
   162b4:	00800404 	movi	r2,16
   162b8:	003feb06 	br	16268 <__lo0bits+0x38>
   162bc:	10800044 	addi	r2,r2,1
   162c0:	20c00015 	stw	r3,0(r4)
   162c4:	f800283a 	ret
   162c8:	0005883a 	mov	r2,zero
   162cc:	f800283a 	ret
   162d0:	1806d07a 	srli	r3,r3,1
   162d4:	00800044 	movi	r2,1
   162d8:	20c00015 	stw	r3,0(r4)
   162dc:	f800283a 	ret

000162e0 <__i2b>:
   162e0:	defffd04 	addi	sp,sp,-12
   162e4:	dc000015 	stw	r16,0(sp)
   162e8:	04000044 	movi	r16,1
   162ec:	dc400115 	stw	r17,4(sp)
   162f0:	2823883a 	mov	r17,r5
   162f4:	800b883a 	mov	r5,r16
   162f8:	dfc00215 	stw	ra,8(sp)
   162fc:	0015eb00 	call	15eb0 <_Balloc>
   16300:	14400515 	stw	r17,20(r2)
   16304:	14000415 	stw	r16,16(r2)
   16308:	dfc00217 	ldw	ra,8(sp)
   1630c:	dc400117 	ldw	r17,4(sp)
   16310:	dc000017 	ldw	r16,0(sp)
   16314:	dec00304 	addi	sp,sp,12
   16318:	f800283a 	ret

0001631c <__multiply>:
   1631c:	defff004 	addi	sp,sp,-64
   16320:	dc800815 	stw	r18,32(sp)
   16324:	dc400715 	stw	r17,28(sp)
   16328:	34800417 	ldw	r18,16(r6)
   1632c:	2c400417 	ldw	r17,16(r5)
   16330:	ddc00d15 	stw	r23,52(sp)
   16334:	dc000615 	stw	r16,24(sp)
   16338:	dfc00f15 	stw	ra,60(sp)
   1633c:	df000e15 	stw	fp,56(sp)
   16340:	dd800c15 	stw	r22,48(sp)
   16344:	dd400b15 	stw	r21,44(sp)
   16348:	dd000a15 	stw	r20,40(sp)
   1634c:	dcc00915 	stw	r19,36(sp)
   16350:	2821883a 	mov	r16,r5
   16354:	302f883a 	mov	r23,r6
   16358:	8c80050e 	bge	r17,r18,16370 <__multiply+0x54>
   1635c:	8807883a 	mov	r3,r17
   16360:	3021883a 	mov	r16,r6
   16364:	9023883a 	mov	r17,r18
   16368:	282f883a 	mov	r23,r5
   1636c:	1825883a 	mov	r18,r3
   16370:	80800217 	ldw	r2,8(r16)
   16374:	8c87883a 	add	r3,r17,r18
   16378:	d8c00115 	stw	r3,4(sp)
   1637c:	81400117 	ldw	r5,4(r16)
   16380:	10c0010e 	bge	r2,r3,16388 <__multiply+0x6c>
   16384:	29400044 	addi	r5,r5,1
   16388:	0015eb00 	call	15eb0 <_Balloc>
   1638c:	d8c00117 	ldw	r3,4(sp)
   16390:	d8800515 	stw	r2,20(sp)
   16394:	14c00504 	addi	r19,r2,20
   16398:	1d400144 	addi	r21,r3,5
   1639c:	ad6b883a 	add	r21,r21,r21
   163a0:	ad6b883a 	add	r21,r21,r21
   163a4:	156b883a 	add	r21,r2,r21
   163a8:	dd400215 	stw	r21,8(sp)
   163ac:	9805883a 	mov	r2,r19
   163b0:	9d40042e 	bgeu	r19,r21,163c4 <__multiply+0xa8>
   163b4:	d8c00217 	ldw	r3,8(sp)
   163b8:	10000015 	stw	zero,0(r2)
   163bc:	10800104 	addi	r2,r2,4
   163c0:	10fffc36 	bltu	r2,r3,163b4 <__multiply+0x98>
   163c4:	94800144 	addi	r18,r18,5
   163c8:	94a5883a 	add	r18,r18,r18
   163cc:	94ad883a 	add	r22,r18,r18
   163d0:	8c400144 	addi	r17,r17,5
   163d4:	8c63883a 	add	r17,r17,r17
   163d8:	bdad883a 	add	r22,r23,r22
   163dc:	80c00504 	addi	r3,r16,20
   163e0:	8c63883a 	add	r17,r17,r17
   163e4:	bc800504 	addi	r18,r23,20
   163e8:	dd800315 	stw	r22,12(sp)
   163ec:	d8c00415 	stw	r3,16(sp)
   163f0:	dcc00015 	stw	r19,0(sp)
   163f4:	8463883a 	add	r17,r16,r17
   163f8:	9580412e 	bgeu	r18,r22,16500 <__multiply+0x1e4>
   163fc:	90800017 	ldw	r2,0(r18)
   16400:	173fffcc 	andi	fp,r2,65535
   16404:	e0001a26 	beq	fp,zero,16470 <__multiply+0x154>
   16408:	dd000017 	ldw	r20,0(sp)
   1640c:	dd800417 	ldw	r22,16(sp)
   16410:	002b883a 	mov	r21,zero
   16414:	b4c00017 	ldw	r19,0(r22)
   16418:	a4000017 	ldw	r16,0(r20)
   1641c:	e00b883a 	mov	r5,fp
   16420:	993fffcc 	andi	r4,r19,65535
   16424:	00106600 	call	10660 <__mulsi3>
   16428:	9808d43a 	srli	r4,r19,16
   1642c:	817fffcc 	andi	r5,r16,65535
   16430:	1145883a 	add	r2,r2,r5
   16434:	e00b883a 	mov	r5,fp
   16438:	1567883a 	add	r19,r2,r21
   1643c:	8020d43a 	srli	r16,r16,16
   16440:	00106600 	call	10660 <__mulsi3>
   16444:	9808d43a 	srli	r4,r19,16
   16448:	1405883a 	add	r2,r2,r16
   1644c:	a4c0000d 	sth	r19,0(r20)
   16450:	110f883a 	add	r7,r2,r4
   16454:	a1c0008d 	sth	r7,2(r20)
   16458:	b5800104 	addi	r22,r22,4
   1645c:	382ad43a 	srli	r21,r7,16
   16460:	a5000104 	addi	r20,r20,4
   16464:	b47feb36 	bltu	r22,r17,16414 <__multiply+0xf8>
   16468:	a5400015 	stw	r21,0(r20)
   1646c:	90800017 	ldw	r2,0(r18)
   16470:	1038d43a 	srli	fp,r2,16
   16474:	e0001c26 	beq	fp,zero,164e8 <__multiply+0x1cc>
   16478:	d8c00017 	ldw	r3,0(sp)
   1647c:	dd000417 	ldw	r20,16(sp)
   16480:	002b883a 	mov	r21,zero
   16484:	1d800017 	ldw	r22,0(r3)
   16488:	182f883a 	mov	r23,r3
   1648c:	b021883a 	mov	r16,r22
   16490:	a4c00017 	ldw	r19,0(r20)
   16494:	8020d43a 	srli	r16,r16,16
   16498:	e00b883a 	mov	r5,fp
   1649c:	993fffcc 	andi	r4,r19,65535
   164a0:	00106600 	call	10660 <__mulsi3>
   164a4:	1405883a 	add	r2,r2,r16
   164a8:	9808d43a 	srli	r4,r19,16
   164ac:	156b883a 	add	r21,r2,r21
   164b0:	bdc00104 	addi	r23,r23,4
   164b4:	bdbfff0d 	sth	r22,-4(r23)
   164b8:	bd7fff8d 	sth	r21,-2(r23)
   164bc:	bc000017 	ldw	r16,0(r23)
   164c0:	e00b883a 	mov	r5,fp
   164c4:	00106600 	call	10660 <__mulsi3>
   164c8:	a80ed43a 	srli	r7,r21,16
   164cc:	813fffcc 	andi	r4,r16,65535
   164d0:	2085883a 	add	r2,r4,r2
   164d4:	11ed883a 	add	r22,r2,r7
   164d8:	a5000104 	addi	r20,r20,4
   164dc:	b02ad43a 	srli	r21,r22,16
   164e0:	a47feb36 	bltu	r20,r17,16490 <__multiply+0x174>
   164e4:	bd800015 	stw	r22,0(r23)
   164e8:	d8c00017 	ldw	r3,0(sp)
   164ec:	94800104 	addi	r18,r18,4
   164f0:	18c00104 	addi	r3,r3,4
   164f4:	d8c00015 	stw	r3,0(sp)
   164f8:	d8c00317 	ldw	r3,12(sp)
   164fc:	90ffbf36 	bltu	r18,r3,163fc <__multiply+0xe0>
   16500:	d8c00117 	ldw	r3,4(sp)
   16504:	00c00c0e 	bge	zero,r3,16538 <__multiply+0x21c>
   16508:	d8c00217 	ldw	r3,8(sp)
   1650c:	18bfff17 	ldw	r2,-4(r3)
   16510:	1d7fff04 	addi	r21,r3,-4
   16514:	10000326 	beq	r2,zero,16524 <__multiply+0x208>
   16518:	00000706 	br	16538 <__multiply+0x21c>
   1651c:	a8800017 	ldw	r2,0(r21)
   16520:	1000051e 	bne	r2,zero,16538 <__multiply+0x21c>
   16524:	d8c00117 	ldw	r3,4(sp)
   16528:	ad7fff04 	addi	r21,r21,-4
   1652c:	18ffffc4 	addi	r3,r3,-1
   16530:	d8c00115 	stw	r3,4(sp)
   16534:	183ff91e 	bne	r3,zero,1651c <__multiply+0x200>
   16538:	d8800517 	ldw	r2,20(sp)
   1653c:	d8c00117 	ldw	r3,4(sp)
   16540:	10c00415 	stw	r3,16(r2)
   16544:	dfc00f17 	ldw	ra,60(sp)
   16548:	df000e17 	ldw	fp,56(sp)
   1654c:	ddc00d17 	ldw	r23,52(sp)
   16550:	dd800c17 	ldw	r22,48(sp)
   16554:	dd400b17 	ldw	r21,44(sp)
   16558:	dd000a17 	ldw	r20,40(sp)
   1655c:	dcc00917 	ldw	r19,36(sp)
   16560:	dc800817 	ldw	r18,32(sp)
   16564:	dc400717 	ldw	r17,28(sp)
   16568:	dc000617 	ldw	r16,24(sp)
   1656c:	dec01004 	addi	sp,sp,64
   16570:	f800283a 	ret

00016574 <__pow5mult>:
   16574:	defffb04 	addi	sp,sp,-20
   16578:	dcc00315 	stw	r19,12(sp)
   1657c:	dc800215 	stw	r18,8(sp)
   16580:	dc000015 	stw	r16,0(sp)
   16584:	dfc00415 	stw	ra,16(sp)
   16588:	dc400115 	stw	r17,4(sp)
   1658c:	308000cc 	andi	r2,r6,3
   16590:	3021883a 	mov	r16,r6
   16594:	2027883a 	mov	r19,r4
   16598:	2825883a 	mov	r18,r5
   1659c:	10002e1e 	bne	r2,zero,16658 <__pow5mult+0xe4>
   165a0:	8021d0ba 	srai	r16,r16,2
   165a4:	80001a26 	beq	r16,zero,16610 <__pow5mult+0x9c>
   165a8:	9c401217 	ldw	r17,72(r19)
   165ac:	8800061e 	bne	r17,zero,165c8 <__pow5mult+0x54>
   165b0:	00003406 	br	16684 <__pow5mult+0x110>
   165b4:	8021d07a 	srai	r16,r16,1
   165b8:	80001526 	beq	r16,zero,16610 <__pow5mult+0x9c>
   165bc:	88c00017 	ldw	r3,0(r17)
   165c0:	18001b26 	beq	r3,zero,16630 <__pow5mult+0xbc>
   165c4:	1823883a 	mov	r17,r3
   165c8:	80c0004c 	andi	r3,r16,1
   165cc:	183ff926 	beq	r3,zero,165b4 <__pow5mult+0x40>
   165d0:	900b883a 	mov	r5,r18
   165d4:	880d883a 	mov	r6,r17
   165d8:	9809883a 	mov	r4,r19
   165dc:	001631c0 	call	1631c <__multiply>
   165e0:	90001b26 	beq	r18,zero,16650 <__pow5mult+0xdc>
   165e4:	91000117 	ldw	r4,4(r18)
   165e8:	98c01317 	ldw	r3,76(r19)
   165ec:	8021d07a 	srai	r16,r16,1
   165f0:	2109883a 	add	r4,r4,r4
   165f4:	2109883a 	add	r4,r4,r4
   165f8:	1907883a 	add	r3,r3,r4
   165fc:	19000017 	ldw	r4,0(r3)
   16600:	91000015 	stw	r4,0(r18)
   16604:	1c800015 	stw	r18,0(r3)
   16608:	1025883a 	mov	r18,r2
   1660c:	803feb1e 	bne	r16,zero,165bc <__pow5mult+0x48>
   16610:	9005883a 	mov	r2,r18
   16614:	dfc00417 	ldw	ra,16(sp)
   16618:	dcc00317 	ldw	r19,12(sp)
   1661c:	dc800217 	ldw	r18,8(sp)
   16620:	dc400117 	ldw	r17,4(sp)
   16624:	dc000017 	ldw	r16,0(sp)
   16628:	dec00504 	addi	sp,sp,20
   1662c:	f800283a 	ret
   16630:	880b883a 	mov	r5,r17
   16634:	880d883a 	mov	r6,r17
   16638:	9809883a 	mov	r4,r19
   1663c:	001631c0 	call	1631c <__multiply>
   16640:	88800015 	stw	r2,0(r17)
   16644:	10000015 	stw	zero,0(r2)
   16648:	1023883a 	mov	r17,r2
   1664c:	003fde06 	br	165c8 <__pow5mult+0x54>
   16650:	1025883a 	mov	r18,r2
   16654:	003fd706 	br	165b4 <__pow5mult+0x40>
   16658:	10bfffc4 	addi	r2,r2,-1
   1665c:	1085883a 	add	r2,r2,r2
   16660:	00c000f4 	movhi	r3,3
   16664:	18e0c104 	addi	r3,r3,-31996
   16668:	1085883a 	add	r2,r2,r2
   1666c:	1885883a 	add	r2,r3,r2
   16670:	11800017 	ldw	r6,0(r2)
   16674:	000f883a 	mov	r7,zero
   16678:	0015f800 	call	15f80 <__multadd>
   1667c:	1025883a 	mov	r18,r2
   16680:	003fc706 	br	165a0 <__pow5mult+0x2c>
   16684:	9809883a 	mov	r4,r19
   16688:	01409c44 	movi	r5,625
   1668c:	00162e00 	call	162e0 <__i2b>
   16690:	98801215 	stw	r2,72(r19)
   16694:	1023883a 	mov	r17,r2
   16698:	10000015 	stw	zero,0(r2)
   1669c:	003fca06 	br	165c8 <__pow5mult+0x54>

000166a0 <__lshift>:
   166a0:	defff904 	addi	sp,sp,-28
   166a4:	dd400515 	stw	r21,20(sp)
   166a8:	dc400115 	stw	r17,4(sp)
   166ac:	2d400417 	ldw	r21,16(r5)
   166b0:	3023d17a 	srai	r17,r6,5
   166b4:	28800217 	ldw	r2,8(r5)
   166b8:	dd000415 	stw	r20,16(sp)
   166bc:	8d6b883a 	add	r21,r17,r21
   166c0:	dcc00315 	stw	r19,12(sp)
   166c4:	dc800215 	stw	r18,8(sp)
   166c8:	dc000015 	stw	r16,0(sp)
   166cc:	dfc00615 	stw	ra,24(sp)
   166d0:	ac000044 	addi	r16,r21,1
   166d4:	2825883a 	mov	r18,r5
   166d8:	3029883a 	mov	r20,r6
   166dc:	2027883a 	mov	r19,r4
   166e0:	29400117 	ldw	r5,4(r5)
   166e4:	1400030e 	bge	r2,r16,166f4 <__lshift+0x54>
   166e8:	1085883a 	add	r2,r2,r2
   166ec:	29400044 	addi	r5,r5,1
   166f0:	143ffd16 	blt	r2,r16,166e8 <__lshift+0x48>
   166f4:	9809883a 	mov	r4,r19
   166f8:	0015eb00 	call	15eb0 <_Balloc>
   166fc:	10c00504 	addi	r3,r2,20
   16700:	0440090e 	bge	zero,r17,16728 <__lshift+0x88>
   16704:	000f883a 	mov	r7,zero
   16708:	18000015 	stw	zero,0(r3)
   1670c:	39c00044 	addi	r7,r7,1
   16710:	18c00104 	addi	r3,r3,4
   16714:	3c7ffc1e 	bne	r7,r17,16708 <__lshift+0x68>
   16718:	38c00144 	addi	r3,r7,5
   1671c:	18c7883a 	add	r3,r3,r3
   16720:	18c7883a 	add	r3,r3,r3
   16724:	10c7883a 	add	r3,r2,r3
   16728:	92000417 	ldw	r8,16(r18)
   1672c:	a18007cc 	andi	r6,r20,31
   16730:	91c00504 	addi	r7,r18,20
   16734:	42000144 	addi	r8,r8,5
   16738:	4211883a 	add	r8,r8,r8
   1673c:	4211883a 	add	r8,r8,r8
   16740:	9211883a 	add	r8,r18,r8
   16744:	30002226 	beq	r6,zero,167d0 <__lshift+0x130>
   16748:	02800804 	movi	r10,32
   1674c:	5195c83a 	sub	r10,r10,r6
   16750:	000b883a 	mov	r5,zero
   16754:	3a400017 	ldw	r9,0(r7)
   16758:	18c00104 	addi	r3,r3,4
   1675c:	39c00104 	addi	r7,r7,4
   16760:	4992983a 	sll	r9,r9,r6
   16764:	2a4ab03a 	or	r5,r5,r9
   16768:	197fff15 	stw	r5,-4(r3)
   1676c:	397fff17 	ldw	r5,-4(r7)
   16770:	2a8ad83a 	srl	r5,r5,r10
   16774:	3a3ff736 	bltu	r7,r8,16754 <__lshift+0xb4>
   16778:	19400015 	stw	r5,0(r3)
   1677c:	28000126 	beq	r5,zero,16784 <__lshift+0xe4>
   16780:	ac000084 	addi	r16,r21,2
   16784:	91000117 	ldw	r4,4(r18)
   16788:	98c01317 	ldw	r3,76(r19)
   1678c:	843fffc4 	addi	r16,r16,-1
   16790:	2109883a 	add	r4,r4,r4
   16794:	2109883a 	add	r4,r4,r4
   16798:	1907883a 	add	r3,r3,r4
   1679c:	19000017 	ldw	r4,0(r3)
   167a0:	14000415 	stw	r16,16(r2)
   167a4:	91000015 	stw	r4,0(r18)
   167a8:	1c800015 	stw	r18,0(r3)
   167ac:	dfc00617 	ldw	ra,24(sp)
   167b0:	dd400517 	ldw	r21,20(sp)
   167b4:	dd000417 	ldw	r20,16(sp)
   167b8:	dcc00317 	ldw	r19,12(sp)
   167bc:	dc800217 	ldw	r18,8(sp)
   167c0:	dc400117 	ldw	r17,4(sp)
   167c4:	dc000017 	ldw	r16,0(sp)
   167c8:	dec00704 	addi	sp,sp,28
   167cc:	f800283a 	ret
   167d0:	39400017 	ldw	r5,0(r7)
   167d4:	18c00104 	addi	r3,r3,4
   167d8:	39c00104 	addi	r7,r7,4
   167dc:	197fff15 	stw	r5,-4(r3)
   167e0:	3a3fe82e 	bgeu	r7,r8,16784 <__lshift+0xe4>
   167e4:	39400017 	ldw	r5,0(r7)
   167e8:	18c00104 	addi	r3,r3,4
   167ec:	39c00104 	addi	r7,r7,4
   167f0:	197fff15 	stw	r5,-4(r3)
   167f4:	3a3ff636 	bltu	r7,r8,167d0 <__lshift+0x130>
   167f8:	003fe206 	br	16784 <__lshift+0xe4>

000167fc <__mcmp>:
   167fc:	20800417 	ldw	r2,16(r4)
   16800:	28c00417 	ldw	r3,16(r5)
   16804:	10c5c83a 	sub	r2,r2,r3
   16808:	10000f1e 	bne	r2,zero,16848 <__mcmp+0x4c>
   1680c:	18c00144 	addi	r3,r3,5
   16810:	18c7883a 	add	r3,r3,r3
   16814:	18c7883a 	add	r3,r3,r3
   16818:	21c00504 	addi	r7,r4,20
   1681c:	28cb883a 	add	r5,r5,r3
   16820:	20c9883a 	add	r4,r4,r3
   16824:	213fff04 	addi	r4,r4,-4
   16828:	297fff04 	addi	r5,r5,-4
   1682c:	21800017 	ldw	r6,0(r4)
   16830:	28c00017 	ldw	r3,0(r5)
   16834:	30c0021e 	bne	r6,r3,16840 <__mcmp+0x44>
   16838:	393ffa36 	bltu	r7,r4,16824 <__mcmp+0x28>
   1683c:	f800283a 	ret
   16840:	30c00236 	bltu	r6,r3,1684c <__mcmp+0x50>
   16844:	00800044 	movi	r2,1
   16848:	f800283a 	ret
   1684c:	00bfffc4 	movi	r2,-1
   16850:	f800283a 	ret

00016854 <__mdiff>:
   16854:	defffb04 	addi	sp,sp,-20
   16858:	dc000015 	stw	r16,0(sp)
   1685c:	2821883a 	mov	r16,r5
   16860:	dc800215 	stw	r18,8(sp)
   16864:	300b883a 	mov	r5,r6
   16868:	2025883a 	mov	r18,r4
   1686c:	8009883a 	mov	r4,r16
   16870:	dc400115 	stw	r17,4(sp)
   16874:	dfc00415 	stw	ra,16(sp)
   16878:	dcc00315 	stw	r19,12(sp)
   1687c:	3023883a 	mov	r17,r6
   16880:	00167fc0 	call	167fc <__mcmp>
   16884:	10005026 	beq	r2,zero,169c8 <__mdiff+0x174>
   16888:	10004a16 	blt	r2,zero,169b4 <__mdiff+0x160>
   1688c:	0027883a 	mov	r19,zero
   16890:	81400117 	ldw	r5,4(r16)
   16894:	9009883a 	mov	r4,r18
   16898:	0015eb00 	call	15eb0 <_Balloc>
   1689c:	82400417 	ldw	r9,16(r16)
   168a0:	89800417 	ldw	r6,16(r17)
   168a4:	14c00315 	stw	r19,12(r2)
   168a8:	4b800144 	addi	r14,r9,5
   168ac:	31800144 	addi	r6,r6,5
   168b0:	739d883a 	add	r14,r14,r14
   168b4:	318d883a 	add	r6,r6,r6
   168b8:	739d883a 	add	r14,r14,r14
   168bc:	318d883a 	add	r6,r6,r6
   168c0:	81c00504 	addi	r7,r16,20
   168c4:	839d883a 	add	r14,r16,r14
   168c8:	8a000504 	addi	r8,r17,20
   168cc:	898d883a 	add	r6,r17,r6
   168d0:	10c00504 	addi	r3,r2,20
   168d4:	0009883a 	mov	r4,zero
   168d8:	3b000017 	ldw	r12,0(r7)
   168dc:	42c00017 	ldw	r11,0(r8)
   168e0:	42000104 	addi	r8,r8,4
   168e4:	62bfffcc 	andi	r10,r12,65535
   168e8:	5b7fffcc 	andi	r13,r11,65535
   168ec:	5109883a 	add	r4,r10,r4
   168f0:	2355c83a 	sub	r10,r4,r13
   168f4:	5816d43a 	srli	r11,r11,16
   168f8:	6008d43a 	srli	r4,r12,16
   168fc:	501bd43a 	srai	r13,r10,16
   16900:	1a80000d 	sth	r10,0(r3)
   16904:	22c9c83a 	sub	r4,r4,r11
   16908:	2349883a 	add	r4,r4,r13
   1690c:	1900008d 	sth	r4,2(r3)
   16910:	39c00104 	addi	r7,r7,4
   16914:	2009d43a 	srai	r4,r4,16
   16918:	18c00104 	addi	r3,r3,4
   1691c:	41bfee36 	bltu	r8,r6,168d8 <__mdiff+0x84>
   16920:	180b883a 	mov	r5,r3
   16924:	3815883a 	mov	r10,r7
   16928:	3b80132e 	bgeu	r7,r14,16978 <__mdiff+0x124>
   1692c:	3a000017 	ldw	r8,0(r7)
   16930:	18c00104 	addi	r3,r3,4
   16934:	39c00104 	addi	r7,r7,4
   16938:	41bfffcc 	andi	r6,r8,65535
   1693c:	310d883a 	add	r6,r6,r4
   16940:	3009d43a 	srai	r4,r6,16
   16944:	4010d43a 	srli	r8,r8,16
   16948:	19bfff0d 	sth	r6,-4(r3)
   1694c:	2209883a 	add	r4,r4,r8
   16950:	193fff8d 	sth	r4,-2(r3)
   16954:	2009d43a 	srai	r4,r4,16
   16958:	3bbff436 	bltu	r7,r14,1692c <__mdiff+0xd8>
   1695c:	0286303a 	nor	r3,zero,r10
   16960:	1b87883a 	add	r3,r3,r14
   16964:	1806d0ba 	srli	r3,r3,2
   16968:	18c00044 	addi	r3,r3,1
   1696c:	18c7883a 	add	r3,r3,r3
   16970:	18c7883a 	add	r3,r3,r3
   16974:	28c7883a 	add	r3,r5,r3
   16978:	193fff17 	ldw	r4,-4(r3)
   1697c:	18ffff04 	addi	r3,r3,-4
   16980:	2000041e 	bne	r4,zero,16994 <__mdiff+0x140>
   16984:	18ffff04 	addi	r3,r3,-4
   16988:	19000017 	ldw	r4,0(r3)
   1698c:	4a7fffc4 	addi	r9,r9,-1
   16990:	203ffc26 	beq	r4,zero,16984 <__mdiff+0x130>
   16994:	12400415 	stw	r9,16(r2)
   16998:	dfc00417 	ldw	ra,16(sp)
   1699c:	dcc00317 	ldw	r19,12(sp)
   169a0:	dc800217 	ldw	r18,8(sp)
   169a4:	dc400117 	ldw	r17,4(sp)
   169a8:	dc000017 	ldw	r16,0(sp)
   169ac:	dec00504 	addi	sp,sp,20
   169b0:	f800283a 	ret
   169b4:	8005883a 	mov	r2,r16
   169b8:	04c00044 	movi	r19,1
   169bc:	8821883a 	mov	r16,r17
   169c0:	1023883a 	mov	r17,r2
   169c4:	003fb206 	br	16890 <__mdiff+0x3c>
   169c8:	9009883a 	mov	r4,r18
   169cc:	000b883a 	mov	r5,zero
   169d0:	0015eb00 	call	15eb0 <_Balloc>
   169d4:	00c00044 	movi	r3,1
   169d8:	10c00415 	stw	r3,16(r2)
   169dc:	10000515 	stw	zero,20(r2)
   169e0:	dfc00417 	ldw	ra,16(sp)
   169e4:	dcc00317 	ldw	r19,12(sp)
   169e8:	dc800217 	ldw	r18,8(sp)
   169ec:	dc400117 	ldw	r17,4(sp)
   169f0:	dc000017 	ldw	r16,0(sp)
   169f4:	dec00504 	addi	sp,sp,20
   169f8:	f800283a 	ret

000169fc <__ulp>:
   169fc:	295ffc2c 	andhi	r5,r5,32752
   16a00:	00bf3034 	movhi	r2,64704
   16a04:	2887883a 	add	r3,r5,r2
   16a08:	00c0020e 	bge	zero,r3,16a14 <__ulp+0x18>
   16a0c:	0005883a 	mov	r2,zero
   16a10:	f800283a 	ret
   16a14:	00c7c83a 	sub	r3,zero,r3
   16a18:	1805d53a 	srai	r2,r3,20
   16a1c:	00c004c4 	movi	r3,19
   16a20:	18800a0e 	bge	r3,r2,16a4c <__ulp+0x50>
   16a24:	01000c84 	movi	r4,50
   16a28:	0007883a 	mov	r3,zero
   16a2c:	20800516 	blt	r4,r2,16a44 <__ulp+0x48>
   16a30:	01000cc4 	movi	r4,51
   16a34:	2085c83a 	sub	r2,r4,r2
   16a38:	01000044 	movi	r4,1
   16a3c:	2084983a 	sll	r2,r4,r2
   16a40:	f800283a 	ret
   16a44:	00800044 	movi	r2,1
   16a48:	f800283a 	ret
   16a4c:	00c00234 	movhi	r3,8
   16a50:	1887d83a 	sra	r3,r3,r2
   16a54:	0005883a 	mov	r2,zero
   16a58:	f800283a 	ret

00016a5c <__b2d>:
   16a5c:	defffa04 	addi	sp,sp,-24
   16a60:	dc000015 	stw	r16,0(sp)
   16a64:	24000417 	ldw	r16,16(r4)
   16a68:	dc400115 	stw	r17,4(sp)
   16a6c:	dcc00315 	stw	r19,12(sp)
   16a70:	84000144 	addi	r16,r16,5
   16a74:	8421883a 	add	r16,r16,r16
   16a78:	8421883a 	add	r16,r16,r16
   16a7c:	2421883a 	add	r16,r4,r16
   16a80:	847fff17 	ldw	r17,-4(r16)
   16a84:	24c00504 	addi	r19,r4,20
   16a88:	dd000415 	stw	r20,16(sp)
   16a8c:	8809883a 	mov	r4,r17
   16a90:	dc800215 	stw	r18,8(sp)
   16a94:	2829883a 	mov	r20,r5
   16a98:	dfc00515 	stw	ra,20(sp)
   16a9c:	00161c80 	call	161c8 <__hi0bits>
   16aa0:	00c00804 	movi	r3,32
   16aa4:	1887c83a 	sub	r3,r3,r2
   16aa8:	a0c00015 	stw	r3,0(r20)
   16aac:	00c00284 	movi	r3,10
   16ab0:	84bfff04 	addi	r18,r16,-4
   16ab4:	18801216 	blt	r3,r2,16b00 <__b2d+0xa4>
   16ab8:	010002c4 	movi	r4,11
   16abc:	2089c83a 	sub	r4,r4,r2
   16ac0:	8906d83a 	srl	r3,r17,r4
   16ac4:	18cffc34 	orhi	r3,r3,16368
   16ac8:	9c80322e 	bgeu	r19,r18,16b94 <__b2d+0x138>
   16acc:	817ffe17 	ldw	r5,-8(r16)
   16ad0:	2908d83a 	srl	r4,r5,r4
   16ad4:	10800544 	addi	r2,r2,21
   16ad8:	88a2983a 	sll	r17,r17,r2
   16adc:	2444b03a 	or	r2,r4,r17
   16ae0:	dfc00517 	ldw	ra,20(sp)
   16ae4:	dd000417 	ldw	r20,16(sp)
   16ae8:	dcc00317 	ldw	r19,12(sp)
   16aec:	dc800217 	ldw	r18,8(sp)
   16af0:	dc400117 	ldw	r17,4(sp)
   16af4:	dc000017 	ldw	r16,0(sp)
   16af8:	dec00604 	addi	sp,sp,24
   16afc:	f800283a 	ret
   16b00:	9c801636 	bltu	r19,r18,16b5c <__b2d+0x100>
   16b04:	113ffd44 	addi	r4,r2,-11
   16b08:	000b883a 	mov	r5,zero
   16b0c:	20001726 	beq	r4,zero,16b6c <__b2d+0x110>
   16b10:	00c00ac4 	movi	r3,43
   16b14:	1885c83a 	sub	r2,r3,r2
   16b18:	8906983a 	sll	r3,r17,r4
   16b1c:	288cd83a 	srl	r6,r5,r2
   16b20:	18cffc34 	orhi	r3,r3,16368
   16b24:	1986b03a 	or	r3,r3,r6
   16b28:	9c801c2e 	bgeu	r19,r18,16b9c <__b2d+0x140>
   16b2c:	91bfff17 	ldw	r6,-4(r18)
   16b30:	3084d83a 	srl	r2,r6,r2
   16b34:	2908983a 	sll	r4,r5,r4
   16b38:	1104b03a 	or	r2,r2,r4
   16b3c:	dfc00517 	ldw	ra,20(sp)
   16b40:	dd000417 	ldw	r20,16(sp)
   16b44:	dcc00317 	ldw	r19,12(sp)
   16b48:	dc800217 	ldw	r18,8(sp)
   16b4c:	dc400117 	ldw	r17,4(sp)
   16b50:	dc000017 	ldw	r16,0(sp)
   16b54:	dec00604 	addi	sp,sp,24
   16b58:	f800283a 	ret
   16b5c:	113ffd44 	addi	r4,r2,-11
   16b60:	84bffe04 	addi	r18,r16,-8
   16b64:	817ffe17 	ldw	r5,-8(r16)
   16b68:	203fe91e 	bne	r4,zero,16b10 <__b2d+0xb4>
   16b6c:	88cffc34 	orhi	r3,r17,16368
   16b70:	2805883a 	mov	r2,r5
   16b74:	dfc00517 	ldw	ra,20(sp)
   16b78:	dd000417 	ldw	r20,16(sp)
   16b7c:	dcc00317 	ldw	r19,12(sp)
   16b80:	dc800217 	ldw	r18,8(sp)
   16b84:	dc400117 	ldw	r17,4(sp)
   16b88:	dc000017 	ldw	r16,0(sp)
   16b8c:	dec00604 	addi	sp,sp,24
   16b90:	f800283a 	ret
   16b94:	0009883a 	mov	r4,zero
   16b98:	003fce06 	br	16ad4 <__b2d+0x78>
   16b9c:	0005883a 	mov	r2,zero
   16ba0:	003fe406 	br	16b34 <__b2d+0xd8>

00016ba4 <__d2b>:
   16ba4:	defff804 	addi	sp,sp,-32
   16ba8:	dc400315 	stw	r17,12(sp)
   16bac:	3023883a 	mov	r17,r6
   16bb0:	dc800415 	stw	r18,16(sp)
   16bb4:	8824907a 	slli	r18,r17,1
   16bb8:	dcc00515 	stw	r19,20(sp)
   16bbc:	2827883a 	mov	r19,r5
   16bc0:	9024d57a 	srli	r18,r18,21
   16bc4:	01400044 	movi	r5,1
   16bc8:	dd000615 	stw	r20,24(sp)
   16bcc:	dc000215 	stw	r16,8(sp)
   16bd0:	dfc00715 	stw	ra,28(sp)
   16bd4:	3829883a 	mov	r20,r7
   16bd8:	0015eb00 	call	15eb0 <_Balloc>
   16bdc:	1021883a 	mov	r16,r2
   16be0:	00800434 	movhi	r2,16
   16be4:	10bfffc4 	addi	r2,r2,-1
   16be8:	88a2703a 	and	r17,r17,r2
   16bec:	90000126 	beq	r18,zero,16bf4 <__d2b+0x50>
   16bf0:	8c400434 	orhi	r17,r17,16
   16bf4:	dc400015 	stw	r17,0(sp)
   16bf8:	98002226 	beq	r19,zero,16c84 <__d2b+0xe0>
   16bfc:	d9000104 	addi	r4,sp,4
   16c00:	dcc00115 	stw	r19,4(sp)
   16c04:	00162300 	call	16230 <__lo0bits>
   16c08:	d8c00017 	ldw	r3,0(sp)
   16c0c:	10002d1e 	bne	r2,zero,16cc4 <__d2b+0x120>
   16c10:	d9000117 	ldw	r4,4(sp)
   16c14:	81000515 	stw	r4,20(r16)
   16c18:	1823003a 	cmpeq	r17,r3,zero
   16c1c:	01000084 	movi	r4,2
   16c20:	2463c83a 	sub	r17,r4,r17
   16c24:	80c00615 	stw	r3,24(r16)
   16c28:	84400415 	stw	r17,16(r16)
   16c2c:	90001d1e 	bne	r18,zero,16ca4 <__d2b+0x100>
   16c30:	88c00104 	addi	r3,r17,4
   16c34:	18c7883a 	add	r3,r3,r3
   16c38:	18c7883a 	add	r3,r3,r3
   16c3c:	80c7883a 	add	r3,r16,r3
   16c40:	19000017 	ldw	r4,0(r3)
   16c44:	10bef384 	addi	r2,r2,-1074
   16c48:	a0800015 	stw	r2,0(r20)
   16c4c:	00161c80 	call	161c8 <__hi0bits>
   16c50:	8822917a 	slli	r17,r17,5
   16c54:	d8c00817 	ldw	r3,32(sp)
   16c58:	8885c83a 	sub	r2,r17,r2
   16c5c:	18800015 	stw	r2,0(r3)
   16c60:	8005883a 	mov	r2,r16
   16c64:	dfc00717 	ldw	ra,28(sp)
   16c68:	dd000617 	ldw	r20,24(sp)
   16c6c:	dcc00517 	ldw	r19,20(sp)
   16c70:	dc800417 	ldw	r18,16(sp)
   16c74:	dc400317 	ldw	r17,12(sp)
   16c78:	dc000217 	ldw	r16,8(sp)
   16c7c:	dec00804 	addi	sp,sp,32
   16c80:	f800283a 	ret
   16c84:	d809883a 	mov	r4,sp
   16c88:	00162300 	call	16230 <__lo0bits>
   16c8c:	d8c00017 	ldw	r3,0(sp)
   16c90:	04400044 	movi	r17,1
   16c94:	84400415 	stw	r17,16(r16)
   16c98:	80c00515 	stw	r3,20(r16)
   16c9c:	10800804 	addi	r2,r2,32
   16ca0:	903fe326 	beq	r18,zero,16c30 <__d2b+0x8c>
   16ca4:	00c00d44 	movi	r3,53
   16ca8:	94bef344 	addi	r18,r18,-1075
   16cac:	90a5883a 	add	r18,r18,r2
   16cb0:	1885c83a 	sub	r2,r3,r2
   16cb4:	d8c00817 	ldw	r3,32(sp)
   16cb8:	a4800015 	stw	r18,0(r20)
   16cbc:	18800015 	stw	r2,0(r3)
   16cc0:	003fe706 	br	16c60 <__d2b+0xbc>
   16cc4:	01000804 	movi	r4,32
   16cc8:	2089c83a 	sub	r4,r4,r2
   16ccc:	1908983a 	sll	r4,r3,r4
   16cd0:	d9400117 	ldw	r5,4(sp)
   16cd4:	1886d83a 	srl	r3,r3,r2
   16cd8:	2148b03a 	or	r4,r4,r5
   16cdc:	81000515 	stw	r4,20(r16)
   16ce0:	d8c00015 	stw	r3,0(sp)
   16ce4:	003fcc06 	br	16c18 <__d2b+0x74>

00016ce8 <__ratio>:
   16ce8:	defff904 	addi	sp,sp,-28
   16cec:	dc400315 	stw	r17,12(sp)
   16cf0:	2823883a 	mov	r17,r5
   16cf4:	d9400104 	addi	r5,sp,4
   16cf8:	dfc00615 	stw	ra,24(sp)
   16cfc:	dcc00515 	stw	r19,20(sp)
   16d00:	dc800415 	stw	r18,16(sp)
   16d04:	2027883a 	mov	r19,r4
   16d08:	dc000215 	stw	r16,8(sp)
   16d0c:	0016a5c0 	call	16a5c <__b2d>
   16d10:	8809883a 	mov	r4,r17
   16d14:	d80b883a 	mov	r5,sp
   16d18:	1025883a 	mov	r18,r2
   16d1c:	1821883a 	mov	r16,r3
   16d20:	0016a5c0 	call	16a5c <__b2d>
   16d24:	99400417 	ldw	r5,16(r19)
   16d28:	89000417 	ldw	r4,16(r17)
   16d2c:	d9800117 	ldw	r6,4(sp)
   16d30:	2909c83a 	sub	r4,r5,r4
   16d34:	d9400017 	ldw	r5,0(sp)
   16d38:	2008917a 	slli	r4,r4,5
   16d3c:	314bc83a 	sub	r5,r6,r5
   16d40:	290b883a 	add	r5,r5,r4
   16d44:	01400e0e 	bge	zero,r5,16d80 <__ratio+0x98>
   16d48:	280a953a 	slli	r5,r5,20
   16d4c:	2c21883a 	add	r16,r5,r16
   16d50:	9009883a 	mov	r4,r18
   16d54:	800b883a 	mov	r5,r16
   16d58:	100d883a 	mov	r6,r2
   16d5c:	180f883a 	mov	r7,r3
   16d60:	0018f9c0 	call	18f9c <__divdf3>
   16d64:	dfc00617 	ldw	ra,24(sp)
   16d68:	dcc00517 	ldw	r19,20(sp)
   16d6c:	dc800417 	ldw	r18,16(sp)
   16d70:	dc400317 	ldw	r17,12(sp)
   16d74:	dc000217 	ldw	r16,8(sp)
   16d78:	dec00704 	addi	sp,sp,28
   16d7c:	f800283a 	ret
   16d80:	280a953a 	slli	r5,r5,20
   16d84:	1947c83a 	sub	r3,r3,r5
   16d88:	003ff106 	br	16d50 <__ratio+0x68>

00016d8c <_mprec_log10>:
   16d8c:	defffe04 	addi	sp,sp,-8
   16d90:	dc000015 	stw	r16,0(sp)
   16d94:	dfc00115 	stw	ra,4(sp)
   16d98:	008005c4 	movi	r2,23
   16d9c:	2021883a 	mov	r16,r4
   16da0:	11000d0e 	bge	r2,r4,16dd8 <_mprec_log10+0x4c>
   16da4:	0005883a 	mov	r2,zero
   16da8:	00cffc34 	movhi	r3,16368
   16dac:	843fffc4 	addi	r16,r16,-1
   16db0:	1009883a 	mov	r4,r2
   16db4:	180b883a 	mov	r5,r3
   16db8:	000d883a 	mov	r6,zero
   16dbc:	01d00934 	movhi	r7,16420
   16dc0:	0018cb80 	call	18cb8 <__muldf3>
   16dc4:	803ff91e 	bne	r16,zero,16dac <_mprec_log10+0x20>
   16dc8:	dfc00117 	ldw	ra,4(sp)
   16dcc:	dc000017 	ldw	r16,0(sp)
   16dd0:	dec00204 	addi	sp,sp,8
   16dd4:	f800283a 	ret
   16dd8:	202090fa 	slli	r16,r4,3
   16ddc:	008000f4 	movhi	r2,3
   16de0:	10a08f04 	addi	r2,r2,-32196
   16de4:	1421883a 	add	r16,r2,r16
   16de8:	80800017 	ldw	r2,0(r16)
   16dec:	80c00117 	ldw	r3,4(r16)
   16df0:	dfc00117 	ldw	ra,4(sp)
   16df4:	dc000017 	ldw	r16,0(sp)
   16df8:	dec00204 	addi	sp,sp,8
   16dfc:	f800283a 	ret

00016e00 <__copybits>:
   16e00:	297fffc4 	addi	r5,r5,-1
   16e04:	31c00417 	ldw	r7,16(r6)
   16e08:	2811d17a 	srai	r8,r5,5
   16e0c:	30800504 	addi	r2,r6,20
   16e10:	39c00144 	addi	r7,r7,5
   16e14:	42000044 	addi	r8,r8,1
   16e18:	39cf883a 	add	r7,r7,r7
   16e1c:	4211883a 	add	r8,r8,r8
   16e20:	39cf883a 	add	r7,r7,r7
   16e24:	4211883a 	add	r8,r8,r8
   16e28:	31cf883a 	add	r7,r6,r7
   16e2c:	2211883a 	add	r8,r4,r8
   16e30:	11c00d2e 	bgeu	r2,r7,16e68 <__copybits+0x68>
   16e34:	2007883a 	mov	r3,r4
   16e38:	11400017 	ldw	r5,0(r2)
   16e3c:	18c00104 	addi	r3,r3,4
   16e40:	10800104 	addi	r2,r2,4
   16e44:	197fff15 	stw	r5,-4(r3)
   16e48:	11fffb36 	bltu	r2,r7,16e38 <__copybits+0x38>
   16e4c:	3985c83a 	sub	r2,r7,r6
   16e50:	10bffac4 	addi	r2,r2,-21
   16e54:	1004d0ba 	srli	r2,r2,2
   16e58:	10800044 	addi	r2,r2,1
   16e5c:	1085883a 	add	r2,r2,r2
   16e60:	1085883a 	add	r2,r2,r2
   16e64:	2089883a 	add	r4,r4,r2
   16e68:	2200032e 	bgeu	r4,r8,16e78 <__copybits+0x78>
   16e6c:	20000015 	stw	zero,0(r4)
   16e70:	21000104 	addi	r4,r4,4
   16e74:	223ffd36 	bltu	r4,r8,16e6c <__copybits+0x6c>
   16e78:	f800283a 	ret

00016e7c <__any_on>:
   16e7c:	21800417 	ldw	r6,16(r4)
   16e80:	2805d17a 	srai	r2,r5,5
   16e84:	20c00504 	addi	r3,r4,20
   16e88:	30800f0e 	bge	r6,r2,16ec8 <__any_on+0x4c>
   16e8c:	3005883a 	mov	r2,r6
   16e90:	10800144 	addi	r2,r2,5
   16e94:	1085883a 	add	r2,r2,r2
   16e98:	1085883a 	add	r2,r2,r2
   16e9c:	2089883a 	add	r4,r4,r2
   16ea0:	1900152e 	bgeu	r3,r4,16ef8 <__any_on+0x7c>
   16ea4:	20bfff17 	ldw	r2,-4(r4)
   16ea8:	213fff04 	addi	r4,r4,-4
   16eac:	1000041e 	bne	r2,zero,16ec0 <__any_on+0x44>
   16eb0:	1900112e 	bgeu	r3,r4,16ef8 <__any_on+0x7c>
   16eb4:	213fff04 	addi	r4,r4,-4
   16eb8:	20800017 	ldw	r2,0(r4)
   16ebc:	103ffc26 	beq	r2,zero,16eb0 <__any_on+0x34>
   16ec0:	00800044 	movi	r2,1
   16ec4:	f800283a 	ret
   16ec8:	11bff10e 	bge	r2,r6,16e90 <__any_on+0x14>
   16ecc:	294007cc 	andi	r5,r5,31
   16ed0:	283fef26 	beq	r5,zero,16e90 <__any_on+0x14>
   16ed4:	11800144 	addi	r6,r2,5
   16ed8:	318d883a 	add	r6,r6,r6
   16edc:	318d883a 	add	r6,r6,r6
   16ee0:	218d883a 	add	r6,r4,r6
   16ee4:	31800017 	ldw	r6,0(r6)
   16ee8:	314ed83a 	srl	r7,r6,r5
   16eec:	394a983a 	sll	r5,r7,r5
   16ef0:	29bff31e 	bne	r5,r6,16ec0 <__any_on+0x44>
   16ef4:	003fe606 	br	16e90 <__any_on+0x14>
   16ef8:	0005883a 	mov	r2,zero
   16efc:	f800283a 	ret

00016f00 <_realloc_r>:
   16f00:	defff504 	addi	sp,sp,-44
   16f04:	dd400615 	stw	r21,24(sp)
   16f08:	dc800315 	stw	r18,12(sp)
   16f0c:	dc000115 	stw	r16,4(sp)
   16f10:	dfc00a15 	stw	ra,40(sp)
   16f14:	df000915 	stw	fp,36(sp)
   16f18:	ddc00815 	stw	r23,32(sp)
   16f1c:	dd800715 	stw	r22,28(sp)
   16f20:	dd000515 	stw	r20,20(sp)
   16f24:	dcc00415 	stw	r19,16(sp)
   16f28:	dc400215 	stw	r17,8(sp)
   16f2c:	2821883a 	mov	r16,r5
   16f30:	202b883a 	mov	r21,r4
   16f34:	3025883a 	mov	r18,r6
   16f38:	28009626 	beq	r5,zero,17194 <_realloc_r+0x294>
   16f3c:	001a1f00 	call	1a1f0 <__malloc_lock>
   16f40:	80bfff17 	ldw	r2,-4(r16)
   16f44:	04ffff04 	movi	r19,-4
   16f48:	90c002c4 	addi	r3,r18,11
   16f4c:	01000584 	movi	r4,22
   16f50:	85bffe04 	addi	r22,r16,-8
   16f54:	14e6703a 	and	r19,r2,r19
   16f58:	20c0372e 	bgeu	r4,r3,17038 <_realloc_r+0x138>
   16f5c:	047ffe04 	movi	r17,-8
   16f60:	1c62703a 	and	r17,r3,r17
   16f64:	8807883a 	mov	r3,r17
   16f68:	88005a16 	blt	r17,zero,170d4 <_realloc_r+0x1d4>
   16f6c:	8c805936 	bltu	r17,r18,170d4 <_realloc_r+0x1d4>
   16f70:	98c0340e 	bge	r19,r3,17044 <_realloc_r+0x144>
   16f74:	070000f4 	movhi	fp,3
   16f78:	e7221904 	addi	fp,fp,-30620
   16f7c:	e1400217 	ldw	r5,8(fp)
   16f80:	b4c9883a 	add	r4,r22,r19
   16f84:	29009026 	beq	r5,r4,171c8 <_realloc_r+0x2c8>
   16f88:	21800117 	ldw	r6,4(r4)
   16f8c:	01ffff84 	movi	r7,-2
   16f90:	31ce703a 	and	r7,r6,r7
   16f94:	21cf883a 	add	r7,r4,r7
   16f98:	39c00117 	ldw	r7,4(r7)
   16f9c:	39c0004c 	andi	r7,r7,1
   16fa0:	38004326 	beq	r7,zero,170b0 <_realloc_r+0x1b0>
   16fa4:	000d883a 	mov	r6,zero
   16fa8:	0009883a 	mov	r4,zero
   16fac:	1080004c 	andi	r2,r2,1
   16fb0:	10005a1e 	bne	r2,zero,1711c <_realloc_r+0x21c>
   16fb4:	85fffe17 	ldw	r23,-8(r16)
   16fb8:	00bfff04 	movi	r2,-4
   16fbc:	b5efc83a 	sub	r23,r22,r23
   16fc0:	b9c00117 	ldw	r7,4(r23)
   16fc4:	388e703a 	and	r7,r7,r2
   16fc8:	3ccf883a 	add	r7,r7,r19
   16fcc:	20005226 	beq	r4,zero,17118 <_realloc_r+0x218>
   16fd0:	31e9883a 	add	r20,r6,r7
   16fd4:	2140c726 	beq	r4,r5,172f4 <_realloc_r+0x3f4>
   16fd8:	a0c04f16 	blt	r20,r3,17118 <_realloc_r+0x218>
   16fdc:	20800317 	ldw	r2,12(r4)
   16fe0:	20c00217 	ldw	r3,8(r4)
   16fe4:	99bfff04 	addi	r6,r19,-4
   16fe8:	01000904 	movi	r4,36
   16fec:	18800315 	stw	r2,12(r3)
   16ff0:	10c00215 	stw	r3,8(r2)
   16ff4:	b8c00217 	ldw	r3,8(r23)
   16ff8:	b8800317 	ldw	r2,12(r23)
   16ffc:	bc800204 	addi	r18,r23,8
   17000:	18800315 	stw	r2,12(r3)
   17004:	10c00215 	stw	r3,8(r2)
   17008:	2180ed36 	bltu	r4,r6,173c0 <_realloc_r+0x4c0>
   1700c:	008004c4 	movi	r2,19
   17010:	11809b2e 	bgeu	r2,r6,17280 <_realloc_r+0x380>
   17014:	80800017 	ldw	r2,0(r16)
   17018:	b8800215 	stw	r2,8(r23)
   1701c:	80800117 	ldw	r2,4(r16)
   17020:	b8800315 	stw	r2,12(r23)
   17024:	008006c4 	movi	r2,27
   17028:	1180f936 	bltu	r2,r6,17410 <_realloc_r+0x510>
   1702c:	b8800404 	addi	r2,r23,16
   17030:	80c00204 	addi	r3,r16,8
   17034:	00009406 	br	17288 <_realloc_r+0x388>
   17038:	00c00404 	movi	r3,16
   1703c:	1823883a 	mov	r17,r3
   17040:	003fca06 	br	16f6c <_realloc_r+0x6c>
   17044:	9829883a 	mov	r20,r19
   17048:	a447c83a 	sub	r3,r20,r17
   1704c:	010003c4 	movi	r4,15
   17050:	1080004c 	andi	r2,r2,1
   17054:	20c02336 	bltu	r4,r3,170e4 <_realloc_r+0x1e4>
   17058:	1504b03a 	or	r2,r2,r20
   1705c:	b0800115 	stw	r2,4(r22)
   17060:	b52d883a 	add	r22,r22,r20
   17064:	b0800117 	ldw	r2,4(r22)
   17068:	10800054 	ori	r2,r2,1
   1706c:	b0800115 	stw	r2,4(r22)
   17070:	a809883a 	mov	r4,r21
   17074:	001a2100 	call	1a210 <__malloc_unlock>
   17078:	8025883a 	mov	r18,r16
   1707c:	9005883a 	mov	r2,r18
   17080:	dfc00a17 	ldw	ra,40(sp)
   17084:	df000917 	ldw	fp,36(sp)
   17088:	ddc00817 	ldw	r23,32(sp)
   1708c:	dd800717 	ldw	r22,28(sp)
   17090:	dd400617 	ldw	r21,24(sp)
   17094:	dd000517 	ldw	r20,20(sp)
   17098:	dcc00417 	ldw	r19,16(sp)
   1709c:	dc800317 	ldw	r18,12(sp)
   170a0:	dc400217 	ldw	r17,8(sp)
   170a4:	dc000117 	ldw	r16,4(sp)
   170a8:	dec00b04 	addi	sp,sp,44
   170ac:	f800283a 	ret
   170b0:	01ffff04 	movi	r7,-4
   170b4:	31cc703a 	and	r6,r6,r7
   170b8:	34e9883a 	add	r20,r6,r19
   170bc:	a0ffbb16 	blt	r20,r3,16fac <_realloc_r+0xac>
   170c0:	20c00317 	ldw	r3,12(r4)
   170c4:	21000217 	ldw	r4,8(r4)
   170c8:	20c00315 	stw	r3,12(r4)
   170cc:	19000215 	stw	r4,8(r3)
   170d0:	003fdd06 	br	17048 <_realloc_r+0x148>
   170d4:	00800304 	movi	r2,12
   170d8:	a8800015 	stw	r2,0(r21)
   170dc:	0025883a 	mov	r18,zero
   170e0:	003fe606 	br	1707c <_realloc_r+0x17c>
   170e4:	1444b03a 	or	r2,r2,r17
   170e8:	b0800115 	stw	r2,4(r22)
   170ec:	b44b883a 	add	r5,r22,r17
   170f0:	18800054 	ori	r2,r3,1
   170f4:	28800115 	stw	r2,4(r5)
   170f8:	28c7883a 	add	r3,r5,r3
   170fc:	18800117 	ldw	r2,4(r3)
   17100:	a809883a 	mov	r4,r21
   17104:	29400204 	addi	r5,r5,8
   17108:	10800054 	ori	r2,r2,1
   1710c:	18800115 	stw	r2,4(r3)
   17110:	00146f40 	call	146f4 <_free_r>
   17114:	003fd606 	br	17070 <_realloc_r+0x170>
   17118:	38c0330e 	bge	r7,r3,171e8 <_realloc_r+0x2e8>
   1711c:	900b883a 	mov	r5,r18
   17120:	a809883a 	mov	r4,r21
   17124:	001528c0 	call	1528c <_malloc_r>
   17128:	1025883a 	mov	r18,r2
   1712c:	10001626 	beq	r2,zero,17188 <_realloc_r+0x288>
   17130:	80bfff17 	ldw	r2,-4(r16)
   17134:	00ffff84 	movi	r3,-2
   17138:	913ffe04 	addi	r4,r18,-8
   1713c:	10c6703a 	and	r3,r2,r3
   17140:	b0c7883a 	add	r3,r22,r3
   17144:	20c09926 	beq	r4,r3,173ac <_realloc_r+0x4ac>
   17148:	99bfff04 	addi	r6,r19,-4
   1714c:	00800904 	movi	r2,36
   17150:	11806436 	bltu	r2,r6,172e4 <_realloc_r+0x3e4>
   17154:	00c004c4 	movi	r3,19
   17158:	19804036 	bltu	r3,r6,1725c <_realloc_r+0x35c>
   1715c:	9005883a 	mov	r2,r18
   17160:	8007883a 	mov	r3,r16
   17164:	19000017 	ldw	r4,0(r3)
   17168:	11000015 	stw	r4,0(r2)
   1716c:	19000117 	ldw	r4,4(r3)
   17170:	11000115 	stw	r4,4(r2)
   17174:	18c00217 	ldw	r3,8(r3)
   17178:	10c00215 	stw	r3,8(r2)
   1717c:	a809883a 	mov	r4,r21
   17180:	800b883a 	mov	r5,r16
   17184:	00146f40 	call	146f4 <_free_r>
   17188:	a809883a 	mov	r4,r21
   1718c:	001a2100 	call	1a210 <__malloc_unlock>
   17190:	003fba06 	br	1707c <_realloc_r+0x17c>
   17194:	300b883a 	mov	r5,r6
   17198:	dfc00a17 	ldw	ra,40(sp)
   1719c:	df000917 	ldw	fp,36(sp)
   171a0:	ddc00817 	ldw	r23,32(sp)
   171a4:	dd800717 	ldw	r22,28(sp)
   171a8:	dd400617 	ldw	r21,24(sp)
   171ac:	dd000517 	ldw	r20,20(sp)
   171b0:	dcc00417 	ldw	r19,16(sp)
   171b4:	dc800317 	ldw	r18,12(sp)
   171b8:	dc400217 	ldw	r17,8(sp)
   171bc:	dc000117 	ldw	r16,4(sp)
   171c0:	dec00b04 	addi	sp,sp,44
   171c4:	001528c1 	jmpi	1528c <_malloc_r>
   171c8:	29800117 	ldw	r6,4(r5)
   171cc:	013fff04 	movi	r4,-4
   171d0:	89c00404 	addi	r7,r17,16
   171d4:	310c703a 	and	r6,r6,r4
   171d8:	34c9883a 	add	r4,r6,r19
   171dc:	21c0340e 	bge	r4,r7,172b0 <_realloc_r+0x3b0>
   171e0:	2809883a 	mov	r4,r5
   171e4:	003f7106 	br	16fac <_realloc_r+0xac>
   171e8:	b8800317 	ldw	r2,12(r23)
   171ec:	b8c00217 	ldw	r3,8(r23)
   171f0:	99bfff04 	addi	r6,r19,-4
   171f4:	01000904 	movi	r4,36
   171f8:	18800315 	stw	r2,12(r3)
   171fc:	10c00215 	stw	r3,8(r2)
   17200:	bc800204 	addi	r18,r23,8
   17204:	21807836 	bltu	r4,r6,173e8 <_realloc_r+0x4e8>
   17208:	008004c4 	movi	r2,19
   1720c:	1180732e 	bgeu	r2,r6,173dc <_realloc_r+0x4dc>
   17210:	80800017 	ldw	r2,0(r16)
   17214:	b8800215 	stw	r2,8(r23)
   17218:	80800117 	ldw	r2,4(r16)
   1721c:	b8800315 	stw	r2,12(r23)
   17220:	008006c4 	movi	r2,27
   17224:	11808936 	bltu	r2,r6,1744c <_realloc_r+0x54c>
   17228:	b8800404 	addi	r2,r23,16
   1722c:	80c00204 	addi	r3,r16,8
   17230:	19000017 	ldw	r4,0(r3)
   17234:	9021883a 	mov	r16,r18
   17238:	3829883a 	mov	r20,r7
   1723c:	11000015 	stw	r4,0(r2)
   17240:	19000117 	ldw	r4,4(r3)
   17244:	b82d883a 	mov	r22,r23
   17248:	11000115 	stw	r4,4(r2)
   1724c:	18c00217 	ldw	r3,8(r3)
   17250:	10c00215 	stw	r3,8(r2)
   17254:	b8800117 	ldw	r2,4(r23)
   17258:	003f7b06 	br	17048 <_realloc_r+0x148>
   1725c:	80c00017 	ldw	r3,0(r16)
   17260:	90c00015 	stw	r3,0(r18)
   17264:	80c00117 	ldw	r3,4(r16)
   17268:	90c00115 	stw	r3,4(r18)
   1726c:	00c006c4 	movi	r3,27
   17270:	19804636 	bltu	r3,r6,1738c <_realloc_r+0x48c>
   17274:	90800204 	addi	r2,r18,8
   17278:	80c00204 	addi	r3,r16,8
   1727c:	003fb906 	br	17164 <_realloc_r+0x264>
   17280:	9005883a 	mov	r2,r18
   17284:	8007883a 	mov	r3,r16
   17288:	19000017 	ldw	r4,0(r3)
   1728c:	9021883a 	mov	r16,r18
   17290:	b82d883a 	mov	r22,r23
   17294:	11000015 	stw	r4,0(r2)
   17298:	19000117 	ldw	r4,4(r3)
   1729c:	11000115 	stw	r4,4(r2)
   172a0:	18c00217 	ldw	r3,8(r3)
   172a4:	10c00215 	stw	r3,8(r2)
   172a8:	b8800117 	ldw	r2,4(r23)
   172ac:	003f6606 	br	17048 <_realloc_r+0x148>
   172b0:	2445c83a 	sub	r2,r4,r17
   172b4:	b46d883a 	add	r22,r22,r17
   172b8:	10800054 	ori	r2,r2,1
   172bc:	b0800115 	stw	r2,4(r22)
   172c0:	80bfff17 	ldw	r2,-4(r16)
   172c4:	a809883a 	mov	r4,r21
   172c8:	e5800215 	stw	r22,8(fp)
   172cc:	1080004c 	andi	r2,r2,1
   172d0:	88a2b03a 	or	r17,r17,r2
   172d4:	847fff15 	stw	r17,-4(r16)
   172d8:	001a2100 	call	1a210 <__malloc_unlock>
   172dc:	8025883a 	mov	r18,r16
   172e0:	003f6606 	br	1707c <_realloc_r+0x17c>
   172e4:	9009883a 	mov	r4,r18
   172e8:	800b883a 	mov	r5,r16
   172ec:	0015c480 	call	15c48 <memmove>
   172f0:	003fa206 	br	1717c <_realloc_r+0x27c>
   172f4:	88800404 	addi	r2,r17,16
   172f8:	a0bf8716 	blt	r20,r2,17118 <_realloc_r+0x218>
   172fc:	b8800317 	ldw	r2,12(r23)
   17300:	b8c00217 	ldw	r3,8(r23)
   17304:	99bfff04 	addi	r6,r19,-4
   17308:	01000904 	movi	r4,36
   1730c:	18800315 	stw	r2,12(r3)
   17310:	10c00215 	stw	r3,8(r2)
   17314:	bc800204 	addi	r18,r23,8
   17318:	21806536 	bltu	r4,r6,174b0 <_realloc_r+0x5b0>
   1731c:	008004c4 	movi	r2,19
   17320:	1180592e 	bgeu	r2,r6,17488 <_realloc_r+0x588>
   17324:	80800017 	ldw	r2,0(r16)
   17328:	b8800215 	stw	r2,8(r23)
   1732c:	80800117 	ldw	r2,4(r16)
   17330:	b8800315 	stw	r2,12(r23)
   17334:	008006c4 	movi	r2,27
   17338:	11806136 	bltu	r2,r6,174c0 <_realloc_r+0x5c0>
   1733c:	b8800404 	addi	r2,r23,16
   17340:	80c00204 	addi	r3,r16,8
   17344:	19000017 	ldw	r4,0(r3)
   17348:	11000015 	stw	r4,0(r2)
   1734c:	19000117 	ldw	r4,4(r3)
   17350:	11000115 	stw	r4,4(r2)
   17354:	18c00217 	ldw	r3,8(r3)
   17358:	10c00215 	stw	r3,8(r2)
   1735c:	a447c83a 	sub	r3,r20,r17
   17360:	bc45883a 	add	r2,r23,r17
   17364:	18c00054 	ori	r3,r3,1
   17368:	10c00115 	stw	r3,4(r2)
   1736c:	b8c00117 	ldw	r3,4(r23)
   17370:	e0800215 	stw	r2,8(fp)
   17374:	a809883a 	mov	r4,r21
   17378:	1880004c 	andi	r2,r3,1
   1737c:	88a2b03a 	or	r17,r17,r2
   17380:	bc400115 	stw	r17,4(r23)
   17384:	001a2100 	call	1a210 <__malloc_unlock>
   17388:	003f3c06 	br	1707c <_realloc_r+0x17c>
   1738c:	80c00217 	ldw	r3,8(r16)
   17390:	90c00215 	stw	r3,8(r18)
   17394:	80c00317 	ldw	r3,12(r16)
   17398:	90c00315 	stw	r3,12(r18)
   1739c:	30802426 	beq	r6,r2,17430 <_realloc_r+0x530>
   173a0:	90800404 	addi	r2,r18,16
   173a4:	80c00404 	addi	r3,r16,16
   173a8:	003f6e06 	br	17164 <_realloc_r+0x264>
   173ac:	953fff17 	ldw	r20,-4(r18)
   173b0:	00ffff04 	movi	r3,-4
   173b4:	a0e8703a 	and	r20,r20,r3
   173b8:	a4e9883a 	add	r20,r20,r19
   173bc:	003f2206 	br	17048 <_realloc_r+0x148>
   173c0:	800b883a 	mov	r5,r16
   173c4:	9009883a 	mov	r4,r18
   173c8:	0015c480 	call	15c48 <memmove>
   173cc:	9021883a 	mov	r16,r18
   173d0:	b8800117 	ldw	r2,4(r23)
   173d4:	b82d883a 	mov	r22,r23
   173d8:	003f1b06 	br	17048 <_realloc_r+0x148>
   173dc:	9005883a 	mov	r2,r18
   173e0:	8007883a 	mov	r3,r16
   173e4:	003f9206 	br	17230 <_realloc_r+0x330>
   173e8:	800b883a 	mov	r5,r16
   173ec:	9009883a 	mov	r4,r18
   173f0:	d9c00015 	stw	r7,0(sp)
   173f4:	0015c480 	call	15c48 <memmove>
   173f8:	d9c00017 	ldw	r7,0(sp)
   173fc:	9021883a 	mov	r16,r18
   17400:	b8800117 	ldw	r2,4(r23)
   17404:	3829883a 	mov	r20,r7
   17408:	b82d883a 	mov	r22,r23
   1740c:	003f0e06 	br	17048 <_realloc_r+0x148>
   17410:	80800217 	ldw	r2,8(r16)
   17414:	b8800415 	stw	r2,16(r23)
   17418:	80800317 	ldw	r2,12(r16)
   1741c:	b8800515 	stw	r2,20(r23)
   17420:	31001226 	beq	r6,r4,1746c <_realloc_r+0x56c>
   17424:	b8800604 	addi	r2,r23,24
   17428:	80c00404 	addi	r3,r16,16
   1742c:	003f9606 	br	17288 <_realloc_r+0x388>
   17430:	81000417 	ldw	r4,16(r16)
   17434:	90800604 	addi	r2,r18,24
   17438:	80c00604 	addi	r3,r16,24
   1743c:	91000415 	stw	r4,16(r18)
   17440:	81000517 	ldw	r4,20(r16)
   17444:	91000515 	stw	r4,20(r18)
   17448:	003f4606 	br	17164 <_realloc_r+0x264>
   1744c:	80800217 	ldw	r2,8(r16)
   17450:	b8800415 	stw	r2,16(r23)
   17454:	80800317 	ldw	r2,12(r16)
   17458:	b8800515 	stw	r2,20(r23)
   1745c:	31000d26 	beq	r6,r4,17494 <_realloc_r+0x594>
   17460:	b8800604 	addi	r2,r23,24
   17464:	80c00404 	addi	r3,r16,16
   17468:	003f7106 	br	17230 <_realloc_r+0x330>
   1746c:	81000417 	ldw	r4,16(r16)
   17470:	b8800804 	addi	r2,r23,32
   17474:	80c00604 	addi	r3,r16,24
   17478:	b9000615 	stw	r4,24(r23)
   1747c:	81000517 	ldw	r4,20(r16)
   17480:	b9000715 	stw	r4,28(r23)
   17484:	003f8006 	br	17288 <_realloc_r+0x388>
   17488:	9005883a 	mov	r2,r18
   1748c:	8007883a 	mov	r3,r16
   17490:	003fac06 	br	17344 <_realloc_r+0x444>
   17494:	81000417 	ldw	r4,16(r16)
   17498:	b8800804 	addi	r2,r23,32
   1749c:	80c00604 	addi	r3,r16,24
   174a0:	b9000615 	stw	r4,24(r23)
   174a4:	81000517 	ldw	r4,20(r16)
   174a8:	b9000715 	stw	r4,28(r23)
   174ac:	003f6006 	br	17230 <_realloc_r+0x330>
   174b0:	9009883a 	mov	r4,r18
   174b4:	800b883a 	mov	r5,r16
   174b8:	0015c480 	call	15c48 <memmove>
   174bc:	003fa706 	br	1735c <_realloc_r+0x45c>
   174c0:	80800217 	ldw	r2,8(r16)
   174c4:	b8800415 	stw	r2,16(r23)
   174c8:	80800317 	ldw	r2,12(r16)
   174cc:	b8800515 	stw	r2,20(r23)
   174d0:	31000326 	beq	r6,r4,174e0 <_realloc_r+0x5e0>
   174d4:	b8800604 	addi	r2,r23,24
   174d8:	80c00404 	addi	r3,r16,16
   174dc:	003f9906 	br	17344 <_realloc_r+0x444>
   174e0:	81000417 	ldw	r4,16(r16)
   174e4:	b8800804 	addi	r2,r23,32
   174e8:	80c00604 	addi	r3,r16,24
   174ec:	b9000615 	stw	r4,24(r23)
   174f0:	81000517 	ldw	r4,20(r16)
   174f4:	b9000715 	stw	r4,28(r23)
   174f8:	003f9206 	br	17344 <_realloc_r+0x444>

000174fc <__isinfd>:
   174fc:	0105c83a 	sub	r2,zero,r4
   17500:	1108b03a 	or	r4,r2,r4
   17504:	2004d7fa 	srli	r2,r4,31
   17508:	00e00034 	movhi	r3,32768
   1750c:	18ffffc4 	addi	r3,r3,-1
   17510:	28ca703a 	and	r5,r5,r3
   17514:	1144b03a 	or	r2,r2,r5
   17518:	00dffc34 	movhi	r3,32752
   1751c:	1885c83a 	sub	r2,r3,r2
   17520:	0087c83a 	sub	r3,zero,r2
   17524:	1884b03a 	or	r2,r3,r2
   17528:	1005d7fa 	srai	r2,r2,31
   1752c:	10800044 	addi	r2,r2,1
   17530:	f800283a 	ret

00017534 <__isnand>:
   17534:	0105c83a 	sub	r2,zero,r4
   17538:	1108b03a 	or	r4,r2,r4
   1753c:	2004d7fa 	srli	r2,r4,31
   17540:	00e00034 	movhi	r3,32768
   17544:	18ffffc4 	addi	r3,r3,-1
   17548:	28ca703a 	and	r5,r5,r3
   1754c:	1144b03a 	or	r2,r2,r5
   17550:	00dffc34 	movhi	r3,32752
   17554:	1885c83a 	sub	r2,r3,r2
   17558:	1004d7fa 	srli	r2,r2,31
   1755c:	f800283a 	ret

00017560 <_sbrk_r>:
   17560:	defffd04 	addi	sp,sp,-12
   17564:	dc400115 	stw	r17,4(sp)
   17568:	dc000015 	stw	r16,0(sp)
   1756c:	2023883a 	mov	r17,r4
   17570:	040000f4 	movhi	r16,3
   17574:	8427b704 	addi	r16,r16,-24868
   17578:	2809883a 	mov	r4,r5
   1757c:	dfc00215 	stw	ra,8(sp)
   17580:	80000015 	stw	zero,0(r16)
   17584:	001a3f40 	call	1a3f4 <sbrk>
   17588:	00ffffc4 	movi	r3,-1
   1758c:	10c00526 	beq	r2,r3,175a4 <_sbrk_r+0x44>
   17590:	dfc00217 	ldw	ra,8(sp)
   17594:	dc400117 	ldw	r17,4(sp)
   17598:	dc000017 	ldw	r16,0(sp)
   1759c:	dec00304 	addi	sp,sp,12
   175a0:	f800283a 	ret
   175a4:	80c00017 	ldw	r3,0(r16)
   175a8:	183ff926 	beq	r3,zero,17590 <_sbrk_r+0x30>
   175ac:	88c00015 	stw	r3,0(r17)
   175b0:	dfc00217 	ldw	ra,8(sp)
   175b4:	dc400117 	ldw	r17,4(sp)
   175b8:	dc000017 	ldw	r16,0(sp)
   175bc:	dec00304 	addi	sp,sp,12
   175c0:	f800283a 	ret

000175c4 <__sread>:
   175c4:	defffe04 	addi	sp,sp,-8
   175c8:	dc000015 	stw	r16,0(sp)
   175cc:	2821883a 	mov	r16,r5
   175d0:	2940038f 	ldh	r5,14(r5)
   175d4:	dfc00115 	stw	ra,4(sp)
   175d8:	0017bcc0 	call	17bcc <_read_r>
   175dc:	10000716 	blt	r2,zero,175fc <__sread+0x38>
   175e0:	80c01417 	ldw	r3,80(r16)
   175e4:	1887883a 	add	r3,r3,r2
   175e8:	80c01415 	stw	r3,80(r16)
   175ec:	dfc00117 	ldw	ra,4(sp)
   175f0:	dc000017 	ldw	r16,0(sp)
   175f4:	dec00204 	addi	sp,sp,8
   175f8:	f800283a 	ret
   175fc:	80c0030b 	ldhu	r3,12(r16)
   17600:	18fbffcc 	andi	r3,r3,61439
   17604:	80c0030d 	sth	r3,12(r16)
   17608:	dfc00117 	ldw	ra,4(sp)
   1760c:	dc000017 	ldw	r16,0(sp)
   17610:	dec00204 	addi	sp,sp,8
   17614:	f800283a 	ret

00017618 <__swrite>:
   17618:	2880030b 	ldhu	r2,12(r5)
   1761c:	defffb04 	addi	sp,sp,-20
   17620:	dcc00315 	stw	r19,12(sp)
   17624:	10c0400c 	andi	r3,r2,256
   17628:	18ffffcc 	andi	r3,r3,65535
   1762c:	18e0001c 	xori	r3,r3,32768
   17630:	dc800215 	stw	r18,8(sp)
   17634:	dc400115 	stw	r17,4(sp)
   17638:	dc000015 	stw	r16,0(sp)
   1763c:	dfc00415 	stw	ra,16(sp)
   17640:	18e00004 	addi	r3,r3,-32768
   17644:	2821883a 	mov	r16,r5
   17648:	2027883a 	mov	r19,r4
   1764c:	3025883a 	mov	r18,r6
   17650:	3823883a 	mov	r17,r7
   17654:	18000526 	beq	r3,zero,1766c <__swrite+0x54>
   17658:	2940038f 	ldh	r5,14(r5)
   1765c:	000d883a 	mov	r6,zero
   17660:	01c00084 	movi	r7,2
   17664:	0017b600 	call	17b60 <_lseek_r>
   17668:	8080030b 	ldhu	r2,12(r16)
   1766c:	8140038f 	ldh	r5,14(r16)
   17670:	10bbffcc 	andi	r2,r2,61439
   17674:	9809883a 	mov	r4,r19
   17678:	900d883a 	mov	r6,r18
   1767c:	880f883a 	mov	r7,r17
   17680:	8080030d 	sth	r2,12(r16)
   17684:	dfc00417 	ldw	ra,16(sp)
   17688:	dcc00317 	ldw	r19,12(sp)
   1768c:	dc800217 	ldw	r18,8(sp)
   17690:	dc400117 	ldw	r17,4(sp)
   17694:	dc000017 	ldw	r16,0(sp)
   17698:	dec00504 	addi	sp,sp,20
   1769c:	00177a81 	jmpi	177a8 <_write_r>

000176a0 <__sseek>:
   176a0:	defffe04 	addi	sp,sp,-8
   176a4:	dc000015 	stw	r16,0(sp)
   176a8:	2821883a 	mov	r16,r5
   176ac:	2940038f 	ldh	r5,14(r5)
   176b0:	dfc00115 	stw	ra,4(sp)
   176b4:	0017b600 	call	17b60 <_lseek_r>
   176b8:	00ffffc4 	movi	r3,-1
   176bc:	10c00826 	beq	r2,r3,176e0 <__sseek+0x40>
   176c0:	80c0030b 	ldhu	r3,12(r16)
   176c4:	80801415 	stw	r2,80(r16)
   176c8:	18c40014 	ori	r3,r3,4096
   176cc:	80c0030d 	sth	r3,12(r16)
   176d0:	dfc00117 	ldw	ra,4(sp)
   176d4:	dc000017 	ldw	r16,0(sp)
   176d8:	dec00204 	addi	sp,sp,8
   176dc:	f800283a 	ret
   176e0:	80c0030b 	ldhu	r3,12(r16)
   176e4:	18fbffcc 	andi	r3,r3,61439
   176e8:	80c0030d 	sth	r3,12(r16)
   176ec:	dfc00117 	ldw	ra,4(sp)
   176f0:	dc000017 	ldw	r16,0(sp)
   176f4:	dec00204 	addi	sp,sp,8
   176f8:	f800283a 	ret

000176fc <__sclose>:
   176fc:	2940038f 	ldh	r5,14(r5)
   17700:	00178e01 	jmpi	178e0 <_close_r>

00017704 <strcmp>:
   17704:	2904b03a 	or	r2,r5,r4
   17708:	108000cc 	andi	r2,r2,3
   1770c:	1000171e 	bne	r2,zero,1776c <strcmp+0x68>
   17710:	20800017 	ldw	r2,0(r4)
   17714:	28c00017 	ldw	r3,0(r5)
   17718:	10c0141e 	bne	r2,r3,1776c <strcmp+0x68>
   1771c:	027fbff4 	movhi	r9,65279
   17720:	4a7fbfc4 	addi	r9,r9,-257
   17724:	1247883a 	add	r3,r2,r9
   17728:	0084303a 	nor	r2,zero,r2
   1772c:	1884703a 	and	r2,r3,r2
   17730:	02202074 	movhi	r8,32897
   17734:	42202004 	addi	r8,r8,-32640
   17738:	1204703a 	and	r2,r2,r8
   1773c:	10000226 	beq	r2,zero,17748 <strcmp+0x44>
   17740:	00001706 	br	177a0 <strcmp+0x9c>
   17744:	3000161e 	bne	r6,zero,177a0 <strcmp+0x9c>
   17748:	21000104 	addi	r4,r4,4
   1774c:	20800017 	ldw	r2,0(r4)
   17750:	29400104 	addi	r5,r5,4
   17754:	28c00017 	ldw	r3,0(r5)
   17758:	124f883a 	add	r7,r2,r9
   1775c:	008c303a 	nor	r6,zero,r2
   17760:	398c703a 	and	r6,r7,r6
   17764:	320c703a 	and	r6,r6,r8
   17768:	10fff626 	beq	r2,r3,17744 <strcmp+0x40>
   1776c:	20800007 	ldb	r2,0(r4)
   17770:	1000051e 	bne	r2,zero,17788 <strcmp+0x84>
   17774:	00000606 	br	17790 <strcmp+0x8c>
   17778:	21000044 	addi	r4,r4,1
   1777c:	20800007 	ldb	r2,0(r4)
   17780:	29400044 	addi	r5,r5,1
   17784:	10000226 	beq	r2,zero,17790 <strcmp+0x8c>
   17788:	28c00007 	ldb	r3,0(r5)
   1778c:	10fffa26 	beq	r2,r3,17778 <strcmp+0x74>
   17790:	20c00003 	ldbu	r3,0(r4)
   17794:	28800003 	ldbu	r2,0(r5)
   17798:	1885c83a 	sub	r2,r3,r2
   1779c:	f800283a 	ret
   177a0:	0005883a 	mov	r2,zero
   177a4:	f800283a 	ret

000177a8 <_write_r>:
   177a8:	defffd04 	addi	sp,sp,-12
   177ac:	dc400115 	stw	r17,4(sp)
   177b0:	dc000015 	stw	r16,0(sp)
   177b4:	2023883a 	mov	r17,r4
   177b8:	040000f4 	movhi	r16,3
   177bc:	8427b704 	addi	r16,r16,-24868
   177c0:	2809883a 	mov	r4,r5
   177c4:	300b883a 	mov	r5,r6
   177c8:	380d883a 	mov	r6,r7
   177cc:	dfc00215 	stw	ra,8(sp)
   177d0:	80000015 	stw	zero,0(r16)
   177d4:	001a4f40 	call	1a4f4 <write>
   177d8:	00ffffc4 	movi	r3,-1
   177dc:	10c00526 	beq	r2,r3,177f4 <_write_r+0x4c>
   177e0:	dfc00217 	ldw	ra,8(sp)
   177e4:	dc400117 	ldw	r17,4(sp)
   177e8:	dc000017 	ldw	r16,0(sp)
   177ec:	dec00304 	addi	sp,sp,12
   177f0:	f800283a 	ret
   177f4:	80c00017 	ldw	r3,0(r16)
   177f8:	183ff926 	beq	r3,zero,177e0 <_write_r+0x38>
   177fc:	88c00015 	stw	r3,0(r17)
   17800:	dfc00217 	ldw	ra,8(sp)
   17804:	dc400117 	ldw	r17,4(sp)
   17808:	dc000017 	ldw	r16,0(sp)
   1780c:	dec00304 	addi	sp,sp,12
   17810:	f800283a 	ret

00017814 <_calloc_r>:
   17814:	defffe04 	addi	sp,sp,-8
   17818:	dc000015 	stw	r16,0(sp)
   1781c:	2021883a 	mov	r16,r4
   17820:	3009883a 	mov	r4,r6
   17824:	dfc00115 	stw	ra,4(sp)
   17828:	00106600 	call	10660 <__mulsi3>
   1782c:	8009883a 	mov	r4,r16
   17830:	100b883a 	mov	r5,r2
   17834:	001528c0 	call	1528c <_malloc_r>
   17838:	1021883a 	mov	r16,r2
   1783c:	10000c26 	beq	r2,zero,17870 <_calloc_r+0x5c>
   17840:	11bfff17 	ldw	r6,-4(r2)
   17844:	00ffff04 	movi	r3,-4
   17848:	00800904 	movi	r2,36
   1784c:	30cc703a 	and	r6,r6,r3
   17850:	30cd883a 	add	r6,r6,r3
   17854:	11801436 	bltu	r2,r6,178a8 <_calloc_r+0x94>
   17858:	00c004c4 	movi	r3,19
   1785c:	19800936 	bltu	r3,r6,17884 <_calloc_r+0x70>
   17860:	8005883a 	mov	r2,r16
   17864:	10000015 	stw	zero,0(r2)
   17868:	10000115 	stw	zero,4(r2)
   1786c:	10000215 	stw	zero,8(r2)
   17870:	8005883a 	mov	r2,r16
   17874:	dfc00117 	ldw	ra,4(sp)
   17878:	dc000017 	ldw	r16,0(sp)
   1787c:	dec00204 	addi	sp,sp,8
   17880:	f800283a 	ret
   17884:	80000015 	stw	zero,0(r16)
   17888:	80000115 	stw	zero,4(r16)
   1788c:	00c006c4 	movi	r3,27
   17890:	19800d2e 	bgeu	r3,r6,178c8 <_calloc_r+0xb4>
   17894:	80000215 	stw	zero,8(r16)
   17898:	80000315 	stw	zero,12(r16)
   1789c:	30800c26 	beq	r6,r2,178d0 <_calloc_r+0xbc>
   178a0:	80800404 	addi	r2,r16,16
   178a4:	003fef06 	br	17864 <_calloc_r+0x50>
   178a8:	8009883a 	mov	r4,r16
   178ac:	000b883a 	mov	r5,zero
   178b0:	0015dd40 	call	15dd4 <memset>
   178b4:	8005883a 	mov	r2,r16
   178b8:	dfc00117 	ldw	ra,4(sp)
   178bc:	dc000017 	ldw	r16,0(sp)
   178c0:	dec00204 	addi	sp,sp,8
   178c4:	f800283a 	ret
   178c8:	80800204 	addi	r2,r16,8
   178cc:	003fe506 	br	17864 <_calloc_r+0x50>
   178d0:	80000415 	stw	zero,16(r16)
   178d4:	80000515 	stw	zero,20(r16)
   178d8:	80800604 	addi	r2,r16,24
   178dc:	003fe106 	br	17864 <_calloc_r+0x50>

000178e0 <_close_r>:
   178e0:	defffd04 	addi	sp,sp,-12
   178e4:	dc400115 	stw	r17,4(sp)
   178e8:	dc000015 	stw	r16,0(sp)
   178ec:	2023883a 	mov	r17,r4
   178f0:	040000f4 	movhi	r16,3
   178f4:	8427b704 	addi	r16,r16,-24868
   178f8:	2809883a 	mov	r4,r5
   178fc:	dfc00215 	stw	ra,8(sp)
   17900:	80000015 	stw	zero,0(r16)
   17904:	0019c7c0 	call	19c7c <close>
   17908:	00ffffc4 	movi	r3,-1
   1790c:	10c00526 	beq	r2,r3,17924 <_close_r+0x44>
   17910:	dfc00217 	ldw	ra,8(sp)
   17914:	dc400117 	ldw	r17,4(sp)
   17918:	dc000017 	ldw	r16,0(sp)
   1791c:	dec00304 	addi	sp,sp,12
   17920:	f800283a 	ret
   17924:	80c00017 	ldw	r3,0(r16)
   17928:	183ff926 	beq	r3,zero,17910 <_close_r+0x30>
   1792c:	88c00015 	stw	r3,0(r17)
   17930:	dfc00217 	ldw	ra,8(sp)
   17934:	dc400117 	ldw	r17,4(sp)
   17938:	dc000017 	ldw	r16,0(sp)
   1793c:	dec00304 	addi	sp,sp,12
   17940:	f800283a 	ret

00017944 <_fclose_r>:
   17944:	defffc04 	addi	sp,sp,-16
   17948:	dc400115 	stw	r17,4(sp)
   1794c:	dc000015 	stw	r16,0(sp)
   17950:	dfc00315 	stw	ra,12(sp)
   17954:	dc800215 	stw	r18,8(sp)
   17958:	2821883a 	mov	r16,r5
   1795c:	2023883a 	mov	r17,r4
   17960:	28003426 	beq	r5,zero,17a34 <_fclose_r+0xf0>
   17964:	00145780 	call	14578 <__sfp_lock_acquire>
   17968:	88000226 	beq	r17,zero,17974 <_fclose_r+0x30>
   1796c:	88800e17 	ldw	r2,56(r17)
   17970:	10003826 	beq	r2,zero,17a54 <_fclose_r+0x110>
   17974:	8080030f 	ldh	r2,12(r16)
   17978:	10002526 	beq	r2,zero,17a10 <_fclose_r+0xcc>
   1797c:	8809883a 	mov	r4,r17
   17980:	800b883a 	mov	r5,r16
   17984:	00140b40 	call	140b4 <_fflush_r>
   17988:	1025883a 	mov	r18,r2
   1798c:	80800b17 	ldw	r2,44(r16)
   17990:	10000426 	beq	r2,zero,179a4 <_fclose_r+0x60>
   17994:	81400717 	ldw	r5,28(r16)
   17998:	8809883a 	mov	r4,r17
   1799c:	103ee83a 	callr	r2
   179a0:	10003516 	blt	r2,zero,17a78 <_fclose_r+0x134>
   179a4:	8080030b 	ldhu	r2,12(r16)
   179a8:	1080200c 	andi	r2,r2,128
   179ac:	10bfffcc 	andi	r2,r2,65535
   179b0:	10a0001c 	xori	r2,r2,32768
   179b4:	10a00004 	addi	r2,r2,-32768
   179b8:	10002b1e 	bne	r2,zero,17a68 <_fclose_r+0x124>
   179bc:	81400c17 	ldw	r5,48(r16)
   179c0:	28000526 	beq	r5,zero,179d8 <_fclose_r+0x94>
   179c4:	80801004 	addi	r2,r16,64
   179c8:	28800226 	beq	r5,r2,179d4 <_fclose_r+0x90>
   179cc:	8809883a 	mov	r4,r17
   179d0:	00146f40 	call	146f4 <_free_r>
   179d4:	80000c15 	stw	zero,48(r16)
   179d8:	81401117 	ldw	r5,68(r16)
   179dc:	28000326 	beq	r5,zero,179ec <_fclose_r+0xa8>
   179e0:	8809883a 	mov	r4,r17
   179e4:	00146f40 	call	146f4 <_free_r>
   179e8:	80001115 	stw	zero,68(r16)
   179ec:	8000030d 	sth	zero,12(r16)
   179f0:	001457c0 	call	1457c <__sfp_lock_release>
   179f4:	9005883a 	mov	r2,r18
   179f8:	dfc00317 	ldw	ra,12(sp)
   179fc:	dc800217 	ldw	r18,8(sp)
   17a00:	dc400117 	ldw	r17,4(sp)
   17a04:	dc000017 	ldw	r16,0(sp)
   17a08:	dec00404 	addi	sp,sp,16
   17a0c:	f800283a 	ret
   17a10:	001457c0 	call	1457c <__sfp_lock_release>
   17a14:	0025883a 	mov	r18,zero
   17a18:	9005883a 	mov	r2,r18
   17a1c:	dfc00317 	ldw	ra,12(sp)
   17a20:	dc800217 	ldw	r18,8(sp)
   17a24:	dc400117 	ldw	r17,4(sp)
   17a28:	dc000017 	ldw	r16,0(sp)
   17a2c:	dec00404 	addi	sp,sp,16
   17a30:	f800283a 	ret
   17a34:	0025883a 	mov	r18,zero
   17a38:	9005883a 	mov	r2,r18
   17a3c:	dfc00317 	ldw	ra,12(sp)
   17a40:	dc800217 	ldw	r18,8(sp)
   17a44:	dc400117 	ldw	r17,4(sp)
   17a48:	dc000017 	ldw	r16,0(sp)
   17a4c:	dec00404 	addi	sp,sp,16
   17a50:	f800283a 	ret
   17a54:	8809883a 	mov	r4,r17
   17a58:	00143700 	call	14370 <__sinit>
   17a5c:	8080030f 	ldh	r2,12(r16)
   17a60:	103fc61e 	bne	r2,zero,1797c <_fclose_r+0x38>
   17a64:	003fea06 	br	17a10 <_fclose_r+0xcc>
   17a68:	81400417 	ldw	r5,16(r16)
   17a6c:	8809883a 	mov	r4,r17
   17a70:	00146f40 	call	146f4 <_free_r>
   17a74:	003fd106 	br	179bc <_fclose_r+0x78>
   17a78:	04bfffc4 	movi	r18,-1
   17a7c:	003fc906 	br	179a4 <_fclose_r+0x60>

00017a80 <fclose>:
   17a80:	008000f4 	movhi	r2,3
   17a84:	10a79e04 	addi	r2,r2,-24968
   17a88:	200b883a 	mov	r5,r4
   17a8c:	11000017 	ldw	r4,0(r2)
   17a90:	00179441 	jmpi	17944 <_fclose_r>

00017a94 <_fstat_r>:
   17a94:	defffd04 	addi	sp,sp,-12
   17a98:	dc400115 	stw	r17,4(sp)
   17a9c:	dc000015 	stw	r16,0(sp)
   17aa0:	2023883a 	mov	r17,r4
   17aa4:	040000f4 	movhi	r16,3
   17aa8:	8427b704 	addi	r16,r16,-24868
   17aac:	2809883a 	mov	r4,r5
   17ab0:	300b883a 	mov	r5,r6
   17ab4:	dfc00215 	stw	ra,8(sp)
   17ab8:	80000015 	stw	zero,0(r16)
   17abc:	0019dc40 	call	19dc4 <fstat>
   17ac0:	00ffffc4 	movi	r3,-1
   17ac4:	10c00526 	beq	r2,r3,17adc <_fstat_r+0x48>
   17ac8:	dfc00217 	ldw	ra,8(sp)
   17acc:	dc400117 	ldw	r17,4(sp)
   17ad0:	dc000017 	ldw	r16,0(sp)
   17ad4:	dec00304 	addi	sp,sp,12
   17ad8:	f800283a 	ret
   17adc:	80c00017 	ldw	r3,0(r16)
   17ae0:	183ff926 	beq	r3,zero,17ac8 <_fstat_r+0x34>
   17ae4:	88c00015 	stw	r3,0(r17)
   17ae8:	dfc00217 	ldw	ra,8(sp)
   17aec:	dc400117 	ldw	r17,4(sp)
   17af0:	dc000017 	ldw	r16,0(sp)
   17af4:	dec00304 	addi	sp,sp,12
   17af8:	f800283a 	ret

00017afc <_isatty_r>:
   17afc:	defffd04 	addi	sp,sp,-12
   17b00:	dc400115 	stw	r17,4(sp)
   17b04:	dc000015 	stw	r16,0(sp)
   17b08:	2023883a 	mov	r17,r4
   17b0c:	040000f4 	movhi	r16,3
   17b10:	8427b704 	addi	r16,r16,-24868
   17b14:	2809883a 	mov	r4,r5
   17b18:	dfc00215 	stw	ra,8(sp)
   17b1c:	80000015 	stw	zero,0(r16)
   17b20:	0019ec40 	call	19ec4 <isatty>
   17b24:	00ffffc4 	movi	r3,-1
   17b28:	10c00526 	beq	r2,r3,17b40 <_isatty_r+0x44>
   17b2c:	dfc00217 	ldw	ra,8(sp)
   17b30:	dc400117 	ldw	r17,4(sp)
   17b34:	dc000017 	ldw	r16,0(sp)
   17b38:	dec00304 	addi	sp,sp,12
   17b3c:	f800283a 	ret
   17b40:	80c00017 	ldw	r3,0(r16)
   17b44:	183ff926 	beq	r3,zero,17b2c <_isatty_r+0x30>
   17b48:	88c00015 	stw	r3,0(r17)
   17b4c:	dfc00217 	ldw	ra,8(sp)
   17b50:	dc400117 	ldw	r17,4(sp)
   17b54:	dc000017 	ldw	r16,0(sp)
   17b58:	dec00304 	addi	sp,sp,12
   17b5c:	f800283a 	ret

00017b60 <_lseek_r>:
   17b60:	defffd04 	addi	sp,sp,-12
   17b64:	dc400115 	stw	r17,4(sp)
   17b68:	dc000015 	stw	r16,0(sp)
   17b6c:	2023883a 	mov	r17,r4
   17b70:	040000f4 	movhi	r16,3
   17b74:	8427b704 	addi	r16,r16,-24868
   17b78:	2809883a 	mov	r4,r5
   17b7c:	300b883a 	mov	r5,r6
   17b80:	380d883a 	mov	r6,r7
   17b84:	dfc00215 	stw	ra,8(sp)
   17b88:	80000015 	stw	zero,0(r16)
   17b8c:	001a0a40 	call	1a0a4 <lseek>
   17b90:	00ffffc4 	movi	r3,-1
   17b94:	10c00526 	beq	r2,r3,17bac <_lseek_r+0x4c>
   17b98:	dfc00217 	ldw	ra,8(sp)
   17b9c:	dc400117 	ldw	r17,4(sp)
   17ba0:	dc000017 	ldw	r16,0(sp)
   17ba4:	dec00304 	addi	sp,sp,12
   17ba8:	f800283a 	ret
   17bac:	80c00017 	ldw	r3,0(r16)
   17bb0:	183ff926 	beq	r3,zero,17b98 <_lseek_r+0x38>
   17bb4:	88c00015 	stw	r3,0(r17)
   17bb8:	dfc00217 	ldw	ra,8(sp)
   17bbc:	dc400117 	ldw	r17,4(sp)
   17bc0:	dc000017 	ldw	r16,0(sp)
   17bc4:	dec00304 	addi	sp,sp,12
   17bc8:	f800283a 	ret

00017bcc <_read_r>:
   17bcc:	defffd04 	addi	sp,sp,-12
   17bd0:	dc400115 	stw	r17,4(sp)
   17bd4:	dc000015 	stw	r16,0(sp)
   17bd8:	2023883a 	mov	r17,r4
   17bdc:	040000f4 	movhi	r16,3
   17be0:	8427b704 	addi	r16,r16,-24868
   17be4:	2809883a 	mov	r4,r5
   17be8:	300b883a 	mov	r5,r6
   17bec:	380d883a 	mov	r6,r7
   17bf0:	dfc00215 	stw	ra,8(sp)
   17bf4:	80000015 	stw	zero,0(r16)
   17bf8:	001a2800 	call	1a280 <read>
   17bfc:	00ffffc4 	movi	r3,-1
   17c00:	10c00526 	beq	r2,r3,17c18 <_read_r+0x4c>
   17c04:	dfc00217 	ldw	ra,8(sp)
   17c08:	dc400117 	ldw	r17,4(sp)
   17c0c:	dc000017 	ldw	r16,0(sp)
   17c10:	dec00304 	addi	sp,sp,12
   17c14:	f800283a 	ret
   17c18:	80c00017 	ldw	r3,0(r16)
   17c1c:	183ff926 	beq	r3,zero,17c04 <_read_r+0x38>
   17c20:	88c00015 	stw	r3,0(r17)
   17c24:	dfc00217 	ldw	ra,8(sp)
   17c28:	dc400117 	ldw	r17,4(sp)
   17c2c:	dc000017 	ldw	r16,0(sp)
   17c30:	dec00304 	addi	sp,sp,12
   17c34:	f800283a 	ret

00017c38 <__udivdi3>:
   17c38:	defff504 	addi	sp,sp,-44
   17c3c:	dd000515 	stw	r20,20(sp)
   17c40:	dcc00415 	stw	r19,16(sp)
   17c44:	dc800315 	stw	r18,12(sp)
   17c48:	dc400215 	stw	r17,8(sp)
   17c4c:	dc000115 	stw	r16,4(sp)
   17c50:	dfc00a15 	stw	ra,40(sp)
   17c54:	df000915 	stw	fp,36(sp)
   17c58:	ddc00815 	stw	r23,32(sp)
   17c5c:	dd800715 	stw	r22,28(sp)
   17c60:	dd400615 	stw	r21,24(sp)
   17c64:	2025883a 	mov	r18,r4
   17c68:	2823883a 	mov	r17,r5
   17c6c:	3021883a 	mov	r16,r6
   17c70:	2027883a 	mov	r19,r4
   17c74:	2829883a 	mov	r20,r5
   17c78:	3800451e 	bne	r7,zero,17d90 <__udivdi3+0x158>
   17c7c:	2980652e 	bgeu	r5,r6,17e14 <__udivdi3+0x1dc>
   17c80:	00bfffd4 	movui	r2,65535
   17c84:	1180b436 	bltu	r2,r6,17f58 <__udivdi3+0x320>
   17c88:	00803fc4 	movi	r2,255
   17c8c:	11816636 	bltu	r2,r6,18228 <__udivdi3+0x5f0>
   17c90:	0005883a 	mov	r2,zero
   17c94:	0007883a 	mov	r3,zero
   17c98:	3084d83a 	srl	r2,r6,r2
   17c9c:	010000f4 	movhi	r4,3
   17ca0:	2120c904 	addi	r4,r4,-31964
   17ca4:	2085883a 	add	r2,r4,r2
   17ca8:	10800003 	ldbu	r2,0(r2)
   17cac:	10c7883a 	add	r3,r2,r3
   17cb0:	00800804 	movi	r2,32
   17cb4:	10c5c83a 	sub	r2,r2,r3
   17cb8:	10000526 	beq	r2,zero,17cd0 <__udivdi3+0x98>
   17cbc:	88a2983a 	sll	r17,r17,r2
   17cc0:	90c6d83a 	srl	r3,r18,r3
   17cc4:	30a0983a 	sll	r16,r6,r2
   17cc8:	90a6983a 	sll	r19,r18,r2
   17ccc:	88e8b03a 	or	r20,r17,r3
   17cd0:	8022d43a 	srli	r17,r16,16
   17cd4:	a009883a 	mov	r4,r20
   17cd8:	857fffcc 	andi	r21,r16,65535
   17cdc:	880b883a 	mov	r5,r17
   17ce0:	00106580 	call	10658 <__umodsi3>
   17ce4:	a009883a 	mov	r4,r20
   17ce8:	880b883a 	mov	r5,r17
   17cec:	102d883a 	mov	r22,r2
   17cf0:	00106500 	call	10650 <__udivsi3>
   17cf4:	1009883a 	mov	r4,r2
   17cf8:	a80b883a 	mov	r5,r21
   17cfc:	1025883a 	mov	r18,r2
   17d00:	00106600 	call	10660 <__mulsi3>
   17d04:	1009883a 	mov	r4,r2
   17d08:	b006943a 	slli	r3,r22,16
   17d0c:	9804d43a 	srli	r2,r19,16
   17d10:	1886b03a 	or	r3,r3,r2
   17d14:	1900052e 	bgeu	r3,r4,17d2c <__udivdi3+0xf4>
   17d18:	1c07883a 	add	r3,r3,r16
   17d1c:	90bfffc4 	addi	r2,r18,-1
   17d20:	1c000136 	bltu	r3,r16,17d28 <__udivdi3+0xf0>
   17d24:	19015536 	bltu	r3,r4,1827c <__udivdi3+0x644>
   17d28:	1025883a 	mov	r18,r2
   17d2c:	1929c83a 	sub	r20,r3,r4
   17d30:	880b883a 	mov	r5,r17
   17d34:	a009883a 	mov	r4,r20
   17d38:	00106580 	call	10658 <__umodsi3>
   17d3c:	102d883a 	mov	r22,r2
   17d40:	880b883a 	mov	r5,r17
   17d44:	a009883a 	mov	r4,r20
   17d48:	b02c943a 	slli	r22,r22,16
   17d4c:	00106500 	call	10650 <__udivsi3>
   17d50:	1009883a 	mov	r4,r2
   17d54:	a80b883a 	mov	r5,r21
   17d58:	9cffffcc 	andi	r19,r19,65535
   17d5c:	1023883a 	mov	r17,r2
   17d60:	b4e6b03a 	or	r19,r22,r19
   17d64:	00106600 	call	10660 <__mulsi3>
   17d68:	9880052e 	bgeu	r19,r2,17d80 <__udivdi3+0x148>
   17d6c:	9c27883a 	add	r19,r19,r16
   17d70:	88ffffc4 	addi	r3,r17,-1
   17d74:	9c011436 	bltu	r19,r16,181c8 <__udivdi3+0x590>
   17d78:	9881132e 	bgeu	r19,r2,181c8 <__udivdi3+0x590>
   17d7c:	8c7fff84 	addi	r17,r17,-2
   17d80:	9004943a 	slli	r2,r18,16
   17d84:	0007883a 	mov	r3,zero
   17d88:	8884b03a 	or	r2,r17,r2
   17d8c:	00001506 	br	17de4 <__udivdi3+0x1ac>
   17d90:	29c06a36 	bltu	r5,r7,17f3c <__udivdi3+0x304>
   17d94:	00bfffd4 	movui	r2,65535
   17d98:	11c06a2e 	bgeu	r2,r7,17f44 <__udivdi3+0x30c>
   17d9c:	00804034 	movhi	r2,256
   17da0:	10bfffc4 	addi	r2,r2,-1
   17da4:	11c11436 	bltu	r2,r7,181f8 <__udivdi3+0x5c0>
   17da8:	00c00404 	movi	r3,16
   17dac:	180b883a 	mov	r5,r3
   17db0:	38c6d83a 	srl	r3,r7,r3
   17db4:	010000f4 	movhi	r4,3
   17db8:	2120c904 	addi	r4,r4,-31964
   17dbc:	04000804 	movi	r16,32
   17dc0:	20c7883a 	add	r3,r4,r3
   17dc4:	18800003 	ldbu	r2,0(r3)
   17dc8:	1145883a 	add	r2,r2,r5
   17dcc:	80a1c83a 	sub	r16,r16,r2
   17dd0:	80006e1e 	bne	r16,zero,17f8c <__udivdi3+0x354>
   17dd4:	0007883a 	mov	r3,zero
   17dd8:	3c406a36 	bltu	r7,r17,17f84 <__udivdi3+0x34c>
   17ddc:	9180692e 	bgeu	r18,r6,17f84 <__udivdi3+0x34c>
   17de0:	0005883a 	mov	r2,zero
   17de4:	dfc00a17 	ldw	ra,40(sp)
   17de8:	df000917 	ldw	fp,36(sp)
   17dec:	ddc00817 	ldw	r23,32(sp)
   17df0:	dd800717 	ldw	r22,28(sp)
   17df4:	dd400617 	ldw	r21,24(sp)
   17df8:	dd000517 	ldw	r20,20(sp)
   17dfc:	dcc00417 	ldw	r19,16(sp)
   17e00:	dc800317 	ldw	r18,12(sp)
   17e04:	dc400217 	ldw	r17,8(sp)
   17e08:	dc000117 	ldw	r16,4(sp)
   17e0c:	dec00b04 	addi	sp,sp,44
   17e10:	f800283a 	ret
   17e14:	3000041e 	bne	r6,zero,17e28 <__udivdi3+0x1f0>
   17e18:	01000044 	movi	r4,1
   17e1c:	000b883a 	mov	r5,zero
   17e20:	00106500 	call	10650 <__udivsi3>
   17e24:	1021883a 	mov	r16,r2
   17e28:	00bfffd4 	movui	r2,65535
   17e2c:	1400502e 	bgeu	r2,r16,17f70 <__udivdi3+0x338>
   17e30:	00804034 	movhi	r2,256
   17e34:	10bfffc4 	addi	r2,r2,-1
   17e38:	1400f536 	bltu	r2,r16,18210 <__udivdi3+0x5d8>
   17e3c:	00800404 	movi	r2,16
   17e40:	1007883a 	mov	r3,r2
   17e44:	8084d83a 	srl	r2,r16,r2
   17e48:	010000f4 	movhi	r4,3
   17e4c:	2120c904 	addi	r4,r4,-31964
   17e50:	2085883a 	add	r2,r4,r2
   17e54:	10800003 	ldbu	r2,0(r2)
   17e58:	10c7883a 	add	r3,r2,r3
   17e5c:	00800804 	movi	r2,32
   17e60:	10c5c83a 	sub	r2,r2,r3
   17e64:	1000a01e 	bne	r2,zero,180e8 <__udivdi3+0x4b0>
   17e68:	8028d43a 	srli	r20,r16,16
   17e6c:	8c23c83a 	sub	r17,r17,r16
   17e70:	857fffcc 	andi	r21,r16,65535
   17e74:	00c00044 	movi	r3,1
   17e78:	8809883a 	mov	r4,r17
   17e7c:	a00b883a 	mov	r5,r20
   17e80:	d8c00015 	stw	r3,0(sp)
   17e84:	00106580 	call	10658 <__umodsi3>
   17e88:	8809883a 	mov	r4,r17
   17e8c:	a00b883a 	mov	r5,r20
   17e90:	102d883a 	mov	r22,r2
   17e94:	00106500 	call	10650 <__udivsi3>
   17e98:	1009883a 	mov	r4,r2
   17e9c:	a80b883a 	mov	r5,r21
   17ea0:	1025883a 	mov	r18,r2
   17ea4:	00106600 	call	10660 <__mulsi3>
   17ea8:	1009883a 	mov	r4,r2
   17eac:	b00c943a 	slli	r6,r22,16
   17eb0:	9804d43a 	srli	r2,r19,16
   17eb4:	d8c00017 	ldw	r3,0(sp)
   17eb8:	308cb03a 	or	r6,r6,r2
   17ebc:	3100052e 	bgeu	r6,r4,17ed4 <__udivdi3+0x29c>
   17ec0:	340d883a 	add	r6,r6,r16
   17ec4:	90bfffc4 	addi	r2,r18,-1
   17ec8:	34000136 	bltu	r6,r16,17ed0 <__udivdi3+0x298>
   17ecc:	3100e836 	bltu	r6,r4,18270 <__udivdi3+0x638>
   17ed0:	1025883a 	mov	r18,r2
   17ed4:	3123c83a 	sub	r17,r6,r4
   17ed8:	8809883a 	mov	r4,r17
   17edc:	a00b883a 	mov	r5,r20
   17ee0:	d8c00015 	stw	r3,0(sp)
   17ee4:	00106580 	call	10658 <__umodsi3>
   17ee8:	102d883a 	mov	r22,r2
   17eec:	8809883a 	mov	r4,r17
   17ef0:	a00b883a 	mov	r5,r20
   17ef4:	b02c943a 	slli	r22,r22,16
   17ef8:	00106500 	call	10650 <__udivsi3>
   17efc:	1009883a 	mov	r4,r2
   17f00:	a80b883a 	mov	r5,r21
   17f04:	9cffffcc 	andi	r19,r19,65535
   17f08:	1023883a 	mov	r17,r2
   17f0c:	b4e6b03a 	or	r19,r22,r19
   17f10:	00106600 	call	10660 <__mulsi3>
   17f14:	d8c00017 	ldw	r3,0(sp)
   17f18:	9880052e 	bgeu	r19,r2,17f30 <__udivdi3+0x2f8>
   17f1c:	9c27883a 	add	r19,r19,r16
   17f20:	893fffc4 	addi	r4,r17,-1
   17f24:	9c00aa36 	bltu	r19,r16,181d0 <__udivdi3+0x598>
   17f28:	9880a92e 	bgeu	r19,r2,181d0 <__udivdi3+0x598>
   17f2c:	8c7fff84 	addi	r17,r17,-2
   17f30:	9004943a 	slli	r2,r18,16
   17f34:	8884b03a 	or	r2,r17,r2
   17f38:	003faa06 	br	17de4 <__udivdi3+0x1ac>
   17f3c:	0007883a 	mov	r3,zero
   17f40:	003fa706 	br	17de0 <__udivdi3+0x1a8>
   17f44:	00803fc4 	movi	r2,255
   17f48:	11c0ae36 	bltu	r2,r7,18204 <__udivdi3+0x5cc>
   17f4c:	0007883a 	mov	r3,zero
   17f50:	000b883a 	mov	r5,zero
   17f54:	003f9606 	br	17db0 <__udivdi3+0x178>
   17f58:	00804034 	movhi	r2,256
   17f5c:	10bfffc4 	addi	r2,r2,-1
   17f60:	1180ae36 	bltu	r2,r6,1821c <__udivdi3+0x5e4>
   17f64:	00800404 	movi	r2,16
   17f68:	1007883a 	mov	r3,r2
   17f6c:	003f4a06 	br	17c98 <__udivdi3+0x60>
   17f70:	00803fc4 	movi	r2,255
   17f74:	1400af36 	bltu	r2,r16,18234 <__udivdi3+0x5fc>
   17f78:	0005883a 	mov	r2,zero
   17f7c:	0007883a 	mov	r3,zero
   17f80:	003fb006 	br	17e44 <__udivdi3+0x20c>
   17f84:	00800044 	movi	r2,1
   17f88:	003f9606 	br	17de4 <__udivdi3+0x1ac>
   17f8c:	3c0e983a 	sll	r7,r7,r16
   17f90:	3086d83a 	srl	r3,r6,r2
   17f94:	88aed83a 	srl	r23,r17,r2
   17f98:	9084d83a 	srl	r2,r18,r2
   17f9c:	38e6b03a 	or	r19,r7,r3
   17fa0:	9828d43a 	srli	r20,r19,16
   17fa4:	8c22983a 	sll	r17,r17,r16
   17fa8:	b809883a 	mov	r4,r23
   17fac:	a00b883a 	mov	r5,r20
   17fb0:	342a983a 	sll	r21,r6,r16
   17fb4:	88a2b03a 	or	r17,r17,r2
   17fb8:	00106580 	call	10658 <__umodsi3>
   17fbc:	b809883a 	mov	r4,r23
   17fc0:	a00b883a 	mov	r5,r20
   17fc4:	1039883a 	mov	fp,r2
   17fc8:	9dbfffcc 	andi	r22,r19,65535
   17fcc:	00106500 	call	10650 <__udivsi3>
   17fd0:	1009883a 	mov	r4,r2
   17fd4:	b00b883a 	mov	r5,r22
   17fd8:	102f883a 	mov	r23,r2
   17fdc:	00106600 	call	10660 <__mulsi3>
   17fe0:	1009883a 	mov	r4,r2
   17fe4:	e00e943a 	slli	r7,fp,16
   17fe8:	8804d43a 	srli	r2,r17,16
   17fec:	388eb03a 	or	r7,r7,r2
   17ff0:	3900042e 	bgeu	r7,r4,18004 <__udivdi3+0x3cc>
   17ff4:	3ccf883a 	add	r7,r7,r19
   17ff8:	b8bfffc4 	addi	r2,r23,-1
   17ffc:	3cc0942e 	bgeu	r7,r19,18250 <__udivdi3+0x618>
   18000:	102f883a 	mov	r23,r2
   18004:	3939c83a 	sub	fp,r7,r4
   18008:	a00b883a 	mov	r5,r20
   1800c:	e009883a 	mov	r4,fp
   18010:	00106580 	call	10658 <__umodsi3>
   18014:	a00b883a 	mov	r5,r20
   18018:	e009883a 	mov	r4,fp
   1801c:	d8800015 	stw	r2,0(sp)
   18020:	00106500 	call	10650 <__udivsi3>
   18024:	1009883a 	mov	r4,r2
   18028:	b00b883a 	mov	r5,r22
   1802c:	1029883a 	mov	r20,r2
   18030:	00106600 	call	10660 <__mulsi3>
   18034:	d8c00017 	ldw	r3,0(sp)
   18038:	8c7fffcc 	andi	r17,r17,65535
   1803c:	1806943a 	slli	r3,r3,16
   18040:	1c46b03a 	or	r3,r3,r17
   18044:	1880042e 	bgeu	r3,r2,18058 <__udivdi3+0x420>
   18048:	1cc7883a 	add	r3,r3,r19
   1804c:	a13fffc4 	addi	r4,r20,-1
   18050:	1cc07b2e 	bgeu	r3,r19,18240 <__udivdi3+0x608>
   18054:	2029883a 	mov	r20,r4
   18058:	b82e943a 	slli	r23,r23,16
   1805c:	a822d43a 	srli	r17,r21,16
   18060:	ad7fffcc 	andi	r21,r21,65535
   18064:	a5e8b03a 	or	r20,r20,r23
   18068:	a5bfffcc 	andi	r22,r20,65535
   1806c:	b009883a 	mov	r4,r22
   18070:	a80b883a 	mov	r5,r21
   18074:	18afc83a 	sub	r23,r3,r2
   18078:	a026d43a 	srli	r19,r20,16
   1807c:	00106600 	call	10660 <__mulsi3>
   18080:	b009883a 	mov	r4,r22
   18084:	880b883a 	mov	r5,r17
   18088:	1039883a 	mov	fp,r2
   1808c:	00106600 	call	10660 <__mulsi3>
   18090:	a80b883a 	mov	r5,r21
   18094:	9809883a 	mov	r4,r19
   18098:	102d883a 	mov	r22,r2
   1809c:	00106600 	call	10660 <__mulsi3>
   180a0:	9809883a 	mov	r4,r19
   180a4:	880b883a 	mov	r5,r17
   180a8:	102b883a 	mov	r21,r2
   180ac:	00106600 	call	10660 <__mulsi3>
   180b0:	100b883a 	mov	r5,r2
   180b4:	e004d43a 	srli	r2,fp,16
   180b8:	ad89883a 	add	r4,r21,r22
   180bc:	2089883a 	add	r4,r4,r2
   180c0:	2540022e 	bgeu	r4,r21,180cc <__udivdi3+0x494>
   180c4:	00800074 	movhi	r2,1
   180c8:	288b883a 	add	r5,r5,r2
   180cc:	2004d43a 	srli	r2,r4,16
   180d0:	288b883a 	add	r5,r5,r2
   180d4:	b9404536 	bltu	r23,r5,181ec <__udivdi3+0x5b4>
   180d8:	b9403f26 	beq	r23,r5,181d8 <__udivdi3+0x5a0>
   180dc:	a005883a 	mov	r2,r20
   180e0:	0007883a 	mov	r3,zero
   180e4:	003f3f06 	br	17de4 <__udivdi3+0x1ac>
   180e8:	80a0983a 	sll	r16,r16,r2
   180ec:	88eed83a 	srl	r23,r17,r3
   180f0:	90c6d83a 	srl	r3,r18,r3
   180f4:	8028d43a 	srli	r20,r16,16
   180f8:	88a2983a 	sll	r17,r17,r2
   180fc:	b809883a 	mov	r4,r23
   18100:	a00b883a 	mov	r5,r20
   18104:	88ecb03a 	or	r22,r17,r3
   18108:	90a6983a 	sll	r19,r18,r2
   1810c:	00106580 	call	10658 <__umodsi3>
   18110:	b809883a 	mov	r4,r23
   18114:	a00b883a 	mov	r5,r20
   18118:	1023883a 	mov	r17,r2
   1811c:	857fffcc 	andi	r21,r16,65535
   18120:	00106500 	call	10650 <__udivsi3>
   18124:	1009883a 	mov	r4,r2
   18128:	a80b883a 	mov	r5,r21
   1812c:	102f883a 	mov	r23,r2
   18130:	00106600 	call	10660 <__mulsi3>
   18134:	1009883a 	mov	r4,r2
   18138:	880a943a 	slli	r5,r17,16
   1813c:	b004d43a 	srli	r2,r22,16
   18140:	288ab03a 	or	r5,r5,r2
   18144:	2900062e 	bgeu	r5,r4,18160 <__udivdi3+0x528>
   18148:	2c0b883a 	add	r5,r5,r16
   1814c:	b8bfffc4 	addi	r2,r23,-1
   18150:	2c004536 	bltu	r5,r16,18268 <__udivdi3+0x630>
   18154:	2900442e 	bgeu	r5,r4,18268 <__udivdi3+0x630>
   18158:	bdffff84 	addi	r23,r23,-2
   1815c:	2c0b883a 	add	r5,r5,r16
   18160:	2925c83a 	sub	r18,r5,r4
   18164:	9009883a 	mov	r4,r18
   18168:	a00b883a 	mov	r5,r20
   1816c:	00106580 	call	10658 <__umodsi3>
   18170:	1023883a 	mov	r17,r2
   18174:	9009883a 	mov	r4,r18
   18178:	a00b883a 	mov	r5,r20
   1817c:	8822943a 	slli	r17,r17,16
   18180:	00106500 	call	10650 <__udivsi3>
   18184:	1009883a 	mov	r4,r2
   18188:	a80b883a 	mov	r5,r21
   1818c:	b5bfffcc 	andi	r22,r22,65535
   18190:	1025883a 	mov	r18,r2
   18194:	8da2b03a 	or	r17,r17,r22
   18198:	00106600 	call	10660 <__mulsi3>
   1819c:	8880062e 	bgeu	r17,r2,181b8 <__udivdi3+0x580>
   181a0:	8c23883a 	add	r17,r17,r16
   181a4:	90ffffc4 	addi	r3,r18,-1
   181a8:	8c002d36 	bltu	r17,r16,18260 <__udivdi3+0x628>
   181ac:	88802c2e 	bgeu	r17,r2,18260 <__udivdi3+0x628>
   181b0:	94bfff84 	addi	r18,r18,-2
   181b4:	8c23883a 	add	r17,r17,r16
   181b8:	b806943a 	slli	r3,r23,16
   181bc:	88a3c83a 	sub	r17,r17,r2
   181c0:	90c6b03a 	or	r3,r18,r3
   181c4:	003f2c06 	br	17e78 <__udivdi3+0x240>
   181c8:	1823883a 	mov	r17,r3
   181cc:	003eec06 	br	17d80 <__udivdi3+0x148>
   181d0:	2023883a 	mov	r17,r4
   181d4:	003f5606 	br	17f30 <__udivdi3+0x2f8>
   181d8:	2008943a 	slli	r4,r4,16
   181dc:	9420983a 	sll	r16,r18,r16
   181e0:	e73fffcc 	andi	fp,fp,65535
   181e4:	2709883a 	add	r4,r4,fp
   181e8:	813fbc2e 	bgeu	r16,r4,180dc <__udivdi3+0x4a4>
   181ec:	a0bfffc4 	addi	r2,r20,-1
   181f0:	0007883a 	mov	r3,zero
   181f4:	003efb06 	br	17de4 <__udivdi3+0x1ac>
   181f8:	00c00604 	movi	r3,24
   181fc:	180b883a 	mov	r5,r3
   18200:	003eeb06 	br	17db0 <__udivdi3+0x178>
   18204:	00c00204 	movi	r3,8
   18208:	180b883a 	mov	r5,r3
   1820c:	003ee806 	br	17db0 <__udivdi3+0x178>
   18210:	00800604 	movi	r2,24
   18214:	1007883a 	mov	r3,r2
   18218:	003f0a06 	br	17e44 <__udivdi3+0x20c>
   1821c:	00800604 	movi	r2,24
   18220:	1007883a 	mov	r3,r2
   18224:	003e9c06 	br	17c98 <__udivdi3+0x60>
   18228:	00800204 	movi	r2,8
   1822c:	1007883a 	mov	r3,r2
   18230:	003e9906 	br	17c98 <__udivdi3+0x60>
   18234:	00800204 	movi	r2,8
   18238:	1007883a 	mov	r3,r2
   1823c:	003f0106 	br	17e44 <__udivdi3+0x20c>
   18240:	18bf842e 	bgeu	r3,r2,18054 <__udivdi3+0x41c>
   18244:	a53fff84 	addi	r20,r20,-2
   18248:	1cc7883a 	add	r3,r3,r19
   1824c:	003f8206 	br	18058 <__udivdi3+0x420>
   18250:	393f6b2e 	bgeu	r7,r4,18000 <__udivdi3+0x3c8>
   18254:	bdffff84 	addi	r23,r23,-2
   18258:	3ccf883a 	add	r7,r7,r19
   1825c:	003f6906 	br	18004 <__udivdi3+0x3cc>
   18260:	1825883a 	mov	r18,r3
   18264:	003fd406 	br	181b8 <__udivdi3+0x580>
   18268:	102f883a 	mov	r23,r2
   1826c:	003fbc06 	br	18160 <__udivdi3+0x528>
   18270:	94bfff84 	addi	r18,r18,-2
   18274:	340d883a 	add	r6,r6,r16
   18278:	003f1606 	br	17ed4 <__udivdi3+0x29c>
   1827c:	94bfff84 	addi	r18,r18,-2
   18280:	1c07883a 	add	r3,r3,r16
   18284:	003ea906 	br	17d2c <__udivdi3+0xf4>

00018288 <__umoddi3>:
   18288:	defff304 	addi	sp,sp,-52
   1828c:	dd000715 	stw	r20,28(sp)
   18290:	dcc00615 	stw	r19,24(sp)
   18294:	dc800515 	stw	r18,20(sp)
   18298:	dc400415 	stw	r17,16(sp)
   1829c:	dc000315 	stw	r16,12(sp)
   182a0:	dfc00c15 	stw	ra,48(sp)
   182a4:	df000b15 	stw	fp,44(sp)
   182a8:	ddc00a15 	stw	r23,40(sp)
   182ac:	dd800915 	stw	r22,36(sp)
   182b0:	dd400815 	stw	r21,32(sp)
   182b4:	2025883a 	mov	r18,r4
   182b8:	2823883a 	mov	r17,r5
   182bc:	3021883a 	mov	r16,r6
   182c0:	2027883a 	mov	r19,r4
   182c4:	2829883a 	mov	r20,r5
   182c8:	38003a1e 	bne	r7,zero,183b4 <__umoddi3+0x12c>
   182cc:	2980522e 	bgeu	r5,r6,18418 <__umoddi3+0x190>
   182d0:	00bfffd4 	movui	r2,65535
   182d4:	1180a436 	bltu	r2,r6,18568 <__umoddi3+0x2e0>
   182d8:	00803fc4 	movi	r2,255
   182dc:	11816036 	bltu	r2,r6,18860 <__umoddi3+0x5d8>
   182e0:	0005883a 	mov	r2,zero
   182e4:	0009883a 	mov	r4,zero
   182e8:	3084d83a 	srl	r2,r6,r2
   182ec:	00c000f4 	movhi	r3,3
   182f0:	18e0c904 	addi	r3,r3,-31964
   182f4:	05400804 	movi	r21,32
   182f8:	1885883a 	add	r2,r3,r2
   182fc:	10800003 	ldbu	r2,0(r2)
   18300:	1109883a 	add	r4,r2,r4
   18304:	a92bc83a 	sub	r21,r21,r4
   18308:	a8010e26 	beq	r21,zero,18744 <__umoddi3+0x4bc>
   1830c:	8d62983a 	sll	r17,r17,r21
   18310:	9108d83a 	srl	r4,r18,r4
   18314:	3560983a 	sll	r16,r6,r21
   18318:	9566983a 	sll	r19,r18,r21
   1831c:	8928b03a 	or	r20,r17,r4
   18320:	8022d43a 	srli	r17,r16,16
   18324:	a009883a 	mov	r4,r20
   18328:	84bfffcc 	andi	r18,r16,65535
   1832c:	880b883a 	mov	r5,r17
   18330:	00106580 	call	10658 <__umodsi3>
   18334:	a009883a 	mov	r4,r20
   18338:	880b883a 	mov	r5,r17
   1833c:	102d883a 	mov	r22,r2
   18340:	00106500 	call	10650 <__udivsi3>
   18344:	1009883a 	mov	r4,r2
   18348:	900b883a 	mov	r5,r18
   1834c:	00106600 	call	10660 <__mulsi3>
   18350:	1009883a 	mov	r4,r2
   18354:	b006943a 	slli	r3,r22,16
   18358:	9804d43a 	srli	r2,r19,16
   1835c:	1886b03a 	or	r3,r3,r2
   18360:	1900042e 	bgeu	r3,r4,18374 <__umoddi3+0xec>
   18364:	1c07883a 	add	r3,r3,r16
   18368:	1c000236 	bltu	r3,r16,18374 <__umoddi3+0xec>
   1836c:	1900012e 	bgeu	r3,r4,18374 <__umoddi3+0xec>
   18370:	1c07883a 	add	r3,r3,r16
   18374:	1929c83a 	sub	r20,r3,r4
   18378:	a009883a 	mov	r4,r20
   1837c:	880b883a 	mov	r5,r17
   18380:	00106580 	call	10658 <__umodsi3>
   18384:	102d883a 	mov	r22,r2
   18388:	a009883a 	mov	r4,r20
   1838c:	880b883a 	mov	r5,r17
   18390:	b02c943a 	slli	r22,r22,16
   18394:	00106500 	call	10650 <__udivsi3>
   18398:	1009883a 	mov	r4,r2
   1839c:	900b883a 	mov	r5,r18
   183a0:	9cffffcc 	andi	r19,r19,65535
   183a4:	00106600 	call	10660 <__mulsi3>
   183a8:	b4e6b03a 	or	r19,r22,r19
   183ac:	9880572e 	bgeu	r19,r2,1850c <__umoddi3+0x284>
   183b0:	00005206 	br	184fc <__umoddi3+0x274>
   183b4:	29c05936 	bltu	r5,r7,1851c <__umoddi3+0x294>
   183b8:	00bfffd4 	movui	r2,65535
   183bc:	11c0652e 	bgeu	r2,r7,18554 <__umoddi3+0x2cc>
   183c0:	00804034 	movhi	r2,256
   183c4:	10bfffc4 	addi	r2,r2,-1
   183c8:	11c11936 	bltu	r2,r7,18830 <__umoddi3+0x5a8>
   183cc:	00c00404 	movi	r3,16
   183d0:	1827883a 	mov	r19,r3
   183d4:	38c6d83a 	srl	r3,r7,r3
   183d8:	010000f4 	movhi	r4,3
   183dc:	2120c904 	addi	r4,r4,-31964
   183e0:	04000804 	movi	r16,32
   183e4:	20c7883a 	add	r3,r4,r3
   183e8:	18800003 	ldbu	r2,0(r3)
   183ec:	14e7883a 	add	r19,r2,r19
   183f0:	84e1c83a 	sub	r16,r16,r19
   183f4:	8000671e 	bne	r16,zero,18594 <__umoddi3+0x30c>
   183f8:	3c400136 	bltu	r7,r17,18400 <__umoddi3+0x178>
   183fc:	91812536 	bltu	r18,r6,18894 <__umoddi3+0x60c>
   18400:	9185c83a 	sub	r2,r18,r6
   18404:	89e3c83a 	sub	r17,r17,r7
   18408:	90a5803a 	cmpltu	r18,r18,r2
   1840c:	8ca9c83a 	sub	r20,r17,r18
   18410:	a007883a 	mov	r3,r20
   18414:	00004306 	br	18524 <__umoddi3+0x29c>
   18418:	3000041e 	bne	r6,zero,1842c <__umoddi3+0x1a4>
   1841c:	01000044 	movi	r4,1
   18420:	000b883a 	mov	r5,zero
   18424:	00106500 	call	10650 <__udivsi3>
   18428:	1021883a 	mov	r16,r2
   1842c:	00bfffd4 	movui	r2,65535
   18430:	1400532e 	bgeu	r2,r16,18580 <__umoddi3+0x2f8>
   18434:	00804034 	movhi	r2,256
   18438:	10bfffc4 	addi	r2,r2,-1
   1843c:	14010536 	bltu	r2,r16,18854 <__umoddi3+0x5cc>
   18440:	00800404 	movi	r2,16
   18444:	1007883a 	mov	r3,r2
   18448:	8084d83a 	srl	r2,r16,r2
   1844c:	010000f4 	movhi	r4,3
   18450:	2120c904 	addi	r4,r4,-31964
   18454:	05400804 	movi	r21,32
   18458:	2085883a 	add	r2,r4,r2
   1845c:	10800003 	ldbu	r2,0(r2)
   18460:	10c7883a 	add	r3,r2,r3
   18464:	a8ebc83a 	sub	r21,r21,r3
   18468:	a800b81e 	bne	r21,zero,1874c <__umoddi3+0x4c4>
   1846c:	8028d43a 	srli	r20,r16,16
   18470:	8c23c83a 	sub	r17,r17,r16
   18474:	85bfffcc 	andi	r22,r16,65535
   18478:	8809883a 	mov	r4,r17
   1847c:	a00b883a 	mov	r5,r20
   18480:	00106580 	call	10658 <__umodsi3>
   18484:	8809883a 	mov	r4,r17
   18488:	a00b883a 	mov	r5,r20
   1848c:	1025883a 	mov	r18,r2
   18490:	00106500 	call	10650 <__udivsi3>
   18494:	1009883a 	mov	r4,r2
   18498:	b00b883a 	mov	r5,r22
   1849c:	00106600 	call	10660 <__mulsi3>
   184a0:	1009883a 	mov	r4,r2
   184a4:	9006943a 	slli	r3,r18,16
   184a8:	9804d43a 	srli	r2,r19,16
   184ac:	1886b03a 	or	r3,r3,r2
   184b0:	1900032e 	bgeu	r3,r4,184c0 <__umoddi3+0x238>
   184b4:	1c07883a 	add	r3,r3,r16
   184b8:	1c000136 	bltu	r3,r16,184c0 <__umoddi3+0x238>
   184bc:	1900f336 	bltu	r3,r4,1888c <__umoddi3+0x604>
   184c0:	1923c83a 	sub	r17,r3,r4
   184c4:	8809883a 	mov	r4,r17
   184c8:	a00b883a 	mov	r5,r20
   184cc:	00106580 	call	10658 <__umodsi3>
   184d0:	102f883a 	mov	r23,r2
   184d4:	8809883a 	mov	r4,r17
   184d8:	a00b883a 	mov	r5,r20
   184dc:	b82e943a 	slli	r23,r23,16
   184e0:	00106500 	call	10650 <__udivsi3>
   184e4:	1009883a 	mov	r4,r2
   184e8:	b00b883a 	mov	r5,r22
   184ec:	9cffffcc 	andi	r19,r19,65535
   184f0:	00106600 	call	10660 <__mulsi3>
   184f4:	bce6b03a 	or	r19,r23,r19
   184f8:	9880042e 	bgeu	r19,r2,1850c <__umoddi3+0x284>
   184fc:	9c27883a 	add	r19,r19,r16
   18500:	9c000236 	bltu	r19,r16,1850c <__umoddi3+0x284>
   18504:	9880012e 	bgeu	r19,r2,1850c <__umoddi3+0x284>
   18508:	9c27883a 	add	r19,r19,r16
   1850c:	9885c83a 	sub	r2,r19,r2
   18510:	1544d83a 	srl	r2,r2,r21
   18514:	0007883a 	mov	r3,zero
   18518:	00000206 	br	18524 <__umoddi3+0x29c>
   1851c:	2005883a 	mov	r2,r4
   18520:	2807883a 	mov	r3,r5
   18524:	dfc00c17 	ldw	ra,48(sp)
   18528:	df000b17 	ldw	fp,44(sp)
   1852c:	ddc00a17 	ldw	r23,40(sp)
   18530:	dd800917 	ldw	r22,36(sp)
   18534:	dd400817 	ldw	r21,32(sp)
   18538:	dd000717 	ldw	r20,28(sp)
   1853c:	dcc00617 	ldw	r19,24(sp)
   18540:	dc800517 	ldw	r18,20(sp)
   18544:	dc400417 	ldw	r17,16(sp)
   18548:	dc000317 	ldw	r16,12(sp)
   1854c:	dec00d04 	addi	sp,sp,52
   18550:	f800283a 	ret
   18554:	00803fc4 	movi	r2,255
   18558:	11c0b236 	bltu	r2,r7,18824 <__umoddi3+0x59c>
   1855c:	0007883a 	mov	r3,zero
   18560:	0027883a 	mov	r19,zero
   18564:	003f9b06 	br	183d4 <__umoddi3+0x14c>
   18568:	00804034 	movhi	r2,256
   1856c:	10bfffc4 	addi	r2,r2,-1
   18570:	1180b236 	bltu	r2,r6,1883c <__umoddi3+0x5b4>
   18574:	00800404 	movi	r2,16
   18578:	1009883a 	mov	r4,r2
   1857c:	003f5a06 	br	182e8 <__umoddi3+0x60>
   18580:	00803fc4 	movi	r2,255
   18584:	1400b036 	bltu	r2,r16,18848 <__umoddi3+0x5c0>
   18588:	0005883a 	mov	r2,zero
   1858c:	0007883a 	mov	r3,zero
   18590:	003fad06 	br	18448 <__umoddi3+0x1c0>
   18594:	34c4d83a 	srl	r2,r6,r19
   18598:	3c0e983a 	sll	r7,r7,r16
   1859c:	8cf8d83a 	srl	fp,r17,r19
   185a0:	8c22983a 	sll	r17,r17,r16
   185a4:	38a8b03a 	or	r20,r7,r2
   185a8:	a02ad43a 	srli	r21,r20,16
   185ac:	94c4d83a 	srl	r2,r18,r19
   185b0:	e009883a 	mov	r4,fp
   185b4:	a80b883a 	mov	r5,r21
   185b8:	342c983a 	sll	r22,r6,r16
   185bc:	88a2b03a 	or	r17,r17,r2
   185c0:	00106580 	call	10658 <__umodsi3>
   185c4:	e009883a 	mov	r4,fp
   185c8:	a80b883a 	mov	r5,r21
   185cc:	a5ffffcc 	andi	r23,r20,65535
   185d0:	d8800215 	stw	r2,8(sp)
   185d4:	00106500 	call	10650 <__udivsi3>
   185d8:	1009883a 	mov	r4,r2
   185dc:	b80b883a 	mov	r5,r23
   185e0:	1039883a 	mov	fp,r2
   185e4:	00106600 	call	10660 <__mulsi3>
   185e8:	d8c00217 	ldw	r3,8(sp)
   185ec:	1009883a 	mov	r4,r2
   185f0:	8804d43a 	srli	r2,r17,16
   185f4:	1806943a 	slli	r3,r3,16
   185f8:	9424983a 	sll	r18,r18,r16
   185fc:	1886b03a 	or	r3,r3,r2
   18600:	1900042e 	bgeu	r3,r4,18614 <__umoddi3+0x38c>
   18604:	1d07883a 	add	r3,r3,r20
   18608:	e0bfffc4 	addi	r2,fp,-1
   1860c:	1d009b2e 	bgeu	r3,r20,1887c <__umoddi3+0x5f4>
   18610:	1039883a 	mov	fp,r2
   18614:	1907c83a 	sub	r3,r3,r4
   18618:	1809883a 	mov	r4,r3
   1861c:	a80b883a 	mov	r5,r21
   18620:	d8c00215 	stw	r3,8(sp)
   18624:	00106580 	call	10658 <__umodsi3>
   18628:	d8c00217 	ldw	r3,8(sp)
   1862c:	a80b883a 	mov	r5,r21
   18630:	d8800015 	stw	r2,0(sp)
   18634:	1809883a 	mov	r4,r3
   18638:	00106500 	call	10650 <__udivsi3>
   1863c:	1009883a 	mov	r4,r2
   18640:	b80b883a 	mov	r5,r23
   18644:	102b883a 	mov	r21,r2
   18648:	00106600 	call	10660 <__mulsi3>
   1864c:	d9c00017 	ldw	r7,0(sp)
   18650:	8c7fffcc 	andi	r17,r17,65535
   18654:	380e943a 	slli	r7,r7,16
   18658:	3c4eb03a 	or	r7,r7,r17
   1865c:	3880042e 	bgeu	r7,r2,18670 <__umoddi3+0x3e8>
   18660:	3d0f883a 	add	r7,r7,r20
   18664:	a8ffffc4 	addi	r3,r21,-1
   18668:	3d00802e 	bgeu	r7,r20,1886c <__umoddi3+0x5e4>
   1866c:	182b883a 	mov	r21,r3
   18670:	e038943a 	slli	fp,fp,16
   18674:	b010d43a 	srli	r8,r22,16
   18678:	b1bfffcc 	andi	r6,r22,65535
   1867c:	af2ab03a 	or	r21,r21,fp
   18680:	a82ed43a 	srli	r23,r21,16
   18684:	ad7fffcc 	andi	r21,r21,65535
   18688:	300b883a 	mov	r5,r6
   1868c:	a809883a 	mov	r4,r21
   18690:	38a3c83a 	sub	r17,r7,r2
   18694:	d9800115 	stw	r6,4(sp)
   18698:	da000015 	stw	r8,0(sp)
   1869c:	00106600 	call	10660 <__mulsi3>
   186a0:	da000017 	ldw	r8,0(sp)
   186a4:	a809883a 	mov	r4,r21
   186a8:	1039883a 	mov	fp,r2
   186ac:	400b883a 	mov	r5,r8
   186b0:	da000215 	stw	r8,8(sp)
   186b4:	00106600 	call	10660 <__mulsi3>
   186b8:	d9800117 	ldw	r6,4(sp)
   186bc:	b809883a 	mov	r4,r23
   186c0:	d8800015 	stw	r2,0(sp)
   186c4:	300b883a 	mov	r5,r6
   186c8:	00106600 	call	10660 <__mulsi3>
   186cc:	d8c00217 	ldw	r3,8(sp)
   186d0:	b809883a 	mov	r4,r23
   186d4:	102b883a 	mov	r21,r2
   186d8:	180b883a 	mov	r5,r3
   186dc:	00106600 	call	10660 <__mulsi3>
   186e0:	d9c00017 	ldw	r7,0(sp)
   186e4:	1007883a 	mov	r3,r2
   186e8:	e004d43a 	srli	r2,fp,16
   186ec:	a9c9883a 	add	r4,r21,r7
   186f0:	2089883a 	add	r4,r4,r2
   186f4:	2540022e 	bgeu	r4,r21,18700 <__umoddi3+0x478>
   186f8:	00800074 	movhi	r2,1
   186fc:	1887883a 	add	r3,r3,r2
   18700:	2004d43a 	srli	r2,r4,16
   18704:	2008943a 	slli	r4,r4,16
   18708:	e73fffcc 	andi	fp,fp,65535
   1870c:	1887883a 	add	r3,r3,r2
   18710:	2709883a 	add	r4,r4,fp
   18714:	88c03d36 	bltu	r17,r3,1880c <__umoddi3+0x584>
   18718:	88c06126 	beq	r17,r3,188a0 <__umoddi3+0x618>
   1871c:	88c7c83a 	sub	r3,r17,r3
   18720:	202d883a 	mov	r22,r4
   18724:	95adc83a 	sub	r22,r18,r22
   18728:	95a5803a 	cmpltu	r18,r18,r22
   1872c:	1c87c83a 	sub	r3,r3,r18
   18730:	1cc4983a 	sll	r2,r3,r19
   18734:	b42cd83a 	srl	r22,r22,r16
   18738:	1c06d83a 	srl	r3,r3,r16
   1873c:	1584b03a 	or	r2,r2,r22
   18740:	003f7806 	br	18524 <__umoddi3+0x29c>
   18744:	002b883a 	mov	r21,zero
   18748:	003ef506 	br	18320 <__umoddi3+0x98>
   1874c:	8560983a 	sll	r16,r16,r21
   18750:	88e6d83a 	srl	r19,r17,r3
   18754:	90c6d83a 	srl	r3,r18,r3
   18758:	8028d43a 	srli	r20,r16,16
   1875c:	8d62983a 	sll	r17,r17,r21
   18760:	9809883a 	mov	r4,r19
   18764:	a00b883a 	mov	r5,r20
   18768:	88eeb03a 	or	r23,r17,r3
   1876c:	00106580 	call	10658 <__umodsi3>
   18770:	9809883a 	mov	r4,r19
   18774:	a00b883a 	mov	r5,r20
   18778:	1023883a 	mov	r17,r2
   1877c:	85bfffcc 	andi	r22,r16,65535
   18780:	00106500 	call	10650 <__udivsi3>
   18784:	1009883a 	mov	r4,r2
   18788:	b00b883a 	mov	r5,r22
   1878c:	00106600 	call	10660 <__mulsi3>
   18790:	1007883a 	mov	r3,r2
   18794:	8808943a 	slli	r4,r17,16
   18798:	b804d43a 	srli	r2,r23,16
   1879c:	9566983a 	sll	r19,r18,r21
   187a0:	2088b03a 	or	r4,r4,r2
   187a4:	20c0042e 	bgeu	r4,r3,187b8 <__umoddi3+0x530>
   187a8:	2409883a 	add	r4,r4,r16
   187ac:	24000236 	bltu	r4,r16,187b8 <__umoddi3+0x530>
   187b0:	20c0012e 	bgeu	r4,r3,187b8 <__umoddi3+0x530>
   187b4:	2409883a 	add	r4,r4,r16
   187b8:	20e5c83a 	sub	r18,r4,r3
   187bc:	9009883a 	mov	r4,r18
   187c0:	a00b883a 	mov	r5,r20
   187c4:	00106580 	call	10658 <__umodsi3>
   187c8:	1023883a 	mov	r17,r2
   187cc:	9009883a 	mov	r4,r18
   187d0:	a00b883a 	mov	r5,r20
   187d4:	8822943a 	slli	r17,r17,16
   187d8:	00106500 	call	10650 <__udivsi3>
   187dc:	1009883a 	mov	r4,r2
   187e0:	b00b883a 	mov	r5,r22
   187e4:	bdffffcc 	andi	r23,r23,65535
   187e8:	00106600 	call	10660 <__mulsi3>
   187ec:	8de2b03a 	or	r17,r17,r23
   187f0:	8880042e 	bgeu	r17,r2,18804 <__umoddi3+0x57c>
   187f4:	8c23883a 	add	r17,r17,r16
   187f8:	8c000236 	bltu	r17,r16,18804 <__umoddi3+0x57c>
   187fc:	8880012e 	bgeu	r17,r2,18804 <__umoddi3+0x57c>
   18800:	8c23883a 	add	r17,r17,r16
   18804:	88a3c83a 	sub	r17,r17,r2
   18808:	003f1b06 	br	18478 <__umoddi3+0x1f0>
   1880c:	25adc83a 	sub	r22,r4,r22
   18810:	1d07c83a 	sub	r3,r3,r20
   18814:	2589803a 	cmpltu	r4,r4,r22
   18818:	1907c83a 	sub	r3,r3,r4
   1881c:	88c7c83a 	sub	r3,r17,r3
   18820:	003fc006 	br	18724 <__umoddi3+0x49c>
   18824:	00c00204 	movi	r3,8
   18828:	1827883a 	mov	r19,r3
   1882c:	003ee906 	br	183d4 <__umoddi3+0x14c>
   18830:	00c00604 	movi	r3,24
   18834:	1827883a 	mov	r19,r3
   18838:	003ee606 	br	183d4 <__umoddi3+0x14c>
   1883c:	00800604 	movi	r2,24
   18840:	1009883a 	mov	r4,r2
   18844:	003ea806 	br	182e8 <__umoddi3+0x60>
   18848:	00800204 	movi	r2,8
   1884c:	1007883a 	mov	r3,r2
   18850:	003efd06 	br	18448 <__umoddi3+0x1c0>
   18854:	00800604 	movi	r2,24
   18858:	1007883a 	mov	r3,r2
   1885c:	003efa06 	br	18448 <__umoddi3+0x1c0>
   18860:	00800204 	movi	r2,8
   18864:	1009883a 	mov	r4,r2
   18868:	003e9f06 	br	182e8 <__umoddi3+0x60>
   1886c:	38bf7f2e 	bgeu	r7,r2,1866c <__umoddi3+0x3e4>
   18870:	ad7fff84 	addi	r21,r21,-2
   18874:	3d0f883a 	add	r7,r7,r20
   18878:	003f7d06 	br	18670 <__umoddi3+0x3e8>
   1887c:	193f642e 	bgeu	r3,r4,18610 <__umoddi3+0x388>
   18880:	e73fff84 	addi	fp,fp,-2
   18884:	1d07883a 	add	r3,r3,r20
   18888:	003f6206 	br	18614 <__umoddi3+0x38c>
   1888c:	1c07883a 	add	r3,r3,r16
   18890:	003f0b06 	br	184c0 <__umoddi3+0x238>
   18894:	9005883a 	mov	r2,r18
   18898:	a007883a 	mov	r3,r20
   1889c:	003f2106 	br	18524 <__umoddi3+0x29c>
   188a0:	913fda36 	bltu	r18,r4,1880c <__umoddi3+0x584>
   188a4:	202d883a 	mov	r22,r4
   188a8:	0007883a 	mov	r3,zero
   188ac:	003f9d06 	br	18724 <__umoddi3+0x49c>

000188b0 <_fpadd_parts>:
   188b0:	2005883a 	mov	r2,r4
   188b4:	21000017 	ldw	r4,0(r4)
   188b8:	01c00044 	movi	r7,1
   188bc:	3900622e 	bgeu	r7,r4,18a48 <_fpadd_parts+0x198>
   188c0:	28c00017 	ldw	r3,0(r5)
   188c4:	38c05f2e 	bgeu	r7,r3,18a44 <_fpadd_parts+0x194>
   188c8:	01c00104 	movi	r7,4
   188cc:	21c0c626 	beq	r4,r7,18be8 <_fpadd_parts+0x338>
   188d0:	19c05c26 	beq	r3,r7,18a44 <_fpadd_parts+0x194>
   188d4:	01c00084 	movi	r7,2
   188d8:	19c06b26 	beq	r3,r7,18a88 <_fpadd_parts+0x1d8>
   188dc:	21c05926 	beq	r4,r7,18a44 <_fpadd_parts+0x194>
   188e0:	11c00217 	ldw	r7,8(r2)
   188e4:	2ac00217 	ldw	r11,8(r5)
   188e8:	13000317 	ldw	r12,12(r2)
   188ec:	13400417 	ldw	r13,16(r2)
   188f0:	3ac9c83a 	sub	r4,r7,r11
   188f4:	2a000317 	ldw	r8,12(r5)
   188f8:	2a400417 	ldw	r9,16(r5)
   188fc:	2015883a 	mov	r10,r4
   18900:	20007516 	blt	r4,zero,18ad8 <_fpadd_parts+0x228>
   18904:	00c00fc4 	movi	r3,63
   18908:	1a805016 	blt	r3,r10,18a4c <_fpadd_parts+0x19c>
   1890c:	0100870e 	bge	zero,r4,18b2c <_fpadd_parts+0x27c>
   18910:	50fff804 	addi	r3,r10,-32
   18914:	18009916 	blt	r3,zero,18b7c <_fpadd_parts+0x2cc>
   18918:	48d6d83a 	srl	r11,r9,r3
   1891c:	001d883a 	mov	r14,zero
   18920:	18009e16 	blt	r3,zero,18b9c <_fpadd_parts+0x2ec>
   18924:	01000044 	movi	r4,1
   18928:	20c6983a 	sll	r3,r4,r3
   1892c:	0015883a 	mov	r10,zero
   18930:	513fffc4 	addi	r4,r10,-1
   18934:	2295403a 	cmpgeu	r10,r4,r10
   18938:	1a87c83a 	sub	r3,r3,r10
   1893c:	1a52703a 	and	r9,r3,r9
   18940:	2210703a 	and	r8,r4,r8
   18944:	4250b03a 	or	r8,r8,r9
   18948:	4010c03a 	cmpne	r8,r8,zero
   1894c:	42d0b03a 	or	r8,r8,r11
   18950:	7013883a 	mov	r9,r14
   18954:	11000117 	ldw	r4,4(r2)
   18958:	28800117 	ldw	r2,4(r5)
   1895c:	20804126 	beq	r4,r2,18a64 <_fpadd_parts+0x1b4>
   18960:	20006326 	beq	r4,zero,18af0 <_fpadd_parts+0x240>
   18964:	4305c83a 	sub	r2,r8,r12
   18968:	4091803a 	cmpltu	r8,r8,r2
   1896c:	4b47c83a 	sub	r3,r9,r13
   18970:	1a07c83a 	sub	r3,r3,r8
   18974:	18006316 	blt	r3,zero,18b04 <_fpadd_parts+0x254>
   18978:	30000115 	stw	zero,4(r6)
   1897c:	31c00215 	stw	r7,8(r6)
   18980:	30800315 	stw	r2,12(r6)
   18984:	30c00415 	stw	r3,16(r6)
   18988:	11ffffc4 	addi	r7,r2,-1
   1898c:	388b403a 	cmpgeu	r5,r7,r2
   18990:	194bc83a 	sub	r5,r3,r5
   18994:	01040034 	movhi	r4,4096
   18998:	213fffc4 	addi	r4,r4,-1
   1899c:	21401736 	bltu	r4,r5,189fc <_fpadd_parts+0x14c>
   189a0:	29008226 	beq	r5,r4,18bac <_fpadd_parts+0x2fc>
   189a4:	31400217 	ldw	r5,8(r6)
   189a8:	02840034 	movhi	r10,4096
   189ac:	52bfffc4 	addi	r10,r10,-1
   189b0:	033fff84 	movi	r12,-2
   189b4:	297fffc4 	addi	r5,r5,-1
   189b8:	00000106 	br	189c0 <_fpadd_parts+0x110>
   189bc:	3a804a26 	beq	r7,r10,18ae8 <_fpadd_parts+0x238>
   189c0:	1089883a 	add	r4,r2,r2
   189c4:	2091803a 	cmpltu	r8,r4,r2
   189c8:	18c7883a 	add	r3,r3,r3
   189cc:	227fffc4 	addi	r9,r4,-1
   189d0:	40d1883a 	add	r8,r8,r3
   189d4:	490f403a 	cmpgeu	r7,r9,r4
   189d8:	41cfc83a 	sub	r7,r8,r7
   189dc:	2817883a 	mov	r11,r5
   189e0:	2005883a 	mov	r2,r4
   189e4:	4007883a 	mov	r3,r8
   189e8:	297fffc4 	addi	r5,r5,-1
   189ec:	51fff32e 	bgeu	r10,r7,189bc <_fpadd_parts+0x10c>
   189f0:	31000315 	stw	r4,12(r6)
   189f4:	32000415 	stw	r8,16(r6)
   189f8:	32c00215 	stw	r11,8(r6)
   189fc:	010000c4 	movi	r4,3
   18a00:	31000015 	stw	r4,0(r6)
   18a04:	01080034 	movhi	r4,8192
   18a08:	213fffc4 	addi	r4,r4,-1
   18a0c:	20c00b2e 	bgeu	r4,r3,18a3c <_fpadd_parts+0x18c>
   18a10:	180e97fa 	slli	r7,r3,31
   18a14:	1008d07a 	srli	r4,r2,1
   18a18:	31400217 	ldw	r5,8(r6)
   18a1c:	1806d07a 	srli	r3,r3,1
   18a20:	1080004c 	andi	r2,r2,1
   18a24:	3908b03a 	or	r4,r7,r4
   18a28:	1108b03a 	or	r4,r2,r4
   18a2c:	29400044 	addi	r5,r5,1
   18a30:	31000315 	stw	r4,12(r6)
   18a34:	30c00415 	stw	r3,16(r6)
   18a38:	31400215 	stw	r5,8(r6)
   18a3c:	3005883a 	mov	r2,r6
   18a40:	f800283a 	ret
   18a44:	2805883a 	mov	r2,r5
   18a48:	f800283a 	ret
   18a4c:	59c01e0e 	bge	r11,r7,18ac8 <_fpadd_parts+0x218>
   18a50:	11000117 	ldw	r4,4(r2)
   18a54:	28800117 	ldw	r2,4(r5)
   18a58:	0011883a 	mov	r8,zero
   18a5c:	0013883a 	mov	r9,zero
   18a60:	20bfbf1e 	bne	r4,r2,18960 <_fpadd_parts+0xb0>
   18a64:	4305883a 	add	r2,r8,r12
   18a68:	1207803a 	cmpltu	r3,r2,r8
   18a6c:	4b53883a 	add	r9,r9,r13
   18a70:	1a47883a 	add	r3,r3,r9
   18a74:	31000115 	stw	r4,4(r6)
   18a78:	31c00215 	stw	r7,8(r6)
   18a7c:	30800315 	stw	r2,12(r6)
   18a80:	30c00415 	stw	r3,16(r6)
   18a84:	003fdd06 	br	189fc <_fpadd_parts+0x14c>
   18a88:	20ffef1e 	bne	r4,r3,18a48 <_fpadd_parts+0x198>
   18a8c:	31000015 	stw	r4,0(r6)
   18a90:	10c00117 	ldw	r3,4(r2)
   18a94:	30c00115 	stw	r3,4(r6)
   18a98:	10c00217 	ldw	r3,8(r2)
   18a9c:	11000117 	ldw	r4,4(r2)
   18aa0:	29400117 	ldw	r5,4(r5)
   18aa4:	30c00215 	stw	r3,8(r6)
   18aa8:	10c00317 	ldw	r3,12(r2)
   18aac:	2908703a 	and	r4,r5,r4
   18ab0:	30c00315 	stw	r3,12(r6)
   18ab4:	10c00417 	ldw	r3,16(r2)
   18ab8:	31000115 	stw	r4,4(r6)
   18abc:	3005883a 	mov	r2,r6
   18ac0:	30c00415 	stw	r3,16(r6)
   18ac4:	f800283a 	ret
   18ac8:	580f883a 	mov	r7,r11
   18acc:	0019883a 	mov	r12,zero
   18ad0:	001b883a 	mov	r13,zero
   18ad4:	003f9f06 	br	18954 <_fpadd_parts+0xa4>
   18ad8:	0115c83a 	sub	r10,zero,r4
   18adc:	00c00fc4 	movi	r3,63
   18ae0:	1abfda16 	blt	r3,r10,18a4c <_fpadd_parts+0x19c>
   18ae4:	003f8906 	br	1890c <_fpadd_parts+0x5c>
   18ae8:	627fb52e 	bgeu	r12,r9,189c0 <_fpadd_parts+0x110>
   18aec:	003fc006 	br	189f0 <_fpadd_parts+0x140>
   18af0:	6205c83a 	sub	r2,r12,r8
   18af4:	6099803a 	cmpltu	r12,r12,r2
   18af8:	6a47c83a 	sub	r3,r13,r9
   18afc:	1b07c83a 	sub	r3,r3,r12
   18b00:	183f9d0e 	bge	r3,zero,18978 <_fpadd_parts+0xc8>
   18b04:	0085c83a 	sub	r2,zero,r2
   18b08:	1008c03a 	cmpne	r4,r2,zero
   18b0c:	00c7c83a 	sub	r3,zero,r3
   18b10:	1907c83a 	sub	r3,r3,r4
   18b14:	01000044 	movi	r4,1
   18b18:	31000115 	stw	r4,4(r6)
   18b1c:	31c00215 	stw	r7,8(r6)
   18b20:	30800315 	stw	r2,12(r6)
   18b24:	30c00415 	stw	r3,16(r6)
   18b28:	003f9706 	br	18988 <_fpadd_parts+0xd8>
   18b2c:	203f8926 	beq	r4,zero,18954 <_fpadd_parts+0xa4>
   18b30:	50fff804 	addi	r3,r10,-32
   18b34:	3a8f883a 	add	r7,r7,r10
   18b38:	18002316 	blt	r3,zero,18bc8 <_fpadd_parts+0x318>
   18b3c:	68d6d83a 	srl	r11,r13,r3
   18b40:	001d883a 	mov	r14,zero
   18b44:	18001c16 	blt	r3,zero,18bb8 <_fpadd_parts+0x308>
   18b48:	01000044 	movi	r4,1
   18b4c:	20c6983a 	sll	r3,r4,r3
   18b50:	0015883a 	mov	r10,zero
   18b54:	513fffc4 	addi	r4,r10,-1
   18b58:	2295403a 	cmpgeu	r10,r4,r10
   18b5c:	1a87c83a 	sub	r3,r3,r10
   18b60:	1b5a703a 	and	r13,r3,r13
   18b64:	2318703a 	and	r12,r4,r12
   18b68:	6358b03a 	or	r12,r12,r13
   18b6c:	6018c03a 	cmpne	r12,r12,zero
   18b70:	62d8b03a 	or	r12,r12,r11
   18b74:	701b883a 	mov	r13,r14
   18b78:	003f7606 	br	18954 <_fpadd_parts+0xa4>
   18b7c:	4808907a 	slli	r4,r9,1
   18b80:	02c007c4 	movi	r11,31
   18b84:	5a97c83a 	sub	r11,r11,r10
   18b88:	22c8983a 	sll	r4,r4,r11
   18b8c:	4296d83a 	srl	r11,r8,r10
   18b90:	4a9cd83a 	srl	r14,r9,r10
   18b94:	22d6b03a 	or	r11,r4,r11
   18b98:	003f6106 	br	18920 <_fpadd_parts+0x70>
   18b9c:	00c00044 	movi	r3,1
   18ba0:	1a94983a 	sll	r10,r3,r10
   18ba4:	0007883a 	mov	r3,zero
   18ba8:	003f6106 	br	18930 <_fpadd_parts+0x80>
   18bac:	013fff84 	movi	r4,-2
   18bb0:	21ff7c2e 	bgeu	r4,r7,189a4 <_fpadd_parts+0xf4>
   18bb4:	003f9106 	br	189fc <_fpadd_parts+0x14c>
   18bb8:	00c00044 	movi	r3,1
   18bbc:	1a94983a 	sll	r10,r3,r10
   18bc0:	0007883a 	mov	r3,zero
   18bc4:	003fe306 	br	18b54 <_fpadd_parts+0x2a4>
   18bc8:	6816907a 	slli	r11,r13,1
   18bcc:	010007c4 	movi	r4,31
   18bd0:	2289c83a 	sub	r4,r4,r10
   18bd4:	5908983a 	sll	r4,r11,r4
   18bd8:	6296d83a 	srl	r11,r12,r10
   18bdc:	6a9cd83a 	srl	r14,r13,r10
   18be0:	22d6b03a 	or	r11,r4,r11
   18be4:	003fd706 	br	18b44 <_fpadd_parts+0x294>
   18be8:	193f971e 	bne	r3,r4,18a48 <_fpadd_parts+0x198>
   18bec:	11000117 	ldw	r4,4(r2)
   18bf0:	28c00117 	ldw	r3,4(r5)
   18bf4:	20ff9426 	beq	r4,r3,18a48 <_fpadd_parts+0x198>
   18bf8:	008000f4 	movhi	r2,3
   18bfc:	10a0c404 	addi	r2,r2,-31984
   18c00:	f800283a 	ret

00018c04 <__adddf3>:
   18c04:	deffec04 	addi	sp,sp,-80
   18c08:	d9001115 	stw	r4,68(sp)
   18c0c:	d9401215 	stw	r5,72(sp)
   18c10:	d9001104 	addi	r4,sp,68
   18c14:	d9400a04 	addi	r5,sp,40
   18c18:	dfc01315 	stw	ra,76(sp)
   18c1c:	d9c01015 	stw	r7,64(sp)
   18c20:	d9800f15 	stw	r6,60(sp)
   18c24:	00199d00 	call	199d0 <__unpack_d>
   18c28:	d9000f04 	addi	r4,sp,60
   18c2c:	d9400504 	addi	r5,sp,20
   18c30:	00199d00 	call	199d0 <__unpack_d>
   18c34:	d9000a04 	addi	r4,sp,40
   18c38:	d9400504 	addi	r5,sp,20
   18c3c:	d80d883a 	mov	r6,sp
   18c40:	00188b00 	call	188b0 <_fpadd_parts>
   18c44:	1009883a 	mov	r4,r2
   18c48:	00197ac0 	call	197ac <__pack_d>
   18c4c:	dfc01317 	ldw	ra,76(sp)
   18c50:	dec01404 	addi	sp,sp,80
   18c54:	f800283a 	ret

00018c58 <__subdf3>:
   18c58:	deffec04 	addi	sp,sp,-80
   18c5c:	d9001115 	stw	r4,68(sp)
   18c60:	d9401215 	stw	r5,72(sp)
   18c64:	d9001104 	addi	r4,sp,68
   18c68:	d9400a04 	addi	r5,sp,40
   18c6c:	dfc01315 	stw	ra,76(sp)
   18c70:	d9c01015 	stw	r7,64(sp)
   18c74:	d9800f15 	stw	r6,60(sp)
   18c78:	00199d00 	call	199d0 <__unpack_d>
   18c7c:	d9000f04 	addi	r4,sp,60
   18c80:	d9400504 	addi	r5,sp,20
   18c84:	00199d00 	call	199d0 <__unpack_d>
   18c88:	d8800617 	ldw	r2,24(sp)
   18c8c:	d9000a04 	addi	r4,sp,40
   18c90:	d9400504 	addi	r5,sp,20
   18c94:	d80d883a 	mov	r6,sp
   18c98:	1080005c 	xori	r2,r2,1
   18c9c:	d8800615 	stw	r2,24(sp)
   18ca0:	00188b00 	call	188b0 <_fpadd_parts>
   18ca4:	1009883a 	mov	r4,r2
   18ca8:	00197ac0 	call	197ac <__pack_d>
   18cac:	dfc01317 	ldw	ra,76(sp)
   18cb0:	dec01404 	addi	sp,sp,80
   18cb4:	f800283a 	ret

00018cb8 <__muldf3>:
   18cb8:	deffe404 	addi	sp,sp,-112
   18cbc:	d9001115 	stw	r4,68(sp)
   18cc0:	d9401215 	stw	r5,72(sp)
   18cc4:	d9001104 	addi	r4,sp,68
   18cc8:	d9400a04 	addi	r5,sp,40
   18ccc:	dfc01b15 	stw	ra,108(sp)
   18cd0:	d9800f15 	stw	r6,60(sp)
   18cd4:	d9c01015 	stw	r7,64(sp)
   18cd8:	ddc01a15 	stw	r23,104(sp)
   18cdc:	dd801915 	stw	r22,100(sp)
   18ce0:	dd401815 	stw	r21,96(sp)
   18ce4:	dd001715 	stw	r20,92(sp)
   18ce8:	dcc01615 	stw	r19,88(sp)
   18cec:	dc801515 	stw	r18,84(sp)
   18cf0:	dc401415 	stw	r17,80(sp)
   18cf4:	dc001315 	stw	r16,76(sp)
   18cf8:	00199d00 	call	199d0 <__unpack_d>
   18cfc:	d9000f04 	addi	r4,sp,60
   18d00:	d9400504 	addi	r5,sp,20
   18d04:	00199d00 	call	199d0 <__unpack_d>
   18d08:	d8c00a17 	ldw	r3,40(sp)
   18d0c:	00800044 	movi	r2,1
   18d10:	10c01136 	bltu	r2,r3,18d58 <__muldf3+0xa0>
   18d14:	d8c00b17 	ldw	r3,44(sp)
   18d18:	d8800617 	ldw	r2,24(sp)
   18d1c:	d9000a04 	addi	r4,sp,40
   18d20:	1884c03a 	cmpne	r2,r3,r2
   18d24:	d8800b15 	stw	r2,44(sp)
   18d28:	00197ac0 	call	197ac <__pack_d>
   18d2c:	dfc01b17 	ldw	ra,108(sp)
   18d30:	ddc01a17 	ldw	r23,104(sp)
   18d34:	dd801917 	ldw	r22,100(sp)
   18d38:	dd401817 	ldw	r21,96(sp)
   18d3c:	dd001717 	ldw	r20,92(sp)
   18d40:	dcc01617 	ldw	r19,88(sp)
   18d44:	dc801517 	ldw	r18,84(sp)
   18d48:	dc401417 	ldw	r17,80(sp)
   18d4c:	dc001317 	ldw	r16,76(sp)
   18d50:	dec01c04 	addi	sp,sp,112
   18d54:	f800283a 	ret
   18d58:	d9000517 	ldw	r4,20(sp)
   18d5c:	11000636 	bltu	r2,r4,18d78 <__muldf3+0xc0>
   18d60:	d8800617 	ldw	r2,24(sp)
   18d64:	d8c00b17 	ldw	r3,44(sp)
   18d68:	d9000504 	addi	r4,sp,20
   18d6c:	1884c03a 	cmpne	r2,r3,r2
   18d70:	d8800615 	stw	r2,24(sp)
   18d74:	003fec06 	br	18d28 <__muldf3+0x70>
   18d78:	00800104 	movi	r2,4
   18d7c:	1880051e 	bne	r3,r2,18d94 <__muldf3+0xdc>
   18d80:	00800084 	movi	r2,2
   18d84:	20bfe31e 	bne	r4,r2,18d14 <__muldf3+0x5c>
   18d88:	010000f4 	movhi	r4,3
   18d8c:	2120c404 	addi	r4,r4,-31984
   18d90:	003fe506 	br	18d28 <__muldf3+0x70>
   18d94:	2080031e 	bne	r4,r2,18da4 <__muldf3+0xec>
   18d98:	00800084 	movi	r2,2
   18d9c:	18bffa26 	beq	r3,r2,18d88 <__muldf3+0xd0>
   18da0:	003fef06 	br	18d60 <__muldf3+0xa8>
   18da4:	00800084 	movi	r2,2
   18da8:	18bfda26 	beq	r3,r2,18d14 <__muldf3+0x5c>
   18dac:	20bfec26 	beq	r4,r2,18d60 <__muldf3+0xa8>
   18db0:	dc000d17 	ldw	r16,52(sp)
   18db4:	dd000817 	ldw	r20,32(sp)
   18db8:	dc800917 	ldw	r18,36(sp)
   18dbc:	8009883a 	mov	r4,r16
   18dc0:	000b883a 	mov	r5,zero
   18dc4:	a00d883a 	mov	r6,r20
   18dc8:	000f883a 	mov	r7,zero
   18dcc:	00195f00 	call	195f0 <__muldi3>
   18dd0:	dc400e17 	ldw	r17,56(sp)
   18dd4:	9009883a 	mov	r4,r18
   18dd8:	800d883a 	mov	r6,r16
   18ddc:	000b883a 	mov	r5,zero
   18de0:	000f883a 	mov	r7,zero
   18de4:	102f883a 	mov	r23,r2
   18de8:	1827883a 	mov	r19,r3
   18dec:	00195f00 	call	195f0 <__muldi3>
   18df0:	900d883a 	mov	r6,r18
   18df4:	8809883a 	mov	r4,r17
   18df8:	000b883a 	mov	r5,zero
   18dfc:	000f883a 	mov	r7,zero
   18e00:	102b883a 	mov	r21,r2
   18e04:	1821883a 	mov	r16,r3
   18e08:	00195f00 	call	195f0 <__muldi3>
   18e0c:	8809883a 	mov	r4,r17
   18e10:	000b883a 	mov	r5,zero
   18e14:	a00d883a 	mov	r6,r20
   18e18:	000f883a 	mov	r7,zero
   18e1c:	102d883a 	mov	r22,r2
   18e20:	1825883a 	mov	r18,r3
   18e24:	00195f00 	call	195f0 <__muldi3>
   18e28:	154b883a 	add	r5,r2,r21
   18e2c:	2889803a 	cmpltu	r4,r5,r2
   18e30:	1c07883a 	add	r3,r3,r16
   18e34:	20c9883a 	add	r4,r4,r3
   18e38:	24004b36 	bltu	r4,r16,18f68 <__muldf3+0x2b0>
   18e3c:	8100011e 	bne	r16,r4,18e44 <__muldf3+0x18c>
   18e40:	2d404936 	bltu	r5,r21,18f68 <__muldf3+0x2b0>
   18e44:	0011883a 	mov	r8,zero
   18e48:	0007883a 	mov	r3,zero
   18e4c:	2ccb883a 	add	r5,r5,r19
   18e50:	b80d883a 	mov	r6,r23
   18e54:	2cc0012e 	bgeu	r5,r19,18e5c <__muldf3+0x1a4>
   18e58:	02000044 	movi	r8,1
   18e5c:	258f883a 	add	r7,r4,r22
   18e60:	3909803a 	cmpltu	r4,r7,r4
   18e64:	da400c17 	ldw	r9,48(sp)
   18e68:	2489883a 	add	r4,r4,r18
   18e6c:	d8800717 	ldw	r2,28(sp)
   18e70:	20c9883a 	add	r4,r4,r3
   18e74:	da800b17 	ldw	r10,44(sp)
   18e78:	d8c00617 	ldw	r3,24(sp)
   18e7c:	3a11883a 	add	r8,r7,r8
   18e80:	4885883a 	add	r2,r9,r2
   18e84:	50c6c03a 	cmpne	r3,r10,r3
   18e88:	41cf803a 	cmpltu	r7,r8,r7
   18e8c:	12400104 	addi	r9,r2,4
   18e90:	d8c00115 	stw	r3,4(sp)
   18e94:	3909883a 	add	r4,r7,r4
   18e98:	da400215 	stw	r9,8(sp)
   18e9c:	03480034 	movhi	r13,8192
   18ea0:	6b7fffc4 	addi	r13,r13,-1
   18ea4:	4007883a 	mov	r3,r8
   18ea8:	6900102e 	bgeu	r13,r4,18eec <__muldf3+0x234>
   18eac:	10800144 	addi	r2,r2,5
   18eb0:	180ed07a 	srli	r7,r3,1
   18eb4:	18c0004c 	andi	r3,r3,1
   18eb8:	201097fa 	slli	r8,r4,31
   18ebc:	281697fa 	slli	r11,r5,31
   18ec0:	2008d07a 	srli	r4,r4,1
   18ec4:	3014d07a 	srli	r10,r6,1
   18ec8:	2812d07a 	srli	r9,r5,1
   18ecc:	1019883a 	mov	r12,r2
   18ed0:	18000226 	beq	r3,zero,18edc <__muldf3+0x224>
   18ed4:	5a8cb03a 	or	r6,r11,r10
   18ed8:	49600034 	orhi	r5,r9,32768
   18edc:	41c6b03a 	or	r3,r8,r7
   18ee0:	10800044 	addi	r2,r2,1
   18ee4:	693ff236 	bltu	r13,r4,18eb0 <__muldf3+0x1f8>
   18ee8:	db000215 	stw	r12,8(sp)
   18eec:	03440034 	movhi	r13,4096
   18ef0:	6b7fffc4 	addi	r13,r13,-1
   18ef4:	69001336 	bltu	r13,r4,18f44 <__muldf3+0x28c>
   18ef8:	d8800217 	ldw	r2,8(sp)
   18efc:	10bfffc4 	addi	r2,r2,-1
   18f00:	18d3883a 	add	r9,r3,r3
   18f04:	48c7803a 	cmpltu	r3,r9,r3
   18f08:	2109883a 	add	r4,r4,r4
   18f0c:	190f883a 	add	r7,r3,r4
   18f10:	3191883a 	add	r8,r6,r6
   18f14:	4197803a 	cmpltu	r11,r8,r6
   18f18:	2955883a 	add	r10,r5,r5
   18f1c:	1019883a 	mov	r12,r2
   18f20:	4807883a 	mov	r3,r9
   18f24:	3809883a 	mov	r4,r7
   18f28:	2800010e 	bge	r5,zero,18f30 <__muldf3+0x278>
   18f2c:	48c00054 	ori	r3,r9,1
   18f30:	400d883a 	mov	r6,r8
   18f34:	5a8b883a 	add	r5,r11,r10
   18f38:	10bfffc4 	addi	r2,r2,-1
   18f3c:	69fff02e 	bgeu	r13,r7,18f00 <__muldf3+0x248>
   18f40:	db000215 	stw	r12,8(sp)
   18f44:	18803fcc 	andi	r2,r3,255
   18f48:	01c02004 	movi	r7,128
   18f4c:	11c00926 	beq	r2,r7,18f74 <__muldf3+0x2bc>
   18f50:	008000c4 	movi	r2,3
   18f54:	d9000415 	stw	r4,16(sp)
   18f58:	d8c00315 	stw	r3,12(sp)
   18f5c:	d8800015 	stw	r2,0(sp)
   18f60:	d809883a 	mov	r4,sp
   18f64:	003f7006 	br	18d28 <__muldf3+0x70>
   18f68:	0011883a 	mov	r8,zero
   18f6c:	00c00044 	movi	r3,1
   18f70:	003fb606 	br	18e4c <__muldf3+0x194>
   18f74:	19c0400c 	andi	r7,r3,256
   18f78:	383ff51e 	bne	r7,zero,18f50 <__muldf3+0x298>
   18f7c:	314ab03a 	or	r5,r6,r5
   18f80:	283ff326 	beq	r5,zero,18f50 <__muldf3+0x298>
   18f84:	1885883a 	add	r2,r3,r2
   18f88:	10cb803a 	cmpltu	r5,r2,r3
   18f8c:	00ffc004 	movi	r3,-256
   18f90:	10c6703a 	and	r3,r2,r3
   18f94:	2909883a 	add	r4,r5,r4
   18f98:	003fed06 	br	18f50 <__muldf3+0x298>

00018f9c <__divdf3>:
   18f9c:	defff104 	addi	sp,sp,-60
   18fa0:	d9000c15 	stw	r4,48(sp)
   18fa4:	d9400d15 	stw	r5,52(sp)
   18fa8:	d9000c04 	addi	r4,sp,48
   18fac:	d9400504 	addi	r5,sp,20
   18fb0:	dfc00e15 	stw	ra,56(sp)
   18fb4:	d9800a15 	stw	r6,40(sp)
   18fb8:	d9c00b15 	stw	r7,44(sp)
   18fbc:	00199d00 	call	199d0 <__unpack_d>
   18fc0:	d9000a04 	addi	r4,sp,40
   18fc4:	d80b883a 	mov	r5,sp
   18fc8:	00199d00 	call	199d0 <__unpack_d>
   18fcc:	d8c00517 	ldw	r3,20(sp)
   18fd0:	00800044 	movi	r2,1
   18fd4:	10c00536 	bltu	r2,r3,18fec <__divdf3+0x50>
   18fd8:	d9000504 	addi	r4,sp,20
   18fdc:	00197ac0 	call	197ac <__pack_d>
   18fe0:	dfc00e17 	ldw	ra,56(sp)
   18fe4:	dec00f04 	addi	sp,sp,60
   18fe8:	f800283a 	ret
   18fec:	d9000017 	ldw	r4,0(sp)
   18ff0:	11000536 	bltu	r2,r4,19008 <__divdf3+0x6c>
   18ff4:	d809883a 	mov	r4,sp
   18ff8:	00197ac0 	call	197ac <__pack_d>
   18ffc:	dfc00e17 	ldw	ra,56(sp)
   19000:	dec00f04 	addi	sp,sp,60
   19004:	f800283a 	ret
   19008:	d9800617 	ldw	r6,24(sp)
   1900c:	d9400117 	ldw	r5,4(sp)
   19010:	00800104 	movi	r2,4
   19014:	314af03a 	xor	r5,r6,r5
   19018:	d9400615 	stw	r5,24(sp)
   1901c:	18800226 	beq	r3,r2,19028 <__divdf3+0x8c>
   19020:	01400084 	movi	r5,2
   19024:	1940041e 	bne	r3,r5,19038 <__divdf3+0x9c>
   19028:	193feb1e 	bne	r3,r4,18fd8 <__divdf3+0x3c>
   1902c:	010000f4 	movhi	r4,3
   19030:	2120c404 	addi	r4,r4,-31984
   19034:	003fe906 	br	18fdc <__divdf3+0x40>
   19038:	20803326 	beq	r4,r2,19108 <__divdf3+0x16c>
   1903c:	21403726 	beq	r4,r5,1911c <__divdf3+0x180>
   19040:	d8800217 	ldw	r2,8(sp)
   19044:	d9000717 	ldw	r4,28(sp)
   19048:	d8c00917 	ldw	r3,36(sp)
   1904c:	da000417 	ldw	r8,16(sp)
   19050:	2089c83a 	sub	r4,r4,r2
   19054:	d9000715 	stw	r4,28(sp)
   19058:	d8800817 	ldw	r2,32(sp)
   1905c:	dbc00317 	ldw	r15,12(sp)
   19060:	1a000236 	bltu	r3,r8,1906c <__divdf3+0xd0>
   19064:	40c0081e 	bne	r8,r3,19088 <__divdf3+0xec>
   19068:	13c0072e 	bgeu	r2,r15,19088 <__divdf3+0xec>
   1906c:	108b883a 	add	r5,r2,r2
   19070:	288d803a 	cmpltu	r6,r5,r2
   19074:	18c7883a 	add	r3,r3,r3
   19078:	213fffc4 	addi	r4,r4,-1
   1907c:	2805883a 	mov	r2,r5
   19080:	30c7883a 	add	r3,r6,r3
   19084:	d9000715 	stw	r4,28(sp)
   19088:	01400f44 	movi	r5,61
   1908c:	000f883a 	mov	r7,zero
   19090:	01040034 	movhi	r4,4096
   19094:	0019883a 	mov	r12,zero
   19098:	001b883a 	mov	r13,zero
   1909c:	201697fa 	slli	r11,r4,31
   190a0:	3814d07a 	srli	r10,r7,1
   190a4:	297fffc4 	addi	r5,r5,-1
   190a8:	1a000936 	bltu	r3,r8,190d0 <__divdf3+0x134>
   190ac:	13cdc83a 	sub	r6,r2,r15
   190b0:	1193803a 	cmpltu	r9,r2,r6
   190b4:	1a1dc83a 	sub	r14,r3,r8
   190b8:	40c0011e 	bne	r8,r3,190c0 <__divdf3+0x124>
   190bc:	13c00436 	bltu	r2,r15,190d0 <__divdf3+0x134>
   190c0:	3005883a 	mov	r2,r6
   190c4:	7247c83a 	sub	r3,r14,r9
   190c8:	61d8b03a 	or	r12,r12,r7
   190cc:	691ab03a 	or	r13,r13,r4
   190d0:	108d883a 	add	r6,r2,r2
   190d4:	3093803a 	cmpltu	r9,r6,r2
   190d8:	18c7883a 	add	r3,r3,r3
   190dc:	5a8eb03a 	or	r7,r11,r10
   190e0:	2008d07a 	srli	r4,r4,1
   190e4:	3005883a 	mov	r2,r6
   190e8:	48c7883a 	add	r3,r9,r3
   190ec:	283feb1e 	bne	r5,zero,1909c <__divdf3+0x100>
   190f0:	61003fcc 	andi	r4,r12,255
   190f4:	01402004 	movi	r5,128
   190f8:	21400b26 	beq	r4,r5,19128 <__divdf3+0x18c>
   190fc:	db000815 	stw	r12,32(sp)
   19100:	db400915 	stw	r13,36(sp)
   19104:	003fb406 	br	18fd8 <__divdf3+0x3c>
   19108:	d8000815 	stw	zero,32(sp)
   1910c:	d8000915 	stw	zero,36(sp)
   19110:	d8000715 	stw	zero,28(sp)
   19114:	d9000504 	addi	r4,sp,20
   19118:	003fb006 	br	18fdc <__divdf3+0x40>
   1911c:	d8800515 	stw	r2,20(sp)
   19120:	d9000504 	addi	r4,sp,20
   19124:	003fad06 	br	18fdc <__divdf3+0x40>
   19128:	6140400c 	andi	r5,r12,256
   1912c:	283ff31e 	bne	r5,zero,190fc <__divdf3+0x160>
   19130:	30c4b03a 	or	r2,r6,r3
   19134:	103ff126 	beq	r2,zero,190fc <__divdf3+0x160>
   19138:	6109883a 	add	r4,r12,r4
   1913c:	2305803a 	cmpltu	r2,r4,r12
   19140:	033fc004 	movi	r12,-256
   19144:	2318703a 	and	r12,r4,r12
   19148:	135b883a 	add	r13,r2,r13
   1914c:	003feb06 	br	190fc <__divdf3+0x160>

00019150 <__eqdf2>:
   19150:	defff104 	addi	sp,sp,-60
   19154:	d9000c15 	stw	r4,48(sp)
   19158:	d9400d15 	stw	r5,52(sp)
   1915c:	d9000c04 	addi	r4,sp,48
   19160:	d9400504 	addi	r5,sp,20
   19164:	dfc00e15 	stw	ra,56(sp)
   19168:	d9800a15 	stw	r6,40(sp)
   1916c:	d9c00b15 	stw	r7,44(sp)
   19170:	00199d00 	call	199d0 <__unpack_d>
   19174:	d9000a04 	addi	r4,sp,40
   19178:	d80b883a 	mov	r5,sp
   1917c:	00199d00 	call	199d0 <__unpack_d>
   19180:	d8c00517 	ldw	r3,20(sp)
   19184:	00800044 	movi	r2,1
   19188:	10c0052e 	bgeu	r2,r3,191a0 <__eqdf2+0x50>
   1918c:	d8c00017 	ldw	r3,0(sp)
   19190:	10c0032e 	bgeu	r2,r3,191a0 <__eqdf2+0x50>
   19194:	d9000504 	addi	r4,sp,20
   19198:	d80b883a 	mov	r5,sp
   1919c:	0019ad40 	call	19ad4 <__fpcmp_parts_d>
   191a0:	dfc00e17 	ldw	ra,56(sp)
   191a4:	dec00f04 	addi	sp,sp,60
   191a8:	f800283a 	ret

000191ac <__nedf2>:
   191ac:	defff104 	addi	sp,sp,-60
   191b0:	d9000c15 	stw	r4,48(sp)
   191b4:	d9400d15 	stw	r5,52(sp)
   191b8:	d9000c04 	addi	r4,sp,48
   191bc:	d9400504 	addi	r5,sp,20
   191c0:	dfc00e15 	stw	ra,56(sp)
   191c4:	d9800a15 	stw	r6,40(sp)
   191c8:	d9c00b15 	stw	r7,44(sp)
   191cc:	00199d00 	call	199d0 <__unpack_d>
   191d0:	d9000a04 	addi	r4,sp,40
   191d4:	d80b883a 	mov	r5,sp
   191d8:	00199d00 	call	199d0 <__unpack_d>
   191dc:	d8c00517 	ldw	r3,20(sp)
   191e0:	00800044 	movi	r2,1
   191e4:	10c0052e 	bgeu	r2,r3,191fc <__nedf2+0x50>
   191e8:	d8c00017 	ldw	r3,0(sp)
   191ec:	10c0032e 	bgeu	r2,r3,191fc <__nedf2+0x50>
   191f0:	d9000504 	addi	r4,sp,20
   191f4:	d80b883a 	mov	r5,sp
   191f8:	0019ad40 	call	19ad4 <__fpcmp_parts_d>
   191fc:	dfc00e17 	ldw	ra,56(sp)
   19200:	dec00f04 	addi	sp,sp,60
   19204:	f800283a 	ret

00019208 <__gtdf2>:
   19208:	defff104 	addi	sp,sp,-60
   1920c:	d9000c15 	stw	r4,48(sp)
   19210:	d9400d15 	stw	r5,52(sp)
   19214:	d9000c04 	addi	r4,sp,48
   19218:	d9400504 	addi	r5,sp,20
   1921c:	dfc00e15 	stw	ra,56(sp)
   19220:	d9800a15 	stw	r6,40(sp)
   19224:	d9c00b15 	stw	r7,44(sp)
   19228:	00199d00 	call	199d0 <__unpack_d>
   1922c:	d9000a04 	addi	r4,sp,40
   19230:	d80b883a 	mov	r5,sp
   19234:	00199d00 	call	199d0 <__unpack_d>
   19238:	d8c00517 	ldw	r3,20(sp)
   1923c:	00800044 	movi	r2,1
   19240:	10c0082e 	bgeu	r2,r3,19264 <__gtdf2+0x5c>
   19244:	d8c00017 	ldw	r3,0(sp)
   19248:	10c0062e 	bgeu	r2,r3,19264 <__gtdf2+0x5c>
   1924c:	d9000504 	addi	r4,sp,20
   19250:	d80b883a 	mov	r5,sp
   19254:	0019ad40 	call	19ad4 <__fpcmp_parts_d>
   19258:	dfc00e17 	ldw	ra,56(sp)
   1925c:	dec00f04 	addi	sp,sp,60
   19260:	f800283a 	ret
   19264:	00bfffc4 	movi	r2,-1
   19268:	003ffb06 	br	19258 <__gtdf2+0x50>

0001926c <__gedf2>:
   1926c:	defff104 	addi	sp,sp,-60
   19270:	d9000c15 	stw	r4,48(sp)
   19274:	d9400d15 	stw	r5,52(sp)
   19278:	d9000c04 	addi	r4,sp,48
   1927c:	d9400504 	addi	r5,sp,20
   19280:	dfc00e15 	stw	ra,56(sp)
   19284:	d9800a15 	stw	r6,40(sp)
   19288:	d9c00b15 	stw	r7,44(sp)
   1928c:	00199d00 	call	199d0 <__unpack_d>
   19290:	d9000a04 	addi	r4,sp,40
   19294:	d80b883a 	mov	r5,sp
   19298:	00199d00 	call	199d0 <__unpack_d>
   1929c:	d8c00517 	ldw	r3,20(sp)
   192a0:	00800044 	movi	r2,1
   192a4:	10c0082e 	bgeu	r2,r3,192c8 <__gedf2+0x5c>
   192a8:	d8c00017 	ldw	r3,0(sp)
   192ac:	10c0062e 	bgeu	r2,r3,192c8 <__gedf2+0x5c>
   192b0:	d9000504 	addi	r4,sp,20
   192b4:	d80b883a 	mov	r5,sp
   192b8:	0019ad40 	call	19ad4 <__fpcmp_parts_d>
   192bc:	dfc00e17 	ldw	ra,56(sp)
   192c0:	dec00f04 	addi	sp,sp,60
   192c4:	f800283a 	ret
   192c8:	00bfffc4 	movi	r2,-1
   192cc:	003ffb06 	br	192bc <__gedf2+0x50>

000192d0 <__ltdf2>:
   192d0:	defff104 	addi	sp,sp,-60
   192d4:	d9000c15 	stw	r4,48(sp)
   192d8:	d9400d15 	stw	r5,52(sp)
   192dc:	d9000c04 	addi	r4,sp,48
   192e0:	d9400504 	addi	r5,sp,20
   192e4:	dfc00e15 	stw	ra,56(sp)
   192e8:	d9800a15 	stw	r6,40(sp)
   192ec:	d9c00b15 	stw	r7,44(sp)
   192f0:	00199d00 	call	199d0 <__unpack_d>
   192f4:	d9000a04 	addi	r4,sp,40
   192f8:	d80b883a 	mov	r5,sp
   192fc:	00199d00 	call	199d0 <__unpack_d>
   19300:	d8c00517 	ldw	r3,20(sp)
   19304:	00800044 	movi	r2,1
   19308:	10c0052e 	bgeu	r2,r3,19320 <__ltdf2+0x50>
   1930c:	d8c00017 	ldw	r3,0(sp)
   19310:	10c0032e 	bgeu	r2,r3,19320 <__ltdf2+0x50>
   19314:	d9000504 	addi	r4,sp,20
   19318:	d80b883a 	mov	r5,sp
   1931c:	0019ad40 	call	19ad4 <__fpcmp_parts_d>
   19320:	dfc00e17 	ldw	ra,56(sp)
   19324:	dec00f04 	addi	sp,sp,60
   19328:	f800283a 	ret

0001932c <__floatsidf>:
   1932c:	2004d7fa 	srli	r2,r4,31
   19330:	defff904 	addi	sp,sp,-28
   19334:	00c000c4 	movi	r3,3
   19338:	dfc00615 	stw	ra,24(sp)
   1933c:	dc000515 	stw	r16,20(sp)
   19340:	d8c00015 	stw	r3,0(sp)
   19344:	d8800115 	stw	r2,4(sp)
   19348:	2000081e 	bne	r4,zero,1936c <__floatsidf+0x40>
   1934c:	00800084 	movi	r2,2
   19350:	d8800015 	stw	r2,0(sp)
   19354:	d809883a 	mov	r4,sp
   19358:	00197ac0 	call	197ac <__pack_d>
   1935c:	dfc00617 	ldw	ra,24(sp)
   19360:	dc000517 	ldw	r16,20(sp)
   19364:	dec00704 	addi	sp,sp,28
   19368:	f800283a 	ret
   1936c:	00c00f04 	movi	r3,60
   19370:	d8c00215 	stw	r3,8(sp)
   19374:	10000f1e 	bne	r2,zero,193b4 <__floatsidf+0x88>
   19378:	2021883a 	mov	r16,r4
   1937c:	8009883a 	mov	r4,r16
   19380:	00197000 	call	19700 <__clzsi2>
   19384:	11000744 	addi	r4,r2,29
   19388:	0100110e 	bge	zero,r4,193d0 <__floatsidf+0xa4>
   1938c:	10ffff44 	addi	r3,r2,-3
   19390:	18001216 	blt	r3,zero,193dc <__floatsidf+0xb0>
   19394:	80c6983a 	sll	r3,r16,r3
   19398:	0009883a 	mov	r4,zero
   1939c:	014007c4 	movi	r5,31
   193a0:	2885c83a 	sub	r2,r5,r2
   193a4:	d9000315 	stw	r4,12(sp)
   193a8:	d8c00415 	stw	r3,16(sp)
   193ac:	d8800215 	stw	r2,8(sp)
   193b0:	003fe806 	br	19354 <__floatsidf+0x28>
   193b4:	00a00034 	movhi	r2,32768
   193b8:	20800e26 	beq	r4,r2,193f4 <__floatsidf+0xc8>
   193bc:	0121c83a 	sub	r16,zero,r4
   193c0:	8009883a 	mov	r4,r16
   193c4:	00197000 	call	19700 <__clzsi2>
   193c8:	11000744 	addi	r4,r2,29
   193cc:	013fef16 	blt	zero,r4,1938c <__floatsidf+0x60>
   193d0:	dc000315 	stw	r16,12(sp)
   193d4:	d8000415 	stw	zero,16(sp)
   193d8:	003fde06 	br	19354 <__floatsidf+0x28>
   193dc:	800ad07a 	srli	r5,r16,1
   193e0:	00c007c4 	movi	r3,31
   193e4:	1907c83a 	sub	r3,r3,r4
   193e8:	28c6d83a 	srl	r3,r5,r3
   193ec:	8108983a 	sll	r4,r16,r4
   193f0:	003fea06 	br	1939c <__floatsidf+0x70>
   193f4:	0005883a 	mov	r2,zero
   193f8:	00f07834 	movhi	r3,49632
   193fc:	003fd706 	br	1935c <__floatsidf+0x30>

00019400 <__fixdfsi>:
   19400:	defff804 	addi	sp,sp,-32
   19404:	d9000515 	stw	r4,20(sp)
   19408:	d9400615 	stw	r5,24(sp)
   1940c:	d9000504 	addi	r4,sp,20
   19410:	d80b883a 	mov	r5,sp
   19414:	dfc00715 	stw	ra,28(sp)
   19418:	00199d00 	call	199d0 <__unpack_d>
   1941c:	d8800017 	ldw	r2,0(sp)
   19420:	00c00084 	movi	r3,2
   19424:	10c01c26 	beq	r2,r3,19498 <__fixdfsi+0x98>
   19428:	00c00044 	movi	r3,1
   1942c:	18801a2e 	bgeu	r3,r2,19498 <__fixdfsi+0x98>
   19430:	00c00104 	movi	r3,4
   19434:	10c01126 	beq	r2,r3,1947c <__fixdfsi+0x7c>
   19438:	d8800217 	ldw	r2,8(sp)
   1943c:	10001616 	blt	r2,zero,19498 <__fixdfsi+0x98>
   19440:	00c00784 	movi	r3,30
   19444:	18800d16 	blt	r3,r2,1947c <__fixdfsi+0x7c>
   19448:	00c00f04 	movi	r3,60
   1944c:	1885c83a 	sub	r2,r3,r2
   19450:	10fff804 	addi	r3,r2,-32
   19454:	d9400317 	ldw	r5,12(sp)
   19458:	d9000417 	ldw	r4,16(sp)
   1945c:	18001616 	blt	r3,zero,194b8 <__fixdfsi+0xb8>
   19460:	20c4d83a 	srl	r2,r4,r3
   19464:	d8c00117 	ldw	r3,4(sp)
   19468:	18000126 	beq	r3,zero,19470 <__fixdfsi+0x70>
   1946c:	0085c83a 	sub	r2,zero,r2
   19470:	dfc00717 	ldw	ra,28(sp)
   19474:	dec00804 	addi	sp,sp,32
   19478:	f800283a 	ret
   1947c:	d8800117 	ldw	r2,4(sp)
   19480:	1000091e 	bne	r2,zero,194a8 <__fixdfsi+0xa8>
   19484:	00a00034 	movhi	r2,32768
   19488:	10bfffc4 	addi	r2,r2,-1
   1948c:	dfc00717 	ldw	ra,28(sp)
   19490:	dec00804 	addi	sp,sp,32
   19494:	f800283a 	ret
   19498:	0005883a 	mov	r2,zero
   1949c:	dfc00717 	ldw	ra,28(sp)
   194a0:	dec00804 	addi	sp,sp,32
   194a4:	f800283a 	ret
   194a8:	00a00034 	movhi	r2,32768
   194ac:	dfc00717 	ldw	ra,28(sp)
   194b0:	dec00804 	addi	sp,sp,32
   194b4:	f800283a 	ret
   194b8:	2008907a 	slli	r4,r4,1
   194bc:	018007c4 	movi	r6,31
   194c0:	308dc83a 	sub	r6,r6,r2
   194c4:	2188983a 	sll	r4,r4,r6
   194c8:	2884d83a 	srl	r2,r5,r2
   194cc:	2084b03a 	or	r2,r4,r2
   194d0:	003fe406 	br	19464 <__fixdfsi+0x64>

000194d4 <__floatunsidf>:
   194d4:	defff904 	addi	sp,sp,-28
   194d8:	dc000515 	stw	r16,20(sp)
   194dc:	dfc00615 	stw	ra,24(sp)
   194e0:	d8000115 	stw	zero,4(sp)
   194e4:	2021883a 	mov	r16,r4
   194e8:	20001726 	beq	r4,zero,19548 <__floatunsidf+0x74>
   194ec:	008000c4 	movi	r2,3
   194f0:	d8800015 	stw	r2,0(sp)
   194f4:	00800f04 	movi	r2,60
   194f8:	d8800215 	stw	r2,8(sp)
   194fc:	00197000 	call	19700 <__clzsi2>
   19500:	10c00744 	addi	r3,r2,29
   19504:	18001816 	blt	r3,zero,19568 <__floatunsidf+0x94>
   19508:	18002d26 	beq	r3,zero,195c0 <__floatunsidf+0xec>
   1950c:	113fff44 	addi	r4,r2,-3
   19510:	20002e16 	blt	r4,zero,195cc <__floatunsidf+0xf8>
   19514:	8108983a 	sll	r4,r16,r4
   19518:	0021883a 	mov	r16,zero
   1951c:	014007c4 	movi	r5,31
   19520:	2885c83a 	sub	r2,r5,r2
   19524:	dc000315 	stw	r16,12(sp)
   19528:	d9000415 	stw	r4,16(sp)
   1952c:	d8800215 	stw	r2,8(sp)
   19530:	d809883a 	mov	r4,sp
   19534:	00197ac0 	call	197ac <__pack_d>
   19538:	dfc00617 	ldw	ra,24(sp)
   1953c:	dc000517 	ldw	r16,20(sp)
   19540:	dec00704 	addi	sp,sp,28
   19544:	f800283a 	ret
   19548:	00800084 	movi	r2,2
   1954c:	d809883a 	mov	r4,sp
   19550:	d8800015 	stw	r2,0(sp)
   19554:	00197ac0 	call	197ac <__pack_d>
   19558:	dfc00617 	ldw	ra,24(sp)
   1955c:	dc000517 	ldw	r16,20(sp)
   19560:	dec00704 	addi	sp,sp,28
   19564:	f800283a 	ret
   19568:	00c7c83a 	sub	r3,zero,r3
   1956c:	193ff804 	addi	r4,r3,-32
   19570:	20001c16 	blt	r4,zero,195e4 <__floatunsidf+0x110>
   19574:	000b883a 	mov	r5,zero
   19578:	2009d7fa 	srai	r4,r4,31
   1957c:	80c6d83a 	srl	r3,r16,r3
   19580:	297fffc4 	addi	r5,r5,-1
   19584:	2c20703a 	and	r16,r5,r16
   19588:	8020c03a 	cmpne	r16,r16,zero
   1958c:	1906703a 	and	r3,r3,r4
   19590:	010007c4 	movi	r4,31
   19594:	80c6b03a 	or	r3,r16,r3
   19598:	2085c83a 	sub	r2,r4,r2
   1959c:	d809883a 	mov	r4,sp
   195a0:	d8c00315 	stw	r3,12(sp)
   195a4:	d8000415 	stw	zero,16(sp)
   195a8:	d8800215 	stw	r2,8(sp)
   195ac:	00197ac0 	call	197ac <__pack_d>
   195b0:	dfc00617 	ldw	ra,24(sp)
   195b4:	dc000517 	ldw	r16,20(sp)
   195b8:	dec00704 	addi	sp,sp,28
   195bc:	f800283a 	ret
   195c0:	dc000315 	stw	r16,12(sp)
   195c4:	d8000415 	stw	zero,16(sp)
   195c8:	003fd906 	br	19530 <__floatunsidf+0x5c>
   195cc:	800ad07a 	srli	r5,r16,1
   195d0:	010007c4 	movi	r4,31
   195d4:	20c9c83a 	sub	r4,r4,r3
   195d8:	2908d83a 	srl	r4,r5,r4
   195dc:	80e0983a 	sll	r16,r16,r3
   195e0:	003fce06 	br	1951c <__floatunsidf+0x48>
   195e4:	01400044 	movi	r5,1
   195e8:	28ca983a 	sll	r5,r5,r3
   195ec:	003fe206 	br	19578 <__floatunsidf+0xa4>

000195f0 <__muldi3>:
   195f0:	defff604 	addi	sp,sp,-40
   195f4:	dd400515 	stw	r21,20(sp)
   195f8:	dd000415 	stw	r20,16(sp)
   195fc:	257fffcc 	andi	r21,r4,65535
   19600:	353fffcc 	andi	r20,r6,65535
   19604:	dcc00315 	stw	r19,12(sp)
   19608:	3026d43a 	srli	r19,r6,16
   1960c:	dd800615 	stw	r22,24(sp)
   19610:	dc800215 	stw	r18,8(sp)
   19614:	dc400115 	stw	r17,4(sp)
   19618:	2024d43a 	srli	r18,r4,16
   1961c:	2023883a 	mov	r17,r4
   19620:	282d883a 	mov	r22,r5
   19624:	a009883a 	mov	r4,r20
   19628:	a80b883a 	mov	r5,r21
   1962c:	dfc00915 	stw	ra,36(sp)
   19630:	df000815 	stw	fp,32(sp)
   19634:	ddc00715 	stw	r23,28(sp)
   19638:	3839883a 	mov	fp,r7
   1963c:	dc000015 	stw	r16,0(sp)
   19640:	3021883a 	mov	r16,r6
   19644:	00106600 	call	10660 <__mulsi3>
   19648:	a80b883a 	mov	r5,r21
   1964c:	9809883a 	mov	r4,r19
   19650:	102f883a 	mov	r23,r2
   19654:	00106600 	call	10660 <__mulsi3>
   19658:	a009883a 	mov	r4,r20
   1965c:	900b883a 	mov	r5,r18
   19660:	102b883a 	mov	r21,r2
   19664:	00106600 	call	10660 <__mulsi3>
   19668:	9809883a 	mov	r4,r19
   1966c:	900b883a 	mov	r5,r18
   19670:	1029883a 	mov	r20,r2
   19674:	00106600 	call	10660 <__mulsi3>
   19678:	1007883a 	mov	r3,r2
   1967c:	b804d43a 	srli	r2,r23,16
   19680:	a549883a 	add	r4,r20,r21
   19684:	2089883a 	add	r4,r4,r2
   19688:	2500022e 	bgeu	r4,r20,19694 <__muldi3+0xa4>
   1968c:	00800074 	movhi	r2,1
   19690:	1887883a 	add	r3,r3,r2
   19694:	200cd43a 	srli	r6,r4,16
   19698:	2004943a 	slli	r2,r4,16
   1969c:	e00b883a 	mov	r5,fp
   196a0:	8809883a 	mov	r4,r17
   196a4:	bdffffcc 	andi	r23,r23,65535
   196a8:	19a3883a 	add	r17,r3,r6
   196ac:	15ef883a 	add	r23,r2,r23
   196b0:	00106600 	call	10660 <__mulsi3>
   196b4:	8009883a 	mov	r4,r16
   196b8:	b00b883a 	mov	r5,r22
   196bc:	1025883a 	mov	r18,r2
   196c0:	00106600 	call	10660 <__mulsi3>
   196c4:	9085883a 	add	r2,r18,r2
   196c8:	1447883a 	add	r3,r2,r17
   196cc:	b805883a 	mov	r2,r23
   196d0:	dfc00917 	ldw	ra,36(sp)
   196d4:	df000817 	ldw	fp,32(sp)
   196d8:	ddc00717 	ldw	r23,28(sp)
   196dc:	dd800617 	ldw	r22,24(sp)
   196e0:	dd400517 	ldw	r21,20(sp)
   196e4:	dd000417 	ldw	r20,16(sp)
   196e8:	dcc00317 	ldw	r19,12(sp)
   196ec:	dc800217 	ldw	r18,8(sp)
   196f0:	dc400117 	ldw	r17,4(sp)
   196f4:	dc000017 	ldw	r16,0(sp)
   196f8:	dec00a04 	addi	sp,sp,40
   196fc:	f800283a 	ret

00019700 <__clzsi2>:
   19700:	00bfffd4 	movui	r2,65535
   19704:	11000b36 	bltu	r2,r4,19734 <__clzsi2+0x34>
   19708:	00803fc4 	movi	r2,255
   1970c:	11001e2e 	bgeu	r2,r4,19788 <__clzsi2+0x88>
   19710:	00c00204 	movi	r3,8
   19714:	20c8d83a 	srl	r4,r4,r3
   19718:	00c000f4 	movhi	r3,3
   1971c:	18e0c904 	addi	r3,r3,-31964
   19720:	00800604 	movi	r2,24
   19724:	1909883a 	add	r4,r3,r4
   19728:	20c00003 	ldbu	r3,0(r4)
   1972c:	10c5c83a 	sub	r2,r2,r3
   19730:	f800283a 	ret
   19734:	00804034 	movhi	r2,256
   19738:	10bfffc4 	addi	r2,r2,-1
   1973c:	11000936 	bltu	r2,r4,19764 <__clzsi2+0x64>
   19740:	00800404 	movi	r2,16
   19744:	1007883a 	mov	r3,r2
   19748:	20c8d83a 	srl	r4,r4,r3
   1974c:	00c000f4 	movhi	r3,3
   19750:	18e0c904 	addi	r3,r3,-31964
   19754:	1909883a 	add	r4,r3,r4
   19758:	20c00003 	ldbu	r3,0(r4)
   1975c:	10c5c83a 	sub	r2,r2,r3
   19760:	f800283a 	ret
   19764:	00c00604 	movi	r3,24
   19768:	20c8d83a 	srl	r4,r4,r3
   1976c:	00c000f4 	movhi	r3,3
   19770:	18e0c904 	addi	r3,r3,-31964
   19774:	00800204 	movi	r2,8
   19778:	1909883a 	add	r4,r3,r4
   1977c:	20c00003 	ldbu	r3,0(r4)
   19780:	10c5c83a 	sub	r2,r2,r3
   19784:	f800283a 	ret
   19788:	0007883a 	mov	r3,zero
   1978c:	20c8d83a 	srl	r4,r4,r3
   19790:	00c000f4 	movhi	r3,3
   19794:	18e0c904 	addi	r3,r3,-31964
   19798:	00800804 	movi	r2,32
   1979c:	1909883a 	add	r4,r3,r4
   197a0:	20c00003 	ldbu	r3,0(r4)
   197a4:	10c5c83a 	sub	r2,r2,r3
   197a8:	f800283a 	ret

000197ac <__pack_d>:
   197ac:	20800017 	ldw	r2,0(r4)
   197b0:	defff804 	addi	sp,sp,-32
   197b4:	dcc00315 	stw	r19,12(sp)
   197b8:	dc800215 	stw	r18,8(sp)
   197bc:	dfc00715 	stw	ra,28(sp)
   197c0:	dd800615 	stw	r22,24(sp)
   197c4:	dd400515 	stw	r21,20(sp)
   197c8:	dd000415 	stw	r20,16(sp)
   197cc:	dc400115 	stw	r17,4(sp)
   197d0:	dc000015 	stw	r16,0(sp)
   197d4:	04800044 	movi	r18,1
   197d8:	24400317 	ldw	r17,12(r4)
   197dc:	24000417 	ldw	r16,16(r4)
   197e0:	24c00117 	ldw	r19,4(r4)
   197e4:	9080422e 	bgeu	r18,r2,198f0 <__pack_d+0x144>
   197e8:	00c00104 	movi	r3,4
   197ec:	10c03c26 	beq	r2,r3,198e0 <__pack_d+0x134>
   197f0:	00c00084 	movi	r3,2
   197f4:	10c01926 	beq	r2,r3,1985c <__pack_d+0xb0>
   197f8:	8c04b03a 	or	r2,r17,r16
   197fc:	10001726 	beq	r2,zero,1985c <__pack_d+0xb0>
   19800:	21000217 	ldw	r4,8(r4)
   19804:	00bf0084 	movi	r2,-1022
   19808:	20804016 	blt	r4,r2,1990c <__pack_d+0x160>
   1980c:	0080ffc4 	movi	r2,1023
   19810:	11003316 	blt	r2,r4,198e0 <__pack_d+0x134>
   19814:	88803fcc 	andi	r2,r17,255
   19818:	00c02004 	movi	r3,128
   1981c:	10c02926 	beq	r2,r3,198c4 <__pack_d+0x118>
   19820:	88801fc4 	addi	r2,r17,127
   19824:	1463803a 	cmpltu	r17,r2,r17
   19828:	8c21883a 	add	r16,r17,r16
   1982c:	1023883a 	mov	r17,r2
   19830:	00880034 	movhi	r2,8192
   19834:	10bfffc4 	addi	r2,r2,-1
   19838:	14001c36 	bltu	r2,r16,198ac <__pack_d+0x100>
   1983c:	2100ffc4 	addi	r4,r4,1023
   19840:	8006963a 	slli	r3,r16,24
   19844:	8804d23a 	srli	r2,r17,8
   19848:	8020913a 	slli	r16,r16,4
   1984c:	2101ffcc 	andi	r4,r4,2047
   19850:	1884b03a 	or	r2,r3,r2
   19854:	8020d33a 	srli	r16,r16,12
   19858:	00000306 	br	19868 <__pack_d+0xbc>
   1985c:	0009883a 	mov	r4,zero
   19860:	0005883a 	mov	r2,zero
   19864:	0021883a 	mov	r16,zero
   19868:	2008953a 	slli	r4,r4,20
   1986c:	982697fa 	slli	r19,r19,31
   19870:	00c00434 	movhi	r3,16
   19874:	18ffffc4 	addi	r3,r3,-1
   19878:	80e0703a 	and	r16,r16,r3
   1987c:	8106b03a 	or	r3,r16,r4
   19880:	1cc6b03a 	or	r3,r3,r19
   19884:	dfc00717 	ldw	ra,28(sp)
   19888:	dd800617 	ldw	r22,24(sp)
   1988c:	dd400517 	ldw	r21,20(sp)
   19890:	dd000417 	ldw	r20,16(sp)
   19894:	dcc00317 	ldw	r19,12(sp)
   19898:	dc800217 	ldw	r18,8(sp)
   1989c:	dc400117 	ldw	r17,4(sp)
   198a0:	dc000017 	ldw	r16,0(sp)
   198a4:	dec00804 	addi	sp,sp,32
   198a8:	f800283a 	ret
   198ac:	800697fa 	slli	r3,r16,31
   198b0:	8804d07a 	srli	r2,r17,1
   198b4:	21010004 	addi	r4,r4,1024
   198b8:	8020d07a 	srli	r16,r16,1
   198bc:	18a2b03a 	or	r17,r3,r2
   198c0:	003fdf06 	br	19840 <__pack_d+0x94>
   198c4:	88c0400c 	andi	r3,r17,256
   198c8:	183fd926 	beq	r3,zero,19830 <__pack_d+0x84>
   198cc:	8885883a 	add	r2,r17,r2
   198d0:	1463803a 	cmpltu	r17,r2,r17
   198d4:	8c21883a 	add	r16,r17,r16
   198d8:	1023883a 	mov	r17,r2
   198dc:	003fd406 	br	19830 <__pack_d+0x84>
   198e0:	0101ffc4 	movi	r4,2047
   198e4:	0005883a 	mov	r2,zero
   198e8:	0021883a 	mov	r16,zero
   198ec:	003fde06 	br	19868 <__pack_d+0xbc>
   198f0:	84000234 	orhi	r16,r16,8
   198f4:	00c00434 	movhi	r3,16
   198f8:	18ffffc4 	addi	r3,r3,-1
   198fc:	8805883a 	mov	r2,r17
   19900:	80e0703a 	and	r16,r16,r3
   19904:	0101ffc4 	movi	r4,2047
   19908:	003fd706 	br	19868 <__pack_d+0xbc>
   1990c:	1129c83a 	sub	r20,r2,r4
   19910:	00800e04 	movi	r2,56
   19914:	15002716 	blt	r2,r20,199b4 <__pack_d+0x208>
   19918:	800b883a 	mov	r5,r16
   1991c:	a00d883a 	mov	r6,r20
   19920:	8809883a 	mov	r4,r17
   19924:	0019ba40 	call	19ba4 <__lshrdi3>
   19928:	9009883a 	mov	r4,r18
   1992c:	000b883a 	mov	r5,zero
   19930:	a00d883a 	mov	r6,r20
   19934:	102d883a 	mov	r22,r2
   19938:	182b883a 	mov	r21,r3
   1993c:	0019be80 	call	19be8 <__ashldi3>
   19940:	1009003a 	cmpeq	r4,r2,zero
   19944:	1907c83a 	sub	r3,r3,r4
   19948:	10bfffc4 	addi	r2,r2,-1
   1994c:	1c20703a 	and	r16,r3,r16
   19950:	1444703a 	and	r2,r2,r17
   19954:	1404b03a 	or	r2,r2,r16
   19958:	1004c03a 	cmpne	r2,r2,zero
   1995c:	1584b03a 	or	r2,r2,r22
   19960:	11003fcc 	andi	r4,r2,255
   19964:	01402004 	movi	r5,128
   19968:	a807883a 	mov	r3,r21
   1996c:	2140131e 	bne	r4,r5,199bc <__pack_d+0x210>
   19970:	1140400c 	andi	r5,r2,256
   19974:	28000426 	beq	r5,zero,19988 <__pack_d+0x1dc>
   19978:	1109883a 	add	r4,r2,r4
   1997c:	2085803a 	cmpltu	r2,r4,r2
   19980:	1547883a 	add	r3,r2,r21
   19984:	2005883a 	mov	r2,r4
   19988:	1808963a 	slli	r4,r3,24
   1998c:	1004d23a 	srli	r2,r2,8
   19990:	1820913a 	slli	r16,r3,4
   19994:	01440034 	movhi	r5,4096
   19998:	297fffc4 	addi	r5,r5,-1
   1999c:	2084b03a 	or	r2,r4,r2
   199a0:	8020d33a 	srli	r16,r16,12
   199a4:	01000044 	movi	r4,1
   199a8:	28ffaf36 	bltu	r5,r3,19868 <__pack_d+0xbc>
   199ac:	0009883a 	mov	r4,zero
   199b0:	003fad06 	br	19868 <__pack_d+0xbc>
   199b4:	0005883a 	mov	r2,zero
   199b8:	0007883a 	mov	r3,zero
   199bc:	11001fc4 	addi	r4,r2,127
   199c0:	2085803a 	cmpltu	r2,r4,r2
   199c4:	10c7883a 	add	r3,r2,r3
   199c8:	2005883a 	mov	r2,r4
   199cc:	003fee06 	br	19988 <__pack_d+0x1dc>

000199d0 <__unpack_d>:
   199d0:	21800117 	ldw	r6,4(r4)
   199d4:	20c00017 	ldw	r3,0(r4)
   199d8:	3004d7fa 	srli	r2,r6,31
   199dc:	3008d53a 	srli	r4,r6,20
   199e0:	28800115 	stw	r2,4(r5)
   199e4:	2101ffcc 	andi	r4,r4,2047
   199e8:	00800434 	movhi	r2,16
   199ec:	10bfffc4 	addi	r2,r2,-1
   199f0:	3084703a 	and	r2,r6,r2
   199f4:	20001a1e 	bne	r4,zero,19a60 <__unpack_d+0x90>
   199f8:	1888b03a 	or	r4,r3,r2
   199fc:	20002626 	beq	r4,zero,19a98 <__unpack_d+0xc8>
   19a00:	1808d63a 	srli	r4,r3,24
   19a04:	1004923a 	slli	r2,r2,8
   19a08:	01bf0084 	movi	r6,-1022
   19a0c:	29800215 	stw	r6,8(r5)
   19a10:	2084b03a 	or	r2,r4,r2
   19a14:	010000c4 	movi	r4,3
   19a18:	29000015 	stw	r4,0(r5)
   19a1c:	02040034 	movhi	r8,4096
   19a20:	423fffc4 	addi	r8,r8,-1
   19a24:	1806923a 	slli	r3,r3,8
   19a28:	40801836 	bltu	r8,r2,19a8c <__unpack_d+0xbc>
   19a2c:	013f0044 	movi	r4,-1023
   19a30:	18cd883a 	add	r6,r3,r3
   19a34:	30c7803a 	cmpltu	r3,r6,r3
   19a38:	1085883a 	add	r2,r2,r2
   19a3c:	1885883a 	add	r2,r3,r2
   19a40:	200f883a 	mov	r7,r4
   19a44:	3007883a 	mov	r3,r6
   19a48:	213fffc4 	addi	r4,r4,-1
   19a4c:	40bff82e 	bgeu	r8,r2,19a30 <__unpack_d+0x60>
   19a50:	29c00215 	stw	r7,8(r5)
   19a54:	28c00315 	stw	r3,12(r5)
   19a58:	28800415 	stw	r2,16(r5)
   19a5c:	f800283a 	ret
   19a60:	01c1ffc4 	movi	r7,2047
   19a64:	21c00f26 	beq	r4,r7,19aa4 <__unpack_d+0xd4>
   19a68:	180cd63a 	srli	r6,r3,24
   19a6c:	1004923a 	slli	r2,r2,8
   19a70:	213f0044 	addi	r4,r4,-1023
   19a74:	1806923a 	slli	r3,r3,8
   19a78:	3084b03a 	or	r2,r6,r2
   19a7c:	29000215 	stw	r4,8(r5)
   19a80:	010000c4 	movi	r4,3
   19a84:	10840034 	orhi	r2,r2,4096
   19a88:	29000015 	stw	r4,0(r5)
   19a8c:	28c00315 	stw	r3,12(r5)
   19a90:	28800415 	stw	r2,16(r5)
   19a94:	f800283a 	ret
   19a98:	00800084 	movi	r2,2
   19a9c:	28800015 	stw	r2,0(r5)
   19aa0:	f800283a 	ret
   19aa4:	1888b03a 	or	r4,r3,r2
   19aa8:	20000526 	beq	r4,zero,19ac0 <__unpack_d+0xf0>
   19aac:	3180022c 	andhi	r6,r6,8
   19ab0:	30000626 	beq	r6,zero,19acc <__unpack_d+0xfc>
   19ab4:	01000044 	movi	r4,1
   19ab8:	29000015 	stw	r4,0(r5)
   19abc:	003ff306 	br	19a8c <__unpack_d+0xbc>
   19ac0:	00800104 	movi	r2,4
   19ac4:	28800015 	stw	r2,0(r5)
   19ac8:	f800283a 	ret
   19acc:	28000015 	stw	zero,0(r5)
   19ad0:	003fee06 	br	19a8c <__unpack_d+0xbc>

00019ad4 <__fpcmp_parts_d>:
   19ad4:	20c00017 	ldw	r3,0(r4)
   19ad8:	00800044 	movi	r2,1
   19adc:	10c0142e 	bgeu	r2,r3,19b30 <__fpcmp_parts_d+0x5c>
   19ae0:	29800017 	ldw	r6,0(r5)
   19ae4:	1180122e 	bgeu	r2,r6,19b30 <__fpcmp_parts_d+0x5c>
   19ae8:	01c00104 	movi	r7,4
   19aec:	19c02826 	beq	r3,r7,19b90 <__fpcmp_parts_d+0xbc>
   19af0:	31c00926 	beq	r6,r7,19b18 <__fpcmp_parts_d+0x44>
   19af4:	01c00084 	movi	r7,2
   19af8:	19c00626 	beq	r3,r7,19b14 <__fpcmp_parts_d+0x40>
   19afc:	31c00a26 	beq	r6,r7,19b28 <__fpcmp_parts_d+0x54>
   19b00:	20c00117 	ldw	r3,4(r4)
   19b04:	29800117 	ldw	r6,4(r5)
   19b08:	19800b26 	beq	r3,r6,19b38 <__fpcmp_parts_d+0x64>
   19b0c:	1800041e 	bne	r3,zero,19b20 <__fpcmp_parts_d+0x4c>
   19b10:	f800283a 	ret
   19b14:	30c01a26 	beq	r6,r3,19b80 <__fpcmp_parts_d+0xac>
   19b18:	28800117 	ldw	r2,4(r5)
   19b1c:	1000041e 	bne	r2,zero,19b30 <__fpcmp_parts_d+0x5c>
   19b20:	00bfffc4 	movi	r2,-1
   19b24:	f800283a 	ret
   19b28:	20800117 	ldw	r2,4(r4)
   19b2c:	103ffc1e 	bne	r2,zero,19b20 <__fpcmp_parts_d+0x4c>
   19b30:	00800044 	movi	r2,1
   19b34:	f800283a 	ret
   19b38:	21c00217 	ldw	r7,8(r4)
   19b3c:	29800217 	ldw	r6,8(r5)
   19b40:	31c0020e 	bge	r6,r7,19b4c <__fpcmp_parts_d+0x78>
   19b44:	183ff61e 	bne	r3,zero,19b20 <__fpcmp_parts_d+0x4c>
   19b48:	f800283a 	ret
   19b4c:	39800a16 	blt	r7,r6,19b78 <__fpcmp_parts_d+0xa4>
   19b50:	20800417 	ldw	r2,16(r4)
   19b54:	29800417 	ldw	r6,16(r5)
   19b58:	21c00317 	ldw	r7,12(r4)
   19b5c:	29000317 	ldw	r4,12(r5)
   19b60:	30800936 	bltu	r6,r2,19b88 <__fpcmp_parts_d+0xb4>
   19b64:	1180011e 	bne	r2,r6,19b6c <__fpcmp_parts_d+0x98>
   19b68:	21c00736 	bltu	r4,r7,19b88 <__fpcmp_parts_d+0xb4>
   19b6c:	11800236 	bltu	r2,r6,19b78 <__fpcmp_parts_d+0xa4>
   19b70:	3080031e 	bne	r6,r2,19b80 <__fpcmp_parts_d+0xac>
   19b74:	3900022e 	bgeu	r7,r4,19b80 <__fpcmp_parts_d+0xac>
   19b78:	183fe926 	beq	r3,zero,19b20 <__fpcmp_parts_d+0x4c>
   19b7c:	003fec06 	br	19b30 <__fpcmp_parts_d+0x5c>
   19b80:	0005883a 	mov	r2,zero
   19b84:	f800283a 	ret
   19b88:	183fe926 	beq	r3,zero,19b30 <__fpcmp_parts_d+0x5c>
   19b8c:	003fe406 	br	19b20 <__fpcmp_parts_d+0x4c>
   19b90:	30ffe51e 	bne	r6,r3,19b28 <__fpcmp_parts_d+0x54>
   19b94:	28c00117 	ldw	r3,4(r5)
   19b98:	20800117 	ldw	r2,4(r4)
   19b9c:	1885c83a 	sub	r2,r3,r2
   19ba0:	f800283a 	ret

00019ba4 <__lshrdi3>:
   19ba4:	2005883a 	mov	r2,r4
   19ba8:	2807883a 	mov	r3,r5
   19bac:	30000826 	beq	r6,zero,19bd0 <__lshrdi3+0x2c>
   19bb0:	01000804 	movi	r4,32
   19bb4:	2189c83a 	sub	r4,r4,r6
   19bb8:	0100060e 	bge	zero,r4,19bd4 <__lshrdi3+0x30>
   19bbc:	1184d83a 	srl	r2,r2,r6
   19bc0:	2908983a 	sll	r4,r5,r4
   19bc4:	298cd83a 	srl	r6,r5,r6
   19bc8:	2084b03a 	or	r2,r4,r2
   19bcc:	3007883a 	mov	r3,r6
   19bd0:	f800283a 	ret
   19bd4:	0105c83a 	sub	r2,zero,r4
   19bd8:	000d883a 	mov	r6,zero
   19bdc:	2884d83a 	srl	r2,r5,r2
   19be0:	3007883a 	mov	r3,r6
   19be4:	003ffa06 	br	19bd0 <__lshrdi3+0x2c>

00019be8 <__ashldi3>:
   19be8:	2005883a 	mov	r2,r4
   19bec:	2807883a 	mov	r3,r5
   19bf0:	30000826 	beq	r6,zero,19c14 <__ashldi3+0x2c>
   19bf4:	01000804 	movi	r4,32
   19bf8:	2189c83a 	sub	r4,r4,r6
   19bfc:	0100060e 	bge	zero,r4,19c18 <__ashldi3+0x30>
   19c00:	1108d83a 	srl	r4,r2,r4
   19c04:	2986983a 	sll	r3,r5,r6
   19c08:	118c983a 	sll	r6,r2,r6
   19c0c:	20c6b03a 	or	r3,r4,r3
   19c10:	3005883a 	mov	r2,r6
   19c14:	f800283a 	ret
   19c18:	0107c83a 	sub	r3,zero,r4
   19c1c:	000d883a 	mov	r6,zero
   19c20:	10c6983a 	sll	r3,r2,r3
   19c24:	3005883a 	mov	r2,r6
   19c28:	003ffa06 	br	19c14 <__ashldi3+0x2c>

00019c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19c2c:	defffe04 	addi	sp,sp,-8
   19c30:	dfc00115 	stw	ra,4(sp)
   19c34:	df000015 	stw	fp,0(sp)
   19c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19c3c:	008000f4 	movhi	r2,3
   19c40:	10a7a704 	addi	r2,r2,-24932
   19c44:	10800017 	ldw	r2,0(r2)
   19c48:	10000526 	beq	r2,zero,19c60 <alt_get_errno+0x34>
   19c4c:	008000f4 	movhi	r2,3
   19c50:	10a7a704 	addi	r2,r2,-24932
   19c54:	10800017 	ldw	r2,0(r2)
   19c58:	103ee83a 	callr	r2
   19c5c:	00000206 	br	19c68 <alt_get_errno+0x3c>
   19c60:	008000f4 	movhi	r2,3
   19c64:	10a7b704 	addi	r2,r2,-24868
}
   19c68:	e037883a 	mov	sp,fp
   19c6c:	dfc00117 	ldw	ra,4(sp)
   19c70:	df000017 	ldw	fp,0(sp)
   19c74:	dec00204 	addi	sp,sp,8
   19c78:	f800283a 	ret

00019c7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19c7c:	defffb04 	addi	sp,sp,-20
   19c80:	dfc00415 	stw	ra,16(sp)
   19c84:	df000315 	stw	fp,12(sp)
   19c88:	df000304 	addi	fp,sp,12
   19c8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19c90:	e0bfff17 	ldw	r2,-4(fp)
   19c94:	10000716 	blt	r2,zero,19cb4 <close+0x38>
   19c98:	e13fff17 	ldw	r4,-4(fp)
   19c9c:	01400304 	movi	r5,12
   19ca0:	00106600 	call	10660 <__mulsi3>
   19ca4:	00c000f4 	movhi	r3,3
   19ca8:	18e32504 	addi	r3,r3,-29548
   19cac:	10c5883a 	add	r2,r2,r3
   19cb0:	00000106 	br	19cb8 <close+0x3c>
   19cb4:	0005883a 	mov	r2,zero
   19cb8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   19cbc:	e0bffd17 	ldw	r2,-12(fp)
   19cc0:	10001826 	beq	r2,zero,19d24 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19cc4:	e0bffd17 	ldw	r2,-12(fp)
   19cc8:	10800017 	ldw	r2,0(r2)
   19ccc:	10800417 	ldw	r2,16(r2)
   19cd0:	10000626 	beq	r2,zero,19cec <close+0x70>
   19cd4:	e0bffd17 	ldw	r2,-12(fp)
   19cd8:	10800017 	ldw	r2,0(r2)
   19cdc:	10800417 	ldw	r2,16(r2)
   19ce0:	e13ffd17 	ldw	r4,-12(fp)
   19ce4:	103ee83a 	callr	r2
   19ce8:	00000106 	br	19cf0 <close+0x74>
   19cec:	0005883a 	mov	r2,zero
   19cf0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19cf4:	e13fff17 	ldw	r4,-4(fp)
   19cf8:	001a3740 	call	1a374 <alt_release_fd>
    if (rval < 0)
   19cfc:	e0bffe17 	ldw	r2,-8(fp)
   19d00:	1000060e 	bge	r2,zero,19d1c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   19d04:	0019c2c0 	call	19c2c <alt_get_errno>
   19d08:	e0fffe17 	ldw	r3,-8(fp)
   19d0c:	00c7c83a 	sub	r3,zero,r3
   19d10:	10c00015 	stw	r3,0(r2)
      return -1;
   19d14:	00bfffc4 	movi	r2,-1
   19d18:	00000606 	br	19d34 <close+0xb8>
    }
    return 0;
   19d1c:	0005883a 	mov	r2,zero
   19d20:	00000406 	br	19d34 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19d24:	0019c2c0 	call	19c2c <alt_get_errno>
   19d28:	00c01444 	movi	r3,81
   19d2c:	10c00015 	stw	r3,0(r2)
    return -1;
   19d30:	00bfffc4 	movi	r2,-1
  }
}
   19d34:	e037883a 	mov	sp,fp
   19d38:	dfc00117 	ldw	ra,4(sp)
   19d3c:	df000017 	ldw	fp,0(sp)
   19d40:	dec00204 	addi	sp,sp,8
   19d44:	f800283a 	ret

00019d48 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19d48:	defffc04 	addi	sp,sp,-16
   19d4c:	df000315 	stw	fp,12(sp)
   19d50:	df000304 	addi	fp,sp,12
   19d54:	e13ffd15 	stw	r4,-12(fp)
   19d58:	e17ffe15 	stw	r5,-8(fp)
   19d5c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19d60:	e0bfff17 	ldw	r2,-4(fp)
}
   19d64:	e037883a 	mov	sp,fp
   19d68:	df000017 	ldw	fp,0(sp)
   19d6c:	dec00104 	addi	sp,sp,4
   19d70:	f800283a 	ret

00019d74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19d74:	defffe04 	addi	sp,sp,-8
   19d78:	dfc00115 	stw	ra,4(sp)
   19d7c:	df000015 	stw	fp,0(sp)
   19d80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19d84:	008000f4 	movhi	r2,3
   19d88:	10a7a704 	addi	r2,r2,-24932
   19d8c:	10800017 	ldw	r2,0(r2)
   19d90:	10000526 	beq	r2,zero,19da8 <alt_get_errno+0x34>
   19d94:	008000f4 	movhi	r2,3
   19d98:	10a7a704 	addi	r2,r2,-24932
   19d9c:	10800017 	ldw	r2,0(r2)
   19da0:	103ee83a 	callr	r2
   19da4:	00000206 	br	19db0 <alt_get_errno+0x3c>
   19da8:	008000f4 	movhi	r2,3
   19dac:	10a7b704 	addi	r2,r2,-24868
}
   19db0:	e037883a 	mov	sp,fp
   19db4:	dfc00117 	ldw	ra,4(sp)
   19db8:	df000017 	ldw	fp,0(sp)
   19dbc:	dec00204 	addi	sp,sp,8
   19dc0:	f800283a 	ret

00019dc4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19dc4:	defffb04 	addi	sp,sp,-20
   19dc8:	dfc00415 	stw	ra,16(sp)
   19dcc:	df000315 	stw	fp,12(sp)
   19dd0:	df000304 	addi	fp,sp,12
   19dd4:	e13ffe15 	stw	r4,-8(fp)
   19dd8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19ddc:	e0bffe17 	ldw	r2,-8(fp)
   19de0:	10000716 	blt	r2,zero,19e00 <fstat+0x3c>
   19de4:	e13ffe17 	ldw	r4,-8(fp)
   19de8:	01400304 	movi	r5,12
   19dec:	00106600 	call	10660 <__mulsi3>
   19df0:	00c000f4 	movhi	r3,3
   19df4:	18e32504 	addi	r3,r3,-29548
   19df8:	10c5883a 	add	r2,r2,r3
   19dfc:	00000106 	br	19e04 <fstat+0x40>
   19e00:	0005883a 	mov	r2,zero
   19e04:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   19e08:	e0bffd17 	ldw	r2,-12(fp)
   19e0c:	10001026 	beq	r2,zero,19e50 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   19e10:	e0bffd17 	ldw	r2,-12(fp)
   19e14:	10800017 	ldw	r2,0(r2)
   19e18:	10800817 	ldw	r2,32(r2)
   19e1c:	10000726 	beq	r2,zero,19e3c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   19e20:	e0bffd17 	ldw	r2,-12(fp)
   19e24:	10800017 	ldw	r2,0(r2)
   19e28:	10800817 	ldw	r2,32(r2)
   19e2c:	e13ffd17 	ldw	r4,-12(fp)
   19e30:	e17fff17 	ldw	r5,-4(fp)
   19e34:	103ee83a 	callr	r2
   19e38:	00000906 	br	19e60 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19e3c:	e0bfff17 	ldw	r2,-4(fp)
   19e40:	00c80004 	movi	r3,8192
   19e44:	10c00115 	stw	r3,4(r2)
      return 0;
   19e48:	0005883a 	mov	r2,zero
   19e4c:	00000406 	br	19e60 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19e50:	0019d740 	call	19d74 <alt_get_errno>
   19e54:	00c01444 	movi	r3,81
   19e58:	10c00015 	stw	r3,0(r2)
    return -1;
   19e5c:	00bfffc4 	movi	r2,-1
  }
}
   19e60:	e037883a 	mov	sp,fp
   19e64:	dfc00117 	ldw	ra,4(sp)
   19e68:	df000017 	ldw	fp,0(sp)
   19e6c:	dec00204 	addi	sp,sp,8
   19e70:	f800283a 	ret

00019e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19e74:	defffe04 	addi	sp,sp,-8
   19e78:	dfc00115 	stw	ra,4(sp)
   19e7c:	df000015 	stw	fp,0(sp)
   19e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19e84:	008000f4 	movhi	r2,3
   19e88:	10a7a704 	addi	r2,r2,-24932
   19e8c:	10800017 	ldw	r2,0(r2)
   19e90:	10000526 	beq	r2,zero,19ea8 <alt_get_errno+0x34>
   19e94:	008000f4 	movhi	r2,3
   19e98:	10a7a704 	addi	r2,r2,-24932
   19e9c:	10800017 	ldw	r2,0(r2)
   19ea0:	103ee83a 	callr	r2
   19ea4:	00000206 	br	19eb0 <alt_get_errno+0x3c>
   19ea8:	008000f4 	movhi	r2,3
   19eac:	10a7b704 	addi	r2,r2,-24868
}
   19eb0:	e037883a 	mov	sp,fp
   19eb4:	dfc00117 	ldw	ra,4(sp)
   19eb8:	df000017 	ldw	fp,0(sp)
   19ebc:	dec00204 	addi	sp,sp,8
   19ec0:	f800283a 	ret

00019ec4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   19ec4:	deffed04 	addi	sp,sp,-76
   19ec8:	dfc01215 	stw	ra,72(sp)
   19ecc:	df001115 	stw	fp,68(sp)
   19ed0:	df001104 	addi	fp,sp,68
   19ed4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19ed8:	e0bfff17 	ldw	r2,-4(fp)
   19edc:	10000716 	blt	r2,zero,19efc <isatty+0x38>
   19ee0:	e13fff17 	ldw	r4,-4(fp)
   19ee4:	01400304 	movi	r5,12
   19ee8:	00106600 	call	10660 <__mulsi3>
   19eec:	00c000f4 	movhi	r3,3
   19ef0:	18e32504 	addi	r3,r3,-29548
   19ef4:	10c5883a 	add	r2,r2,r3
   19ef8:	00000106 	br	19f00 <isatty+0x3c>
   19efc:	0005883a 	mov	r2,zero
   19f00:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   19f04:	e0bfef17 	ldw	r2,-68(fp)
   19f08:	10000e26 	beq	r2,zero,19f44 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   19f0c:	e0bfef17 	ldw	r2,-68(fp)
   19f10:	10800017 	ldw	r2,0(r2)
   19f14:	10800817 	ldw	r2,32(r2)
   19f18:	1000021e 	bne	r2,zero,19f24 <isatty+0x60>
    {
      return 1;
   19f1c:	00800044 	movi	r2,1
   19f20:	00000c06 	br	19f54 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   19f24:	e0bff004 	addi	r2,fp,-64
   19f28:	e13fff17 	ldw	r4,-4(fp)
   19f2c:	100b883a 	mov	r5,r2
   19f30:	0019dc40 	call	19dc4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   19f34:	e0bff117 	ldw	r2,-60(fp)
   19f38:	10880020 	cmpeqi	r2,r2,8192
   19f3c:	10803fcc 	andi	r2,r2,255
   19f40:	00000406 	br	19f54 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19f44:	0019e740 	call	19e74 <alt_get_errno>
   19f48:	00c01444 	movi	r3,81
   19f4c:	10c00015 	stw	r3,0(r2)
    return 0;
   19f50:	0005883a 	mov	r2,zero
  }
}
   19f54:	e037883a 	mov	sp,fp
   19f58:	dfc00117 	ldw	ra,4(sp)
   19f5c:	df000017 	ldw	fp,0(sp)
   19f60:	dec00204 	addi	sp,sp,8
   19f64:	f800283a 	ret

00019f68 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   19f68:	defffc04 	addi	sp,sp,-16
   19f6c:	df000315 	stw	fp,12(sp)
   19f70:	df000304 	addi	fp,sp,12
   19f74:	e13ffd15 	stw	r4,-12(fp)
   19f78:	e17ffe15 	stw	r5,-8(fp)
   19f7c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   19f80:	e0fffe17 	ldw	r3,-8(fp)
   19f84:	e0bffd17 	ldw	r2,-12(fp)
   19f88:	18800e26 	beq	r3,r2,19fc4 <alt_load_section+0x5c>
  {
    while( to != end )
   19f8c:	00000a06 	br	19fb8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   19f90:	e0bffd17 	ldw	r2,-12(fp)
   19f94:	10c00017 	ldw	r3,0(r2)
   19f98:	e0bffe17 	ldw	r2,-8(fp)
   19f9c:	10c00015 	stw	r3,0(r2)
   19fa0:	e0bffe17 	ldw	r2,-8(fp)
   19fa4:	10800104 	addi	r2,r2,4
   19fa8:	e0bffe15 	stw	r2,-8(fp)
   19fac:	e0bffd17 	ldw	r2,-12(fp)
   19fb0:	10800104 	addi	r2,r2,4
   19fb4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   19fb8:	e0fffe17 	ldw	r3,-8(fp)
   19fbc:	e0bfff17 	ldw	r2,-4(fp)
   19fc0:	18bff31e 	bne	r3,r2,19f90 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   19fc4:	e037883a 	mov	sp,fp
   19fc8:	df000017 	ldw	fp,0(sp)
   19fcc:	dec00104 	addi	sp,sp,4
   19fd0:	f800283a 	ret

00019fd4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   19fd4:	defffe04 	addi	sp,sp,-8
   19fd8:	dfc00115 	stw	ra,4(sp)
   19fdc:	df000015 	stw	fp,0(sp)
   19fe0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   19fe4:	010000b4 	movhi	r4,2
   19fe8:	2132b904 	addi	r4,r4,-13596
   19fec:	014000f4 	movhi	r5,3
   19ff0:	29611604 	addi	r5,r5,-31656
   19ff4:	018000f4 	movhi	r6,3
   19ff8:	31a7ac04 	addi	r6,r6,-24912
   19ffc:	0019f680 	call	19f68 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a000:	01000074 	movhi	r4,1
   1a004:	21000804 	addi	r4,r4,32
   1a008:	01400074 	movhi	r5,1
   1a00c:	29400804 	addi	r5,r5,32
   1a010:	01800074 	movhi	r6,1
   1a014:	31806e04 	addi	r6,r6,440
   1a018:	0019f680 	call	19f68 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a01c:	010000f4 	movhi	r4,3
   1a020:	21200004 	addi	r4,r4,-32768
   1a024:	014000f4 	movhi	r5,3
   1a028:	29600004 	addi	r5,r5,-32768
   1a02c:	018000f4 	movhi	r6,3
   1a030:	31a11604 	addi	r6,r6,-31656
   1a034:	0019f680 	call	19f68 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a038:	001b9a40 	call	1b9a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a03c:	001bb680 	call	1bb68 <alt_icache_flush_all>
}
   1a040:	e037883a 	mov	sp,fp
   1a044:	dfc00117 	ldw	ra,4(sp)
   1a048:	df000017 	ldw	fp,0(sp)
   1a04c:	dec00204 	addi	sp,sp,8
   1a050:	f800283a 	ret

0001a054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a054:	defffe04 	addi	sp,sp,-8
   1a058:	dfc00115 	stw	ra,4(sp)
   1a05c:	df000015 	stw	fp,0(sp)
   1a060:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a064:	008000f4 	movhi	r2,3
   1a068:	10a7a704 	addi	r2,r2,-24932
   1a06c:	10800017 	ldw	r2,0(r2)
   1a070:	10000526 	beq	r2,zero,1a088 <alt_get_errno+0x34>
   1a074:	008000f4 	movhi	r2,3
   1a078:	10a7a704 	addi	r2,r2,-24932
   1a07c:	10800017 	ldw	r2,0(r2)
   1a080:	103ee83a 	callr	r2
   1a084:	00000206 	br	1a090 <alt_get_errno+0x3c>
   1a088:	008000f4 	movhi	r2,3
   1a08c:	10a7b704 	addi	r2,r2,-24868
}
   1a090:	e037883a 	mov	sp,fp
   1a094:	dfc00117 	ldw	ra,4(sp)
   1a098:	df000017 	ldw	fp,0(sp)
   1a09c:	dec00204 	addi	sp,sp,8
   1a0a0:	f800283a 	ret

0001a0a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a0a4:	defff904 	addi	sp,sp,-28
   1a0a8:	dfc00615 	stw	ra,24(sp)
   1a0ac:	df000515 	stw	fp,20(sp)
   1a0b0:	df000504 	addi	fp,sp,20
   1a0b4:	e13ffd15 	stw	r4,-12(fp)
   1a0b8:	e17ffe15 	stw	r5,-8(fp)
   1a0bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a0c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a0c4:	e0bffd17 	ldw	r2,-12(fp)
   1a0c8:	10000716 	blt	r2,zero,1a0e8 <lseek+0x44>
   1a0cc:	e13ffd17 	ldw	r4,-12(fp)
   1a0d0:	01400304 	movi	r5,12
   1a0d4:	00106600 	call	10660 <__mulsi3>
   1a0d8:	00c000f4 	movhi	r3,3
   1a0dc:	18e32504 	addi	r3,r3,-29548
   1a0e0:	10c5883a 	add	r2,r2,r3
   1a0e4:	00000106 	br	1a0ec <lseek+0x48>
   1a0e8:	0005883a 	mov	r2,zero
   1a0ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1a0f0:	e0bffc17 	ldw	r2,-16(fp)
   1a0f4:	10001026 	beq	r2,zero,1a138 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a0f8:	e0bffc17 	ldw	r2,-16(fp)
   1a0fc:	10800017 	ldw	r2,0(r2)
   1a100:	10800717 	ldw	r2,28(r2)
   1a104:	10000926 	beq	r2,zero,1a12c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a108:	e0bffc17 	ldw	r2,-16(fp)
   1a10c:	10800017 	ldw	r2,0(r2)
   1a110:	10800717 	ldw	r2,28(r2)
   1a114:	e13ffc17 	ldw	r4,-16(fp)
   1a118:	e17ffe17 	ldw	r5,-8(fp)
   1a11c:	e1bfff17 	ldw	r6,-4(fp)
   1a120:	103ee83a 	callr	r2
   1a124:	e0bffb15 	stw	r2,-20(fp)
   1a128:	00000506 	br	1a140 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a12c:	00bfde84 	movi	r2,-134
   1a130:	e0bffb15 	stw	r2,-20(fp)
   1a134:	00000206 	br	1a140 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a138:	00bfebc4 	movi	r2,-81
   1a13c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1a140:	e0bffb17 	ldw	r2,-20(fp)
   1a144:	1000060e 	bge	r2,zero,1a160 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1a148:	001a0540 	call	1a054 <alt_get_errno>
   1a14c:	e0fffb17 	ldw	r3,-20(fp)
   1a150:	00c7c83a 	sub	r3,zero,r3
   1a154:	10c00015 	stw	r3,0(r2)
    rc = -1;
   1a158:	00bfffc4 	movi	r2,-1
   1a15c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1a160:	e0bffb17 	ldw	r2,-20(fp)
}
   1a164:	e037883a 	mov	sp,fp
   1a168:	dfc00117 	ldw	ra,4(sp)
   1a16c:	df000017 	ldw	fp,0(sp)
   1a170:	dec00204 	addi	sp,sp,8
   1a174:	f800283a 	ret

0001a178 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a178:	defffd04 	addi	sp,sp,-12
   1a17c:	dfc00215 	stw	ra,8(sp)
   1a180:	df000115 	stw	fp,4(sp)
   1a184:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a188:	0009883a 	mov	r4,zero
   1a18c:	001a61c0 	call	1a61c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1a190:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a194:	001a6500 	call	1a650 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a198:	010000f4 	movhi	r4,3
   1a19c:	21210c04 	addi	r4,r4,-31696
   1a1a0:	014000f4 	movhi	r5,3
   1a1a4:	29610c04 	addi	r5,r5,-31696
   1a1a8:	018000f4 	movhi	r6,3
   1a1ac:	31a10c04 	addi	r6,r6,-31696
   1a1b0:	001bf400 	call	1bf40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a1b4:	001bab00 	call	1bab0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a1b8:	010000b4 	movhi	r4,2
   1a1bc:	212ec304 	addi	r4,r4,-17652
   1a1c0:	001c7100 	call	1c710 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a1c4:	d1201b17 	ldw	r4,-32660(gp)
   1a1c8:	d0e01c17 	ldw	r3,-32656(gp)
   1a1cc:	d0a01d17 	ldw	r2,-32652(gp)
   1a1d0:	180b883a 	mov	r5,r3
   1a1d4:	100d883a 	mov	r6,r2
   1a1d8:	00103e00 	call	103e0 <main>
   1a1dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a1e0:	01000044 	movi	r4,1
   1a1e4:	0019c7c0 	call	19c7c <close>
  exit (result);
   1a1e8:	e13fff17 	ldw	r4,-4(fp)
   1a1ec:	001c7240 	call	1c724 <exit>

0001a1f0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a1f0:	defffe04 	addi	sp,sp,-8
   1a1f4:	df000115 	stw	fp,4(sp)
   1a1f8:	df000104 	addi	fp,sp,4
   1a1fc:	e13fff15 	stw	r4,-4(fp)
}
   1a200:	e037883a 	mov	sp,fp
   1a204:	df000017 	ldw	fp,0(sp)
   1a208:	dec00104 	addi	sp,sp,4
   1a20c:	f800283a 	ret

0001a210 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a210:	defffe04 	addi	sp,sp,-8
   1a214:	df000115 	stw	fp,4(sp)
   1a218:	df000104 	addi	fp,sp,4
   1a21c:	e13fff15 	stw	r4,-4(fp)
}
   1a220:	e037883a 	mov	sp,fp
   1a224:	df000017 	ldw	fp,0(sp)
   1a228:	dec00104 	addi	sp,sp,4
   1a22c:	f800283a 	ret

0001a230 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a230:	defffe04 	addi	sp,sp,-8
   1a234:	dfc00115 	stw	ra,4(sp)
   1a238:	df000015 	stw	fp,0(sp)
   1a23c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a240:	008000f4 	movhi	r2,3
   1a244:	10a7a704 	addi	r2,r2,-24932
   1a248:	10800017 	ldw	r2,0(r2)
   1a24c:	10000526 	beq	r2,zero,1a264 <alt_get_errno+0x34>
   1a250:	008000f4 	movhi	r2,3
   1a254:	10a7a704 	addi	r2,r2,-24932
   1a258:	10800017 	ldw	r2,0(r2)
   1a25c:	103ee83a 	callr	r2
   1a260:	00000206 	br	1a26c <alt_get_errno+0x3c>
   1a264:	008000f4 	movhi	r2,3
   1a268:	10a7b704 	addi	r2,r2,-24868
}
   1a26c:	e037883a 	mov	sp,fp
   1a270:	dfc00117 	ldw	ra,4(sp)
   1a274:	df000017 	ldw	fp,0(sp)
   1a278:	dec00204 	addi	sp,sp,8
   1a27c:	f800283a 	ret

0001a280 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a280:	defff904 	addi	sp,sp,-28
   1a284:	dfc00615 	stw	ra,24(sp)
   1a288:	df000515 	stw	fp,20(sp)
   1a28c:	df000504 	addi	fp,sp,20
   1a290:	e13ffd15 	stw	r4,-12(fp)
   1a294:	e17ffe15 	stw	r5,-8(fp)
   1a298:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a29c:	e0bffd17 	ldw	r2,-12(fp)
   1a2a0:	10000716 	blt	r2,zero,1a2c0 <read+0x40>
   1a2a4:	e13ffd17 	ldw	r4,-12(fp)
   1a2a8:	01400304 	movi	r5,12
   1a2ac:	00106600 	call	10660 <__mulsi3>
   1a2b0:	00c000f4 	movhi	r3,3
   1a2b4:	18e32504 	addi	r3,r3,-29548
   1a2b8:	10c5883a 	add	r2,r2,r3
   1a2bc:	00000106 	br	1a2c4 <read+0x44>
   1a2c0:	0005883a 	mov	r2,zero
   1a2c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a2c8:	e0bffb17 	ldw	r2,-20(fp)
   1a2cc:	10002026 	beq	r2,zero,1a350 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a2d0:	e0bffb17 	ldw	r2,-20(fp)
   1a2d4:	10800217 	ldw	r2,8(r2)
   1a2d8:	108000cc 	andi	r2,r2,3
   1a2dc:	10800060 	cmpeqi	r2,r2,1
   1a2e0:	1000171e 	bne	r2,zero,1a340 <read+0xc0>
        (fd->dev->read))
   1a2e4:	e0bffb17 	ldw	r2,-20(fp)
   1a2e8:	10800017 	ldw	r2,0(r2)
   1a2ec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a2f0:	10001326 	beq	r2,zero,1a340 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a2f4:	e0bffb17 	ldw	r2,-20(fp)
   1a2f8:	10800017 	ldw	r2,0(r2)
   1a2fc:	10c00517 	ldw	r3,20(r2)
   1a300:	e0bfff17 	ldw	r2,-4(fp)
   1a304:	e13ffb17 	ldw	r4,-20(fp)
   1a308:	e17ffe17 	ldw	r5,-8(fp)
   1a30c:	100d883a 	mov	r6,r2
   1a310:	183ee83a 	callr	r3
   1a314:	e0bffc15 	stw	r2,-16(fp)
   1a318:	e0bffc17 	ldw	r2,-16(fp)
   1a31c:	1000060e 	bge	r2,zero,1a338 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1a320:	001a2300 	call	1a230 <alt_get_errno>
   1a324:	e0fffc17 	ldw	r3,-16(fp)
   1a328:	00c7c83a 	sub	r3,zero,r3
   1a32c:	10c00015 	stw	r3,0(r2)
          return -1;
   1a330:	00bfffc4 	movi	r2,-1
   1a334:	00000a06 	br	1a360 <read+0xe0>
        }
        return rval;
   1a338:	e0bffc17 	ldw	r2,-16(fp)
   1a33c:	00000806 	br	1a360 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a340:	001a2300 	call	1a230 <alt_get_errno>
   1a344:	00c00344 	movi	r3,13
   1a348:	10c00015 	stw	r3,0(r2)
   1a34c:	00000306 	br	1a35c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a350:	001a2300 	call	1a230 <alt_get_errno>
   1a354:	00c01444 	movi	r3,81
   1a358:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a35c:	00bfffc4 	movi	r2,-1
}
   1a360:	e037883a 	mov	sp,fp
   1a364:	dfc00117 	ldw	ra,4(sp)
   1a368:	df000017 	ldw	fp,0(sp)
   1a36c:	dec00204 	addi	sp,sp,8
   1a370:	f800283a 	ret

0001a374 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a374:	defffc04 	addi	sp,sp,-16
   1a378:	dfc00315 	stw	ra,12(sp)
   1a37c:	df000215 	stw	fp,8(sp)
   1a380:	dc000115 	stw	r16,4(sp)
   1a384:	df000104 	addi	fp,sp,4
   1a388:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a38c:	e0bfff17 	ldw	r2,-4(fp)
   1a390:	108000d0 	cmplti	r2,r2,3
   1a394:	1000111e 	bne	r2,zero,1a3dc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a398:	040000f4 	movhi	r16,3
   1a39c:	84232504 	addi	r16,r16,-29548
   1a3a0:	e0bfff17 	ldw	r2,-4(fp)
   1a3a4:	1009883a 	mov	r4,r2
   1a3a8:	01400304 	movi	r5,12
   1a3ac:	00106600 	call	10660 <__mulsi3>
   1a3b0:	8085883a 	add	r2,r16,r2
   1a3b4:	10800204 	addi	r2,r2,8
   1a3b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a3bc:	040000f4 	movhi	r16,3
   1a3c0:	84232504 	addi	r16,r16,-29548
   1a3c4:	e0bfff17 	ldw	r2,-4(fp)
   1a3c8:	1009883a 	mov	r4,r2
   1a3cc:	01400304 	movi	r5,12
   1a3d0:	00106600 	call	10660 <__mulsi3>
   1a3d4:	8085883a 	add	r2,r16,r2
   1a3d8:	10000015 	stw	zero,0(r2)
  }
}
   1a3dc:	e037883a 	mov	sp,fp
   1a3e0:	dfc00217 	ldw	ra,8(sp)
   1a3e4:	df000117 	ldw	fp,4(sp)
   1a3e8:	dc000017 	ldw	r16,0(sp)
   1a3ec:	dec00304 	addi	sp,sp,12
   1a3f0:	f800283a 	ret

0001a3f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a3f4:	defff904 	addi	sp,sp,-28
   1a3f8:	df000615 	stw	fp,24(sp)
   1a3fc:	df000604 	addi	fp,sp,24
   1a400:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a404:	0005303a 	rdctl	r2,status
   1a408:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a40c:	e0fffc17 	ldw	r3,-16(fp)
   1a410:	00bfff84 	movi	r2,-2
   1a414:	1884703a 	and	r2,r3,r2
   1a418:	1001703a 	wrctl	status,r2
  
  return context;
   1a41c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a420:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a424:	d0a00b17 	ldw	r2,-32724(gp)
   1a428:	10c000c4 	addi	r3,r2,3
   1a42c:	00bfff04 	movi	r2,-4
   1a430:	1884703a 	and	r2,r3,r2
   1a434:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a438:	d0e00b17 	ldw	r3,-32724(gp)
   1a43c:	e0bfff17 	ldw	r2,-4(fp)
   1a440:	1885883a 	add	r2,r3,r2
   1a444:	00c000f4 	movhi	r3,3
   1a448:	18c00004 	addi	r3,r3,0
   1a44c:	1880062e 	bgeu	r3,r2,1a468 <sbrk+0x74>
   1a450:	e0bffa17 	ldw	r2,-24(fp)
   1a454:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a458:	e0bffd17 	ldw	r2,-12(fp)
   1a45c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a460:	00bfffc4 	movi	r2,-1
   1a464:	00000b06 	br	1a494 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1a468:	d0a00b17 	ldw	r2,-32724(gp)
   1a46c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1a470:	d0e00b17 	ldw	r3,-32724(gp)
   1a474:	e0bfff17 	ldw	r2,-4(fp)
   1a478:	1885883a 	add	r2,r3,r2
   1a47c:	d0a00b15 	stw	r2,-32724(gp)
   1a480:	e0bffa17 	ldw	r2,-24(fp)
   1a484:	e0bffe15 	stw	r2,-8(fp)
   1a488:	e0bffe17 	ldw	r2,-8(fp)
   1a48c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a490:	e0bffb17 	ldw	r2,-20(fp)
} 
   1a494:	e037883a 	mov	sp,fp
   1a498:	df000017 	ldw	fp,0(sp)
   1a49c:	dec00104 	addi	sp,sp,4
   1a4a0:	f800283a 	ret

0001a4a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a4a4:	defffe04 	addi	sp,sp,-8
   1a4a8:	dfc00115 	stw	ra,4(sp)
   1a4ac:	df000015 	stw	fp,0(sp)
   1a4b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a4b4:	008000f4 	movhi	r2,3
   1a4b8:	10a7a704 	addi	r2,r2,-24932
   1a4bc:	10800017 	ldw	r2,0(r2)
   1a4c0:	10000526 	beq	r2,zero,1a4d8 <alt_get_errno+0x34>
   1a4c4:	008000f4 	movhi	r2,3
   1a4c8:	10a7a704 	addi	r2,r2,-24932
   1a4cc:	10800017 	ldw	r2,0(r2)
   1a4d0:	103ee83a 	callr	r2
   1a4d4:	00000206 	br	1a4e0 <alt_get_errno+0x3c>
   1a4d8:	008000f4 	movhi	r2,3
   1a4dc:	10a7b704 	addi	r2,r2,-24868
}
   1a4e0:	e037883a 	mov	sp,fp
   1a4e4:	dfc00117 	ldw	ra,4(sp)
   1a4e8:	df000017 	ldw	fp,0(sp)
   1a4ec:	dec00204 	addi	sp,sp,8
   1a4f0:	f800283a 	ret

0001a4f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a4f4:	defff904 	addi	sp,sp,-28
   1a4f8:	dfc00615 	stw	ra,24(sp)
   1a4fc:	df000515 	stw	fp,20(sp)
   1a500:	df000504 	addi	fp,sp,20
   1a504:	e13ffd15 	stw	r4,-12(fp)
   1a508:	e17ffe15 	stw	r5,-8(fp)
   1a50c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a510:	e0bffd17 	ldw	r2,-12(fp)
   1a514:	10000716 	blt	r2,zero,1a534 <write+0x40>
   1a518:	e13ffd17 	ldw	r4,-12(fp)
   1a51c:	01400304 	movi	r5,12
   1a520:	00106600 	call	10660 <__mulsi3>
   1a524:	00c000f4 	movhi	r3,3
   1a528:	18e32504 	addi	r3,r3,-29548
   1a52c:	10c5883a 	add	r2,r2,r3
   1a530:	00000106 	br	1a538 <write+0x44>
   1a534:	0005883a 	mov	r2,zero
   1a538:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a53c:	e0bffb17 	ldw	r2,-20(fp)
   1a540:	10001f26 	beq	r2,zero,1a5c0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a544:	e0bffb17 	ldw	r2,-20(fp)
   1a548:	10800217 	ldw	r2,8(r2)
   1a54c:	108000cc 	andi	r2,r2,3
   1a550:	10001726 	beq	r2,zero,1a5b0 <write+0xbc>
   1a554:	e0bffb17 	ldw	r2,-20(fp)
   1a558:	10800017 	ldw	r2,0(r2)
   1a55c:	10800617 	ldw	r2,24(r2)
   1a560:	10001326 	beq	r2,zero,1a5b0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a564:	e0bffb17 	ldw	r2,-20(fp)
   1a568:	10800017 	ldw	r2,0(r2)
   1a56c:	10c00617 	ldw	r3,24(r2)
   1a570:	e0bfff17 	ldw	r2,-4(fp)
   1a574:	e13ffb17 	ldw	r4,-20(fp)
   1a578:	e17ffe17 	ldw	r5,-8(fp)
   1a57c:	100d883a 	mov	r6,r2
   1a580:	183ee83a 	callr	r3
   1a584:	e0bffc15 	stw	r2,-16(fp)
   1a588:	e0bffc17 	ldw	r2,-16(fp)
   1a58c:	1000060e 	bge	r2,zero,1a5a8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1a590:	001a4a40 	call	1a4a4 <alt_get_errno>
   1a594:	e0fffc17 	ldw	r3,-16(fp)
   1a598:	00c7c83a 	sub	r3,zero,r3
   1a59c:	10c00015 	stw	r3,0(r2)
        return -1;
   1a5a0:	00bfffc4 	movi	r2,-1
   1a5a4:	00000a06 	br	1a5d0 <write+0xdc>
      }
      return rval;
   1a5a8:	e0bffc17 	ldw	r2,-16(fp)
   1a5ac:	00000806 	br	1a5d0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a5b0:	001a4a40 	call	1a4a4 <alt_get_errno>
   1a5b4:	00c00344 	movi	r3,13
   1a5b8:	10c00015 	stw	r3,0(r2)
   1a5bc:	00000306 	br	1a5cc <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a5c0:	001a4a40 	call	1a4a4 <alt_get_errno>
   1a5c4:	00c01444 	movi	r3,81
   1a5c8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1a5cc:	00bfffc4 	movi	r2,-1
}
   1a5d0:	e037883a 	mov	sp,fp
   1a5d4:	dfc00117 	ldw	ra,4(sp)
   1a5d8:	df000017 	ldw	fp,0(sp)
   1a5dc:	dec00204 	addi	sp,sp,8
   1a5e0:	f800283a 	ret

0001a5e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a5e4:	defffd04 	addi	sp,sp,-12
   1a5e8:	dfc00215 	stw	ra,8(sp)
   1a5ec:	df000115 	stw	fp,4(sp)
   1a5f0:	df000104 	addi	fp,sp,4
   1a5f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a5f8:	e13fff17 	ldw	r4,-4(fp)
   1a5fc:	014000f4 	movhi	r5,3
   1a600:	2967a404 	addi	r5,r5,-24944
   1a604:	001ba100 	call	1ba10 <alt_dev_llist_insert>
}
   1a608:	e037883a 	mov	sp,fp
   1a60c:	dfc00117 	ldw	ra,4(sp)
   1a610:	df000017 	ldw	fp,0(sp)
   1a614:	dec00204 	addi	sp,sp,8
   1a618:	f800283a 	ret

0001a61c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a61c:	defffd04 	addi	sp,sp,-12
   1a620:	dfc00215 	stw	ra,8(sp)
   1a624:	df000115 	stw	fp,4(sp)
   1a628:	df000104 	addi	fp,sp,4
   1a62c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_1, cpu_1);
   1a630:	001c3ec0 	call	1c3ec <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a634:	00800044 	movi	r2,1
   1a638:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a63c:	e037883a 	mov	sp,fp
   1a640:	dfc00117 	ldw	ra,4(sp)
   1a644:	df000017 	ldw	fp,0(sp)
   1a648:	dec00204 	addi	sp,sp,8
   1a64c:	f800283a 	ret

0001a650 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a650:	defffe04 	addi	sp,sp,-8
   1a654:	dfc00115 	stw	ra,4(sp)
   1a658:	df000015 	stw	fp,0(sp)
   1a65c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGHSCALE_TIMER_1, highscale_timer_1);
   1a660:	008000f4 	movhi	r2,3
   1a664:	10a7bb04 	addi	r2,r2,-24852
   1a668:	10000015 	stw	zero,0(r2)
   1a66c:	008000f4 	movhi	r2,3
   1a670:	10a7bc04 	addi	r2,r2,-24848
   1a674:	00c0bef4 	movhi	r3,763
   1a678:	18fc2004 	addi	r3,r3,-3968
   1a67c:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
   1a680:	010000f4 	movhi	r4,3
   1a684:	21040004 	addi	r4,r4,4096
   1a688:	000b883a 	mov	r5,zero
   1a68c:	01800044 	movi	r6,1
   1a690:	01c0fa04 	movi	r7,1000
   1a694:	001b69c0 	call	1b69c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO, FIFO);
   1a698:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
   1a69c:	010000f4 	movhi	r4,3
   1a6a0:	21238f04 	addi	r4,r4,-29124
   1a6a4:	000b883a 	mov	r5,zero
   1a6a8:	01800404 	movi	r6,16
   1a6ac:	001ad280 	call	1ad28 <altera_avalon_jtag_uart_init>
   1a6b0:	010000f4 	movhi	r4,3
   1a6b4:	21238504 	addi	r4,r4,-29164
   1a6b8:	001a5e40 	call	1a5e4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
   1a6bc:	0001883a 	nop
}
   1a6c0:	e037883a 	mov	sp,fp
   1a6c4:	dfc00117 	ldw	ra,4(sp)
   1a6c8:	df000017 	ldw	fp,0(sp)
   1a6cc:	dec00204 	addi	sp,sp,8
   1a6d0:	f800283a 	ret

0001a6d4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   1a6d4:	defffa04 	addi	sp,sp,-24
   1a6d8:	dfc00515 	stw	ra,20(sp)
   1a6dc:	df000415 	stw	fp,16(sp)
   1a6e0:	df000404 	addi	fp,sp,16
   1a6e4:	e13ffc15 	stw	r4,-16(fp)
   1a6e8:	e17ffd15 	stw	r5,-12(fp)
   1a6ec:	e1bffe15 	stw	r6,-8(fp)
   1a6f0:	e1ffff15 	stw	r7,-4(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   1a6f4:	e13ffc17 	ldw	r4,-16(fp)
   1a6f8:	01400fc4 	movi	r5,63
   1a6fc:	001a8a00 	call	1a8a0 <altera_avalon_fifo_clear_event>
   1a700:	10000226 	beq	r2,zero,1a70c <altera_avalon_fifo_init+0x38>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1a704:	00bfffc4 	movi	r2,-1
   1a708:	00001306 	br	1a758 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   1a70c:	e13ffc17 	ldw	r4,-16(fp)
   1a710:	e17ffd17 	ldw	r5,-12(fp)
   1a714:	001a8fc0 	call	1a8fc <altera_avalon_fifo_write_ienable>
   1a718:	10000226 	beq	r2,zero,1a724 <altera_avalon_fifo_init+0x50>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1a71c:	00bfff84 	movi	r2,-2
   1a720:	00000d06 	br	1a758 <altera_avalon_fifo_init+0x84>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   1a724:	e13ffc17 	ldw	r4,-16(fp)
   1a728:	e17fff17 	ldw	r5,-4(fp)
   1a72c:	001a9540 	call	1a954 <altera_avalon_fifo_write_almostfull>
   1a730:	10000226 	beq	r2,zero,1a73c <altera_avalon_fifo_init+0x68>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a734:	00bfff44 	movi	r2,-3
   1a738:	00000706 	br	1a758 <altera_avalon_fifo_init+0x84>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   1a73c:	e13ffc17 	ldw	r4,-16(fp)
   1a740:	e17ffe17 	ldw	r5,-8(fp)
   1a744:	001a9ac0 	call	1a9ac <altera_avalon_fifo_write_almostempty>
   1a748:	10000226 	beq	r2,zero,1a754 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a74c:	00bfff44 	movi	r2,-3
   1a750:	00000106 	br	1a758 <altera_avalon_fifo_init+0x84>
    }

    return ALTERA_AVALON_FIFO_OK;
   1a754:	0005883a 	mov	r2,zero
}
   1a758:	e037883a 	mov	sp,fp
   1a75c:	dfc00117 	ldw	ra,4(sp)
   1a760:	df000017 	ldw	fp,0(sp)
   1a764:	dec00204 	addi	sp,sp,8
   1a768:	f800283a 	ret

0001a76c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   1a76c:	defffd04 	addi	sp,sp,-12
   1a770:	df000215 	stw	fp,8(sp)
   1a774:	df000204 	addi	fp,sp,8
   1a778:	e13ffe15 	stw	r4,-8(fp)
   1a77c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   1a780:	e0bffe17 	ldw	r2,-8(fp)
   1a784:	10800104 	addi	r2,r2,4
   1a788:	10800037 	ldwio	r2,0(r2)
   1a78c:	1007883a 	mov	r3,r2
   1a790:	e0bfff17 	ldw	r2,-4(fp)
   1a794:	1884703a 	and	r2,r3,r2
}
   1a798:	e037883a 	mov	sp,fp
   1a79c:	df000017 	ldw	fp,0(sp)
   1a7a0:	dec00104 	addi	sp,sp,4
   1a7a4:	f800283a 	ret

0001a7a8 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   1a7a8:	defffd04 	addi	sp,sp,-12
   1a7ac:	df000215 	stw	fp,8(sp)
   1a7b0:	df000204 	addi	fp,sp,8
   1a7b4:	e13ffe15 	stw	r4,-8(fp)
   1a7b8:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   1a7bc:	e0bffe17 	ldw	r2,-8(fp)
   1a7c0:	10800304 	addi	r2,r2,12
   1a7c4:	10800037 	ldwio	r2,0(r2)
   1a7c8:	1007883a 	mov	r3,r2
   1a7cc:	e0bfff17 	ldw	r2,-4(fp)
   1a7d0:	1884703a 	and	r2,r3,r2
}
   1a7d4:	e037883a 	mov	sp,fp
   1a7d8:	df000017 	ldw	fp,0(sp)
   1a7dc:	dec00104 	addi	sp,sp,4
   1a7e0:	f800283a 	ret

0001a7e4 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   1a7e4:	defffe04 	addi	sp,sp,-8
   1a7e8:	df000115 	stw	fp,4(sp)
   1a7ec:	df000104 	addi	fp,sp,4
   1a7f0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   1a7f4:	e0bfff17 	ldw	r2,-4(fp)
   1a7f8:	10800404 	addi	r2,r2,16
   1a7fc:	10800037 	ldwio	r2,0(r2)
}
   1a800:	e037883a 	mov	sp,fp
   1a804:	df000017 	ldw	fp,0(sp)
   1a808:	dec00104 	addi	sp,sp,4
   1a80c:	f800283a 	ret

0001a810 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   1a810:	defffe04 	addi	sp,sp,-8
   1a814:	df000115 	stw	fp,4(sp)
   1a818:	df000104 	addi	fp,sp,4
   1a81c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   1a820:	e0bfff17 	ldw	r2,-4(fp)
   1a824:	10800504 	addi	r2,r2,20
   1a828:	10800037 	ldwio	r2,0(r2)
}
   1a82c:	e037883a 	mov	sp,fp
   1a830:	df000017 	ldw	fp,0(sp)
   1a834:	dec00104 	addi	sp,sp,4
   1a838:	f800283a 	ret

0001a83c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   1a83c:	defffd04 	addi	sp,sp,-12
   1a840:	df000215 	stw	fp,8(sp)
   1a844:	df000204 	addi	fp,sp,8
   1a848:	e13ffe15 	stw	r4,-8(fp)
   1a84c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   1a850:	e0bffe17 	ldw	r2,-8(fp)
   1a854:	10800204 	addi	r2,r2,8
   1a858:	10800037 	ldwio	r2,0(r2)
   1a85c:	1007883a 	mov	r3,r2
   1a860:	e0bfff17 	ldw	r2,-4(fp)
   1a864:	1884703a 	and	r2,r3,r2
}
   1a868:	e037883a 	mov	sp,fp
   1a86c:	df000017 	ldw	fp,0(sp)
   1a870:	dec00104 	addi	sp,sp,4
   1a874:	f800283a 	ret

0001a878 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   1a878:	defffe04 	addi	sp,sp,-8
   1a87c:	df000115 	stw	fp,4(sp)
   1a880:	df000104 	addi	fp,sp,4
   1a884:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   1a888:	e0bfff17 	ldw	r2,-4(fp)
   1a88c:	10800037 	ldwio	r2,0(r2)
}
   1a890:	e037883a 	mov	sp,fp
   1a894:	df000017 	ldw	fp,0(sp)
   1a898:	dec00104 	addi	sp,sp,4
   1a89c:	f800283a 	ret

0001a8a0 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   1a8a0:	defffd04 	addi	sp,sp,-12
   1a8a4:	df000215 	stw	fp,8(sp)
   1a8a8:	df000204 	addi	fp,sp,8
   1a8ac:	e13ffe15 	stw	r4,-8(fp)
   1a8b0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   1a8b4:	e0bffe17 	ldw	r2,-8(fp)
   1a8b8:	10800204 	addi	r2,r2,8
   1a8bc:	e0ffff17 	ldw	r3,-4(fp)
   1a8c0:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   1a8c4:	e0bffe17 	ldw	r2,-8(fp)
   1a8c8:	10800204 	addi	r2,r2,8
   1a8cc:	10800037 	ldwio	r2,0(r2)
   1a8d0:	1007883a 	mov	r3,r2
   1a8d4:	e0bfff17 	ldw	r2,-4(fp)
   1a8d8:	1884703a 	and	r2,r3,r2
   1a8dc:	1000021e 	bne	r2,zero,1a8e8 <altera_avalon_fifo_clear_event+0x48>
        return ALTERA_AVALON_FIFO_OK;
   1a8e0:	0005883a 	mov	r2,zero
   1a8e4:	00000106 	br	1a8ec <altera_avalon_fifo_clear_event+0x4c>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   1a8e8:	00bfffc4 	movi	r2,-1
}
   1a8ec:	e037883a 	mov	sp,fp
   1a8f0:	df000017 	ldw	fp,0(sp)
   1a8f4:	dec00104 	addi	sp,sp,4
   1a8f8:	f800283a 	ret

0001a8fc <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   1a8fc:	defffd04 	addi	sp,sp,-12
   1a900:	df000215 	stw	fp,8(sp)
   1a904:	df000204 	addi	fp,sp,8
   1a908:	e13ffe15 	stw	r4,-8(fp)
   1a90c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   1a910:	e0bffe17 	ldw	r2,-8(fp)
   1a914:	10800304 	addi	r2,r2,12
   1a918:	e0ffff17 	ldw	r3,-4(fp)
   1a91c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   1a920:	e0bffe17 	ldw	r2,-8(fp)
   1a924:	10800304 	addi	r2,r2,12
   1a928:	10800037 	ldwio	r2,0(r2)
   1a92c:	1007883a 	mov	r3,r2
   1a930:	e0bfff17 	ldw	r2,-4(fp)
   1a934:	1880021e 	bne	r3,r2,1a940 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1a938:	0005883a 	mov	r2,zero
   1a93c:	00000106 	br	1a944 <altera_avalon_fifo_write_ienable+0x48>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1a940:	00bfff84 	movi	r2,-2
}
   1a944:	e037883a 	mov	sp,fp
   1a948:	df000017 	ldw	fp,0(sp)
   1a94c:	dec00104 	addi	sp,sp,4
   1a950:	f800283a 	ret

0001a954 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   1a954:	defffd04 	addi	sp,sp,-12
   1a958:	df000215 	stw	fp,8(sp)
   1a95c:	df000204 	addi	fp,sp,8
   1a960:	e13ffe15 	stw	r4,-8(fp)
   1a964:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   1a968:	e0bffe17 	ldw	r2,-8(fp)
   1a96c:	10800404 	addi	r2,r2,16
   1a970:	e0ffff17 	ldw	r3,-4(fp)
   1a974:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   1a978:	e0bffe17 	ldw	r2,-8(fp)
   1a97c:	10800404 	addi	r2,r2,16
   1a980:	10800037 	ldwio	r2,0(r2)
   1a984:	1007883a 	mov	r3,r2
   1a988:	e0bfff17 	ldw	r2,-4(fp)
   1a98c:	1880021e 	bne	r3,r2,1a998 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1a990:	0005883a 	mov	r2,zero
   1a994:	00000106 	br	1a99c <altera_avalon_fifo_write_almostfull+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a998:	00bfff44 	movi	r2,-3
}
   1a99c:	e037883a 	mov	sp,fp
   1a9a0:	df000017 	ldw	fp,0(sp)
   1a9a4:	dec00104 	addi	sp,sp,4
   1a9a8:	f800283a 	ret

0001a9ac <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   1a9ac:	defffd04 	addi	sp,sp,-12
   1a9b0:	df000215 	stw	fp,8(sp)
   1a9b4:	df000204 	addi	fp,sp,8
   1a9b8:	e13ffe15 	stw	r4,-8(fp)
   1a9bc:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   1a9c0:	e0bffe17 	ldw	r2,-8(fp)
   1a9c4:	10800504 	addi	r2,r2,20
   1a9c8:	e0ffff17 	ldw	r3,-4(fp)
   1a9cc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   1a9d0:	e0bffe17 	ldw	r2,-8(fp)
   1a9d4:	10800504 	addi	r2,r2,20
   1a9d8:	10800037 	ldwio	r2,0(r2)
   1a9dc:	1007883a 	mov	r3,r2
   1a9e0:	e0bfff17 	ldw	r2,-4(fp)
   1a9e4:	1880021e 	bne	r3,r2,1a9f0 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   1a9e8:	0005883a 	mov	r2,zero
   1a9ec:	00000106 	br	1a9f4 <altera_avalon_fifo_write_almostempty+0x48>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1a9f0:	00bfff44 	movi	r2,-3
}
   1a9f4:	e037883a 	mov	sp,fp
   1a9f8:	df000017 	ldw	fp,0(sp)
   1a9fc:	dec00104 	addi	sp,sp,4
   1aa00:	f800283a 	ret

0001aa04 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   1aa04:	defffb04 	addi	sp,sp,-20
   1aa08:	dfc00415 	stw	ra,16(sp)
   1aa0c:	df000315 	stw	fp,12(sp)
   1aa10:	df000304 	addi	fp,sp,12
   1aa14:	e13ffd15 	stw	r4,-12(fp)
   1aa18:	e17ffe15 	stw	r5,-8(fp)
   1aa1c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1aa20:	e13ffe17 	ldw	r4,-8(fp)
   1aa24:	01400044 	movi	r5,1
   1aa28:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   1aa2c:	1000051e 	bne	r2,zero,1aa44 <altera_avalon_fifo_write_fifo+0x40>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   1aa30:	e0bffd17 	ldw	r2,-12(fp)
   1aa34:	e0ffff17 	ldw	r3,-4(fp)
   1aa38:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   1aa3c:	0005883a 	mov	r2,zero
   1aa40:	00000106 	br	1aa48 <altera_avalon_fifo_write_fifo+0x44>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   1aa44:	00bfff04 	movi	r2,-4
    }
}
   1aa48:	e037883a 	mov	sp,fp
   1aa4c:	dfc00117 	ldw	ra,4(sp)
   1aa50:	df000017 	ldw	fp,0(sp)
   1aa54:	dec00204 	addi	sp,sp,8
   1aa58:	f800283a 	ret

0001aa5c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   1aa5c:	defffa04 	addi	sp,sp,-24
   1aa60:	dfc00515 	stw	ra,20(sp)
   1aa64:	df000415 	stw	fp,16(sp)
   1aa68:	df000404 	addi	fp,sp,16
   1aa6c:	e13ffd15 	stw	r4,-12(fp)
   1aa70:	e17ffe15 	stw	r5,-8(fp)
   1aa74:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   1aa78:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   1aa7c:	e0bfff17 	ldw	r2,-4(fp)
   1aa80:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1aa84:	e13ffe17 	ldw	r4,-8(fp)
   1aa88:	01400084 	movi	r5,2
   1aa8c:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   1aa90:	1000071e 	bne	r2,zero,1aab0 <altera_avalon_read_fifo+0x54>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   1aa94:	e13ffe17 	ldw	r4,-8(fp)
   1aa98:	001a8780 	call	1a878 <altera_avalon_fifo_read_level>
   1aa9c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1aaa0:	e0bffd17 	ldw	r2,-12(fp)
   1aaa4:	10c00037 	ldwio	r3,0(r2)
   1aaa8:	e0bfff17 	ldw	r2,-4(fp)
   1aaac:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   1aab0:	e0bffc17 	ldw	r2,-16(fp)
}
   1aab4:	e037883a 	mov	sp,fp
   1aab8:	dfc00117 	ldw	ra,4(sp)
   1aabc:	df000017 	ldw	fp,0(sp)
   1aac0:	dec00204 	addi	sp,sp,8
   1aac4:	f800283a 	ret

0001aac8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   1aac8:	defffc04 	addi	sp,sp,-16
   1aacc:	dfc00315 	stw	ra,12(sp)
   1aad0:	df000215 	stw	fp,8(sp)
   1aad4:	df000204 	addi	fp,sp,8
   1aad8:	e13ffe15 	stw	r4,-8(fp)
   1aadc:	e17fff15 	stw	r5,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   1aae0:	e13fff17 	ldw	r4,-4(fp)
   1aae4:	01400084 	movi	r5,2
   1aae8:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   1aaec:	1000031e 	bne	r2,zero,1aafc <altera_avalon_fifo_read_fifo+0x34>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   1aaf0:	e0bffe17 	ldw	r2,-8(fp)
   1aaf4:	10800037 	ldwio	r2,0(r2)
   1aaf8:	00000106 	br	1ab00 <altera_avalon_fifo_read_fifo+0x38>
    }
    return 0;
   1aafc:	0005883a 	mov	r2,zero
}
   1ab00:	e037883a 	mov	sp,fp
   1ab04:	dfc00117 	ldw	ra,4(sp)
   1ab08:	df000017 	ldw	fp,0(sp)
   1ab0c:	dec00204 	addi	sp,sp,8
   1ab10:	f800283a 	ret

0001ab14 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   1ab14:	defffb04 	addi	sp,sp,-20
   1ab18:	dfc00415 	stw	ra,16(sp)
   1ab1c:	df000315 	stw	fp,12(sp)
   1ab20:	df000304 	addi	fp,sp,12
   1ab24:	e13ffd15 	stw	r4,-12(fp)
   1ab28:	e17ffe15 	stw	r5,-8(fp)
   1ab2c:	e1bfff15 	stw	r6,-4(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   1ab30:	e13ffe17 	ldw	r4,-8(fp)
   1ab34:	01400044 	movi	r5,1
   1ab38:	001a76c0 	call	1a76c <altera_avalon_fifo_read_status>
   1ab3c:	1000061e 	bne	r2,zero,1ab58 <altera_avalon_fifo_write_other_info+0x44>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   1ab40:	e0bffd17 	ldw	r2,-12(fp)
   1ab44:	10800104 	addi	r2,r2,4
   1ab48:	e0ffff17 	ldw	r3,-4(fp)
   1ab4c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   1ab50:	0005883a 	mov	r2,zero
   1ab54:	00000106 	br	1ab5c <altera_avalon_fifo_write_other_info+0x48>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   1ab58:	00bfff04 	movi	r2,-4
    }
}
   1ab5c:	e037883a 	mov	sp,fp
   1ab60:	dfc00117 	ldw	ra,4(sp)
   1ab64:	df000017 	ldw	fp,0(sp)
   1ab68:	dec00204 	addi	sp,sp,8
   1ab6c:	f800283a 	ret

0001ab70 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   1ab70:	defffe04 	addi	sp,sp,-8
   1ab74:	df000115 	stw	fp,4(sp)
   1ab78:	df000104 	addi	fp,sp,4
   1ab7c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   1ab80:	e0bfff17 	ldw	r2,-4(fp)
   1ab84:	10800104 	addi	r2,r2,4
   1ab88:	10800037 	ldwio	r2,0(r2)
}
   1ab8c:	e037883a 	mov	sp,fp
   1ab90:	df000017 	ldw	fp,0(sp)
   1ab94:	dec00104 	addi	sp,sp,4
   1ab98:	f800283a 	ret

0001ab9c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   1ab9c:	defffe04 	addi	sp,sp,-8
   1aba0:	df000115 	stw	fp,4(sp)
   1aba4:	df000104 	addi	fp,sp,4
   1aba8:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   1abac:	e0bfff17 	ldw	r2,-4(fp)
   1abb0:	10800037 	ldwio	r2,0(r2)
}
   1abb4:	e037883a 	mov	sp,fp
   1abb8:	df000017 	ldw	fp,0(sp)
   1abbc:	dec00104 	addi	sp,sp,4
   1abc0:	f800283a 	ret

0001abc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1abc4:	defffa04 	addi	sp,sp,-24
   1abc8:	dfc00515 	stw	ra,20(sp)
   1abcc:	df000415 	stw	fp,16(sp)
   1abd0:	df000404 	addi	fp,sp,16
   1abd4:	e13ffd15 	stw	r4,-12(fp)
   1abd8:	e17ffe15 	stw	r5,-8(fp)
   1abdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1abe0:	e0bffd17 	ldw	r2,-12(fp)
   1abe4:	10800017 	ldw	r2,0(r2)
   1abe8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1abec:	e0bffc17 	ldw	r2,-16(fp)
   1abf0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1abf4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1abf8:	10800217 	ldw	r2,8(r2)
   1abfc:	1809883a 	mov	r4,r3
   1ac00:	e17ffe17 	ldw	r5,-8(fp)
   1ac04:	e1bfff17 	ldw	r6,-4(fp)
   1ac08:	100f883a 	mov	r7,r2
   1ac0c:	001b1ec0 	call	1b1ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1ac10:	e037883a 	mov	sp,fp
   1ac14:	dfc00117 	ldw	ra,4(sp)
   1ac18:	df000017 	ldw	fp,0(sp)
   1ac1c:	dec00204 	addi	sp,sp,8
   1ac20:	f800283a 	ret

0001ac24 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1ac24:	defffa04 	addi	sp,sp,-24
   1ac28:	dfc00515 	stw	ra,20(sp)
   1ac2c:	df000415 	stw	fp,16(sp)
   1ac30:	df000404 	addi	fp,sp,16
   1ac34:	e13ffd15 	stw	r4,-12(fp)
   1ac38:	e17ffe15 	stw	r5,-8(fp)
   1ac3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ac40:	e0bffd17 	ldw	r2,-12(fp)
   1ac44:	10800017 	ldw	r2,0(r2)
   1ac48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1ac4c:	e0bffc17 	ldw	r2,-16(fp)
   1ac50:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   1ac54:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1ac58:	10800217 	ldw	r2,8(r2)
   1ac5c:	1809883a 	mov	r4,r3
   1ac60:	e17ffe17 	ldw	r5,-8(fp)
   1ac64:	e1bfff17 	ldw	r6,-4(fp)
   1ac68:	100f883a 	mov	r7,r2
   1ac6c:	001b4040 	call	1b404 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1ac70:	e037883a 	mov	sp,fp
   1ac74:	dfc00117 	ldw	ra,4(sp)
   1ac78:	df000017 	ldw	fp,0(sp)
   1ac7c:	dec00204 	addi	sp,sp,8
   1ac80:	f800283a 	ret

0001ac84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1ac84:	defffc04 	addi	sp,sp,-16
   1ac88:	dfc00315 	stw	ra,12(sp)
   1ac8c:	df000215 	stw	fp,8(sp)
   1ac90:	df000204 	addi	fp,sp,8
   1ac94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ac98:	e0bfff17 	ldw	r2,-4(fp)
   1ac9c:	10800017 	ldw	r2,0(r2)
   1aca0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1aca4:	e0bffe17 	ldw	r2,-8(fp)
   1aca8:	10c00a04 	addi	r3,r2,40
   1acac:	e0bfff17 	ldw	r2,-4(fp)
   1acb0:	10800217 	ldw	r2,8(r2)
   1acb4:	1809883a 	mov	r4,r3
   1acb8:	100b883a 	mov	r5,r2
   1acbc:	001b0900 	call	1b090 <altera_avalon_jtag_uart_close>
}
   1acc0:	e037883a 	mov	sp,fp
   1acc4:	dfc00117 	ldw	ra,4(sp)
   1acc8:	df000017 	ldw	fp,0(sp)
   1accc:	dec00204 	addi	sp,sp,8
   1acd0:	f800283a 	ret

0001acd4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1acd4:	defffa04 	addi	sp,sp,-24
   1acd8:	dfc00515 	stw	ra,20(sp)
   1acdc:	df000415 	stw	fp,16(sp)
   1ace0:	df000404 	addi	fp,sp,16
   1ace4:	e13ffd15 	stw	r4,-12(fp)
   1ace8:	e17ffe15 	stw	r5,-8(fp)
   1acec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1acf0:	e0bffd17 	ldw	r2,-12(fp)
   1acf4:	10800017 	ldw	r2,0(r2)
   1acf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1acfc:	e0bffc17 	ldw	r2,-16(fp)
   1ad00:	10800a04 	addi	r2,r2,40
   1ad04:	1009883a 	mov	r4,r2
   1ad08:	e17ffe17 	ldw	r5,-8(fp)
   1ad0c:	e1bfff17 	ldw	r6,-4(fp)
   1ad10:	001b0f80 	call	1b0f8 <altera_avalon_jtag_uart_ioctl>
}
   1ad14:	e037883a 	mov	sp,fp
   1ad18:	dfc00117 	ldw	ra,4(sp)
   1ad1c:	df000017 	ldw	fp,0(sp)
   1ad20:	dec00204 	addi	sp,sp,8
   1ad24:	f800283a 	ret

0001ad28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1ad28:	defffa04 	addi	sp,sp,-24
   1ad2c:	dfc00515 	stw	ra,20(sp)
   1ad30:	df000415 	stw	fp,16(sp)
   1ad34:	df000404 	addi	fp,sp,16
   1ad38:	e13ffd15 	stw	r4,-12(fp)
   1ad3c:	e17ffe15 	stw	r5,-8(fp)
   1ad40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ad44:	e0bffd17 	ldw	r2,-12(fp)
   1ad48:	00c00044 	movi	r3,1
   1ad4c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1ad50:	e0bffd17 	ldw	r2,-12(fp)
   1ad54:	10800017 	ldw	r2,0(r2)
   1ad58:	10800104 	addi	r2,r2,4
   1ad5c:	e0fffd17 	ldw	r3,-12(fp)
   1ad60:	18c00817 	ldw	r3,32(r3)
   1ad64:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1ad68:	e0fffe17 	ldw	r3,-8(fp)
   1ad6c:	e0bfff17 	ldw	r2,-4(fp)
   1ad70:	d8000015 	stw	zero,0(sp)
   1ad74:	1809883a 	mov	r4,r3
   1ad78:	100b883a 	mov	r5,r2
   1ad7c:	018000b4 	movhi	r6,2
   1ad80:	31ab7a04 	addi	r6,r6,-21016
   1ad84:	e1fffd17 	ldw	r7,-12(fp)
   1ad88:	001bb980 	call	1bb98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1ad8c:	e0bffd17 	ldw	r2,-12(fp)
   1ad90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1ad94:	e0bffd17 	ldw	r2,-12(fp)
   1ad98:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ad9c:	008000f4 	movhi	r2,3
   1ada0:	10a7be04 	addi	r2,r2,-24840
   1ada4:	10800017 	ldw	r2,0(r2)
   1ada8:	1809883a 	mov	r4,r3
   1adac:	100b883a 	mov	r5,r2
   1adb0:	018000b4 	movhi	r6,2
   1adb4:	31abfb04 	addi	r6,r6,-20500
   1adb8:	e1fffd17 	ldw	r7,-12(fp)
   1adbc:	001b8640 	call	1b864 <alt_alarm_start>
   1adc0:	1000040e 	bge	r2,zero,1add4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1adc4:	e0bffd17 	ldw	r2,-12(fp)
   1adc8:	00e00034 	movhi	r3,32768
   1adcc:	18ffffc4 	addi	r3,r3,-1
   1add0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1add4:	e037883a 	mov	sp,fp
   1add8:	dfc00117 	ldw	ra,4(sp)
   1addc:	df000017 	ldw	fp,0(sp)
   1ade0:	dec00204 	addi	sp,sp,8
   1ade4:	f800283a 	ret

0001ade8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1ade8:	defff804 	addi	sp,sp,-32
   1adec:	df000715 	stw	fp,28(sp)
   1adf0:	df000704 	addi	fp,sp,28
   1adf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1adf8:	e0bfff17 	ldw	r2,-4(fp)
   1adfc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1ae00:	e0bffb17 	ldw	r2,-20(fp)
   1ae04:	10800017 	ldw	r2,0(r2)
   1ae08:	e0bffc15 	stw	r2,-16(fp)
   1ae0c:	00000106 	br	1ae14 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   1ae10:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ae14:	e0bffc17 	ldw	r2,-16(fp)
   1ae18:	10800104 	addi	r2,r2,4
   1ae1c:	10800037 	ldwio	r2,0(r2)
   1ae20:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1ae24:	e0bffd17 	ldw	r2,-12(fp)
   1ae28:	1080c00c 	andi	r2,r2,768
   1ae2c:	10006a26 	beq	r2,zero,1afd8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1ae30:	e0bffd17 	ldw	r2,-12(fp)
   1ae34:	1080400c 	andi	r2,r2,256
   1ae38:	10003326 	beq	r2,zero,1af08 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1ae3c:	00800074 	movhi	r2,1
   1ae40:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ae44:	e0bffb17 	ldw	r2,-20(fp)
   1ae48:	10800a17 	ldw	r2,40(r2)
   1ae4c:	10800044 	addi	r2,r2,1
   1ae50:	1081ffcc 	andi	r2,r2,2047
   1ae54:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1ae58:	e0bffb17 	ldw	r2,-20(fp)
   1ae5c:	10c00b17 	ldw	r3,44(r2)
   1ae60:	e0bffe17 	ldw	r2,-8(fp)
   1ae64:	18801426 	beq	r3,r2,1aeb8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1ae68:	e0bffc17 	ldw	r2,-16(fp)
   1ae6c:	10800037 	ldwio	r2,0(r2)
   1ae70:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1ae74:	e0bff917 	ldw	r2,-28(fp)
   1ae78:	10a0000c 	andi	r2,r2,32768
   1ae7c:	10001026 	beq	r2,zero,1aec0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1ae80:	e0bffb17 	ldw	r2,-20(fp)
   1ae84:	10800a17 	ldw	r2,40(r2)
   1ae88:	e0fff917 	ldw	r3,-28(fp)
   1ae8c:	e13ffb17 	ldw	r4,-20(fp)
   1ae90:	2085883a 	add	r2,r4,r2
   1ae94:	10800e04 	addi	r2,r2,56
   1ae98:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ae9c:	e0bffb17 	ldw	r2,-20(fp)
   1aea0:	10800a17 	ldw	r2,40(r2)
   1aea4:	10800044 	addi	r2,r2,1
   1aea8:	10c1ffcc 	andi	r3,r2,2047
   1aeac:	e0bffb17 	ldw	r2,-20(fp)
   1aeb0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1aeb4:	003fe306 	br	1ae44 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1aeb8:	0001883a 	nop
   1aebc:	00000106 	br	1aec4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1aec0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1aec4:	e0bff917 	ldw	r2,-28(fp)
   1aec8:	10bfffec 	andhi	r2,r2,65535
   1aecc:	10000e26 	beq	r2,zero,1af08 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1aed0:	e0bffb17 	ldw	r2,-20(fp)
   1aed4:	10c00817 	ldw	r3,32(r2)
   1aed8:	00bfff84 	movi	r2,-2
   1aedc:	1886703a 	and	r3,r3,r2
   1aee0:	e0bffb17 	ldw	r2,-20(fp)
   1aee4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1aee8:	e0bffc17 	ldw	r2,-16(fp)
   1aeec:	10800104 	addi	r2,r2,4
   1aef0:	e0fffb17 	ldw	r3,-20(fp)
   1aef4:	18c00817 	ldw	r3,32(r3)
   1aef8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1aefc:	e0bffc17 	ldw	r2,-16(fp)
   1af00:	10800104 	addi	r2,r2,4
   1af04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1af08:	e0bffd17 	ldw	r2,-12(fp)
   1af0c:	1080800c 	andi	r2,r2,512
   1af10:	103fbf26 	beq	r2,zero,1ae10 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1af14:	e0bffd17 	ldw	r2,-12(fp)
   1af18:	1004d43a 	srli	r2,r2,16
   1af1c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1af20:	00001406 	br	1af74 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1af24:	e0bffc17 	ldw	r2,-16(fp)
   1af28:	e0fffb17 	ldw	r3,-20(fp)
   1af2c:	18c00d17 	ldw	r3,52(r3)
   1af30:	e13ffb17 	ldw	r4,-20(fp)
   1af34:	20c7883a 	add	r3,r4,r3
   1af38:	18c20e04 	addi	r3,r3,2104
   1af3c:	18c00003 	ldbu	r3,0(r3)
   1af40:	18c03fcc 	andi	r3,r3,255
   1af44:	18c0201c 	xori	r3,r3,128
   1af48:	18ffe004 	addi	r3,r3,-128
   1af4c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1af50:	e0bffb17 	ldw	r2,-20(fp)
   1af54:	10800d17 	ldw	r2,52(r2)
   1af58:	10800044 	addi	r2,r2,1
   1af5c:	10c1ffcc 	andi	r3,r2,2047
   1af60:	e0bffb17 	ldw	r2,-20(fp)
   1af64:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1af68:	e0bffa17 	ldw	r2,-24(fp)
   1af6c:	10bfffc4 	addi	r2,r2,-1
   1af70:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1af74:	e0bffa17 	ldw	r2,-24(fp)
   1af78:	10000526 	beq	r2,zero,1af90 <altera_avalon_jtag_uart_irq+0x1a8>
   1af7c:	e0bffb17 	ldw	r2,-20(fp)
   1af80:	10c00d17 	ldw	r3,52(r2)
   1af84:	e0bffb17 	ldw	r2,-20(fp)
   1af88:	10800c17 	ldw	r2,48(r2)
   1af8c:	18bfe51e 	bne	r3,r2,1af24 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1af90:	e0bffa17 	ldw	r2,-24(fp)
   1af94:	103f9e26 	beq	r2,zero,1ae10 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1af98:	e0bffb17 	ldw	r2,-20(fp)
   1af9c:	10c00817 	ldw	r3,32(r2)
   1afa0:	00bfff44 	movi	r2,-3
   1afa4:	1886703a 	and	r3,r3,r2
   1afa8:	e0bffb17 	ldw	r2,-20(fp)
   1afac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1afb0:	e0bffb17 	ldw	r2,-20(fp)
   1afb4:	10800017 	ldw	r2,0(r2)
   1afb8:	10800104 	addi	r2,r2,4
   1afbc:	e0fffb17 	ldw	r3,-20(fp)
   1afc0:	18c00817 	ldw	r3,32(r3)
   1afc4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1afc8:	e0bffc17 	ldw	r2,-16(fp)
   1afcc:	10800104 	addi	r2,r2,4
   1afd0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1afd4:	003f8e06 	br	1ae10 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1afd8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1afdc:	e037883a 	mov	sp,fp
   1afe0:	df000017 	ldw	fp,0(sp)
   1afe4:	dec00104 	addi	sp,sp,4
   1afe8:	f800283a 	ret

0001afec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1afec:	defffc04 	addi	sp,sp,-16
   1aff0:	df000315 	stw	fp,12(sp)
   1aff4:	df000304 	addi	fp,sp,12
   1aff8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1affc:	e0bfff17 	ldw	r2,-4(fp)
   1b000:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1b004:	e0bffd17 	ldw	r2,-12(fp)
   1b008:	10800017 	ldw	r2,0(r2)
   1b00c:	10800104 	addi	r2,r2,4
   1b010:	10800037 	ldwio	r2,0(r2)
   1b014:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1b018:	e0bffe17 	ldw	r2,-8(fp)
   1b01c:	1081000c 	andi	r2,r2,1024
   1b020:	10000a26 	beq	r2,zero,1b04c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1b024:	e0bffd17 	ldw	r2,-12(fp)
   1b028:	10800017 	ldw	r2,0(r2)
   1b02c:	10800104 	addi	r2,r2,4
   1b030:	e0fffd17 	ldw	r3,-12(fp)
   1b034:	18c00817 	ldw	r3,32(r3)
   1b038:	18c10014 	ori	r3,r3,1024
   1b03c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1b040:	e0bffd17 	ldw	r2,-12(fp)
   1b044:	10000915 	stw	zero,36(r2)
   1b048:	00000a06 	br	1b074 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1b04c:	e0bffd17 	ldw	r2,-12(fp)
   1b050:	10800917 	ldw	r2,36(r2)
   1b054:	00e00034 	movhi	r3,32768
   1b058:	18ffff04 	addi	r3,r3,-4
   1b05c:	18800536 	bltu	r3,r2,1b074 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   1b060:	e0bffd17 	ldw	r2,-12(fp)
   1b064:	10800917 	ldw	r2,36(r2)
   1b068:	10c00044 	addi	r3,r2,1
   1b06c:	e0bffd17 	ldw	r2,-12(fp)
   1b070:	10c00915 	stw	r3,36(r2)
   1b074:	008000f4 	movhi	r2,3
   1b078:	10a7be04 	addi	r2,r2,-24840
   1b07c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1b080:	e037883a 	mov	sp,fp
   1b084:	df000017 	ldw	fp,0(sp)
   1b088:	dec00104 	addi	sp,sp,4
   1b08c:	f800283a 	ret

0001b090 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1b090:	defffd04 	addi	sp,sp,-12
   1b094:	df000215 	stw	fp,8(sp)
   1b098:	df000204 	addi	fp,sp,8
   1b09c:	e13ffe15 	stw	r4,-8(fp)
   1b0a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b0a4:	00000506 	br	1b0bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1b0a8:	e0bfff17 	ldw	r2,-4(fp)
   1b0ac:	1090000c 	andi	r2,r2,16384
   1b0b0:	10000226 	beq	r2,zero,1b0bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1b0b4:	00bffd44 	movi	r2,-11
   1b0b8:	00000b06 	br	1b0e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1b0bc:	e0bffe17 	ldw	r2,-8(fp)
   1b0c0:	10c00d17 	ldw	r3,52(r2)
   1b0c4:	e0bffe17 	ldw	r2,-8(fp)
   1b0c8:	10800c17 	ldw	r2,48(r2)
   1b0cc:	18800526 	beq	r3,r2,1b0e4 <altera_avalon_jtag_uart_close+0x54>
   1b0d0:	e0bffe17 	ldw	r2,-8(fp)
   1b0d4:	10c00917 	ldw	r3,36(r2)
   1b0d8:	e0bffe17 	ldw	r2,-8(fp)
   1b0dc:	10800117 	ldw	r2,4(r2)
   1b0e0:	18bff136 	bltu	r3,r2,1b0a8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1b0e4:	0005883a 	mov	r2,zero
}
   1b0e8:	e037883a 	mov	sp,fp
   1b0ec:	df000017 	ldw	fp,0(sp)
   1b0f0:	dec00104 	addi	sp,sp,4
   1b0f4:	f800283a 	ret

0001b0f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1b0f8:	defffa04 	addi	sp,sp,-24
   1b0fc:	df000515 	stw	fp,20(sp)
   1b100:	df000504 	addi	fp,sp,20
   1b104:	e13ffd15 	stw	r4,-12(fp)
   1b108:	e17ffe15 	stw	r5,-8(fp)
   1b10c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1b110:	00bff9c4 	movi	r2,-25
   1b114:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1b118:	e0bffe17 	ldw	r2,-8(fp)
   1b11c:	10da8060 	cmpeqi	r3,r2,27137
   1b120:	1800031e 	bne	r3,zero,1b130 <altera_avalon_jtag_uart_ioctl+0x38>
   1b124:	109a80a0 	cmpeqi	r2,r2,27138
   1b128:	1000181e 	bne	r2,zero,1b18c <altera_avalon_jtag_uart_ioctl+0x94>
   1b12c:	00002606 	br	1b1c8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1b130:	e0bffd17 	ldw	r2,-12(fp)
   1b134:	10c00117 	ldw	r3,4(r2)
   1b138:	00a00034 	movhi	r2,32768
   1b13c:	10bfffc4 	addi	r2,r2,-1
   1b140:	18802226 	beq	r3,r2,1b1cc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   1b144:	e0bfff17 	ldw	r2,-4(fp)
   1b148:	10800017 	ldw	r2,0(r2)
   1b14c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1b150:	e0bffc17 	ldw	r2,-16(fp)
   1b154:	10800090 	cmplti	r2,r2,2
   1b158:	1000061e 	bne	r2,zero,1b174 <altera_avalon_jtag_uart_ioctl+0x7c>
   1b15c:	e0fffc17 	ldw	r3,-16(fp)
   1b160:	00a00034 	movhi	r2,32768
   1b164:	10bfffc4 	addi	r2,r2,-1
   1b168:	18800226 	beq	r3,r2,1b174 <altera_avalon_jtag_uart_ioctl+0x7c>
   1b16c:	e0bffc17 	ldw	r2,-16(fp)
   1b170:	00000206 	br	1b17c <altera_avalon_jtag_uart_ioctl+0x84>
   1b174:	00a00034 	movhi	r2,32768
   1b178:	10bfff84 	addi	r2,r2,-2
   1b17c:	e0fffd17 	ldw	r3,-12(fp)
   1b180:	18800115 	stw	r2,4(r3)
      rc = 0;
   1b184:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1b188:	00001006 	br	1b1cc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1b18c:	e0bffd17 	ldw	r2,-12(fp)
   1b190:	10c00117 	ldw	r3,4(r2)
   1b194:	00a00034 	movhi	r2,32768
   1b198:	10bfffc4 	addi	r2,r2,-1
   1b19c:	18800d26 	beq	r3,r2,1b1d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1b1a0:	e0bffd17 	ldw	r2,-12(fp)
   1b1a4:	10c00917 	ldw	r3,36(r2)
   1b1a8:	e0bffd17 	ldw	r2,-12(fp)
   1b1ac:	10800117 	ldw	r2,4(r2)
   1b1b0:	1885803a 	cmpltu	r2,r3,r2
   1b1b4:	10c03fcc 	andi	r3,r2,255
   1b1b8:	e0bfff17 	ldw	r2,-4(fp)
   1b1bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1b1c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1b1c4:	00000306 	br	1b1d4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   1b1c8:	00000306 	br	1b1d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1b1cc:	0001883a 	nop
   1b1d0:	00000106 	br	1b1d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1b1d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1b1d8:	e0bffb17 	ldw	r2,-20(fp)
}
   1b1dc:	e037883a 	mov	sp,fp
   1b1e0:	df000017 	ldw	fp,0(sp)
   1b1e4:	dec00104 	addi	sp,sp,4
   1b1e8:	f800283a 	ret

0001b1ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1b1ec:	defff304 	addi	sp,sp,-52
   1b1f0:	dfc00c15 	stw	ra,48(sp)
   1b1f4:	df000b15 	stw	fp,44(sp)
   1b1f8:	df000b04 	addi	fp,sp,44
   1b1fc:	e13ffc15 	stw	r4,-16(fp)
   1b200:	e17ffd15 	stw	r5,-12(fp)
   1b204:	e1bffe15 	stw	r6,-8(fp)
   1b208:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1b20c:	e0bffd17 	ldw	r2,-12(fp)
   1b210:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b214:	00004706 	br	1b334 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1b218:	e0bffc17 	ldw	r2,-16(fp)
   1b21c:	10800a17 	ldw	r2,40(r2)
   1b220:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1b224:	e0bffc17 	ldw	r2,-16(fp)
   1b228:	10800b17 	ldw	r2,44(r2)
   1b22c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1b230:	e0fff717 	ldw	r3,-36(fp)
   1b234:	e0bff817 	ldw	r2,-32(fp)
   1b238:	18800536 	bltu	r3,r2,1b250 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1b23c:	e0fff717 	ldw	r3,-36(fp)
   1b240:	e0bff817 	ldw	r2,-32(fp)
   1b244:	1885c83a 	sub	r2,r3,r2
   1b248:	e0bff615 	stw	r2,-40(fp)
   1b24c:	00000406 	br	1b260 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1b250:	00c20004 	movi	r3,2048
   1b254:	e0bff817 	ldw	r2,-32(fp)
   1b258:	1885c83a 	sub	r2,r3,r2
   1b25c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1b260:	e0bff617 	ldw	r2,-40(fp)
   1b264:	10001e26 	beq	r2,zero,1b2e0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1b268:	e0fffe17 	ldw	r3,-8(fp)
   1b26c:	e0bff617 	ldw	r2,-40(fp)
   1b270:	1880022e 	bgeu	r3,r2,1b27c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1b274:	e0bffe17 	ldw	r2,-8(fp)
   1b278:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1b27c:	e0bff817 	ldw	r2,-32(fp)
   1b280:	10800e04 	addi	r2,r2,56
   1b284:	e0fffc17 	ldw	r3,-16(fp)
   1b288:	1885883a 	add	r2,r3,r2
   1b28c:	e13ff517 	ldw	r4,-44(fp)
   1b290:	100b883a 	mov	r5,r2
   1b294:	e1bff617 	ldw	r6,-40(fp)
   1b298:	0015b080 	call	15b08 <memcpy>
      ptr   += n;
   1b29c:	e0fff517 	ldw	r3,-44(fp)
   1b2a0:	e0bff617 	ldw	r2,-40(fp)
   1b2a4:	1885883a 	add	r2,r3,r2
   1b2a8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1b2ac:	e0fffe17 	ldw	r3,-8(fp)
   1b2b0:	e0bff617 	ldw	r2,-40(fp)
   1b2b4:	1885c83a 	sub	r2,r3,r2
   1b2b8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b2bc:	e0fff817 	ldw	r3,-32(fp)
   1b2c0:	e0bff617 	ldw	r2,-40(fp)
   1b2c4:	1885883a 	add	r2,r3,r2
   1b2c8:	10c1ffcc 	andi	r3,r2,2047
   1b2cc:	e0bffc17 	ldw	r2,-16(fp)
   1b2d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1b2d4:	e0bffe17 	ldw	r2,-8(fp)
   1b2d8:	00bfcf16 	blt	zero,r2,1b218 <altera_avalon_jtag_uart_read+0x2c>
   1b2dc:	00000106 	br	1b2e4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1b2e0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1b2e4:	e0fff517 	ldw	r3,-44(fp)
   1b2e8:	e0bffd17 	ldw	r2,-12(fp)
   1b2ec:	1880141e 	bne	r3,r2,1b340 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1b2f0:	e0bfff17 	ldw	r2,-4(fp)
   1b2f4:	1090000c 	andi	r2,r2,16384
   1b2f8:	1000131e 	bne	r2,zero,1b348 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1b2fc:	0001883a 	nop
   1b300:	e0bffc17 	ldw	r2,-16(fp)
   1b304:	10c00a17 	ldw	r3,40(r2)
   1b308:	e0bff717 	ldw	r2,-36(fp)
   1b30c:	1880051e 	bne	r3,r2,1b324 <altera_avalon_jtag_uart_read+0x138>
   1b310:	e0bffc17 	ldw	r2,-16(fp)
   1b314:	10c00917 	ldw	r3,36(r2)
   1b318:	e0bffc17 	ldw	r2,-16(fp)
   1b31c:	10800117 	ldw	r2,4(r2)
   1b320:	18bff736 	bltu	r3,r2,1b300 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1b324:	e0bffc17 	ldw	r2,-16(fp)
   1b328:	10c00a17 	ldw	r3,40(r2)
   1b32c:	e0bff717 	ldw	r2,-36(fp)
   1b330:	18800726 	beq	r3,r2,1b350 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1b334:	e0bffe17 	ldw	r2,-8(fp)
   1b338:	00bfb716 	blt	zero,r2,1b218 <altera_avalon_jtag_uart_read+0x2c>
   1b33c:	00000506 	br	1b354 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1b340:	0001883a 	nop
   1b344:	00000306 	br	1b354 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1b348:	0001883a 	nop
   1b34c:	00000106 	br	1b354 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1b350:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1b354:	e0fff517 	ldw	r3,-44(fp)
   1b358:	e0bffd17 	ldw	r2,-12(fp)
   1b35c:	18801726 	beq	r3,r2,1b3bc <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b360:	0005303a 	rdctl	r2,status
   1b364:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b368:	e0fffa17 	ldw	r3,-24(fp)
   1b36c:	00bfff84 	movi	r2,-2
   1b370:	1884703a 	and	r2,r3,r2
   1b374:	1001703a 	wrctl	status,r2
  
  return context;
   1b378:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1b37c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1b380:	e0bffc17 	ldw	r2,-16(fp)
   1b384:	10800817 	ldw	r2,32(r2)
   1b388:	10c00054 	ori	r3,r2,1
   1b38c:	e0bffc17 	ldw	r2,-16(fp)
   1b390:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b394:	e0bffc17 	ldw	r2,-16(fp)
   1b398:	10800017 	ldw	r2,0(r2)
   1b39c:	10800104 	addi	r2,r2,4
   1b3a0:	e0fffc17 	ldw	r3,-16(fp)
   1b3a4:	18c00817 	ldw	r3,32(r3)
   1b3a8:	10c00035 	stwio	r3,0(r2)
   1b3ac:	e0bff917 	ldw	r2,-28(fp)
   1b3b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b3b4:	e0bffb17 	ldw	r2,-20(fp)
   1b3b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1b3bc:	e0fff517 	ldw	r3,-44(fp)
   1b3c0:	e0bffd17 	ldw	r2,-12(fp)
   1b3c4:	18800426 	beq	r3,r2,1b3d8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   1b3c8:	e0fff517 	ldw	r3,-44(fp)
   1b3cc:	e0bffd17 	ldw	r2,-12(fp)
   1b3d0:	1885c83a 	sub	r2,r3,r2
   1b3d4:	00000606 	br	1b3f0 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   1b3d8:	e0bfff17 	ldw	r2,-4(fp)
   1b3dc:	1090000c 	andi	r2,r2,16384
   1b3e0:	10000226 	beq	r2,zero,1b3ec <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   1b3e4:	00bffd44 	movi	r2,-11
   1b3e8:	00000106 	br	1b3f0 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   1b3ec:	00bffec4 	movi	r2,-5
}
   1b3f0:	e037883a 	mov	sp,fp
   1b3f4:	dfc00117 	ldw	ra,4(sp)
   1b3f8:	df000017 	ldw	fp,0(sp)
   1b3fc:	dec00204 	addi	sp,sp,8
   1b400:	f800283a 	ret

0001b404 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1b404:	defff304 	addi	sp,sp,-52
   1b408:	dfc00c15 	stw	ra,48(sp)
   1b40c:	df000b15 	stw	fp,44(sp)
   1b410:	df000b04 	addi	fp,sp,44
   1b414:	e13ffc15 	stw	r4,-16(fp)
   1b418:	e17ffd15 	stw	r5,-12(fp)
   1b41c:	e1bffe15 	stw	r6,-8(fp)
   1b420:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1b424:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1b428:	e0bffd17 	ldw	r2,-12(fp)
   1b42c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b430:	00003706 	br	1b510 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1b434:	e0bffc17 	ldw	r2,-16(fp)
   1b438:	10800c17 	ldw	r2,48(r2)
   1b43c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1b440:	e0bffc17 	ldw	r2,-16(fp)
   1b444:	10800d17 	ldw	r2,52(r2)
   1b448:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1b44c:	e0fff817 	ldw	r3,-32(fp)
   1b450:	e0bff517 	ldw	r2,-44(fp)
   1b454:	1880062e 	bgeu	r3,r2,1b470 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1b458:	e0fff517 	ldw	r3,-44(fp)
   1b45c:	e0bff817 	ldw	r2,-32(fp)
   1b460:	1885c83a 	sub	r2,r3,r2
   1b464:	10bfffc4 	addi	r2,r2,-1
   1b468:	e0bff615 	stw	r2,-40(fp)
   1b46c:	00000b06 	br	1b49c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1b470:	e0bff517 	ldw	r2,-44(fp)
   1b474:	10000526 	beq	r2,zero,1b48c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1b478:	00c20004 	movi	r3,2048
   1b47c:	e0bff817 	ldw	r2,-32(fp)
   1b480:	1885c83a 	sub	r2,r3,r2
   1b484:	e0bff615 	stw	r2,-40(fp)
   1b488:	00000406 	br	1b49c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1b48c:	00c1ffc4 	movi	r3,2047
   1b490:	e0bff817 	ldw	r2,-32(fp)
   1b494:	1885c83a 	sub	r2,r3,r2
   1b498:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1b49c:	e0bff617 	ldw	r2,-40(fp)
   1b4a0:	10001e26 	beq	r2,zero,1b51c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1b4a4:	e0fffe17 	ldw	r3,-8(fp)
   1b4a8:	e0bff617 	ldw	r2,-40(fp)
   1b4ac:	1880022e 	bgeu	r3,r2,1b4b8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1b4b0:	e0bffe17 	ldw	r2,-8(fp)
   1b4b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1b4b8:	e0bff817 	ldw	r2,-32(fp)
   1b4bc:	10820e04 	addi	r2,r2,2104
   1b4c0:	e0fffc17 	ldw	r3,-16(fp)
   1b4c4:	1885883a 	add	r2,r3,r2
   1b4c8:	1009883a 	mov	r4,r2
   1b4cc:	e17ffd17 	ldw	r5,-12(fp)
   1b4d0:	e1bff617 	ldw	r6,-40(fp)
   1b4d4:	0015b080 	call	15b08 <memcpy>
      ptr   += n;
   1b4d8:	e0fffd17 	ldw	r3,-12(fp)
   1b4dc:	e0bff617 	ldw	r2,-40(fp)
   1b4e0:	1885883a 	add	r2,r3,r2
   1b4e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1b4e8:	e0fffe17 	ldw	r3,-8(fp)
   1b4ec:	e0bff617 	ldw	r2,-40(fp)
   1b4f0:	1885c83a 	sub	r2,r3,r2
   1b4f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1b4f8:	e0fff817 	ldw	r3,-32(fp)
   1b4fc:	e0bff617 	ldw	r2,-40(fp)
   1b500:	1885883a 	add	r2,r3,r2
   1b504:	10c1ffcc 	andi	r3,r2,2047
   1b508:	e0bffc17 	ldw	r2,-16(fp)
   1b50c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1b510:	e0bffe17 	ldw	r2,-8(fp)
   1b514:	00bfc716 	blt	zero,r2,1b434 <altera_avalon_jtag_uart_write+0x30>
   1b518:	00000106 	br	1b520 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1b51c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b520:	0005303a 	rdctl	r2,status
   1b524:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b528:	e0fffa17 	ldw	r3,-24(fp)
   1b52c:	00bfff84 	movi	r2,-2
   1b530:	1884703a 	and	r2,r3,r2
   1b534:	1001703a 	wrctl	status,r2
  
  return context;
   1b538:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1b53c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1b540:	e0bffc17 	ldw	r2,-16(fp)
   1b544:	10800817 	ldw	r2,32(r2)
   1b548:	10c00094 	ori	r3,r2,2
   1b54c:	e0bffc17 	ldw	r2,-16(fp)
   1b550:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1b554:	e0bffc17 	ldw	r2,-16(fp)
   1b558:	10800017 	ldw	r2,0(r2)
   1b55c:	10800104 	addi	r2,r2,4
   1b560:	e0fffc17 	ldw	r3,-16(fp)
   1b564:	18c00817 	ldw	r3,32(r3)
   1b568:	10c00035 	stwio	r3,0(r2)
   1b56c:	e0bff917 	ldw	r2,-28(fp)
   1b570:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b574:	e0bffb17 	ldw	r2,-20(fp)
   1b578:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1b57c:	e0bffe17 	ldw	r2,-8(fp)
   1b580:	0080110e 	bge	zero,r2,1b5c8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1b584:	e0bfff17 	ldw	r2,-4(fp)
   1b588:	1090000c 	andi	r2,r2,16384
   1b58c:	1000111e 	bne	r2,zero,1b5d4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1b590:	0001883a 	nop
   1b594:	e0bffc17 	ldw	r2,-16(fp)
   1b598:	10c00d17 	ldw	r3,52(r2)
   1b59c:	e0bff517 	ldw	r2,-44(fp)
   1b5a0:	1880051e 	bne	r3,r2,1b5b8 <altera_avalon_jtag_uart_write+0x1b4>
   1b5a4:	e0bffc17 	ldw	r2,-16(fp)
   1b5a8:	10c00917 	ldw	r3,36(r2)
   1b5ac:	e0bffc17 	ldw	r2,-16(fp)
   1b5b0:	10800117 	ldw	r2,4(r2)
   1b5b4:	18bff736 	bltu	r3,r2,1b594 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1b5b8:	e0bffc17 	ldw	r2,-16(fp)
   1b5bc:	10c00d17 	ldw	r3,52(r2)
   1b5c0:	e0bff517 	ldw	r2,-44(fp)
   1b5c4:	18800526 	beq	r3,r2,1b5dc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1b5c8:	e0bffe17 	ldw	r2,-8(fp)
   1b5cc:	00bfd016 	blt	zero,r2,1b510 <altera_avalon_jtag_uart_write+0x10c>
   1b5d0:	00000306 	br	1b5e0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1b5d4:	0001883a 	nop
   1b5d8:	00000106 	br	1b5e0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   1b5dc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1b5e0:	e0fffd17 	ldw	r3,-12(fp)
   1b5e4:	e0bff717 	ldw	r2,-36(fp)
   1b5e8:	18800426 	beq	r3,r2,1b5fc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1b5ec:	e0fffd17 	ldw	r3,-12(fp)
   1b5f0:	e0bff717 	ldw	r2,-36(fp)
   1b5f4:	1885c83a 	sub	r2,r3,r2
   1b5f8:	00000606 	br	1b614 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1b5fc:	e0bfff17 	ldw	r2,-4(fp)
   1b600:	1090000c 	andi	r2,r2,16384
   1b604:	10000226 	beq	r2,zero,1b610 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1b608:	00bffd44 	movi	r2,-11
   1b60c:	00000106 	br	1b614 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1b610:	00bffec4 	movi	r2,-5
}
   1b614:	e037883a 	mov	sp,fp
   1b618:	dfc00117 	ldw	ra,4(sp)
   1b61c:	df000017 	ldw	fp,0(sp)
   1b620:	dec00204 	addi	sp,sp,8
   1b624:	f800283a 	ret

0001b628 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1b628:	defffa04 	addi	sp,sp,-24
   1b62c:	dfc00515 	stw	ra,20(sp)
   1b630:	df000415 	stw	fp,16(sp)
   1b634:	df000404 	addi	fp,sp,16
   1b638:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1b63c:	0007883a 	mov	r3,zero
   1b640:	e0bfff17 	ldw	r2,-4(fp)
   1b644:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1b648:	e0bfff17 	ldw	r2,-4(fp)
   1b64c:	10800104 	addi	r2,r2,4
   1b650:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b654:	0005303a 	rdctl	r2,status
   1b658:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b65c:	e0fffd17 	ldw	r3,-12(fp)
   1b660:	00bfff84 	movi	r2,-2
   1b664:	1884703a 	and	r2,r3,r2
   1b668:	1001703a 	wrctl	status,r2
  
  return context;
   1b66c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1b670:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1b674:	001c2e80 	call	1c2e8 <alt_tick>
   1b678:	e0bffc17 	ldw	r2,-16(fp)
   1b67c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b680:	e0bffe17 	ldw	r2,-8(fp)
   1b684:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1b688:	e037883a 	mov	sp,fp
   1b68c:	dfc00117 	ldw	ra,4(sp)
   1b690:	df000017 	ldw	fp,0(sp)
   1b694:	dec00204 	addi	sp,sp,8
   1b698:	f800283a 	ret

0001b69c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1b69c:	defff804 	addi	sp,sp,-32
   1b6a0:	dfc00715 	stw	ra,28(sp)
   1b6a4:	df000615 	stw	fp,24(sp)
   1b6a8:	df000604 	addi	fp,sp,24
   1b6ac:	e13ffc15 	stw	r4,-16(fp)
   1b6b0:	e17ffd15 	stw	r5,-12(fp)
   1b6b4:	e1bffe15 	stw	r6,-8(fp)
   1b6b8:	e1ffff15 	stw	r7,-4(fp)
   1b6bc:	e0bfff17 	ldw	r2,-4(fp)
   1b6c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1b6c4:	008000f4 	movhi	r2,3
   1b6c8:	10a7be04 	addi	r2,r2,-24840
   1b6cc:	10800017 	ldw	r2,0(r2)
   1b6d0:	1000041e 	bne	r2,zero,1b6e4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1b6d4:	008000f4 	movhi	r2,3
   1b6d8:	10a7be04 	addi	r2,r2,-24840
   1b6dc:	e0fffb17 	ldw	r3,-20(fp)
   1b6e0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1b6e4:	e0bffc17 	ldw	r2,-16(fp)
   1b6e8:	10800104 	addi	r2,r2,4
   1b6ec:	00c001c4 	movi	r3,7
   1b6f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1b6f4:	d8000015 	stw	zero,0(sp)
   1b6f8:	e13ffd17 	ldw	r4,-12(fp)
   1b6fc:	e17ffe17 	ldw	r5,-8(fp)
   1b700:	018000b4 	movhi	r6,2
   1b704:	31ad8a04 	addi	r6,r6,-18904
   1b708:	e1fffc17 	ldw	r7,-16(fp)
   1b70c:	001bb980 	call	1bb98 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1b710:	e037883a 	mov	sp,fp
   1b714:	dfc00117 	ldw	ra,4(sp)
   1b718:	df000017 	ldw	fp,0(sp)
   1b71c:	dec00204 	addi	sp,sp,8
   1b720:	f800283a 	ret

0001b724 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1b724:	defffe04 	addi	sp,sp,-8
   1b728:	df000115 	stw	fp,4(sp)
   1b72c:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   1b730:	008000f4 	movhi	r2,3
   1b734:	10a7bb04 	addi	r2,r2,-24852
   1b738:	10800017 	ldw	r2,0(r2)
   1b73c:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   1b740:	008000f4 	movhi	r2,3
   1b744:	10a7bc04 	addi	r2,r2,-24848
   1b748:	10800017 	ldw	r2,0(r2)
   1b74c:	1000021e 	bne	r2,zero,1b758 <alt_timestamp_start+0x34>
  {
    return -1;
   1b750:	00bfffc4 	movi	r2,-1
   1b754:	00001106 	br	1b79c <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   1b758:	e0bfff17 	ldw	r2,-4(fp)
   1b75c:	10800104 	addi	r2,r2,4
   1b760:	00c00204 	movi	r3,8
   1b764:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   1b768:	e0bfff17 	ldw	r2,-4(fp)
   1b76c:	10800204 	addi	r2,r2,8
   1b770:	00ffffd4 	movui	r3,65535
   1b774:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   1b778:	e0bfff17 	ldw	r2,-4(fp)
   1b77c:	10800304 	addi	r2,r2,12
   1b780:	00ffffd4 	movui	r3,65535
   1b784:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   1b788:	e0bfff17 	ldw	r2,-4(fp)
   1b78c:	10800104 	addi	r2,r2,4
   1b790:	00c00104 	movi	r3,4
   1b794:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   1b798:	0005883a 	mov	r2,zero
}
   1b79c:	e037883a 	mov	sp,fp
   1b7a0:	df000017 	ldw	fp,0(sp)
   1b7a4:	dec00104 	addi	sp,sp,4
   1b7a8:	f800283a 	ret

0001b7ac <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   1b7ac:	defffc04 	addi	sp,sp,-16
   1b7b0:	df000315 	stw	fp,12(sp)
   1b7b4:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   1b7b8:	008000f4 	movhi	r2,3
   1b7bc:	10a7bb04 	addi	r2,r2,-24852
   1b7c0:	10800017 	ldw	r2,0(r2)
   1b7c4:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1b7c8:	008000f4 	movhi	r2,3
   1b7cc:	10a7bc04 	addi	r2,r2,-24848
   1b7d0:	10800017 	ldw	r2,0(r2)
   1b7d4:	1000021e 	bne	r2,zero,1b7e0 <alt_timestamp+0x34>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
   1b7d8:	00bfffc4 	movi	r2,-1
   1b7dc:	00001306 	br	1b82c <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1b7e0:	e0bffd17 	ldw	r2,-12(fp)
   1b7e4:	10800404 	addi	r2,r2,16
   1b7e8:	0007883a 	mov	r3,zero
   1b7ec:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1b7f0:	e0bffd17 	ldw	r2,-12(fp)
   1b7f4:	10800404 	addi	r2,r2,16
   1b7f8:	10800037 	ldwio	r2,0(r2)
   1b7fc:	10bfffcc 	andi	r2,r2,65535
   1b800:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   1b804:	e0bffd17 	ldw	r2,-12(fp)
   1b808:	10800504 	addi	r2,r2,20
   1b80c:	10800037 	ldwio	r2,0(r2)
   1b810:	10bfffcc 	andi	r2,r2,65535
   1b814:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   1b818:	e0bfff17 	ldw	r2,-4(fp)
   1b81c:	1006943a 	slli	r3,r2,16
   1b820:	e0bffe17 	ldw	r2,-8(fp)
   1b824:	1884b03a 	or	r2,r3,r2
   1b828:	0084303a 	nor	r2,zero,r2
    }  
  }
}
   1b82c:	e037883a 	mov	sp,fp
   1b830:	df000017 	ldw	fp,0(sp)
   1b834:	dec00104 	addi	sp,sp,4
   1b838:	f800283a 	ret

0001b83c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   1b83c:	deffff04 	addi	sp,sp,-4
   1b840:	df000015 	stw	fp,0(sp)
   1b844:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   1b848:	008000f4 	movhi	r2,3
   1b84c:	10a7bc04 	addi	r2,r2,-24848
   1b850:	10800017 	ldw	r2,0(r2)
}
   1b854:	e037883a 	mov	sp,fp
   1b858:	df000017 	ldw	fp,0(sp)
   1b85c:	dec00104 	addi	sp,sp,4
   1b860:	f800283a 	ret

0001b864 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b864:	defff504 	addi	sp,sp,-44
   1b868:	df000a15 	stw	fp,40(sp)
   1b86c:	df000a04 	addi	fp,sp,40
   1b870:	e13ffc15 	stw	r4,-16(fp)
   1b874:	e17ffd15 	stw	r5,-12(fp)
   1b878:	e1bffe15 	stw	r6,-8(fp)
   1b87c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b880:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b884:	008000f4 	movhi	r2,3
   1b888:	10a7be04 	addi	r2,r2,-24840
   1b88c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b890:	10003f26 	beq	r2,zero,1b990 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1b894:	e0bffc17 	ldw	r2,-16(fp)
   1b898:	10003b26 	beq	r2,zero,1b988 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1b89c:	e0bffc17 	ldw	r2,-16(fp)
   1b8a0:	e0fffe17 	ldw	r3,-8(fp)
   1b8a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b8a8:	e0bffc17 	ldw	r2,-16(fp)
   1b8ac:	e0ffff17 	ldw	r3,-4(fp)
   1b8b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b8b4:	0005303a 	rdctl	r2,status
   1b8b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b8bc:	e0fff817 	ldw	r3,-32(fp)
   1b8c0:	00bfff84 	movi	r2,-2
   1b8c4:	1884703a 	and	r2,r3,r2
   1b8c8:	1001703a 	wrctl	status,r2
  
  return context;
   1b8cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b8d0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b8d4:	008000f4 	movhi	r2,3
   1b8d8:	10a7bf04 	addi	r2,r2,-24836
   1b8dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b8e0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b8e4:	e0fffd17 	ldw	r3,-12(fp)
   1b8e8:	e0bff617 	ldw	r2,-40(fp)
   1b8ec:	1885883a 	add	r2,r3,r2
   1b8f0:	10c00044 	addi	r3,r2,1
   1b8f4:	e0bffc17 	ldw	r2,-16(fp)
   1b8f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b8fc:	e0bffc17 	ldw	r2,-16(fp)
   1b900:	10c00217 	ldw	r3,8(r2)
   1b904:	e0bff617 	ldw	r2,-40(fp)
   1b908:	1880042e 	bgeu	r3,r2,1b91c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1b90c:	e0bffc17 	ldw	r2,-16(fp)
   1b910:	00c00044 	movi	r3,1
   1b914:	10c00405 	stb	r3,16(r2)
   1b918:	00000206 	br	1b924 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1b91c:	e0bffc17 	ldw	r2,-16(fp)
   1b920:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b924:	e0bffc17 	ldw	r2,-16(fp)
   1b928:	00c000f4 	movhi	r3,3
   1b92c:	18e7aa04 	addi	r3,r3,-24920
   1b930:	e0fff915 	stw	r3,-28(fp)
   1b934:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b938:	e0bffa17 	ldw	r2,-24(fp)
   1b93c:	e0fff917 	ldw	r3,-28(fp)
   1b940:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b944:	e0bff917 	ldw	r2,-28(fp)
   1b948:	10c00017 	ldw	r3,0(r2)
   1b94c:	e0bffa17 	ldw	r2,-24(fp)
   1b950:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b954:	e0bff917 	ldw	r2,-28(fp)
   1b958:	10800017 	ldw	r2,0(r2)
   1b95c:	e0fffa17 	ldw	r3,-24(fp)
   1b960:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b964:	e0bff917 	ldw	r2,-28(fp)
   1b968:	e0fffa17 	ldw	r3,-24(fp)
   1b96c:	10c00015 	stw	r3,0(r2)
   1b970:	e0bff717 	ldw	r2,-36(fp)
   1b974:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b978:	e0bffb17 	ldw	r2,-20(fp)
   1b97c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b980:	0005883a 	mov	r2,zero
   1b984:	00000306 	br	1b994 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1b988:	00bffa84 	movi	r2,-22
   1b98c:	00000106 	br	1b994 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1b990:	00bfde84 	movi	r2,-134
  }
}
   1b994:	e037883a 	mov	sp,fp
   1b998:	df000017 	ldw	fp,0(sp)
   1b99c:	dec00104 	addi	sp,sp,4
   1b9a0:	f800283a 	ret

0001b9a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b9a4:	deffff04 	addi	sp,sp,-4
   1b9a8:	df000015 	stw	fp,0(sp)
   1b9ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b9b0:	e037883a 	mov	sp,fp
   1b9b4:	df000017 	ldw	fp,0(sp)
   1b9b8:	dec00104 	addi	sp,sp,4
   1b9bc:	f800283a 	ret

0001b9c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b9c0:	defffe04 	addi	sp,sp,-8
   1b9c4:	dfc00115 	stw	ra,4(sp)
   1b9c8:	df000015 	stw	fp,0(sp)
   1b9cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b9d0:	008000f4 	movhi	r2,3
   1b9d4:	10a7a704 	addi	r2,r2,-24932
   1b9d8:	10800017 	ldw	r2,0(r2)
   1b9dc:	10000526 	beq	r2,zero,1b9f4 <alt_get_errno+0x34>
   1b9e0:	008000f4 	movhi	r2,3
   1b9e4:	10a7a704 	addi	r2,r2,-24932
   1b9e8:	10800017 	ldw	r2,0(r2)
   1b9ec:	103ee83a 	callr	r2
   1b9f0:	00000206 	br	1b9fc <alt_get_errno+0x3c>
   1b9f4:	008000f4 	movhi	r2,3
   1b9f8:	10a7b704 	addi	r2,r2,-24868
}
   1b9fc:	e037883a 	mov	sp,fp
   1ba00:	dfc00117 	ldw	ra,4(sp)
   1ba04:	df000017 	ldw	fp,0(sp)
   1ba08:	dec00204 	addi	sp,sp,8
   1ba0c:	f800283a 	ret

0001ba10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1ba10:	defffa04 	addi	sp,sp,-24
   1ba14:	dfc00515 	stw	ra,20(sp)
   1ba18:	df000415 	stw	fp,16(sp)
   1ba1c:	df000404 	addi	fp,sp,16
   1ba20:	e13ffe15 	stw	r4,-8(fp)
   1ba24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1ba28:	e0bffe17 	ldw	r2,-8(fp)
   1ba2c:	10000326 	beq	r2,zero,1ba3c <alt_dev_llist_insert+0x2c>
   1ba30:	e0bffe17 	ldw	r2,-8(fp)
   1ba34:	10800217 	ldw	r2,8(r2)
   1ba38:	1000051e 	bne	r2,zero,1ba50 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   1ba3c:	001b9c00 	call	1b9c0 <alt_get_errno>
   1ba40:	00c00584 	movi	r3,22
   1ba44:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1ba48:	00bffa84 	movi	r2,-22
   1ba4c:	00001306 	br	1ba9c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1ba50:	e0bffe17 	ldw	r2,-8(fp)
   1ba54:	e0ffff17 	ldw	r3,-4(fp)
   1ba58:	e0fffc15 	stw	r3,-16(fp)
   1ba5c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1ba60:	e0bffd17 	ldw	r2,-12(fp)
   1ba64:	e0fffc17 	ldw	r3,-16(fp)
   1ba68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1ba6c:	e0bffc17 	ldw	r2,-16(fp)
   1ba70:	10c00017 	ldw	r3,0(r2)
   1ba74:	e0bffd17 	ldw	r2,-12(fp)
   1ba78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1ba7c:	e0bffc17 	ldw	r2,-16(fp)
   1ba80:	10800017 	ldw	r2,0(r2)
   1ba84:	e0fffd17 	ldw	r3,-12(fp)
   1ba88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1ba8c:	e0bffc17 	ldw	r2,-16(fp)
   1ba90:	e0fffd17 	ldw	r3,-12(fp)
   1ba94:	10c00015 	stw	r3,0(r2)

  return 0;  
   1ba98:	0005883a 	mov	r2,zero
}
   1ba9c:	e037883a 	mov	sp,fp
   1baa0:	dfc00117 	ldw	ra,4(sp)
   1baa4:	df000017 	ldw	fp,0(sp)
   1baa8:	dec00204 	addi	sp,sp,8
   1baac:	f800283a 	ret

0001bab0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1bab0:	defffd04 	addi	sp,sp,-12
   1bab4:	dfc00215 	stw	ra,8(sp)
   1bab8:	df000115 	stw	fp,4(sp)
   1babc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1bac0:	008000b4 	movhi	r2,2
   1bac4:	10b2b804 	addi	r2,r2,-13600
   1bac8:	e0bfff15 	stw	r2,-4(fp)
   1bacc:	00000606 	br	1bae8 <_do_ctors+0x38>
        (*ctor) (); 
   1bad0:	e0bfff17 	ldw	r2,-4(fp)
   1bad4:	10800017 	ldw	r2,0(r2)
   1bad8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1badc:	e0bfff17 	ldw	r2,-4(fp)
   1bae0:	10bfff04 	addi	r2,r2,-4
   1bae4:	e0bfff15 	stw	r2,-4(fp)
   1bae8:	e0ffff17 	ldw	r3,-4(fp)
   1baec:	008000b4 	movhi	r2,2
   1baf0:	10b2b904 	addi	r2,r2,-13596
   1baf4:	18bff62e 	bgeu	r3,r2,1bad0 <_do_ctors+0x20>
        (*ctor) (); 
}
   1baf8:	e037883a 	mov	sp,fp
   1bafc:	dfc00117 	ldw	ra,4(sp)
   1bb00:	df000017 	ldw	fp,0(sp)
   1bb04:	dec00204 	addi	sp,sp,8
   1bb08:	f800283a 	ret

0001bb0c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1bb0c:	defffd04 	addi	sp,sp,-12
   1bb10:	dfc00215 	stw	ra,8(sp)
   1bb14:	df000115 	stw	fp,4(sp)
   1bb18:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1bb1c:	008000b4 	movhi	r2,2
   1bb20:	10b2b804 	addi	r2,r2,-13600
   1bb24:	e0bfff15 	stw	r2,-4(fp)
   1bb28:	00000606 	br	1bb44 <_do_dtors+0x38>
        (*dtor) (); 
   1bb2c:	e0bfff17 	ldw	r2,-4(fp)
   1bb30:	10800017 	ldw	r2,0(r2)
   1bb34:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1bb38:	e0bfff17 	ldw	r2,-4(fp)
   1bb3c:	10bfff04 	addi	r2,r2,-4
   1bb40:	e0bfff15 	stw	r2,-4(fp)
   1bb44:	e0ffff17 	ldw	r3,-4(fp)
   1bb48:	008000b4 	movhi	r2,2
   1bb4c:	10b2b904 	addi	r2,r2,-13596
   1bb50:	18bff62e 	bgeu	r3,r2,1bb2c <_do_dtors+0x20>
        (*dtor) (); 
}
   1bb54:	e037883a 	mov	sp,fp
   1bb58:	dfc00117 	ldw	ra,4(sp)
   1bb5c:	df000017 	ldw	fp,0(sp)
   1bb60:	dec00204 	addi	sp,sp,8
   1bb64:	f800283a 	ret

0001bb68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1bb68:	defffe04 	addi	sp,sp,-8
   1bb6c:	dfc00115 	stw	ra,4(sp)
   1bb70:	df000015 	stw	fp,0(sp)
   1bb74:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1bb78:	0009883a 	mov	r4,zero
   1bb7c:	01440004 	movi	r5,4096
   1bb80:	001c6840 	call	1c684 <alt_icache_flush>
#endif
}
   1bb84:	e037883a 	mov	sp,fp
   1bb88:	dfc00117 	ldw	ra,4(sp)
   1bb8c:	df000017 	ldw	fp,0(sp)
   1bb90:	dec00204 	addi	sp,sp,8
   1bb94:	f800283a 	ret

0001bb98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1bb98:	defff904 	addi	sp,sp,-28
   1bb9c:	dfc00615 	stw	ra,24(sp)
   1bba0:	df000515 	stw	fp,20(sp)
   1bba4:	df000504 	addi	fp,sp,20
   1bba8:	e13ffc15 	stw	r4,-16(fp)
   1bbac:	e17ffd15 	stw	r5,-12(fp)
   1bbb0:	e1bffe15 	stw	r6,-8(fp)
   1bbb4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1bbb8:	e0800217 	ldw	r2,8(fp)
   1bbbc:	d8800015 	stw	r2,0(sp)
   1bbc0:	e13ffc17 	ldw	r4,-16(fp)
   1bbc4:	e17ffd17 	ldw	r5,-12(fp)
   1bbc8:	e1bffe17 	ldw	r6,-8(fp)
   1bbcc:	e1ffff17 	ldw	r7,-4(fp)
   1bbd0:	001bd700 	call	1bd70 <alt_iic_isr_register>
}  
   1bbd4:	e037883a 	mov	sp,fp
   1bbd8:	dfc00117 	ldw	ra,4(sp)
   1bbdc:	df000017 	ldw	fp,0(sp)
   1bbe0:	dec00204 	addi	sp,sp,8
   1bbe4:	f800283a 	ret

0001bbe8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1bbe8:	defff904 	addi	sp,sp,-28
   1bbec:	df000615 	stw	fp,24(sp)
   1bbf0:	df000604 	addi	fp,sp,24
   1bbf4:	e13ffe15 	stw	r4,-8(fp)
   1bbf8:	e17fff15 	stw	r5,-4(fp)
   1bbfc:	e0bfff17 	ldw	r2,-4(fp)
   1bc00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bc04:	0005303a 	rdctl	r2,status
   1bc08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bc0c:	e0fffb17 	ldw	r3,-20(fp)
   1bc10:	00bfff84 	movi	r2,-2
   1bc14:	1884703a 	and	r2,r3,r2
   1bc18:	1001703a 	wrctl	status,r2
  
  return context;
   1bc1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bc20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1bc24:	e0bffa17 	ldw	r2,-24(fp)
   1bc28:	00c00044 	movi	r3,1
   1bc2c:	1884983a 	sll	r2,r3,r2
   1bc30:	1007883a 	mov	r3,r2
   1bc34:	008000f4 	movhi	r2,3
   1bc38:	10a7bd04 	addi	r2,r2,-24844
   1bc3c:	10800017 	ldw	r2,0(r2)
   1bc40:	1886b03a 	or	r3,r3,r2
   1bc44:	008000f4 	movhi	r2,3
   1bc48:	10a7bd04 	addi	r2,r2,-24844
   1bc4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bc50:	008000f4 	movhi	r2,3
   1bc54:	10a7bd04 	addi	r2,r2,-24844
   1bc58:	10800017 	ldw	r2,0(r2)
   1bc5c:	100170fa 	wrctl	ienable,r2
   1bc60:	e0bffc17 	ldw	r2,-16(fp)
   1bc64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc68:	e0bffd17 	ldw	r2,-12(fp)
   1bc6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bc70:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1bc74:	e037883a 	mov	sp,fp
   1bc78:	df000017 	ldw	fp,0(sp)
   1bc7c:	dec00104 	addi	sp,sp,4
   1bc80:	f800283a 	ret

0001bc84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1bc84:	defff904 	addi	sp,sp,-28
   1bc88:	df000615 	stw	fp,24(sp)
   1bc8c:	df000604 	addi	fp,sp,24
   1bc90:	e13ffe15 	stw	r4,-8(fp)
   1bc94:	e17fff15 	stw	r5,-4(fp)
   1bc98:	e0bfff17 	ldw	r2,-4(fp)
   1bc9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bca0:	0005303a 	rdctl	r2,status
   1bca4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bca8:	e0fffb17 	ldw	r3,-20(fp)
   1bcac:	00bfff84 	movi	r2,-2
   1bcb0:	1884703a 	and	r2,r3,r2
   1bcb4:	1001703a 	wrctl	status,r2
  
  return context;
   1bcb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1bcbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1bcc0:	e0bffa17 	ldw	r2,-24(fp)
   1bcc4:	00c00044 	movi	r3,1
   1bcc8:	1884983a 	sll	r2,r3,r2
   1bccc:	0084303a 	nor	r2,zero,r2
   1bcd0:	1007883a 	mov	r3,r2
   1bcd4:	008000f4 	movhi	r2,3
   1bcd8:	10a7bd04 	addi	r2,r2,-24844
   1bcdc:	10800017 	ldw	r2,0(r2)
   1bce0:	1886703a 	and	r3,r3,r2
   1bce4:	008000f4 	movhi	r2,3
   1bce8:	10a7bd04 	addi	r2,r2,-24844
   1bcec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1bcf0:	008000f4 	movhi	r2,3
   1bcf4:	10a7bd04 	addi	r2,r2,-24844
   1bcf8:	10800017 	ldw	r2,0(r2)
   1bcfc:	100170fa 	wrctl	ienable,r2
   1bd00:	e0bffc17 	ldw	r2,-16(fp)
   1bd04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd08:	e0bffd17 	ldw	r2,-12(fp)
   1bd0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1bd10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1bd14:	e037883a 	mov	sp,fp
   1bd18:	df000017 	ldw	fp,0(sp)
   1bd1c:	dec00104 	addi	sp,sp,4
   1bd20:	f800283a 	ret

0001bd24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1bd24:	defffc04 	addi	sp,sp,-16
   1bd28:	df000315 	stw	fp,12(sp)
   1bd2c:	df000304 	addi	fp,sp,12
   1bd30:	e13ffe15 	stw	r4,-8(fp)
   1bd34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1bd38:	000530fa 	rdctl	r2,ienable
   1bd3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1bd40:	e0bfff17 	ldw	r2,-4(fp)
   1bd44:	00c00044 	movi	r3,1
   1bd48:	1884983a 	sll	r2,r3,r2
   1bd4c:	1007883a 	mov	r3,r2
   1bd50:	e0bffd17 	ldw	r2,-12(fp)
   1bd54:	1884703a 	and	r2,r3,r2
   1bd58:	1004c03a 	cmpne	r2,r2,zero
   1bd5c:	10803fcc 	andi	r2,r2,255
}
   1bd60:	e037883a 	mov	sp,fp
   1bd64:	df000017 	ldw	fp,0(sp)
   1bd68:	dec00104 	addi	sp,sp,4
   1bd6c:	f800283a 	ret

0001bd70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1bd70:	defff504 	addi	sp,sp,-44
   1bd74:	dfc00a15 	stw	ra,40(sp)
   1bd78:	df000915 	stw	fp,36(sp)
   1bd7c:	df000904 	addi	fp,sp,36
   1bd80:	e13ffc15 	stw	r4,-16(fp)
   1bd84:	e17ffd15 	stw	r5,-12(fp)
   1bd88:	e1bffe15 	stw	r6,-8(fp)
   1bd8c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1bd90:	00bffa84 	movi	r2,-22
   1bd94:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1bd98:	e0bffd17 	ldw	r2,-12(fp)
   1bd9c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1bda0:	e0bff817 	ldw	r2,-32(fp)
   1bda4:	10800808 	cmpgei	r2,r2,32
   1bda8:	1000271e 	bne	r2,zero,1be48 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bdac:	0005303a 	rdctl	r2,status
   1bdb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bdb4:	e0fffa17 	ldw	r3,-24(fp)
   1bdb8:	00bfff84 	movi	r2,-2
   1bdbc:	1884703a 	and	r2,r3,r2
   1bdc0:	1001703a 	wrctl	status,r2
  
  return context;
   1bdc4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1bdc8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   1bdcc:	00c000f4 	movhi	r3,3
   1bdd0:	18e7ca04 	addi	r3,r3,-24792
   1bdd4:	e0bff817 	ldw	r2,-32(fp)
   1bdd8:	100490fa 	slli	r2,r2,3
   1bddc:	1885883a 	add	r2,r3,r2
   1bde0:	e0fffe17 	ldw	r3,-8(fp)
   1bde4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1bde8:	00c000f4 	movhi	r3,3
   1bdec:	18e7ca04 	addi	r3,r3,-24792
   1bdf0:	e0bff817 	ldw	r2,-32(fp)
   1bdf4:	100490fa 	slli	r2,r2,3
   1bdf8:	1885883a 	add	r2,r3,r2
   1bdfc:	10800104 	addi	r2,r2,4
   1be00:	e0ffff17 	ldw	r3,-4(fp)
   1be04:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1be08:	e0bffe17 	ldw	r2,-8(fp)
   1be0c:	10000526 	beq	r2,zero,1be24 <alt_iic_isr_register+0xb4>
   1be10:	e0bff817 	ldw	r2,-32(fp)
   1be14:	e13ffc17 	ldw	r4,-16(fp)
   1be18:	100b883a 	mov	r5,r2
   1be1c:	001bbe80 	call	1bbe8 <alt_ic_irq_enable>
   1be20:	00000406 	br	1be34 <alt_iic_isr_register+0xc4>
   1be24:	e0bff817 	ldw	r2,-32(fp)
   1be28:	e13ffc17 	ldw	r4,-16(fp)
   1be2c:	100b883a 	mov	r5,r2
   1be30:	001bc840 	call	1bc84 <alt_ic_irq_disable>
   1be34:	e0bff715 	stw	r2,-36(fp)
   1be38:	e0bff917 	ldw	r2,-28(fp)
   1be3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be40:	e0bffb17 	ldw	r2,-20(fp)
   1be44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1be48:	e0bff717 	ldw	r2,-36(fp)
}
   1be4c:	e037883a 	mov	sp,fp
   1be50:	dfc00117 	ldw	ra,4(sp)
   1be54:	df000017 	ldw	fp,0(sp)
   1be58:	dec00204 	addi	sp,sp,8
   1be5c:	f800283a 	ret

0001be60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1be60:	defff804 	addi	sp,sp,-32
   1be64:	dfc00715 	stw	ra,28(sp)
   1be68:	df000615 	stw	fp,24(sp)
   1be6c:	dc000515 	stw	r16,20(sp)
   1be70:	df000504 	addi	fp,sp,20
   1be74:	e13ffc15 	stw	r4,-16(fp)
   1be78:	e17ffd15 	stw	r5,-12(fp)
   1be7c:	e1bffe15 	stw	r6,-8(fp)
   1be80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1be84:	e13ffd17 	ldw	r4,-12(fp)
   1be88:	e17ffe17 	ldw	r5,-8(fp)
   1be8c:	e1bfff17 	ldw	r6,-4(fp)
   1be90:	001c0f80 	call	1c0f8 <open>
   1be94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1be98:	e0bffb17 	ldw	r2,-20(fp)
   1be9c:	10002216 	blt	r2,zero,1bf28 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1bea0:	040000f4 	movhi	r16,3
   1bea4:	84232504 	addi	r16,r16,-29548
   1bea8:	e0bffb17 	ldw	r2,-20(fp)
   1beac:	1009883a 	mov	r4,r2
   1beb0:	01400304 	movi	r5,12
   1beb4:	00106600 	call	10660 <__mulsi3>
   1beb8:	8085883a 	add	r2,r16,r2
   1bebc:	10c00017 	ldw	r3,0(r2)
   1bec0:	e0bffc17 	ldw	r2,-16(fp)
   1bec4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1bec8:	040000f4 	movhi	r16,3
   1becc:	84232504 	addi	r16,r16,-29548
   1bed0:	e0bffb17 	ldw	r2,-20(fp)
   1bed4:	1009883a 	mov	r4,r2
   1bed8:	01400304 	movi	r5,12
   1bedc:	00106600 	call	10660 <__mulsi3>
   1bee0:	8085883a 	add	r2,r16,r2
   1bee4:	10800104 	addi	r2,r2,4
   1bee8:	10c00017 	ldw	r3,0(r2)
   1beec:	e0bffc17 	ldw	r2,-16(fp)
   1bef0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1bef4:	040000f4 	movhi	r16,3
   1bef8:	84232504 	addi	r16,r16,-29548
   1befc:	e0bffb17 	ldw	r2,-20(fp)
   1bf00:	1009883a 	mov	r4,r2
   1bf04:	01400304 	movi	r5,12
   1bf08:	00106600 	call	10660 <__mulsi3>
   1bf0c:	8085883a 	add	r2,r16,r2
   1bf10:	10800204 	addi	r2,r2,8
   1bf14:	10c00017 	ldw	r3,0(r2)
   1bf18:	e0bffc17 	ldw	r2,-16(fp)
   1bf1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1bf20:	e13ffb17 	ldw	r4,-20(fp)
   1bf24:	001a3740 	call	1a374 <alt_release_fd>
  }
} 
   1bf28:	e037883a 	mov	sp,fp
   1bf2c:	dfc00217 	ldw	ra,8(sp)
   1bf30:	df000117 	ldw	fp,4(sp)
   1bf34:	dc000017 	ldw	r16,0(sp)
   1bf38:	dec00304 	addi	sp,sp,12
   1bf3c:	f800283a 	ret

0001bf40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1bf40:	defffb04 	addi	sp,sp,-20
   1bf44:	dfc00415 	stw	ra,16(sp)
   1bf48:	df000315 	stw	fp,12(sp)
   1bf4c:	df000304 	addi	fp,sp,12
   1bf50:	e13ffd15 	stw	r4,-12(fp)
   1bf54:	e17ffe15 	stw	r5,-8(fp)
   1bf58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1bf5c:	010000f4 	movhi	r4,3
   1bf60:	21232804 	addi	r4,r4,-29536
   1bf64:	e17ffd17 	ldw	r5,-12(fp)
   1bf68:	01800044 	movi	r6,1
   1bf6c:	01c07fc4 	movi	r7,511
   1bf70:	001be600 	call	1be60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1bf74:	010000f4 	movhi	r4,3
   1bf78:	21232504 	addi	r4,r4,-29548
   1bf7c:	e17ffe17 	ldw	r5,-8(fp)
   1bf80:	000d883a 	mov	r6,zero
   1bf84:	01c07fc4 	movi	r7,511
   1bf88:	001be600 	call	1be60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1bf8c:	010000f4 	movhi	r4,3
   1bf90:	21232b04 	addi	r4,r4,-29524
   1bf94:	e17fff17 	ldw	r5,-4(fp)
   1bf98:	01800044 	movi	r6,1
   1bf9c:	01c07fc4 	movi	r7,511
   1bfa0:	001be600 	call	1be60 <alt_open_fd>
}  
   1bfa4:	e037883a 	mov	sp,fp
   1bfa8:	dfc00117 	ldw	ra,4(sp)
   1bfac:	df000017 	ldw	fp,0(sp)
   1bfb0:	dec00204 	addi	sp,sp,8
   1bfb4:	f800283a 	ret

0001bfb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bfb8:	defffe04 	addi	sp,sp,-8
   1bfbc:	dfc00115 	stw	ra,4(sp)
   1bfc0:	df000015 	stw	fp,0(sp)
   1bfc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1bfc8:	008000f4 	movhi	r2,3
   1bfcc:	10a7a704 	addi	r2,r2,-24932
   1bfd0:	10800017 	ldw	r2,0(r2)
   1bfd4:	10000526 	beq	r2,zero,1bfec <alt_get_errno+0x34>
   1bfd8:	008000f4 	movhi	r2,3
   1bfdc:	10a7a704 	addi	r2,r2,-24932
   1bfe0:	10800017 	ldw	r2,0(r2)
   1bfe4:	103ee83a 	callr	r2
   1bfe8:	00000206 	br	1bff4 <alt_get_errno+0x3c>
   1bfec:	008000f4 	movhi	r2,3
   1bff0:	10a7b704 	addi	r2,r2,-24868
}
   1bff4:	e037883a 	mov	sp,fp
   1bff8:	dfc00117 	ldw	ra,4(sp)
   1bffc:	df000017 	ldw	fp,0(sp)
   1c000:	dec00204 	addi	sp,sp,8
   1c004:	f800283a 	ret

0001c008 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1c008:	defffb04 	addi	sp,sp,-20
   1c00c:	dfc00415 	stw	ra,16(sp)
   1c010:	df000315 	stw	fp,12(sp)
   1c014:	dc000215 	stw	r16,8(sp)
   1c018:	df000204 	addi	fp,sp,8
   1c01c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1c020:	e0bfff17 	ldw	r2,-4(fp)
   1c024:	10800217 	ldw	r2,8(r2)
   1c028:	10d00034 	orhi	r3,r2,16384
   1c02c:	e0bfff17 	ldw	r2,-4(fp)
   1c030:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1c034:	e03ffe15 	stw	zero,-8(fp)
   1c038:	00002206 	br	1c0c4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1c03c:	040000f4 	movhi	r16,3
   1c040:	84232504 	addi	r16,r16,-29548
   1c044:	e0bffe17 	ldw	r2,-8(fp)
   1c048:	1009883a 	mov	r4,r2
   1c04c:	01400304 	movi	r5,12
   1c050:	00106600 	call	10660 <__mulsi3>
   1c054:	8085883a 	add	r2,r16,r2
   1c058:	10c00017 	ldw	r3,0(r2)
   1c05c:	e0bfff17 	ldw	r2,-4(fp)
   1c060:	10800017 	ldw	r2,0(r2)
   1c064:	1880141e 	bne	r3,r2,1c0b8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1c068:	040000f4 	movhi	r16,3
   1c06c:	84232504 	addi	r16,r16,-29548
   1c070:	e0bffe17 	ldw	r2,-8(fp)
   1c074:	1009883a 	mov	r4,r2
   1c078:	01400304 	movi	r5,12
   1c07c:	00106600 	call	10660 <__mulsi3>
   1c080:	8085883a 	add	r2,r16,r2
   1c084:	10800204 	addi	r2,r2,8
   1c088:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1c08c:	10000a0e 	bge	r2,zero,1c0b8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1c090:	e13ffe17 	ldw	r4,-8(fp)
   1c094:	01400304 	movi	r5,12
   1c098:	00106600 	call	10660 <__mulsi3>
   1c09c:	00c000f4 	movhi	r3,3
   1c0a0:	18e32504 	addi	r3,r3,-29548
   1c0a4:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1c0a8:	e0bfff17 	ldw	r2,-4(fp)
   1c0ac:	18800226 	beq	r3,r2,1c0b8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1c0b0:	00bffcc4 	movi	r2,-13
   1c0b4:	00000a06 	br	1c0e0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1c0b8:	e0bffe17 	ldw	r2,-8(fp)
   1c0bc:	10800044 	addi	r2,r2,1
   1c0c0:	e0bffe15 	stw	r2,-8(fp)
   1c0c4:	008000f4 	movhi	r2,3
   1c0c8:	10a7a604 	addi	r2,r2,-24936
   1c0cc:	10800017 	ldw	r2,0(r2)
   1c0d0:	1007883a 	mov	r3,r2
   1c0d4:	e0bffe17 	ldw	r2,-8(fp)
   1c0d8:	18bfd82e 	bgeu	r3,r2,1c03c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1c0dc:	0005883a 	mov	r2,zero
}
   1c0e0:	e037883a 	mov	sp,fp
   1c0e4:	dfc00217 	ldw	ra,8(sp)
   1c0e8:	df000117 	ldw	fp,4(sp)
   1c0ec:	dc000017 	ldw	r16,0(sp)
   1c0f0:	dec00304 	addi	sp,sp,12
   1c0f4:	f800283a 	ret

0001c0f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1c0f8:	defff604 	addi	sp,sp,-40
   1c0fc:	dfc00915 	stw	ra,36(sp)
   1c100:	df000815 	stw	fp,32(sp)
   1c104:	df000804 	addi	fp,sp,32
   1c108:	e13ffd15 	stw	r4,-12(fp)
   1c10c:	e17ffe15 	stw	r5,-8(fp)
   1c110:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1c114:	00bfffc4 	movi	r2,-1
   1c118:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1c11c:	00bffb44 	movi	r2,-19
   1c120:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1c124:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1c128:	e13ffd17 	ldw	r4,-12(fp)
   1c12c:	014000f4 	movhi	r5,3
   1c130:	2967a404 	addi	r5,r5,-24944
   1c134:	001c40c0 	call	1c40c <alt_find_dev>
   1c138:	e0bff815 	stw	r2,-32(fp)
   1c13c:	e0bff817 	ldw	r2,-32(fp)
   1c140:	1000051e 	bne	r2,zero,1c158 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1c144:	e13ffd17 	ldw	r4,-12(fp)
   1c148:	001c49c0 	call	1c49c <alt_find_file>
   1c14c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1c150:	00800044 	movi	r2,1
   1c154:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1c158:	e0bff817 	ldw	r2,-32(fp)
   1c15c:	10002a26 	beq	r2,zero,1c208 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1c160:	e13ff817 	ldw	r4,-32(fp)
   1c164:	001c5b00 	call	1c5b0 <alt_get_fd>
   1c168:	e0bff915 	stw	r2,-28(fp)
   1c16c:	e0bff917 	ldw	r2,-28(fp)
   1c170:	1000030e 	bge	r2,zero,1c180 <open+0x88>
    {
      status = index;
   1c174:	e0bff917 	ldw	r2,-28(fp)
   1c178:	e0bffa15 	stw	r2,-24(fp)
   1c17c:	00002406 	br	1c210 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1c180:	e13ff917 	ldw	r4,-28(fp)
   1c184:	01400304 	movi	r5,12
   1c188:	00106600 	call	10660 <__mulsi3>
   1c18c:	00c000f4 	movhi	r3,3
   1c190:	18e32504 	addi	r3,r3,-29548
   1c194:	10c5883a 	add	r2,r2,r3
   1c198:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1c19c:	e0fffe17 	ldw	r3,-8(fp)
   1c1a0:	00900034 	movhi	r2,16384
   1c1a4:	10bfffc4 	addi	r2,r2,-1
   1c1a8:	1886703a 	and	r3,r3,r2
   1c1ac:	e0bffc17 	ldw	r2,-16(fp)
   1c1b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1c1b4:	e0bffb17 	ldw	r2,-20(fp)
   1c1b8:	1000051e 	bne	r2,zero,1c1d0 <open+0xd8>
   1c1bc:	e13ffc17 	ldw	r4,-16(fp)
   1c1c0:	001c0080 	call	1c008 <alt_file_locked>
   1c1c4:	e0bffa15 	stw	r2,-24(fp)
   1c1c8:	e0bffa17 	ldw	r2,-24(fp)
   1c1cc:	10001016 	blt	r2,zero,1c210 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1c1d0:	e0bff817 	ldw	r2,-32(fp)
   1c1d4:	10800317 	ldw	r2,12(r2)
   1c1d8:	10000826 	beq	r2,zero,1c1fc <open+0x104>
   1c1dc:	e0bff817 	ldw	r2,-32(fp)
   1c1e0:	10800317 	ldw	r2,12(r2)
   1c1e4:	e13ffc17 	ldw	r4,-16(fp)
   1c1e8:	e17ffd17 	ldw	r5,-12(fp)
   1c1ec:	e1bffe17 	ldw	r6,-8(fp)
   1c1f0:	e1ffff17 	ldw	r7,-4(fp)
   1c1f4:	103ee83a 	callr	r2
   1c1f8:	00000106 	br	1c200 <open+0x108>
   1c1fc:	0005883a 	mov	r2,zero
   1c200:	e0bffa15 	stw	r2,-24(fp)
   1c204:	00000206 	br	1c210 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1c208:	00bffb44 	movi	r2,-19
   1c20c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1c210:	e0bffa17 	ldw	r2,-24(fp)
   1c214:	1000080e 	bge	r2,zero,1c238 <open+0x140>
  {
    alt_release_fd (index);  
   1c218:	e13ff917 	ldw	r4,-28(fp)
   1c21c:	001a3740 	call	1a374 <alt_release_fd>
    ALT_ERRNO = -status;
   1c220:	001bfb80 	call	1bfb8 <alt_get_errno>
   1c224:	e0fffa17 	ldw	r3,-24(fp)
   1c228:	00c7c83a 	sub	r3,zero,r3
   1c22c:	10c00015 	stw	r3,0(r2)
    return -1;
   1c230:	00bfffc4 	movi	r2,-1
   1c234:	00000106 	br	1c23c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1c238:	e0bff917 	ldw	r2,-28(fp)
}
   1c23c:	e037883a 	mov	sp,fp
   1c240:	dfc00117 	ldw	ra,4(sp)
   1c244:	df000017 	ldw	fp,0(sp)
   1c248:	dec00204 	addi	sp,sp,8
   1c24c:	f800283a 	ret

0001c250 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1c250:	defffa04 	addi	sp,sp,-24
   1c254:	df000515 	stw	fp,20(sp)
   1c258:	df000504 	addi	fp,sp,20
   1c25c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c260:	0005303a 	rdctl	r2,status
   1c264:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c268:	e0fffc17 	ldw	r3,-16(fp)
   1c26c:	00bfff84 	movi	r2,-2
   1c270:	1884703a 	and	r2,r3,r2
   1c274:	1001703a 	wrctl	status,r2
  
  return context;
   1c278:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1c27c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1c280:	e0bfff17 	ldw	r2,-4(fp)
   1c284:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1c288:	e0bffd17 	ldw	r2,-12(fp)
   1c28c:	10800017 	ldw	r2,0(r2)
   1c290:	e0fffd17 	ldw	r3,-12(fp)
   1c294:	18c00117 	ldw	r3,4(r3)
   1c298:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1c29c:	e0bffd17 	ldw	r2,-12(fp)
   1c2a0:	10800117 	ldw	r2,4(r2)
   1c2a4:	e0fffd17 	ldw	r3,-12(fp)
   1c2a8:	18c00017 	ldw	r3,0(r3)
   1c2ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1c2b0:	e0bffd17 	ldw	r2,-12(fp)
   1c2b4:	e0fffd17 	ldw	r3,-12(fp)
   1c2b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1c2bc:	e0bffd17 	ldw	r2,-12(fp)
   1c2c0:	e0fffd17 	ldw	r3,-12(fp)
   1c2c4:	10c00015 	stw	r3,0(r2)
   1c2c8:	e0bffb17 	ldw	r2,-20(fp)
   1c2cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c2d0:	e0bffe17 	ldw	r2,-8(fp)
   1c2d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1c2d8:	e037883a 	mov	sp,fp
   1c2dc:	df000017 	ldw	fp,0(sp)
   1c2e0:	dec00104 	addi	sp,sp,4
   1c2e4:	f800283a 	ret

0001c2e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1c2e8:	defffb04 	addi	sp,sp,-20
   1c2ec:	dfc00415 	stw	ra,16(sp)
   1c2f0:	df000315 	stw	fp,12(sp)
   1c2f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1c2f8:	d0a00d17 	ldw	r2,-32716(gp)
   1c2fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1c300:	d0a02217 	ldw	r2,-32632(gp)
   1c304:	10800044 	addi	r2,r2,1
   1c308:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c30c:	00002e06 	br	1c3c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1c310:	e0bffd17 	ldw	r2,-12(fp)
   1c314:	10800017 	ldw	r2,0(r2)
   1c318:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1c31c:	e0bffd17 	ldw	r2,-12(fp)
   1c320:	10800403 	ldbu	r2,16(r2)
   1c324:	10803fcc 	andi	r2,r2,255
   1c328:	10000426 	beq	r2,zero,1c33c <alt_tick+0x54>
   1c32c:	d0a02217 	ldw	r2,-32632(gp)
   1c330:	1000021e 	bne	r2,zero,1c33c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1c334:	e0bffd17 	ldw	r2,-12(fp)
   1c338:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1c33c:	e0bffd17 	ldw	r2,-12(fp)
   1c340:	10800217 	ldw	r2,8(r2)
   1c344:	d0e02217 	ldw	r3,-32632(gp)
   1c348:	18801d36 	bltu	r3,r2,1c3c0 <alt_tick+0xd8>
   1c34c:	e0bffd17 	ldw	r2,-12(fp)
   1c350:	10800403 	ldbu	r2,16(r2)
   1c354:	10803fcc 	andi	r2,r2,255
   1c358:	1000191e 	bne	r2,zero,1c3c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1c35c:	e0bffd17 	ldw	r2,-12(fp)
   1c360:	10c00317 	ldw	r3,12(r2)
   1c364:	e0bffd17 	ldw	r2,-12(fp)
   1c368:	10800517 	ldw	r2,20(r2)
   1c36c:	1009883a 	mov	r4,r2
   1c370:	183ee83a 	callr	r3
   1c374:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1c378:	e0bfff17 	ldw	r2,-4(fp)
   1c37c:	1000031e 	bne	r2,zero,1c38c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1c380:	e13ffd17 	ldw	r4,-12(fp)
   1c384:	001c2500 	call	1c250 <alt_alarm_stop>
   1c388:	00000d06 	br	1c3c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1c38c:	e0bffd17 	ldw	r2,-12(fp)
   1c390:	10c00217 	ldw	r3,8(r2)
   1c394:	e0bfff17 	ldw	r2,-4(fp)
   1c398:	1887883a 	add	r3,r3,r2
   1c39c:	e0bffd17 	ldw	r2,-12(fp)
   1c3a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1c3a4:	e0bffd17 	ldw	r2,-12(fp)
   1c3a8:	10c00217 	ldw	r3,8(r2)
   1c3ac:	d0a02217 	ldw	r2,-32632(gp)
   1c3b0:	1880032e 	bgeu	r3,r2,1c3c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1c3b4:	e0bffd17 	ldw	r2,-12(fp)
   1c3b8:	00c00044 	movi	r3,1
   1c3bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1c3c0:	e0bffe17 	ldw	r2,-8(fp)
   1c3c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1c3c8:	e0fffd17 	ldw	r3,-12(fp)
   1c3cc:	d0a00d04 	addi	r2,gp,-32716
   1c3d0:	18bfcf1e 	bne	r3,r2,1c310 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1c3d4:	0001883a 	nop
}
   1c3d8:	e037883a 	mov	sp,fp
   1c3dc:	dfc00117 	ldw	ra,4(sp)
   1c3e0:	df000017 	ldw	fp,0(sp)
   1c3e4:	dec00204 	addi	sp,sp,8
   1c3e8:	f800283a 	ret

0001c3ec <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1c3ec:	deffff04 	addi	sp,sp,-4
   1c3f0:	df000015 	stw	fp,0(sp)
   1c3f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1c3f8:	000170fa 	wrctl	ienable,zero
}
   1c3fc:	e037883a 	mov	sp,fp
   1c400:	df000017 	ldw	fp,0(sp)
   1c404:	dec00104 	addi	sp,sp,4
   1c408:	f800283a 	ret

0001c40c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1c40c:	defffa04 	addi	sp,sp,-24
   1c410:	dfc00515 	stw	ra,20(sp)
   1c414:	df000415 	stw	fp,16(sp)
   1c418:	df000404 	addi	fp,sp,16
   1c41c:	e13ffe15 	stw	r4,-8(fp)
   1c420:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1c424:	e0bfff17 	ldw	r2,-4(fp)
   1c428:	10800017 	ldw	r2,0(r2)
   1c42c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1c430:	e13ffe17 	ldw	r4,-8(fp)
   1c434:	00107880 	call	10788 <strlen>
   1c438:	10800044 	addi	r2,r2,1
   1c43c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c440:	00000d06 	br	1c478 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1c444:	e0bffc17 	ldw	r2,-16(fp)
   1c448:	10c00217 	ldw	r3,8(r2)
   1c44c:	e0bffd17 	ldw	r2,-12(fp)
   1c450:	1809883a 	mov	r4,r3
   1c454:	e17ffe17 	ldw	r5,-8(fp)
   1c458:	100d883a 	mov	r6,r2
   1c45c:	001c75c0 	call	1c75c <memcmp>
   1c460:	1000021e 	bne	r2,zero,1c46c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1c464:	e0bffc17 	ldw	r2,-16(fp)
   1c468:	00000706 	br	1c488 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1c46c:	e0bffc17 	ldw	r2,-16(fp)
   1c470:	10800017 	ldw	r2,0(r2)
   1c474:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c478:	e0fffc17 	ldw	r3,-16(fp)
   1c47c:	e0bfff17 	ldw	r2,-4(fp)
   1c480:	18bff01e 	bne	r3,r2,1c444 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1c484:	0005883a 	mov	r2,zero
}
   1c488:	e037883a 	mov	sp,fp
   1c48c:	dfc00117 	ldw	ra,4(sp)
   1c490:	df000017 	ldw	fp,0(sp)
   1c494:	dec00204 	addi	sp,sp,8
   1c498:	f800283a 	ret

0001c49c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1c49c:	defffb04 	addi	sp,sp,-20
   1c4a0:	dfc00415 	stw	ra,16(sp)
   1c4a4:	df000315 	stw	fp,12(sp)
   1c4a8:	df000304 	addi	fp,sp,12
   1c4ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1c4b0:	008000f4 	movhi	r2,3
   1c4b4:	10a7a204 	addi	r2,r2,-24952
   1c4b8:	10800017 	ldw	r2,0(r2)
   1c4bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c4c0:	00003106 	br	1c588 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1c4c4:	e0bffd17 	ldw	r2,-12(fp)
   1c4c8:	10800217 	ldw	r2,8(r2)
   1c4cc:	1009883a 	mov	r4,r2
   1c4d0:	00107880 	call	10788 <strlen>
   1c4d4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1c4d8:	e0bffd17 	ldw	r2,-12(fp)
   1c4dc:	10c00217 	ldw	r3,8(r2)
   1c4e0:	e0bffe17 	ldw	r2,-8(fp)
   1c4e4:	10bfffc4 	addi	r2,r2,-1
   1c4e8:	1885883a 	add	r2,r3,r2
   1c4ec:	10800003 	ldbu	r2,0(r2)
   1c4f0:	10803fcc 	andi	r2,r2,255
   1c4f4:	1080201c 	xori	r2,r2,128
   1c4f8:	10bfe004 	addi	r2,r2,-128
   1c4fc:	10800bd8 	cmpnei	r2,r2,47
   1c500:	1000031e 	bne	r2,zero,1c510 <alt_find_file+0x74>
    {
      len -= 1;
   1c504:	e0bffe17 	ldw	r2,-8(fp)
   1c508:	10bfffc4 	addi	r2,r2,-1
   1c50c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c510:	e0bffe17 	ldw	r2,-8(fp)
   1c514:	e0ffff17 	ldw	r3,-4(fp)
   1c518:	1885883a 	add	r2,r3,r2
   1c51c:	10800003 	ldbu	r2,0(r2)
   1c520:	10803fcc 	andi	r2,r2,255
   1c524:	1080201c 	xori	r2,r2,128
   1c528:	10bfe004 	addi	r2,r2,-128
   1c52c:	10800be0 	cmpeqi	r2,r2,47
   1c530:	1000081e 	bne	r2,zero,1c554 <alt_find_file+0xb8>
   1c534:	e0bffe17 	ldw	r2,-8(fp)
   1c538:	e0ffff17 	ldw	r3,-4(fp)
   1c53c:	1885883a 	add	r2,r3,r2
   1c540:	10800003 	ldbu	r2,0(r2)
   1c544:	10803fcc 	andi	r2,r2,255
   1c548:	1080201c 	xori	r2,r2,128
   1c54c:	10bfe004 	addi	r2,r2,-128
   1c550:	10000a1e 	bne	r2,zero,1c57c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1c554:	e0bffd17 	ldw	r2,-12(fp)
   1c558:	10c00217 	ldw	r3,8(r2)
   1c55c:	e0bffe17 	ldw	r2,-8(fp)
   1c560:	1809883a 	mov	r4,r3
   1c564:	e17fff17 	ldw	r5,-4(fp)
   1c568:	100d883a 	mov	r6,r2
   1c56c:	001c75c0 	call	1c75c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c570:	1000021e 	bne	r2,zero,1c57c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1c574:	e0bffd17 	ldw	r2,-12(fp)
   1c578:	00000806 	br	1c59c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1c57c:	e0bffd17 	ldw	r2,-12(fp)
   1c580:	10800017 	ldw	r2,0(r2)
   1c584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c588:	e0fffd17 	ldw	r3,-12(fp)
   1c58c:	008000f4 	movhi	r2,3
   1c590:	10a7a204 	addi	r2,r2,-24952
   1c594:	18bfcb1e 	bne	r3,r2,1c4c4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c598:	0005883a 	mov	r2,zero
}
   1c59c:	e037883a 	mov	sp,fp
   1c5a0:	dfc00117 	ldw	ra,4(sp)
   1c5a4:	df000017 	ldw	fp,0(sp)
   1c5a8:	dec00204 	addi	sp,sp,8
   1c5ac:	f800283a 	ret

0001c5b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c5b0:	defffa04 	addi	sp,sp,-24
   1c5b4:	dfc00515 	stw	ra,20(sp)
   1c5b8:	df000415 	stw	fp,16(sp)
   1c5bc:	dc000315 	stw	r16,12(sp)
   1c5c0:	df000304 	addi	fp,sp,12
   1c5c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c5c8:	00bffa04 	movi	r2,-24
   1c5cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c5d0:	e03ffd15 	stw	zero,-12(fp)
   1c5d4:	00002106 	br	1c65c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1c5d8:	040000f4 	movhi	r16,3
   1c5dc:	84232504 	addi	r16,r16,-29548
   1c5e0:	e0bffd17 	ldw	r2,-12(fp)
   1c5e4:	1009883a 	mov	r4,r2
   1c5e8:	01400304 	movi	r5,12
   1c5ec:	00106600 	call	10660 <__mulsi3>
   1c5f0:	8085883a 	add	r2,r16,r2
   1c5f4:	10800017 	ldw	r2,0(r2)
   1c5f8:	1000151e 	bne	r2,zero,1c650 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1c5fc:	040000f4 	movhi	r16,3
   1c600:	84232504 	addi	r16,r16,-29548
   1c604:	e0bffd17 	ldw	r2,-12(fp)
   1c608:	1009883a 	mov	r4,r2
   1c60c:	01400304 	movi	r5,12
   1c610:	00106600 	call	10660 <__mulsi3>
   1c614:	8085883a 	add	r2,r16,r2
   1c618:	e0ffff17 	ldw	r3,-4(fp)
   1c61c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1c620:	008000f4 	movhi	r2,3
   1c624:	10a7a604 	addi	r2,r2,-24936
   1c628:	10c00017 	ldw	r3,0(r2)
   1c62c:	e0bffd17 	ldw	r2,-12(fp)
   1c630:	1880040e 	bge	r3,r2,1c644 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1c634:	008000f4 	movhi	r2,3
   1c638:	10a7a604 	addi	r2,r2,-24936
   1c63c:	e0fffd17 	ldw	r3,-12(fp)
   1c640:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1c644:	e0bffd17 	ldw	r2,-12(fp)
   1c648:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1c64c:	00000606 	br	1c668 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c650:	e0bffd17 	ldw	r2,-12(fp)
   1c654:	10800044 	addi	r2,r2,1
   1c658:	e0bffd15 	stw	r2,-12(fp)
   1c65c:	e0bffd17 	ldw	r2,-12(fp)
   1c660:	10800810 	cmplti	r2,r2,32
   1c664:	103fdc1e 	bne	r2,zero,1c5d8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1c668:	e0bffe17 	ldw	r2,-8(fp)
}
   1c66c:	e037883a 	mov	sp,fp
   1c670:	dfc00217 	ldw	ra,8(sp)
   1c674:	df000117 	ldw	fp,4(sp)
   1c678:	dc000017 	ldw	r16,0(sp)
   1c67c:	dec00304 	addi	sp,sp,12
   1c680:	f800283a 	ret

0001c684 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c684:	defffb04 	addi	sp,sp,-20
   1c688:	df000415 	stw	fp,16(sp)
   1c68c:	df000404 	addi	fp,sp,16
   1c690:	e13ffe15 	stw	r4,-8(fp)
   1c694:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c698:	e0bfff17 	ldw	r2,-4(fp)
   1c69c:	10840070 	cmpltui	r2,r2,4097
   1c6a0:	1000021e 	bne	r2,zero,1c6ac <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c6a4:	00840004 	movi	r2,4096
   1c6a8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c6ac:	e0fffe17 	ldw	r3,-8(fp)
   1c6b0:	e0bfff17 	ldw	r2,-4(fp)
   1c6b4:	1885883a 	add	r2,r3,r2
   1c6b8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c6bc:	e0bffe17 	ldw	r2,-8(fp)
   1c6c0:	e0bffc15 	stw	r2,-16(fp)
   1c6c4:	00000506 	br	1c6dc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c6c8:	e0bffc17 	ldw	r2,-16(fp)
   1c6cc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c6d0:	e0bffc17 	ldw	r2,-16(fp)
   1c6d4:	10800804 	addi	r2,r2,32
   1c6d8:	e0bffc15 	stw	r2,-16(fp)
   1c6dc:	e0fffc17 	ldw	r3,-16(fp)
   1c6e0:	e0bffd17 	ldw	r2,-12(fp)
   1c6e4:	18bff836 	bltu	r3,r2,1c6c8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c6e8:	e0bffe17 	ldw	r2,-8(fp)
   1c6ec:	108007cc 	andi	r2,r2,31
   1c6f0:	10000226 	beq	r2,zero,1c6fc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c6f4:	e0bffc17 	ldw	r2,-16(fp)
   1c6f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c6fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c700:	e037883a 	mov	sp,fp
   1c704:	df000017 	ldw	fp,0(sp)
   1c708:	dec00104 	addi	sp,sp,4
   1c70c:	f800283a 	ret

0001c710 <atexit>:
   1c710:	200b883a 	mov	r5,r4
   1c714:	000d883a 	mov	r6,zero
   1c718:	0009883a 	mov	r4,zero
   1c71c:	000f883a 	mov	r7,zero
   1c720:	001c7d81 	jmpi	1c7d8 <__register_exitproc>

0001c724 <exit>:
   1c724:	defffe04 	addi	sp,sp,-8
   1c728:	000b883a 	mov	r5,zero
   1c72c:	dc000015 	stw	r16,0(sp)
   1c730:	dfc00115 	stw	ra,4(sp)
   1c734:	2021883a 	mov	r16,r4
   1c738:	001c9080 	call	1c908 <__call_exitprocs>
   1c73c:	008000f4 	movhi	r2,3
   1c740:	10a79d04 	addi	r2,r2,-24972
   1c744:	11000017 	ldw	r4,0(r2)
   1c748:	20800f17 	ldw	r2,60(r4)
   1c74c:	10000126 	beq	r2,zero,1c754 <exit+0x30>
   1c750:	103ee83a 	callr	r2
   1c754:	8009883a 	mov	r4,r16
   1c758:	001caa80 	call	1caa8 <_exit>

0001c75c <memcmp>:
   1c75c:	01c000c4 	movi	r7,3
   1c760:	3980192e 	bgeu	r7,r6,1c7c8 <memcmp+0x6c>
   1c764:	2904b03a 	or	r2,r5,r4
   1c768:	11c4703a 	and	r2,r2,r7
   1c76c:	10000f26 	beq	r2,zero,1c7ac <memcmp+0x50>
   1c770:	20c00003 	ldbu	r3,0(r4)
   1c774:	28800003 	ldbu	r2,0(r5)
   1c778:	1880151e 	bne	r3,r2,1c7d0 <memcmp+0x74>
   1c77c:	31bfff84 	addi	r6,r6,-2
   1c780:	01ffffc4 	movi	r7,-1
   1c784:	00000406 	br	1c798 <memcmp+0x3c>
   1c788:	20c00003 	ldbu	r3,0(r4)
   1c78c:	28800003 	ldbu	r2,0(r5)
   1c790:	31bfffc4 	addi	r6,r6,-1
   1c794:	18800e1e 	bne	r3,r2,1c7d0 <memcmp+0x74>
   1c798:	21000044 	addi	r4,r4,1
   1c79c:	29400044 	addi	r5,r5,1
   1c7a0:	31fff91e 	bne	r6,r7,1c788 <memcmp+0x2c>
   1c7a4:	0005883a 	mov	r2,zero
   1c7a8:	f800283a 	ret
   1c7ac:	20c00017 	ldw	r3,0(r4)
   1c7b0:	28800017 	ldw	r2,0(r5)
   1c7b4:	1880041e 	bne	r3,r2,1c7c8 <memcmp+0x6c>
   1c7b8:	31bfff04 	addi	r6,r6,-4
   1c7bc:	21000104 	addi	r4,r4,4
   1c7c0:	29400104 	addi	r5,r5,4
   1c7c4:	39bff936 	bltu	r7,r6,1c7ac <memcmp+0x50>
   1c7c8:	303fe91e 	bne	r6,zero,1c770 <memcmp+0x14>
   1c7cc:	003ff506 	br	1c7a4 <memcmp+0x48>
   1c7d0:	1885c83a 	sub	r2,r3,r2
   1c7d4:	f800283a 	ret

0001c7d8 <__register_exitproc>:
   1c7d8:	defffa04 	addi	sp,sp,-24
   1c7dc:	008000f4 	movhi	r2,3
   1c7e0:	10a79d04 	addi	r2,r2,-24972
   1c7e4:	dc000315 	stw	r16,12(sp)
   1c7e8:	14000017 	ldw	r16,0(r2)
   1c7ec:	dc400415 	stw	r17,16(sp)
   1c7f0:	dfc00515 	stw	ra,20(sp)
   1c7f4:	80805217 	ldw	r2,328(r16)
   1c7f8:	2023883a 	mov	r17,r4
   1c7fc:	10003e26 	beq	r2,zero,1c8f8 <__register_exitproc+0x120>
   1c800:	10c00117 	ldw	r3,4(r2)
   1c804:	020007c4 	movi	r8,31
   1c808:	40c0180e 	bge	r8,r3,1c86c <__register_exitproc+0x94>
   1c80c:	00800034 	movhi	r2,0
   1c810:	10800004 	addi	r2,r2,0
   1c814:	1000061e 	bne	r2,zero,1c830 <__register_exitproc+0x58>
   1c818:	00bfffc4 	movi	r2,-1
   1c81c:	dfc00517 	ldw	ra,20(sp)
   1c820:	dc400417 	ldw	r17,16(sp)
   1c824:	dc000317 	ldw	r16,12(sp)
   1c828:	dec00604 	addi	sp,sp,24
   1c82c:	f800283a 	ret
   1c830:	01006404 	movi	r4,400
   1c834:	d9400015 	stw	r5,0(sp)
   1c838:	d9800115 	stw	r6,4(sp)
   1c83c:	d9c00215 	stw	r7,8(sp)
   1c840:	00000000 	call	0 <__alt_mem_instruction_memory_1-0x10000>
   1c844:	d9400017 	ldw	r5,0(sp)
   1c848:	d9800117 	ldw	r6,4(sp)
   1c84c:	d9c00217 	ldw	r7,8(sp)
   1c850:	103ff126 	beq	r2,zero,1c818 <__register_exitproc+0x40>
   1c854:	80c05217 	ldw	r3,328(r16)
   1c858:	10000115 	stw	zero,4(r2)
   1c85c:	10c00015 	stw	r3,0(r2)
   1c860:	80805215 	stw	r2,328(r16)
   1c864:	10006215 	stw	zero,392(r2)
   1c868:	10006315 	stw	zero,396(r2)
   1c86c:	10c00117 	ldw	r3,4(r2)
   1c870:	88000d1e 	bne	r17,zero,1c8a8 <__register_exitproc+0xd0>
   1c874:	19000084 	addi	r4,r3,2
   1c878:	2109883a 	add	r4,r4,r4
   1c87c:	18c00044 	addi	r3,r3,1
   1c880:	2109883a 	add	r4,r4,r4
   1c884:	1109883a 	add	r4,r2,r4
   1c888:	10c00115 	stw	r3,4(r2)
   1c88c:	0005883a 	mov	r2,zero
   1c890:	21400015 	stw	r5,0(r4)
   1c894:	dfc00517 	ldw	ra,20(sp)
   1c898:	dc400417 	ldw	r17,16(sp)
   1c89c:	dc000317 	ldw	r16,12(sp)
   1c8a0:	dec00604 	addi	sp,sp,24
   1c8a4:	f800283a 	ret
   1c8a8:	02400044 	movi	r9,1
   1c8ac:	12806217 	ldw	r10,392(r2)
   1c8b0:	48d2983a 	sll	r9,r9,r3
   1c8b4:	19000804 	addi	r4,r3,32
   1c8b8:	18d1883a 	add	r8,r3,r3
   1c8bc:	2109883a 	add	r4,r4,r4
   1c8c0:	4211883a 	add	r8,r8,r8
   1c8c4:	2109883a 	add	r4,r4,r4
   1c8c8:	1109883a 	add	r4,r2,r4
   1c8cc:	1211883a 	add	r8,r2,r8
   1c8d0:	5254b03a 	or	r10,r10,r9
   1c8d4:	21c02215 	stw	r7,136(r4)
   1c8d8:	41802215 	stw	r6,136(r8)
   1c8dc:	12806215 	stw	r10,392(r2)
   1c8e0:	01000084 	movi	r4,2
   1c8e4:	893fe31e 	bne	r17,r4,1c874 <__register_exitproc+0x9c>
   1c8e8:	11006317 	ldw	r4,396(r2)
   1c8ec:	2252b03a 	or	r9,r4,r9
   1c8f0:	12406315 	stw	r9,396(r2)
   1c8f4:	003fdf06 	br	1c874 <__register_exitproc+0x9c>
   1c8f8:	008000f4 	movhi	r2,3
   1c8fc:	10a80a04 	addi	r2,r2,-24536
   1c900:	80805215 	stw	r2,328(r16)
   1c904:	003fbe06 	br	1c800 <__register_exitproc+0x28>

0001c908 <__call_exitprocs>:
   1c908:	008000f4 	movhi	r2,3
   1c90c:	10a79d04 	addi	r2,r2,-24972
   1c910:	10800017 	ldw	r2,0(r2)
   1c914:	defff304 	addi	sp,sp,-52
   1c918:	df000b15 	stw	fp,44(sp)
   1c91c:	d8800015 	stw	r2,0(sp)
   1c920:	10805204 	addi	r2,r2,328
   1c924:	dd400815 	stw	r21,32(sp)
   1c928:	dfc00c15 	stw	ra,48(sp)
   1c92c:	ddc00a15 	stw	r23,40(sp)
   1c930:	dd800915 	stw	r22,36(sp)
   1c934:	dd000715 	stw	r20,28(sp)
   1c938:	dcc00615 	stw	r19,24(sp)
   1c93c:	dc800515 	stw	r18,20(sp)
   1c940:	dc400415 	stw	r17,16(sp)
   1c944:	dc000315 	stw	r16,12(sp)
   1c948:	d9000115 	stw	r4,4(sp)
   1c94c:	2839883a 	mov	fp,r5
   1c950:	d8800215 	stw	r2,8(sp)
   1c954:	057fffc4 	movi	r21,-1
   1c958:	d8800017 	ldw	r2,0(sp)
   1c95c:	ddc00217 	ldw	r23,8(sp)
   1c960:	14805217 	ldw	r18,328(r2)
   1c964:	90001726 	beq	r18,zero,1c9c4 <__call_exitprocs+0xbc>
   1c968:	94400117 	ldw	r17,4(r18)
   1c96c:	8c3fffc4 	addi	r16,r17,-1
   1c970:	80001116 	blt	r16,zero,1c9b8 <__call_exitprocs+0xb0>
   1c974:	8c400044 	addi	r17,r17,1
   1c978:	8427883a 	add	r19,r16,r16
   1c97c:	8c63883a 	add	r17,r17,r17
   1c980:	95802204 	addi	r22,r18,136
   1c984:	9ce7883a 	add	r19,r19,r19
   1c988:	8c63883a 	add	r17,r17,r17
   1c98c:	b4e7883a 	add	r19,r22,r19
   1c990:	9463883a 	add	r17,r18,r17
   1c994:	e0001726 	beq	fp,zero,1c9f4 <__call_exitprocs+0xec>
   1c998:	8c87c83a 	sub	r3,r17,r18
   1c99c:	b0c7883a 	add	r3,r22,r3
   1c9a0:	18c01e17 	ldw	r3,120(r3)
   1c9a4:	1f001326 	beq	r3,fp,1c9f4 <__call_exitprocs+0xec>
   1c9a8:	843fffc4 	addi	r16,r16,-1
   1c9ac:	9cffff04 	addi	r19,r19,-4
   1c9b0:	8c7fff04 	addi	r17,r17,-4
   1c9b4:	857ff71e 	bne	r16,r21,1c994 <__call_exitprocs+0x8c>
   1c9b8:	00800034 	movhi	r2,0
   1c9bc:	10800004 	addi	r2,r2,0
   1c9c0:	10002a1e 	bne	r2,zero,1ca6c <__call_exitprocs+0x164>
   1c9c4:	dfc00c17 	ldw	ra,48(sp)
   1c9c8:	df000b17 	ldw	fp,44(sp)
   1c9cc:	ddc00a17 	ldw	r23,40(sp)
   1c9d0:	dd800917 	ldw	r22,36(sp)
   1c9d4:	dd400817 	ldw	r21,32(sp)
   1c9d8:	dd000717 	ldw	r20,28(sp)
   1c9dc:	dcc00617 	ldw	r19,24(sp)
   1c9e0:	dc800517 	ldw	r18,20(sp)
   1c9e4:	dc400417 	ldw	r17,16(sp)
   1c9e8:	dc000317 	ldw	r16,12(sp)
   1c9ec:	dec00d04 	addi	sp,sp,52
   1c9f0:	f800283a 	ret
   1c9f4:	91000117 	ldw	r4,4(r18)
   1c9f8:	88c00017 	ldw	r3,0(r17)
   1c9fc:	213fffc4 	addi	r4,r4,-1
   1ca00:	24001526 	beq	r4,r16,1ca58 <__call_exitprocs+0x150>
   1ca04:	88000015 	stw	zero,0(r17)
   1ca08:	183fe726 	beq	r3,zero,1c9a8 <__call_exitprocs+0xa0>
   1ca0c:	00800044 	movi	r2,1
   1ca10:	1408983a 	sll	r4,r2,r16
   1ca14:	91406217 	ldw	r5,392(r18)
   1ca18:	95000117 	ldw	r20,4(r18)
   1ca1c:	214a703a 	and	r5,r4,r5
   1ca20:	28000b26 	beq	r5,zero,1ca50 <__call_exitprocs+0x148>
   1ca24:	91406317 	ldw	r5,396(r18)
   1ca28:	2148703a 	and	r4,r4,r5
   1ca2c:	20000c1e 	bne	r4,zero,1ca60 <__call_exitprocs+0x158>
   1ca30:	99400017 	ldw	r5,0(r19)
   1ca34:	d9000117 	ldw	r4,4(sp)
   1ca38:	183ee83a 	callr	r3
   1ca3c:	90c00117 	ldw	r3,4(r18)
   1ca40:	1d3fc51e 	bne	r3,r20,1c958 <__call_exitprocs+0x50>
   1ca44:	b8c00017 	ldw	r3,0(r23)
   1ca48:	1cbfd726 	beq	r3,r18,1c9a8 <__call_exitprocs+0xa0>
   1ca4c:	003fc206 	br	1c958 <__call_exitprocs+0x50>
   1ca50:	183ee83a 	callr	r3
   1ca54:	003ff906 	br	1ca3c <__call_exitprocs+0x134>
   1ca58:	94000115 	stw	r16,4(r18)
   1ca5c:	003fea06 	br	1ca08 <__call_exitprocs+0x100>
   1ca60:	99000017 	ldw	r4,0(r19)
   1ca64:	183ee83a 	callr	r3
   1ca68:	003ff406 	br	1ca3c <__call_exitprocs+0x134>
   1ca6c:	90c00117 	ldw	r3,4(r18)
   1ca70:	1800071e 	bne	r3,zero,1ca90 <__call_exitprocs+0x188>
   1ca74:	90c00017 	ldw	r3,0(r18)
   1ca78:	18000926 	beq	r3,zero,1caa0 <__call_exitprocs+0x198>
   1ca7c:	9009883a 	mov	r4,r18
   1ca80:	b8c00015 	stw	r3,0(r23)
   1ca84:	00000000 	call	0 <__alt_mem_instruction_memory_1-0x10000>
   1ca88:	bc800017 	ldw	r18,0(r23)
   1ca8c:	003fb506 	br	1c964 <__call_exitprocs+0x5c>
   1ca90:	90c00017 	ldw	r3,0(r18)
   1ca94:	902f883a 	mov	r23,r18
   1ca98:	1825883a 	mov	r18,r3
   1ca9c:	003fb106 	br	1c964 <__call_exitprocs+0x5c>
   1caa0:	0007883a 	mov	r3,zero
   1caa4:	003ffb06 	br	1ca94 <__call_exitprocs+0x18c>

0001caa8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1caa8:	defffc04 	addi	sp,sp,-16
   1caac:	df000315 	stw	fp,12(sp)
   1cab0:	df000304 	addi	fp,sp,12
   1cab4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1cab8:	0001883a 	nop
   1cabc:	e0bfff17 	ldw	r2,-4(fp)
   1cac0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   1cac4:	e0bffd17 	ldw	r2,-12(fp)
   1cac8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1cacc:	e0bffe17 	ldw	r2,-8(fp)
   1cad0:	10000226 	beq	r2,zero,1cadc <_exit+0x34>
    ALT_SIM_FAIL();
   1cad4:	002af070 	cmpltui	zero,zero,43969
   1cad8:	00000106 	br	1cae0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1cadc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1cae0:	003fff06 	br	1cae0 <_exit+0x38>
